//собрать все настройки в единую таблицу (заполнять из реквизитов), чтобы удобнее было редактировать, в последней колонке объяснение, что делает эта настройка, брать из подсказки реквизита

//для расчета себестоимости необходима дополнительная настройка: http://rus1c.ru/index/roznicza/raschet-sebestoimosti-tovara.html
//http://docs.abcp.ru/wiki/API#.D0.9F.D0.BE.D1.81.D1.82.D0.B0.D0.B2.D1.89.D0.B8.D0.BA.D0.B8
//http://json.parser.online.fr/
//http://2cyr.com/decode/?lang=ru
//http://jsonviewer.stack.hu/
//https://helpf.pro/faq/view/1298.html POST и GET
//https://www.hurl.it/ API Changelog Hurl.it — Make HTTP Requests 
//https://www.runscope.com/docs/editor  Request Editor
//https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo Advanced REST Client Google Chrome
//https://addons.mozilla.org/mk/firefox/addon/restclient/ Firefox
//chrome://restclient/content/restclient.html
//ПриЗаполненииСпискаТекущихДел
//СписокТекущихДелПользователя
//Перем СписокСтатусов;

Перем Настройки;
Перем ПредупреждающиеСообщения;
Перем ОбработкаОбъект;
Перем distributorId, userId, dateUpdated, managerId, multipleuserId, ДатаОбновленияСтатусаABCP;
//Перем deliveryOfficeId, deliveryOffice;
Перем ОсновнаяСтавкаНДС;
Перем РазмерСтавкиНДС;
Перем РазмерСтавкиНДС100;
Перем id22842;
Перем КлассификаторТНВЭД;
Перем ОрганизацияПлательщикЕНВД;
Перем ОрганизацияУСН;
Перем ПоступлениеУжеЕсть;

// Возвращает описание типов по переданному типу
// 
// Параметры:
//	Тип - Тип - тип значения
//
// Возвращаемое значение:
//	ОписаниеТипов - созданное на основании переданного типа описание типов
//
Функция ОписаниеТиповПоТипу(Тип) Экспорт
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
КонецФункции

Процедура ЗаписьВЛог(ТекстСообщения, УровеньСообщения = 0, Выводить = Ложь)
	Если УровеньСообщения < 0  Тогда
		Возврат;
	КонецЕсли;
	ЛогФайл = Объект.ЛогФайл;
	Если ЛогФайл = ""  Тогда
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Информация, , "Лог операций 1C-aBCP", ТекстСообщения);
		Возврат;
	КонецЕсли;
	Если Выводить И (Не Объект.СкрыватьСообщения) Тогда
		сообщить(ТекстСообщения);
	КонецЕсли;
	Попытка
		Файл = Новый ЗаписьТекста(ЛогФайл,КодировкаТекста.ANSI,,Истина);
		Файл.ЗаписатьСтроку(Формат(ТекущаяДата(),"ДЛФ=DT")+"	"+ТекстСообщения);
		Файл.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Информация, , "Лог операций 1C-aBCP", ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

Функция КодСостояния200(КодСостояния, Знач СтрокаОтвет, Знач ИмяФайла = "")
	Если КодСостояния <> 200 Тогда
		Если КодСостояния = 418 Тогда
			сообщить("Нет доступа через API, код ошибки = 418 ");
			Возврат Ложь;
		КонецЕсли;
		сообщить("Статус: " + КодСостояния);
		ОписаниеОшибки = СтруктураИзJSON(СтрокаОтвет, ИмяФайла);
		Попытка
			ТекстСообщения = "Ответ сервера: errorCode: " + ОписаниеОшибки.errorCode+", errorMessage: " + ОписаниеОшибки.errorMessage;
			ЗаписьВЛог(ТекстСообщения,,Истина);
			Если СокрЛП(ОписаниеОшибки.errorCode) = "103" Тогда
				ТекстСообщения = "Возможно, не оплачен период аренды сервиса";
				ЗаписьВЛог(ТекстСообщения,6,Истина);
			ИначеЕсли СокрЛП(ОписаниеОшибки.errorCode) = "301" Тогда
				ТекстСообщения = "Заказа с таким номером нет в ABCP, возможно, он был удалён или объединён с другим заказом";//"Order with such online number not found"
				ЗаписьВЛог(ТекстСообщения,,Истина);
			КонецЕсли;
		Исключение
			ТекстСообщения = "Ответ сервера: "+СтрокаОтвет;
			ЗаписьВЛог(ТекстСообщения,,Истина);
		КонецПопытки;
		
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция СтруктураИзJSON(СтрокаОтвет = "", ИмяФайла = "") Экспорт
	//Структура = Новый Структура;
	Если ИмяФайла<>"" Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);	
	Иначе
		Если СтрокаОтвет = "" Тогда
			Структура = Новый Структура;
			Возврат Структура;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	КонецЕсли;
	Попытка
		Структура = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ЧтениеJSON.Закрыть();
		ЗаписьВЛог(СтрокаОтвет);
		Структура = Новый Структура;
		Возврат Структура;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	Возврат Структура;
КонецФункции

// Возвращает таблицу значений на основании массива структур
// 
// Параметры:
//	МассивСтруктур - МассивСтруктур - массив структур, которые будут преобразованы в таблиц значений.
//										Свойства структуры первого элемента массива определяютс состав колонок результирующей таблицы
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений, созданная из массива структур
// 
Функция МассивВТаблицуЗначений(МассивСтруктур) Экспорт
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ, ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ИмяКомпьютера() = "emex" Тогда
		Объект.ИспользоватьИндивидуальныеНастройкиПользователей = Истина;
	Иначе
		Объект.ИспользоватьИндивидуальныеНастройкиПользователей = Ложь;
	КонецЕсли;
	//Объект.ИспользоватьИндивидуальныеНастройкиПользователей = Истина;
	//Параметры.Свойство("ДополнительнаяОбработкаСсылка", ОбъектСсылка);//для операций с прогрессом
	//Попытка
	//	ИдентификаторКоманды = Параметры.ИдентификаторКоманды;//для операций с прогрессом
	//Исключение
	//КонецПопытки;

	Интерактивно = Истина;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//ТекстВерсииОбработки = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Версия").ПолучитьТекст();
	Объект.УТ111 = Ложь;
	Объект.УТ112 = Ложь;
	Объект.УТ113 = Ложь;
	Объект.УТ114 = Ложь;
	Объект.УТКазахстан = Ложь;//3.4.4.65
	//!!! в самый первый раз при запуске определять, потом сохранять
	//сообщить(ВерсияУТ);
	//сообщить(Метаданные.Имя);
	//сообщить(Метаданные.Поставщик);
	Если Метаданные.Поставщик = "Фирма ""1С""/Первый БИТ" Тогда
		Объект.БитАвтосервис = Истина;
	Иначе
		Объект.БитАвтосервис = Ложь;
	КонецЕсли;
	//Фирма "1С"/Первый БИТ
	ВерсияУТ = Метаданные.Версия;
	Объект.ВерсияУТ = ВерсияУТ;
	Если Метаданные.Имя = "УправлениеТорговлей_CRM_2" Тогда //И Метаданные.Версия = "3.0.14.13" Тогда
		Подверсия = "4";
		Объект.Подверсия3 = 6;
		мБиблиотек= СтандартныеПодсистемыПовтИсп.ОписанияПодсистем().ПоИменам;
		Если мБиблиотек.Получить("УправлениеТорговлей") = Неопределено Тогда
			ВерсияУТИзБиблиотек = мБиблиотек["УправлениеТорговлейБазовая"].Версия;
		Иначе
			ВерсияУТИзБиблиотек = мБиблиотек["УправлениеТорговлей"].Версия;
		КонецЕсли;
		Если ВерсияУТИзБиблиотек = "11.1.10.116" Тогда
			Подверсия = Сред(ВерсияУТИзБиблиотек,4,1);
			Подверсия3 = Число(Сред(ВерсияУТИзБиблиотек,6,2));
		КонецЕсли;
	ИначеЕсли Метаданные.Имя = "КомплекснаяАвтоматизация" Тогда
		Объект.КА = Истина;
	Иначе
		ВерсияУТ = Метаданные.Версия;
		Подверсия = Сред(ВерсияУТ,4,1);
		Подверсия3 = Число(Сред(ВерсияУТ,6,1));
		Если Подверсия3 = 8 или Подверсия3 = 9 Тогда
			Подверсия3 = 7;
		КонецЕсли;
		Объект.Подверсия3 = Подверсия3;
	КонецЕсли;
	Объект.ВерсияУТ = ВерсияУТ;
	Если Подверсия = "1" Тогда
		Объект.УТ111 = Истина;
	ИначеЕсли Подверсия = "2" Тогда
		Объект.УТ112 = Истина;
	ИначеЕсли Подверсия = "3" Тогда
		Объект.УТ113 = Истина;
	ИначеЕсли Подверсия = "4" Тогда
		Объект.УТ114 = Истина;
	ИначеЕсли Подверсия = "5" Тогда
		Объект.УТ115 = Истина;
	Иначе
		Объект.УТ114 = Истина;
		//считаем, что запустили на 11.3
	КонецЕсли;
	Если Метаданные.Имя = "УправлениеТорговлейДляКазахстана" Тогда //в ней поступление товаров и услуг
		Объект.УТ113 = Истина;
		Объект.УТ114 = Ложь;
		Объект.УТКазахстан = Истина;
	КонецЕсли;

	ВерсияКонфигурации = Метаданные.Версия;
	СписокПодверсий = СтрРазделить(ВерсияКонфигурации, ".");
	КоличествоПодверсий = СписокПодверсий.Количество();
	Если КоличествоПодверсий > 0 Тогда
		Объект.Подверсия1 = СписокПодверсий.Получить(0);
	КонецЕсли;
	Если КоличествоПодверсий > 1 Тогда
		Объект.Подверсия2 = СписокПодверсий.Получить(1);
	КонецЕсли;
	Если КоличествоПодверсий > 2 Тогда
		Объект.Подверсия3 = СписокПодверсий.Получить(2);
	КонецЕсли;
	Если КоличествоПодверсий > 3 Тогда
		Объект.Подверсия4 = СписокПодверсий.Получить(3);
	КонецЕсли;
		
	Дополнение= "";
	Если Объект.УТ111 Тогда
		Дополнение = "1";
	ИначеЕсли Объект.УТ112 Тогда
		Дополнение = "2.3.284";
	ИначеЕсли Объект.УТ113 Тогда
		Дополнение = "3.3.4.59";
	ИначеЕсли Объект.УТ114 Тогда
		Дополнение = "4";
	ИначеЕсли Объект.УТ115 Тогда
		Дополнение = "5";
	ИначеЕсли Объект.КА Тогда
		Дополнение = "";
	КонецЕсли;	
	Если Метаданные.Имя = "УправлениеТорговлейДляКазахстана" Тогда //в ней поступление товаров и услуг
		ЭтаФорма.Заголовок = "УТ "+ВерсияКонфигурации+", "+ОбработкаОбъект.ПолучитьВерсиюОбработки(Истина);
	Иначе
		ЭтаФорма.Заголовок = "УТ 11."+Дополнение+", "+ОбработкаОбъект.ПолучитьВерсиюОбработки(Истина);
	КонецЕсли;
	ПредупреждающиеСообщения = ДобавитьДополнительныеРеквизитыОбъектов(Ложь);
	Если ЗначениеЗаполнено(ПредупреждающиеСообщения) Тогда
		//ПоказатьОповещениеПользователя(, , ПредупреждающиеСообщения);
		сообщить(ПредупреждающиеСообщения);
	КонецЕсли;
	
	КлючОбъекта = "ABCP_1C";
	КлючНастроек = "НастройкиДоступа";
    ИмяПользователя = ИмяПользователя();
	ПользовательДляВосстановления = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
	Если (ИмяПользователя = "" Или ПользовательДляВосстановления.Роли.Содержит(РольПолныеПрава)) И НЕ Объект.ИспользоватьИндивидуальныеНастройкиПользователей Тогда
		ИмяПользователя = "Администратор";//фоновое задание запускается под пользователем из настроек в справочнике дополнительных отчетов и обработок
	КонецЕсли;
	//сообщить("ИмяПользователя: "+ИмяПользователя);
	
	//Если НЕ Объект.УТ112 Тогда
	//	ИмяПользователя = "Администратор";//фоновое задание запускается без пользователя
	//КонецЕсли;
	//СписокСтатусов = Новый СписокЗначений;
    Попытка
        Настройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователя);
	Исключение
		//если еще ничего не записывали, то автоматически ставим галочки
		Объект.СинхронизироватьКонтрагентов = Истина;
		Объект.СинхронизироватьПоставщиков = Истина;
		Объект.СинхронизироватьНоменклатуру = Истина;
		Объект.СинхронизироватьМенеджеров = Истина;
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ПриСозданииНаСервере", "Не найдены настройки обмена с ABCP для текущего пользователи. Нажмите ""Сохранить настройки"" в окне формы");
		//если это первый запуск обработки, то прописываем ей в справочник дополнительных обработок
        Возврат;
	КонецПопытки;
	Если Настройки = Неопределено Тогда
		//если еще ничего не записывали, то автоматически ставим галочки
		Объект.СинхронизироватьКонтрагентов = Истина;
		Объект.СинхронизироватьПоставщиков = Истина;
		Объект.СинхронизироватьНоменклатуру = Истина;
		Объект.СинхронизироватьМенеджеров = Истина;
		Возврат;
	КонецЕсли;
	ВосстановитьНастройки();
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройку(ИмяНастройки)
	Если Настройки.Свойство(ИмяНастройки) Тогда Объект[ИмяНастройки] = Настройки[ИмяНастройки]; КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзСтроки(ПереченьНастроек)
	НазванияНастроек = СтрРазделить(ПереченьНастроек, ",");
	Для Каждого ИмяНастройки Из НазванияНастроек Цикл
		Попытка
			Если Настройки.Свойство(ИмяНастройки) Тогда Объект[ИмяНастройки] = Настройки[ИмяНастройки]; КонецЕсли;
		Исключение
			сообщить("Не удалось восстановить настройку: "+ИмяНастройки);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки(НастрокиСериализованные = Неопределено)
	Если НастрокиСериализованные <> Неопределено Тогда
		Настройки = ЗначениеИзСтрокиВнутр(НастрокиСериализованные);
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	ПереченьНастроек = ОбработкаОбъект.ПолучитьПереченьНастроек();
	Попытка
		ЗаполнитьЗначенияСвойств(Объект, Настройки, ПереченьНастроек);
	Исключение
		ВосстановитьНастройкиИзСтроки(ПереченьНастроек);
	КонецПопытки;
	
	ПереченьНастроек = ОбработкаОбъект.ПолучитьПереченьНастроекТаблицЗначений();
	НазванияНастроек = СтрРазделить(ПереченьНастроек,",");
	Для Каждого ИмяНастройки Из НазванияНастроек Цикл
		Если Настройки.Свойство(ИмяНастройки) Тогда 
			Объект[ИмяНастройки].Загрузить(Настройки[ИмяНастройки]);
		КонецЕсли;
	КонецЦикла;
	РаскраситьСтроки();
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		//Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		//ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
		//из ней вызывается ПорядокРасчетовПоУмолчанию
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПорядокРасчетовЗаказПоставщику) Тогда
		Объект.ПорядокРасчетовЗаказПоставщику = Перечисления.ПорядокРасчетов.ПоНакладным;
		//ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
		//из ней вызывается ПорядокРасчетовПоУмолчанию
	КонецЕсли;
	
	ГлубинаПросмотраЗаявок = Число(Объект.ГлубинаПросмотраЗаявок);
	
	ОсновнаяСтавкаНДС = Объект.ОсновнаяСтавкаНДС;
	Если НЕ Объект.УТКазахстан Тогда
		Если ТекущаяДата()>=Дата(2019,1,1) И ОсновнаяСтавкаНДС = ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
			Объект.ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НДСВДоговореКлиента) Тогда
		Объект.НДСВДоговореКлиента = ОсновнаяСтавкаНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		//Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
	КонецЕсли;

	Если Объект.РасширеннаяПривязкаОплат Тогда
		Элементы.paymentOrderLinks.Видимость = Истина;		
	КонецЕсли;
	Если Объект.АвтоматическоеИзменениеСтатусовНаСайтеПриПоступленииИРеализации Тогда
		Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		Элементы.ИзменитьСостоянияВЗаказах.Видимость = Ложь;
		Элементы.ИзменитьСтатусыПослеПоступления.Видимость = Ложь;
	КонецЕсли;
	Если Объект.ЯзыкИнтерфейса<>"" И Объект.ЯзыкИнтерфейса<>"ru" Тогда
		ПеревестиИнтерфейсНаСервере(,Объект.ЯзыкИнтерфейса);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьОбщийРеквизитНаСервере(НаименованиеРеквизита)
	Если НЕ Константы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Получить() Тогда
		Константы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Установить(Истина);
	КонецЕсли;
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока50 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(50));
	НаименованиеХарактеристики = НаименованиеРеквизита;//НаименованиеХарактеристики;
	НаименованиеОбщегоРеквизитаНоменклатуры = "Справочник ""Номенклатура"" (Общие)";
	НаборДополнительныхРеквизитовИСведений = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию(НаименованиеОбщегоРеквизитаНоменклатуры);
	Если ЗначениеЗаполнено(НаборДополнительныхРеквизитовИСведений) Тогда
		//сообщить("Уже создан общий Набор дополнительных реквизитов и сведений");
		//Возврат;
	Иначе
		НаборДополнительныхРеквизитовИСведений = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
		НаборДополнительныхРеквизитовИСведений.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура;
		НаборДополнительныхРеквизитовИСведений.Наименование = НаименованиеОбщегоРеквизитаНоменклатуры;
		НаборДополнительныхРеквизитовИСведений.Используется = Истина;
		НаборДополнительныхРеквизитовИСведений.Записать();
		НаборДополнительныхРеквизитовИСведений = НаборДополнительныхРеквизитовИСведений.Ссылка;
	КонецЕсли;
	НаименованиеПВХ = НаименованиеХарактеристики+" (Справочник ""Номенклатура"" (Общие))";
	//может повторяться, если не будет отбора по НаборСвойств = НаборДополнительныхРеквизитовИСведений
	ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НаименованиеПВХ);
	Если ЗначениеЗаполнено(ПВХ) Тогда
		//сообщить("Уже создан план видов характеристик");
		Характеристика = ПВХ.Ссылка;
	Иначе
		ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		//ПВХ.ТипЗначения = Дополнительное значение
		ПВХ.Наименование = НаименованиеПВХ;
		ПВХ.Заголовок = НаименованиеХарактеристики;
		ПВХ.НаборСвойств = НаборДополнительныхРеквизитовИСведений.Ссылка;
		ПВХ.ТипЗначения = ТипИдентификатораСтрока50;
		//ПВХ.ЭтоДополнительноеСведение = Истина;
		ПВХ.Записать();
		Характеристика = ПВХ.Ссылка;
	КонецЕсли;
	Структура = Новый Структура();
	Структура.Вставить("Свойство", ПВХ.Ссылка);
	НайденныеСтроки = НаборДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() > 0 Тогда
		//сообщить("В доп.свойствах уже есть ПВХ: "+ПВХ.Ссылка);
		НаборДополнительныхРеквизитовИСведений = НаборДополнительныхРеквизитовИСведений.Ссылка;
	Иначе
		Об = НаборДополнительныхРеквизитовИСведений.ПолучитьОбъект();
		НовСтрока = Об.ДополнительныеРеквизиты.Добавить();
		НовСтрока.Свойство = ПВХ.Ссылка;
		Об.КоличествоРеквизитов = Об.ДополнительныеРеквизиты.Количество();
		Об.Записать();
		НаборДополнительныхРеквизитовИСведений = Об.Ссылка;
	КонецЕсли;
	
	//НаименованиеРеквизита = ЗначениеРеквизита;
	//Если НаименованиеРеквизита = "" Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(НаименованиеРеквизита,Истина,,ПВХ.Ссылка);
	//Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
	//	//сообщить("Уже есть значение характеристики");
	//	ЗначениеСвойствОбъектов = ЗначениеРеквизита.Ссылка;
	//	//Возврат;
	//Иначе
	//	ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	//	ЗначениеРеквизита.Владелец = ПВХ.Ссылка;
	//	ЗначениеРеквизита.Наименование = НаименованиеРеквизита;
	//	ЗначениеРеквизита.Записать();
	//	ЗначениеСвойствОбъектов = ЗначениеРеквизита.Ссылка;
	//КонецЕсли;
	Возврат НаборДополнительныхРеквизитовИСведений;
КонецФункции

&НаСервере
Функция ПроверитьФункциональныеОпции(ИмяФункциональнойОпции)
	Возврат ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции);
	//ИспользоватьОрдернуюСхемуПриОтгрузке - проверять при синхронизации, чтобы если установлена, то, кроме реализации, искал и расходный ордер
КонецФункции

Функция ПроверитьПараметр(Наименование, ЭтоЧисло = Ложь)
	Если Не ЗначениеЗаполнено(Объект[Наименование]) Тогда
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ПроверитьПараметр", "Не заполнен параметр: "+Наименование);
		сообщить("Не заполнен параметр: "+Наименование);
		Возврат Ложь;
	Иначе
		Если ЭтоЧисло Тогда //нужны для проверки статусов
			Попытка
				Н = Число(Объект[Наименование]);
				Если Н = 0 Тогда
					Возврат Ложь;
				Иначе
					Возврат Истина;
				КонецЕсли;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция НайтиЦену(Наименование)
	Возврат Справочники.ВидыЦен.НайтиПоНаименованию(Наименование);
КонецФункции

&НаСервере
Процедура ЗаполнитьИзБуфераСервер(ДанныеБуфера)
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ДанныеБуфера);
	Если Текст.КоличествоСтрок()<>3 Тогда
		сообщить("Должно быть 3 строки");
		Возврат;
	КонецЕсли;
	Хост = СокрЛП(Текст.ПолучитьСтроку(1));
	Если Лев(Хост, 6) = "Хост: " Тогда
		Хост = СокрЛП(Сред(Хост, 7));
	КонецЕсли;	
	Логин = СокрЛП(Текст.ПолучитьСтроку(2));
	Если Лев(Логин, 7) = "Логин: " Тогда
		Логин = СокрЛП(Сред(Логин, 8));
	КонецЕсли;	
	MD5пароль = СокрЛП(Текст.ПолучитьСтроку(3));
	Если Лев(MD5пароль, 12) = "MD5-пароль: " Тогда
		MD5пароль = СокрЛП(Сред(MD5пароль, 13));
	КонецЕсли;
	Если СтрДлина(MD5пароль)<>32 Тогда
		сообщить("Некорректная длина пароля:"+MD5пароль);
		Возврат;
	КонецЕсли;
	Объект.АдресСервиса = Хост;
	Объект.Пользователь = Логин;
	Объект.Пароль = MD5пароль;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИзБуфераОбмена(Команда)
	Попытка
		Буфер = Новый COMОбъект("htmlfile");
	    ДанныеБуфера = Буфер.ParentWindow.ClipboardData.Getdata("Text");
		Если СтрДлина(ДанныеБуфера) < 40 Тогда
			сообщить("В буфере обмена ничего нет или слишком мало данных, или в настройках зоны Internet Explorer надо разрешить программный доступ к буферу обмена");
			сообщить(ДанныеБуфера);
		Иначе
			Объект.АдресСервиса = "";
			Объект.Пользователь = "";
			Объект.Пароль = "";
			ЗаполнитьИзБуфераСервер(ДанныеБуфера);
			Если Объект.АдресСервиса = "" Или Объект.Пользователь = "" Или Объект.Пароль = "" Тогда
				//ничего не перезаполняем
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Исключение
		сообщить(ОписаниеОшибки());
	КонецПопытки;
	//Если Не ЗначениеЗаполнено(Объект.АдресСервиса) Тогда
	//	Объект.АдресСервиса = ".public.api.abcp.ru";
	//КонецЕсли;
	//Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
	//	Объект.Пользователь = "api@";
	//КонецЕсли;
	//Если Не ЗначениеЗаполнено(Объект.Пароль) Тогда
	//	Объект.Пароль = "";
	//КонецЕсли;
	Если Объект.ИдентификаторПоставщика = "" Тогда
		Объект.ИдентификаторПоставщика = "1";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Объект.ВидЦены = НайтиЦену("Закупочная");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ГлубинаПросмотраЗаявок) Тогда
		Объект.ГлубинаПросмотраЗаявок = 0;
	КонецЕсли;
	КаталогИБ = НСтр(СтрокаСоединенияИнформационнойБазы(),"File");
	Если КаталогИБ <> "" Тогда
		Если Не ЗначениеЗаполнено(Объект.ИмяФайлаExcel) Тогда
			Объект.ИмяФайлаExcel = КаталогИБ + "\price.xls";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ЛогФайл) Тогда
			Объект.ЛогФайл = КаталогИБ + "\log.txt";
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = ПолучитьВалюту();
	КонецЕсли;
	ДобавитьДополнительныеРеквизитыОбъектов();
	ЗаполнитьРеквизитыПоУмолчанию();
	Если Объект.АдресСервиса <> "" Тогда
		ЗаполнитьСтатусыНаСервере(Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоУмолчанию()
	Объект.СинхронизироватьКонтрагентов = Истина;
	Объект.СинхронизироватьМенеджеров = Истина;
	Объект.СинхронизироватьНоменклатуру = Истина;
	Объект.СинхронизироватьПоставщиков = Истина;
	//Объект.СинхронизироватьТолькоПоАртикулу = Истина;
	Объект.ЗагружатьОчищенныеАртикулы = Истина;
	Объект.НумерацияЗаказовКакВABCP = Истина;
	Объект.НеСоздаватьЛишниеЗаказыПоставщикам = Истина;
	Объект.НеСоздаватьВозвратыПокупателей = Истина;
	Объект.НеСоздаватьВозвратыПоставщикам = Истина;
	Объект.НеСоздаватьПапкиНоменклатуры = Истина;
	Объект.НеУчитыватьЗакрытыеЗаказыПокупателя = Истина;
	Объект.НеУчитыватьЗакрытыеЗаказыПоставщикам = Истина;
	Объект.ЦенаВключаетНДСПриПокупке = Истина;
	Объект.ЦенаВключаетНДСПриПродаже = Истина;
	Объект.НумерацияЗаказовКакВABCP = Истина;
	Объект.ЗагружатьОчищенныеАртикулы = Истина;
	Объект.ФинансовыйМодульВключен = Истина;
	Объект.ФильтрПоЗаявке = "";
	//Объект.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.НайтиПоНаименованию("Товары");
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Выборка = Справочники.Организации.Выбрать();
			Если Выборка.Следующий() Тогда
				Объект.Организация = Выборка.Ссылка;
			КонецЕсли;			
		КонецЕсли;
		Объект.ОрганизацияРозница = Объект.Организация;
	КонецЕсли;
	Попытка
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Справочники.Склады.СкладПоУмолчанию();
			Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
				Выборка = Справочники.Склады.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если НЕ Выборка.Ссылка.ЭтоГруппа Тогда
						Объект.Склад = Выборка.Ссылка;
						Прервать;
					КонецЕсли;
				КонецЦикла;			
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	//Объект.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	Попытка
		Если Не ЗначениеЗаполнено(Объект.Касса) Тогда
			Объект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Объект.Организация);
		КонецЕсли;
	Исключение
	КонецПопытки;
	Если Не ЗначениеЗаполнено(Объект.Касса) Тогда
		Выборка = Справочники.Кассы.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка.Владелец = Объект.Организация Тогда
				Объект.Касса = Выборка.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
	Попытка
		Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
			Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
			Иначе
				Объект.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(Объект.Организация);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		Выборка = Справочники.ЭквайринговыеТерминалы.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка.Владелец = Объект.Организация Тогда
				Объект.ЭквайринговыйТерминал = Выборка.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НалогообложениеНДСПоступление) ИЛИ Не ЗначениеЗаполнено(Объект.НалогообложениеНДСРеализация) Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ЗаполнитьДанныеУчетнойПолитики();
		Если ОбработкаОбъект.ОрганизацияПлательщикЕНВД Тогда
			Объект.НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
			Объект.НалогообложениеНДСРеализация = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
		ИначеЕсли ОбработкаОбъект.ОрганизацияУСН Тогда
			Объект.НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			Объект.НалогообложениеНДСРеализация = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НалогообложениеНДСПоступление) Тогда
		Объект.НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НалогообложениеНДСРеализация) Тогда
		Объект.НалогообложениеНДСРеализация = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПорядокРасчетовЗаказПоставщику) Тогда
		Объект.ПорядокРасчетовЗаказПоставщику = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ОсновнаяСтавкаНДС) Тогда
		Объект.ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НДСВДоговореКлиента) Тогда
		Объект.НДСВДоговореКлиента = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВалюту()
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();//
	//Возврат ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
КонецФункции

&НаСервере
Процедура СохранитьНастройкиИзСтроки(ПереченьНастроек)
	НазванияНастроек = СтрРазделить(ПереченьНастроек, ",");
	Для Каждого ИмяНастройки Из НазванияНастроек Цикл
		Настройки.Вставить(ИмяНастройки, Объект[ИмяНастройки]);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДляРегламентногоЗаданияНаСервере(ИмяПользователя = Неопределено)
	//Сохраняем настройки
	КлючОбъекта  = "ABCP_1C";
    КлючНастроек = "НастройкиДоступа";
	Настройки    = Новый Структура();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ПереченьНастроек = ОбработкаОбъект.ПолучитьПереченьНастроек();
	СохранитьНастройкиИзСтроки(ПереченьНастроек);
	
	ПереченьНастроек = ОбработкаОбъект.ПолучитьПереченьНастроекТаблицЗначений();
	НазванияНастроек = СтрРазделить(ПереченьНастроек,",");
	Для Каждого ИмяНастройки Из НазванияНастроек Цикл
		Настройки.Вставить(ИмяНастройки, Объект[ИмяНастройки].Выгрузить());
	КонецЦикла;
	КаталогИБ = НСтр(СтрокаСоединенияИнформационнойБазы(),"File");

	Для Каждого ТекСтрока Из Объект.ТаблицаСтатусов Цикл
		ТекСтрока.Порядок = ТекСтрока.НомерСтроки;
	КонецЦикла;
	
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	ПользовательДляСохранения = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, Настройки, , ИмяПользователя);
	Если ПользовательДляСохранения = Неопределено Тогда
		//это наш польователь "Администратор", но его нет в этой базе
	Иначе
		РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
		Если ПользовательДляСохранения.Роли.Содержит(РольПолныеПрава) И НЕ Объект.ИспользоватьИндивидуальныеНастройкиПользователей Тогда
			ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, Настройки, , "Администратор");
			//ИмяПользователя = "Администратор";//фоновое задание запускается под пользователем из настроек в справочнике дополнительных отчетов и обработок
		КонецЕсли;
	КонецЕсли;
	Если Настройки.АдресСервиса = "" Тогда
		Настройки = Неопределено;
	КонецЕсли;
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, Настройки, , ИмяПользователя);
	//сообщить("Для пользователя """+ИмяПользователя+""" сохранены настройки обработки в хранилище общих настроек");
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиДляРегламентногоЗадания(Команда)
	ИмяПользователя = ИмяПользователя();
	Если ИмяПользователя = "" Тогда
		ИмяПользователя = "Администратор";
	КонецЕсли;
	СохранитьНастройкиДляРегламентногоЗаданияНаСервере(ИмяПользователя);
	//сообщить("Для пользователя """+ИмяПользователя+""" сохранены настройки обработки в хранилище общих настроек");
	ПоказатьОповещениеПользователя(,,"Для пользователя «"+ИмяПользователя+"» сохранены настройки обработки в хранилище общих настроек");
КонецПроцедуры

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка");
КонецПроцедуры

&НаСервере
Функция ПолучитьПереченьПоставщиков()
	СписокПоставщиков = Новый СписокЗначений;
	//Если НЕ ОбработкаОбъект.ПараметрыЗаполнены(Истина) Тогда
	//	сообщить("Не все параметры заполнены");
	//	Возврат СписокПоставщиков;
	//КонецЕсли;
	АдресСервиса = Объект.АдресСервиса;
	Пользователь = Объект.Пользователь;
	Пароль = Объект.Пароль;
	ТекстЗапроса = "/cp/distributors?userlogin="+Пользователь+"&userpsw="+Пароль;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	//ЭтотОбъект.UnicodeEncode(СтрокаОтветUTF8);
	//только на сервере РеквизитФормыВЗначение("Объект").UnicodeEncode(СтрокаОтвет);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат СписокПоставщиков;
	Иначе
		//СписокЭлементов = СтруктураИзJSON();
		//Сообщить(СтрокаОтвет);
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		//100821
		Для Каждого Элемент Из СписокЭлементов Цикл
			Если Элемент.isEnabled = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если Найти(Элемент.description, "Необходимо связаться с менеджером для предоставления прав  для работы с веб сервисом.") > 0 Тогда
				Продолжить;
			КонецЕсли;
			СписокПоставщиков.Добавить(Элемент.id, Элемент.name+" ("+Элемент.id+")");
			//сообщить("id поставщика: " + Элемент.id);
			//сообщить("Имя поставщика: " + Элемент.name);
			//сообщить("Публичное (измененное) имя поставщика: " + Элемент.publicName);
			//сообщить("Валюта поставщика: " + Элемент.currencyDesignation);
			//сообщить("Статус поставщика: " + Элемент.isEnabled);
			////сообщить("Последнее обновление (у онлайн поставщиков не выводится): " + Элемент.updateTime);
			////сообщить("Позиций в наличии: " + Элемент.positionsNumber);
			//сообщить("Норма обновления в днях для поставщика: " + Элемент.updateRateInDays);
			//сообщить("email поставщика: " + Элемент.email);
			//сообщить("Имя: " + Элемент.firstName);
			//сообщить("Фамилия: " + Элемент.lastName);
			//сообщить("Город: " + Элемент.city);
			//сообщить("Телефон: " + Элемент.phone);
			//сообщить("Мобильный: " + Элемент.mobile);
			//сообщить("Правовая форма организации.: " + Элемент.organizationForm);
			//сообщить("Наименование по регистрации (без правовой формы юр. лица): " + Элемент.organizationOfficialName);
			//сообщить("ИНН: " + Элемент.inn);
			//сообщить("КПП: " + Элемент.kpp);
			//сообщить("Юридический адрес организации: " + Элемент.organizationOfficialAddress);
			//сообщить("Наименование банка: " + Элемент.bankName);
			//сообщить("БИК банка: " + Элемент.bik);
			//сообщить("Корреспондентский счет банка: " + Элемент.correspondentAccount);
			//сообщить("Расчетный счет организации: " + Элемент.organizationAccount);
			//сообщить("Описание: " + Элемент.Описание);
		КонецЦикла;
	КонецЕсли;
	Возврат СписокПоставщиков;
КонецФункции

&НаСервере
Функция ПолучитьСписокСтатусов(ИзТаблицыЗначений = Ложь, АдресСервиса = "", Пользователь = "")
	СписокСтатусов = Новый СписокЗначений;
	Если АдресСервиса = "" Тогда
		Если ИзТаблицыЗначений Тогда
			Для Каждого ТекСтрока Из Объект.ТаблицаСтатусов Цикл
				СписокСтатусов.Добавить(ТекСтрока.КодСтатуса, ТекСтрока.НаименованиеСтатуса+" ("+ТекСтрока.КодСтатуса+")");
			КонецЦикла;
			Возврат СписокСтатусов;
		КонецЕсли;
	Иначе
		Структура = Новый Структура("АдресСервиса, Пользователь");
		Структура.АдресСервиса = АдресСервиса;
		Структура.Пользователь = Пользователь;
		НайденныеСтроки = Объект.ТаблицаСтатусов.НайтиСтроки(Структура);
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			СписокСтатусов.Добавить(ТекСтрока.КодСтатуса, ТекСтрока.НаименованиеСтатуса+" ("+ТекСтрока.КодСтатуса+")");
		КонецЦикла;
		Возврат СписокСтатусов;
	КонецЕсли;
	Если НЕ ОбработкаОбъект.ПараметрыЗаполнены(,Истина) Тогда
		сообщить("Не все параметры заполнены");
		Возврат СписокСтатусов;
	КонецЕсли;
	АдресСервиса = Объект.АдресСервиса;
	Пользователь = Объект.Пользователь;
	Пароль = Объект.Пароль;
	ТекстЗапроса = "/cp/statuses?userlogin="+Пользователь+"&userpsw="+Пароль;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат СписокСтатусов;
	Иначе
		//Сообщить(СтрокаОтвет);
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Для Каждого Элемент Из СписокЭлементов Цикл
			Ид = Формат(Элемент.id, "ЧГ=0");
			СписокСтатусов.Добавить(Ид, Элемент.name+" ("+Ид+")");
		КонецЦикла;
	КонецЕсли;
	Возврат СписокСтатусов;
КонецФункции

&НаКлиенте
Процедура ПослеВыбораПоставщика(Элемент, Параметры) Экспорт
    Если Элемент <> Неопределено Тогда
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПоставщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СписокПоставщиков = ПолучитьПереченьПоставщиков();
	//в 8.3 работает, но ругается Элемент = СписокПоставщиков.ВыбратьЭлемент();
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораПоставщика", ЭтотОбъект);
	СписокПоставщиков.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите поставщика для выгрузки");	
КонецПроцедуры

&НаСервере
Функция ПроверитьНастройкиФункциональныхОпций_РМА()
	Если НЕ ПроверитьФункциональныеОпции("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ТекстСообщения = "Не включена функциональная опция «Дополнительные реквизиты и сведения» в пункте «Администрирование» - «Общие настройки»";
		//сообщить(ТекстСообщения);
		ЭтаФорма.ТолькоПросмотр = Истина;
		Возврат ТекстСообщения;
	КонецЕсли;
	Если НЕ ПроверитьФункциональныеОпции("ИспользоватьЗаказыПокупателей") Тогда
		ТекстСообщения = "Не включена функциональная опция «Использовать заказы покупателей» в пункте «Администрирование» - «Продажи» - «Заказы покупателей»";
		//сообщить(ТекстСообщения);
		ЭтаФорма.ТолькоПросмотр = Истина;
		Возврат ТекстСообщения;
	КонецЕсли;
	ТекстСообщения = "";
	Возврат ТекстСообщения;
КонецФункции

&НаСервере
Функция ПроверитьНастройкиФункциональныхОпций(ИзменятьНаРабочие = Ложь)
	//желательно отключить Соглашения с клиентами НСИ и администрирование - Настройка НСИ и разделов - Продажи - Оптовые продажи - Не использовать соглашения с клиентами
	//переделать в функцию и выводить
	//ИспользоватьПоступлениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	//ГрафикСоглашенияЗаполнен = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
	//ГрафикЗаполнен = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты") - выключен
	//CRM и Продажи - Условия и порядок оплаты - Шаблоны графиков оплаты сейчас там ничего нет
	//http://its.1c.ru/db/utovio
	//http://v8.1c.ru/ka2/purchasing/conditions-purchase.htm
	//какая-то константа ИспользованиеЭтаповОплатыВПродажах использование этапов оплаты в продажах
	//ИспользованиеЭтаповОплатыВЗакупках и такой же в закупках
	//ИспользоватьСтатусы               = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	//ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках");
	//ИспользоватьПоступлениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	//https://its.1c.ru/db/utovio
	Если Найти(Метаданные.Имя, "Базовая") = 0 Тогда
		БазоваяКонфигурация = Ложь;
	Иначе
		БазоваяКонфигурация = Истина;
	КонецЕсли;
	ТекстСообщения = "";
	Если ИзменятьНаРабочие Тогда
		Если ПроверитьФункциональныеОпции("ИспользоватьГрафикиОплаты") Тогда
			ТекстСообщения2 = "Включена функциональная опция «Использовать графики оплаты» в пункте «CRM и Продажи» - «Условия и порядок оплаты» - «Шаблоны графиков оплаты»";
			Константы.ИспользоватьГрафикиОплаты.Установить(Ложь);
			ТекстСообщения = ТекстСообщения + ТекстСообщения2;
		КонецЕсли;
		Если ПроверитьФункциональныеОпции("ИспользоватьСоглашенияСКлиентами") Тогда
			ТекстСообщения2 = "Включена функциональная опция «Использовать соглашения с клиентами» в пункте «НСИ и администрирование» - «Настройки разделов» - «Продажи» - «Оптовая продажа»";
			Константы.ИспользоватьСоглашенияСКлиентами.Установить(Ложь);
			ТекстСообщения = ТекстСообщения + ТекстСообщения2;
		КонецЕсли;
		Если ПроверитьФункциональныеОпции("ИспользоватьСоглашенияСПоставщиками") Тогда
			ТекстСообщения2 = "Включена функциональная опция ««Соглашения и договоры с поставщиками» в пункте «НСИ и администрирование» - «Настройки разделов» - «Закупки» - «Соглашения и договоры с поставщиками»";
			Константы.ИспользоватьСоглашенияСПоставщиками.Установить(Ложь);
			ТекстСообщения = ТекстСообщения + ТекстСообщения2;
		КонецЕсли;
		//Если ПроверитьФункциональныеОпции("ПричиныОтменыЗаказовПоставщикам") Тогда
		//	ТекстСообщения2 = "Включена функциональная опция ««Соглашения и договоры с поставщиками» в пункте «НСИ и администрирование» - «Настройки разделов» - «Закупки» - «Соглашения и договоры с поставщиками»";
		//	Константы.ИспользоватьСоглашенияСПоставщиками.Установить(Ложь);
		//	ТекстСообщения = ТекстСообщения + ТекстСообщения2;
		//КонецЕсли;
	КонецЕсли;
	Если НЕ ПроверитьФункциональныеОпции("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		ТекстСообщения2 = "НЕ Включена функциональная опция «Использовать дополнительные отчеты и обработки»";// в пункте «Настройка НСИ и разделов» - «Номенклатура» - «Настройки создания»
		//сообщить(ТекстСообщения);
		ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщения2;
		Если ИзменятьНаРабочие Тогда
			Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПроверитьФункциональныеОпции("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		//ТекстСообщения = "Не включена функциональная опция «Дополнительные реквизиты и сведения» в пункте «НСИ и Администрирование» - «Общие настройки»";
		ТекстСообщения2 = "Не включена функциональная опция «Дополнительные реквизиты и сведения» в пункте «Администрирование» - «Общие настройки»";
		//сообщить(ТекстСообщения);
		ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщения2;
		Если ИзменятьНаРабочие Тогда
			Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
		Иначе
			ЭтаФорма.ТолькоПросмотр = Истина;
			Возврат ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	//Если Константы.КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик.Получить() Тогда
	////КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик
	////Если ПроверитьФункциональныеОпции("КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик") Тогда
	//	//ТекстСообщения = "Включена функциональная опция «Контроль уникальности рабочего наименования номенклатуры» в пункте «НСИ и Администрирование» - «Номенклатура» - «Настройки создания»
	//	ТекстСообщения2 = "Включена функциональная опция «Контроль уникальности рабочего наименования номенклатуры» в пункте «Настройка НСИ и разделов» - «Номенклатура» - «Настройки создания»
	//	|Желательно выключить, так как у автозапчастей может быть одинаковое название, но разные бренды";
	//	//сообщить(ТекстСообщения);
	//	ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстСообщения2;
	//	Если ИзменятьНаРабочие Тогда
	//		Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	//	Иначе
	//		ЭтаФорма.ТолькоПросмотр = Истина;
	//		Возврат ТекстСообщения;
	//	КонецЕсли;
	//КонецЕсли;
	//Если ПроверитьФункциональныеОпции("КонтролироватьУникальностьНоменклатурыИХарактеристикПоСочетаниюЗначенийРеквизитов") Тогда
	//	сообщить("Включена функциональная опция «Контролировать уникальность номенклатуры и характеристик по сочетанию значений реквизитов» в пункте «НСИ и Администрирование» - «Номенклатура»");
	//	сообщить("Необходимо выключить, так как у автозапчастей может быть одинаковое название, но разные бренды");
	//	ЭтаФорма.ТолькоПросмотр = Истина;
	//	Возврат;
	//КонецЕсли;
	Если НЕ ПроверитьФункциональныеОпции("ИспользоватьЗаказыКлиентов") Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС+"«Заказы клиентов»: «Настройка НСИ и разделов» - «Продажи» - «Оптовые продажи»";
		Если ИзменятьНаРабочие Тогда
			Константы.ИспользоватьЗаказыКлиентов.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	Если НЕ БазоваяКонфигурация Тогда
		Если Лев(Объект.АдресСервиса, 5) <> "mrcar" Тогда
			Если НЕ ПроверитьФункциональныеОпции("ИспользоватьПоступлениеПоНесколькимЗаказам") Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС+"«Поступление по нескольким заказам»: «Настройка НСИ и разделов» - «Закупки» - «Заказы поставщикам»";
			КонецЕсли;
		КонецЕсли;
		//!!! или отключать, чтобы не косячили? или использовать, но тогда реализация должна обновлять дату изменения заявки
		Если НЕ ПроверитьФункциональныеОпции("ИспользоватьРеализациюПоНесколькимЗаказам") Тогда
			//ТекстСообщения = ТекстСообщения + Символы.ПС+"«Использовать реализацию по нескольким заказам»: «Настройка НСИ и разделов» - «Продажи» - «Оптовые продажи»";
			ТекстСообщения = ТекстСообщения + Символы.ПС+"«Реализация по нескольким заказам»: «Настройка НСИ и разделов» - «Продажи» - «Оптовые продажи»";
			Если ИзменятьНаРабочие Тогда
				Константы.ИспользоватьРеализациюПоНесколькимЗаказам.Установить(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПроверитьФункциональныеОпции("ИспользоватьЗаказыПоставщикам") Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС+"«Использовать заказы поставщикам»: «Настройка НСИ и разделов» - «Закупки» - «Заказы поставщикам»";
		Если ИзменятьНаРабочие Тогда
			Константы.ИспользоватьЗаказыПоставщикам.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	//Если НЕ ПроверитьФункциональныеОпции("пока не выяснено") Тогда
	//	ТекстСообщения = ТекстСообщения + Символы.ПС+"«Заказ со склада и под заказ»: «НСИ и Администрирование» - «Продажи» - «Использование заказов»";
	//КонецЕсли;
	//ИспользоватьЗапретОтгрузки
	Возврат ТекстСообщения;
КонецФункции

&НаСервере
Функция ДобавитьДополнительныеРеквизитыОбъектов(Предупреждать = Истина)
	
	ТекстСообщения = ПроверитьНастройкиФункциональныхОпций();
	//в "Администрирование" - "Общие настройки" - "Дополнительные реквизиты" должна быть включена галочка
	//у контрагента добавлены дополнительные сведения типа "Строка": userlogin, userpsw, типа "Число" userId
	//доп свойства - контрагент и пользователь
	//НачатьТранзакцию();
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(32));
	ТипИдентификатораСтрока50 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(50));
	ТипИдентификатораСтрока100 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(100));
	ТипИдентификатораСтрока300 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(300));
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ТипИдентификатораЧисло = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Массив = Новый Массив;
	КЧ = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой);
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧД = Новый ОписаниеТипов(Массив, , , КЧ);
	
	МассивДата = Новый Массив;
	МассивДата.Добавить(Тип("Дата"));
	ТипИдентификатораДата = Новый ОписаниеТипов(МассивДата, , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	distributorId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("distributorId");
	userId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("userId");
	multipleuserId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("multipleuserId", ТипИдентификатораСтрока300);
	employeeId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("employeeId");
	//СкладКонтрагента = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("Склад контрагента");
	ИдСкладаКонтрагента = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("Идентификатор склада контрагента");
	ДатаОбновленияСальдо = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("Дата обновления сальдо", Новый ОписаниеТипов(МассивДата, , ,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ВыгруженноеСальдо = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("Выгруженное сальдо", ОписаниеТиповЧД);
	//balance = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента2("Баланс");
	//creditLimit = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента2("creditLimit");
	dateUpdated = ОбработкаОбъект.НайтиДобавитьСвойствоЗаказа("dateUpdated");
	userId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("userlogin", ТипИдентификатораСтрока);
	userAPI = ОбработкаОбъект.НайтиДобавитьСвойствоЗаказа("userAPI", ТипИдентификатораСтрока);
	orderId = ОбработкаОбъект.НайтиДобавитьСвойствоЗаказа("orderId");
	deliveryOfficeId = ОбработкаОбъект.НайтиДобавитьСвойствоЗаказа("deliveryOfficeId", ТипИдентификатораЧисло);//Идентификатор офиса самовывоза
	deliveryOffice = ОбработкаОбъект.НайтиДобавитьСвойствоЗаказа("deliveryOffice", ТипИдентификатораСтрока50);//Офис самовывоза
	СвойствоНомерЗаказа = ОбработкаОбъект.НайтиДобавитьСвойствоДокумента("СвойствоНомерЗаказа", ТипИдентификатораСтрока50);//Номер заказа ABCP - в поступления, реализациях
	НомерПлатежногоДокумента = ОбработкаОбъект.НайтиДобавитьСвойствоДокумента("НомерПлатежногоДокумента", ТипИдентификатораСтрока50);//Номер платежного документа - в платежных документах
	managerId = ОбработкаОбъект.НайтиДобавитьСвойствоПользователя("managerId");
	ДатаОбновленияСтатусаABCP = ОбработкаОбъект.НайтиДобавитьСвойствоРеализации("ДатаОбновленияСтатусаABCP");
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(32));
	
	//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("userlogin (Контрагенты)");
	//Если НЕ ЗначениеЗаполнено(Свойство) Тогда
	//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	//	Свойство.ЭтоДополнительноеСведение = Истина;
	//	Свойство.Наименование = "userlogin (Контрагенты)";
	//	Свойство.Заголовок = "userlogin";
	//	Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
	//	Свойство.ДополнительныеЗначенияИспользуются = Истина;
	//	Свойство.ТипЗначения = ТипИдентификатораСтрока;
	//	Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11.epf "+СокрЛП(ТекущаяДата());
	//	Свойство.Виден = Истина;
	//	Свойство.Доступен = Истина;
	//	Свойство.Записать();
	//	НайтиДобавитьНаборДополнительныхРеквизитовИСведенийКонтрагент(Свойство);
	//КонецЕсли;
	
	//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("userpsw (Контрагенты)");
	//Если НЕ ЗначениеЗаполнено(Свойство) Тогда
	//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	//	Свойство.ЭтоДополнительноеСведение = Истина;
	//	Свойство.Наименование = "userpsw (Контрагенты)";
	//	Свойство.Заголовок = "userpsw";
	//	Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
	//	Свойство.ДополнительныеЗначенияИспользуются = Истина;
	//	Свойство.ТипЗначения = ТипИдентификатораСтрока;
	//	Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11.epf "+СокрЛП(ТекущаяДата());
	//	Свойство.Виден = Истина;
	//	Свойство.Доступен = Истина;
	//	Свойство.Записать();
	//	НайтиДобавитьНаборДополнительныхРеквизитовИСведенийКонтрагент(Свойство);
	//КонецЕсли;
	
	//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторМенеджера (Пользователи)");
	//Если НЕ ЗначениеЗаполнено(Свойство) Тогда
	//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	//	Свойство.ЭтоДополнительноеСведение = Истина;
	//	Свойство.Наименование = "ИдентификаторМенеджера (Пользователи)";
	//	Свойство.Заголовок = "ИдентификаторМенеджера";
	//	Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Пользователи;
	//	Свойство.ДополнительныеЗначенияИспользуются = Истина;
	//	Свойство.ТипЗначения = ТипИдентификатораЧисло;
	//	Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11.epf "+СокрЛП(ТекущаяДата());
	//	Свойство.Виден = Истина;
	//	Свойство.Доступен = Истина;
	//	Свойство.Записать();
	//	НайтиДобавитьНаборДополнительныхРеквизитовИСведенийПользователь(Свойство);
	//КонецЕсли;
	//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИсходныйПароль (Контрагент)");
	//Если НЕ ЗначениеЗаполнено(Свойство) Тогда
	//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	//	Свойство.ЭтоДополнительноеСведение = Истина;
	//	Свойство.Наименование = "ИсходныйПароль (Контрагент)";
	//	Свойство.Заголовок = "ИсходныйПароль";
	//	Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
	//	Свойство.ДополнительныеЗначенияИспользуются = Истина;
	//	Свойство.ТипЗначения = ТипИдентификатораСтрока;
	//	Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11.epf "+СокрЛП(ТекущаяДата());
	//	Свойство.Записать();
	//	НайтиДобавитьНаборДополнительныхРеквизитовИСведенийКонтрагент(Свойство);
	//КонецЕсли;
	
	//ЗафиксироватьТранзакцию();
	Если ТекстСообщения = "" Тогда
		Возврат "";
	Иначе
		Возврат "Включите функциональные опции: "+ТекстСообщения;
	КонецЕсли;
КонецФункции

Процедура НайтиДобавитьНаборДополнительныхРеквизитовИСведенийЗаказКлиента(Свойство);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаборыЗаказКлиента.Свойство
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыЗаказКлиента
	               |ГДЕ
	               |	НаборыЗаказКлиента.Свойство = &Свойство
	               |	И НаборыЗаказКлиента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Свойство", Свойство.Ссылка);
	Запрос.УстановитьПараметр("Ссылка", Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Об = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента.ПолучитьОбъект();
		НовСтрока = Об.ДополнительныеСведения.Добавить();
		НовСтрока.Свойство = Свойство.Ссылка;
		Об.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура НайтиДобавитьНаборДополнительныхРеквизитовИСведенийПользователь(Свойство)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаборыПользователь.Свойство
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыПользователь
	               |ГДЕ
	               |	НаборыПользователь.Свойство = &Свойство
	               |	И НаборыПользователь.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Свойство", Свойство.Ссылка);
	Попытка
		Запрос.УстановитьПараметр("Ссылка", Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_Пользователи"]);
	Исключение
		Запрос.УстановитьПараметр("Ссылка", Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Пользователи"]);
	КонецПопытки;
	Запрос.УстановитьПараметр("Ссылка", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Пользователи);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Об = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Пользователи.ПолучитьОбъект();
		НовСтрока = Об.ДополнительныеСведения.Добавить();
		НовСтрока.Свойство = Свойство.Ссылка;
		Об.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаявкиССайта(Команда)
	//ЗапускДлительнойОперации(Неопределено);
	//ПодключитьОбработчикОжидания("СостояниеЗагрузки",2);
	ОткрыватьФормуНаличия = ЗагрузитьЗаявкиССайтаСервер();
	//Если ОткрыватьФормуНаличия Тогда
	//	ОткрытьФорму("ВнешняяОбработка.ABCP_УТ11.Форма.ФормаНаличия");//, Объект.ТЗНоменклатура.Выгрузить()); 
	//КонецЕсли;
	//ОтключитьОбработчикОжидания("СостояниеЗагрузки");
	//УдалитьИзВременногоХранилища(АдресХранилищаИндикатора);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьЗаявкиССайтаСервер()
	Если ЗначениеЗаполнено(Объект.ДатаНачалаУчета) И Объект.ДатаНачалаУчета>ТекущаяДата() Тогда
		сообщить("Дата начала учета больше текущей даты, ничего не загружаем");
		Возврат Ложь;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	//если стоит галочка "Синхронизировать статус заявок", то изменяем статус каждой позиции в заявке на сайте
	Объект.ТаблицаКлиентов.Очистить();
	Объект.ТаблицаЗаявок.Очистить();
	Объект.ТаблицаНоменклатуры.Очистить();
	//Объект.ТЗКлиенты.Загрузить(ОбработкаОбъект.ВернутьТаблицуКлиентовССайта(Истина).Выгрузить());
	Объект.ТаблицаЗаявок.Загрузить(ОбработкаОбъект.ВернутьТаблицуЗаявокССайта(,Истина).Выгрузить());
	Объект.ТаблицаНоменклатуры.Загрузить(ОбработкаОбъект.ТаблицаНоменклатуры.Выгрузить());
	//ОбработкаОбъект.ЗаполнитьТаблицуКлиентовССайта(Истина);
	Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ТаблицаКлиентов.Выгрузить());
	Объект.ГлубинаПросмотраЗаявок = ОбработкаОбъект.ГлубинаПросмотраЗаявок;
	Объект.ФильтрПоЗаявке = ОбработкаОбъект.ФильтрПоЗаявке;
	
	//УИ = ОбработкаОбъект.ПолучитьТаблицуНоменклатуры();
	//Если УИ <> Неопределено Тогда
	//	Объект.ТаблицаНоменклатуры.Загрузить(ПолучитьИзВременногоХранилища(УИ));
	//	УдалитьИзВременногоХранилища(УИ);
	//КонецЕсли;
	////ТЗ = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(МассивИзТаблицыНоменклатуры).Скопировать();
	//ТЗ = МассивВТаблицуЗначений(МассивИзТаблицыНоменклатуры).Скопировать();
    //Объект.ТаблицаНоменклатуры.Загрузить(ТЗ);
	Возврат ОбработатьНаличие();
КонецФункции

//проходим по позициям и смотрим, что есть на складе, пробуем сразу заменить и поставить статус на сайте "С наличия"
//!!! надо подумать, чтобы если позиция несколько раз повторяется, её нельзя всем продать.
&НаСервере
Функция ОбработатьНаличие()
	Если НЕ Объект.ПредлагатьСНаличия Тогда
		Возврат Ложь;
	КонецЕсли;
	Склад = Объект.Склад;
	ВидЦены = Объект.ВидЦены;
	Запрос = Новый Запрос;
	//к отгрузке можно убрать
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
	               |	СвободныеОстаткиОстатки.Номенклатура.Наименование КАК Описание,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаЗакупки,
	               |	СвободныеОстаткиОстатки.ВНаличииОстаток КАК Наличие,
	               |	ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) КАК КОтгрузке
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(
	               |			&НаДату,
	               |			Склад = &Склад
	               |				И Номенклатура В (&Номенклатура)) КАК СвободныеОстаткиОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО СвободныеОстаткиОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
	               |		ПО СвободныеОстаткиОстатки.Номенклатура = ТоварыКОтгрузкеОстатки.Номенклатура
	               |ГДЕ
	               |	СвободныеОстаткиОстатки.Номенклатура.ЭтоГруппа = ЛОЖЬ";
	Запрос.УстановитьПараметр("Номенклатура", Объект.ТаблицаНоменклатуры.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("НаДату", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Структура = Новый Структура("Номенклатура");
	Пока Выборка.Следующий() Цикл
		Структура.Номенклатура = Выборка.Ссылка;
		НайденныеСтроки = Объект.ТаблицаНоменклатуры.НайтиСтроки(Структура);
		//цену тоже проверить
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Количество <= Выборка.Наличие Тогда //если заказано больше, чем на складе, то ничего не заполняем
				НайденнаяСтрока.Наличие = Выборка.Наличие;
				НайденнаяСтрока.ЦенаЗакупкиСклад = Выборка.ЦенаЗакупки;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	//если что-то заполнилось, то сортируем по номенклатуре и заказу и открываем другую форму
	Структура = Новый Структура("Наличие", 0);
	НайденныеСтроки = Объект.ТаблицаНоменклатуры.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() = Объект.ТаблицаНоменклатуры.Количество() Тогда
		Возврат Ложь;//ничего нет на наличии
	КонецЕсли;
	Объект.ТаблицаНаличия.Очистить();
	Для Каждого ТекСтрока Из Объект.ТаблицаНоменклатуры Цикл
		Если ТекСтрока.Наличие > 0 И ТекСтрока.КодСтатуса <> Объект.КодСтатусаНаСкладе И ТекСтрока.КодСтатуса <> Объект.КодСтатусаВыдано И ТекСтрока.КодСтатуса <> Объект.КодСтатусаОтказ И ТекСтрока.КодСтатуса <> Объект.КодСтатусаВозврат И ТекСтрока.КодСтатуса <> Объект.КодСтатусаГотовКВыдаче Тогда
			НовСтрока = Объект.ТаблицаНаличия.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Объект.ТаблицаНаличия.Сортировать("Номенклатура, НомерЗаявки");
	ИмяПользователя = ИмяПользователя();
	Если НЕ Объект.УТ112 И НЕ Объект.ИспользоватьИндивидуальныеНастройкиПользователей Тогда
		ИмяПользователя = "Администратор";
	КонецЕсли;
	КлючОбъекта = "ABCP_1C";
	КлючНастроек = "ТаблицаНаличия";
	Настройки = Новый Структура("ТаблицаНаличия", Объект.ТаблицаНаличия.Выгрузить());
	Настройки.Вставить("ВидЦены", Объект.ВидЦены);
	Настройки.Вставить("КодСтатусаСНаличия", Объект.КодСтатусаСНаличия);
	Настройки.Вставить("Склад", Объект.Склад);
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, Настройки, , ИмяПользователя);
	//ПоместитьВоВременноеХранилище(Объект.ТаблицаНаличия.Выгрузить(), "ТаблицаНаличия");//УникальныйИдентификатор);
	Возврат Истина;
	//открываем форму для изменения наличия
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусЗаявок(Команда)
	// непонятно, для чего
КонецПроцедуры

&НаКлиенте
Процедура ТЗЗаявкиПриАктивизацииСтроки(Элемент)
	Если ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяТекущегоЭлемента = ЭтаФорма.ТекущийЭлемент.Имя;
	Если (ИмяТекущегоЭлемента <> "ТаблицаЗаявок") И (ИмяТекущегоЭлемента <> "ТЗЗаявкиКлиента") Тогда
		Возврат;
	КонецЕсли;
	Если Не (Элемент.ТекущиеДанные = Неопределено) Тогда
		Если Объект.ТаблицаЗаявок.Количество()>0 Тогда
			Если (ИмяТекущегоЭлемента = "ТаблицаЗаявок") Тогда
				ЭтаФорма.Элементы.ТЗНоменклатура.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерЗаявки", ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки);
				//ЭлементОтбора = ЭтотОбъект.ТЗНоменклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерЗаявки");
				//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				//ЭлементОтбора.Использование = Истина;
				//ЭлементОтбора.ПравоеЗначение = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки;;
			ИначеЕсли (ИмяТекущегоЭлемента = "ТЗЗаявкиКлиента") Тогда
				ЭтаФорма.Элементы.ТЗНоменклатураКлиента.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерЗаявки", ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки);
			Иначе
				сообщить("Нет обработчика для элемента: "+ИмяТекущегоЭлемента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьТабличнуюЧасть(Док)
	Возврат Док.Товары;
КонецФункции

&НаКлиенте
Процедура ИмяФайлаExcelНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
    ДиалогОткрытияФайла.ПолноеИмяФайла     = Объект.ИмяФайлаExcel; 
    ДиалогОткрытияФайла.МножественныйВыбор = Ложь; 
	ДиалогОткрытияФайла.Фильтр = "Файл Excel 97-2003(*.xls)|*.xls|Файл Excel / CSV (*.csv)|*.csv";
    ДиалогОткрытияФайла.Заголовок = "Выберите файл в формате Excel 97-2003 или CSV (xls)"; 
    Если ДиалогОткрытияФайла.Выбрать()Тогда 
    	Объект.ИмяФайлаExcel = ДиалогОткрытияФайла.ПолноеИмяФайла; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаExcelОткрытие(Элемент, СтандартнаяОбработка)
	//Текст = ИмяФайлаExcelОткрытиеСервер();
	//Текст.Показать();
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Объект.ИмяФайлаExcel);
КонецПроцедуры

//выгрузка остатков на сайт
&НаСервере
Процедура ПолучитьОстаткиНаСервере(ИдПоставщика = Неопределено)//Склад = Неопределено)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//Если Склад = Неопределено Тогда
	//	Склад = Объект.Склад;
	//КонецЕсли;
	Если ИдПоставщика = Неопределено Тогда
		сообщить("Некорректно выбран склад");
		Возврат;
	КонецЕсли;
	Структура = Новый Структура("ИдентификаторПоставщика", ИдПоставщика);
	СтрокиСклада = Объект.ТаблицаСкладов.НайтиСтроки(Структура);
	ВидЦены = "";
	Если СтрокиСклада.Количество() = 0 Тогда //не заполнена таблица поставщиков
		ОбработкаОбъект.ПолучитьОстатки(Истина, Объект.ВидЦены, Объект.Склад);
		ВидЦены = Объект.ВидЦены;
	Иначе
		СтрокаСклада = СтрокиСклада[0];
		ОбработкаОбъект.ПолучитьОстатки(Истина, СтрокаСклада.ВидЦены, СтрокаСклада.Склад,,,СтрокаСклада);
		ВидЦены = СтрокаСклада.ВидЦены;
	КонецЕсли;
	//ПолучитьОстатки(Полная = Ложь, ВидЦены, Склад = Неопределено, СписокНоменклатуры = Неопределено, ГруппаСкладов = Неопределено, СтрокаСклада = Неопределено)
	//ОбработкаОбъект.ПолучитьОстатки(Истина, Объект.ВидЦены, Склад);
	Объект.ТаблицаОстатков.Загрузить(ОбработкаОбъект.ТаблицаОстатков.Выгрузить());
	//Объект.ТаблицаОстатков.Загрузить(ОбработкаОбъект.ПолучитьОстатки(Истина, Объект.ВидЦены, Склад).Выгрузить());
	Если Объект.ТаблицаОстатков.Количество()<20 Тогда
		сообщить("Мало остатков, возможно на часть номенклатуры не установлена цена: " + ВидЦены);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПереченьСкладов(ИдПоставщика = Ложь)//если идентификаторы, то
	СписокСкладов = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Объект.ТаблицаСкладов Цикл
		Если ТекСтрока.Выгружать И ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
			Если ИдПоставщика Тогда
				СписокСкладов.Добавить(ТекСтрока.ИдентификаторПоставщика, ""+ТекСтрока.Склад+", "+Формат(ТекСтрока.ИдентификаторПоставщика, "ЧГ=0"));
			Иначе
				СписокСкладов.Добавить(ТекСтрока.Склад);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СписокСкладов.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Если ИдПоставщика Тогда
				СписокСкладов.Добавить(Объект.ИдентификаторПоставщика, Объект.Склад);
			Иначе
				СписокСкладов.Добавить(Объект.Склад);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если СписокСкладов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СписокСкладов;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПослеВыбораСкладаДляОстатков(Элемент, Параметры) Экспорт
    Если Элемент <> Неопределено Тогда
		ПолучитьОстаткиНаСервере(Элемент.Значение);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОстатки(Команда)
	//выгружает только товары, у которых установлена цена
	СписокСкладов = ПолучитьПереченьСкладов(Истина);
	Если СписокСкладов = Неопределено Тогда
		ПолучитьОстаткиНаСервере(Объект.Склад);
		//сообщить("Нет ни одного нашего склада в перечне поставщиков");
		Возврат;
	КонецЕсли;
	Если СписокСкладов.Количество() = 1 Тогда
		ПолучитьОстаткиНаСервере(СписокСкладов[0].Значение);
		Возврат;
	КонецЕсли;
	//в 8.3 работает, но ругается Элемент = СписокПоставщиков.ВыбратьЭлемент();
	Если Объект.УТ111 Тогда
		ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораСкладаДляОстатков", ЭтаФорма);
	Иначе
		ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораСкладаДляОстатков", ЭтотОбъект);
	КонецЕсли;
	СписокСкладов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите склад для выгрузки");	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьПрайсНаСервере(ИдПоставщика)
	Если Объект.Франчайзи Тогда
		СтарыйАдресСервиса = Объект.АдресСервиса;
		СтарыйПользователь = Объект.Пользователь;
		СтарыйПароль = Объект.Пароль;
		НайденныеСтроки = Объект.ТаблицаСкладов.НайтиСтроки(Новый Структура("ИдентификаторПоставщика", ИдПоставщика));
		Если НайденныеСтроки.Количество() = 0 Тогда
			сообщить("Не нашли строку в таблице складов");
			Возврат;
		КонецЕсли;
		НайденнаяСтрока = НайденныеСтроки[0];
		АдресСервиса = НайденнаяСтрока.АдресСервиса;
		Пользователь = НайденнаяСтрока.Пользователь;
		СтрокиФранчайзи = Объект.ТаблицаДоступов.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
		Если СтрокиФранчайзи.Количество() = 0 Тогда
			ЗаписьВЛог("Не найден пароль по доступу пользователя "+Пользователь,5,Истина);
			Возврат;
		Иначе
			Пароль = СтрокиФранчайзи[0].Пароль;
		КонецЕсли;
		Объект.АдресСервиса = АдресСервиса;
		Объект.Пользователь = Пользователь;
		Объект.Пароль = Пароль;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если НЕ ОбработкаОбъект.ПараметрыЗаполнены(, Истина) Тогда
		//Возврат;
	КонецЕсли;
	Если Объект.ТаблицаОстатков.Количество() = 0 Тогда
		сообщить("Не заполнена табличная часть остатков");
		//ПоказатьОповещениеПользователя(, , "Не заполнена табличная часть остатков");
		Возврат;
	КонецЕсли;
	ОбработкаОбъект.ВыгрузитьПрайсНаСайт(ИдПоставщика);
	Если Объект.Франчайзи Тогда
		Объект.АдресСервиса = СтарыйАдресСервиса;
		Объект.Пользователь = СтарыйПользователь;
		Объект.Пароль = СтарыйПароль;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыгрузитьПрайс(Элемент, Параметры) Экспорт
	//Если Результат = КодВозвратаДиалога.Нет Тогда
	//    Возврат;
	//КонецЕсли;
    Если Элемент <> Неопределено Тогда
		ВыгрузитьПрайсНаСервере(Элемент.Значение);
    КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьПрайс(Команда)
	СписокСкладов = ПолучитьПереченьСкладов(Истина);
	Если СписокСкладов = Неопределено Тогда
		сообщить("Нет ни одного нашего склада в перечне поставщиков");
		Возврат;
	КонецЕсли;
	Если СписокСкладов.Количество() = 1 Тогда
		ВыгрузитьПрайсНаСервере(СписокСкладов[0].Значение);
		Возврат;
	КонецЕсли;
	Если Объект.УТ111 Тогда
		ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ОповещениеВыгрузитьПрайс", ЭтаФорма);
	Иначе
		ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ОповещениеВыгрузитьПрайс", ЭтотОбъект);
	КонецЕсли;
	СписокСкладов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите склад для полной выгрузки");	
	//Режим = РежимДиалогаВопрос.ДаНет;
	//Оповещение = Новый ОписаниеОповещения("ОповещениеВыгрузитьПрайс", ЭтаФорма, Параметры);
	//ПоказатьВопрос(Оповещение, "Выгруженные данные полностью заменят информацию об остатках на сайте, продолжить выполнение операции?", Режим, 0);
КонецПроцедуры

#Область ОтправкаПрайса
&НаСервере
Процедура ОтправитьПрайсНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыгрузитьПрайсНаСайт(Объект.ИдентификаторПоставщика);
	//ОбработкаОбъект.ОтправитьПрайсПоEmail();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	ОтправитьПрайсНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ОтправитьПрайс(Команда)
	Если НЕ ПроверитьПараметр("ПочтовыйСервер") Тогда Возврат; КонецЕсли;
	Если НЕ ПроверитьПараметр("ПортSMTP") Тогда Возврат; КонецЕсли;
	Если НЕ ПроверитьПараметр("ПользовательДляEmail") Тогда Возврат; КонецЕсли;
	Если НЕ ПроверитьПараметр("ПарольДляEmail") Тогда Возврат; КонецЕсли;
	Если Объект.ТекстПисьма = "" Тогда 
		Объект.ТекстПисьма = "рассылка прайса";
	КонецЕсли;
	Если Объект.ТемаПисьма = "" Тогда 
		Объект.ТемаПисьма = "рассылка прайса";
	КонецЕсли;
	//Если НЕ ПроверитьПараметр("ИмяФайлаExcel") Тогда Возврат; КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ВидЦеныДляКонтрагента) Тогда 
		Объект.ВидЦеныДляКонтрагента = Объект.ВидЦены;
	КонецЕсли;
	//Если ЗначениеЗаполнено(Объект.Производитель) Тогда
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);
	//	ПоказатьВопрос(Оповещение, "Будут выгружены остатки только по выбранному бренду """ +СокрЛП(Объект.Производитель)+""", продолжить?", Режим, 0);
	//	Возврат;
	//	//Если Вопрос("Будут выгружены остатки только по выбранному бренду """ +СокрЛП(Объект.Бренд)+""", продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
	//	//	Возврат;
	//	//КонецЕсли;
	//КонецЕсли;
	ОтправитьПрайсНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательДляEmailПриИзменении(Элемент)
	//для 8.2 надо будет использовать stunnel http://mamaev-blog.ru/nastroyka-pochtyi-v-1s-dlya-yandex-gmail-ili-mail-ru/
	//настройки портов для разных клиентов http://allbat.info/settings
	ПозицияРазделителя = Найти(Объект.ПользовательДляEmail, "@");
	Если ПозицияРазделителя > 0 Тогда
		ИмяПочтовогоСервера = Сред(Объект.ПользовательДляEmail, ПозицияРазделителя+1);
		Объект.ПочтовыйСервер = "smtp."+ИмяПочтовогоСервера;
		//465 (протокол шифрования SSL/TLS)
		Если ИмяПочтовогоСервера = "mail.ru" Тогда
			Объект.ПортSMTP = "465";//http://help.mail.ru/mail-help/mailer/popsmtp
		ИначеЕсли ИмяПочтовогоСервера = "yandex.ru" Тогда
			Объект.ПортSMTP = "465";//https://yandex.ru/support/mail/mail-clients.xml
		ИначеЕсли ИмяПочтовогоСервера = "autoelements.ru" Тогда
			ИмяПочтовогоСервера = "yandex.ru";
			Объект.ПочтовыйСервер = "smtp."+ИмяПочтовогоСервера;
			Объект.ПортSMTP = "465";
		ИначеЕсли ИмяПочтовогоСервера = "gmail.com" Тогда
			Объект.ПортSMTP = "465";//или 587
		КонецЕсли;
	Иначе
		Объект.ПочтовыйСервер = "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПодписьОтправителя) Тогда
		Объект.ПодписьОтправителя = "AutoElement";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПолучательПриИзменении(Элемент)
	КонтрагентПолучательПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПолучательПриИзмененииНаСервере()
	//получаем Email из контактной информации Контрагента
	ТЗКИ = Объект.КонтрагентПолучатель.КонтактнаяИнформация.Выгрузить();
	НайденныеСтроки = ТЗКИ.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента.Ссылка));
	Если НайденныеСтроки.Количество()>0 Тогда
		Объект.EmailПолучателя = СокрЛП(НайденныеСтроки[0].Представление);
	КонецЕсли;
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//               |	СоглашенияСКлиентами.Ссылка,
	//               |	СоглашенияСКлиентами.ВидЦен
	//               |ИЗ
	//               |	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	//               |ГДЕ
	//               |	СоглашенияСКлиентами.Контрагент = &Контрагент";
	//Запрос.УстановитьПараметр("Контрагент", Объект.КонтрагентПолучатель);
	//Результат = Запрос.Выполнить();
	//Если НЕ Результат.Пустой() Тогда
	//	Выборка = Результат.Выбрать();
	//	Выборка.Следующий();
	//	Объект.ВидЦеныДляКонтрагента = Выборка.ВидЦен;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтправитьПрайсыПоВидамЦенНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыгрузитьОстаткиПоСкладамНаEmail();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПрайсыПоВидамЦен(Команда)
	Если НЕ ПроверитьПараметр("ПочтовыйСервер") Тогда Возврат; КонецЕсли;
	Если НЕ ПроверитьПараметр("ПортSMTP") Тогда Возврат; КонецЕсли;
	Если НЕ ПроверитьПараметр("ПользовательДляEmail") Тогда Возврат; КонецЕсли;
	Если НЕ ПроверитьПараметр("ПарольДляEmail") Тогда Возврат; КонецЕсли;
	Если Объект.ТекстПисьма = "" Тогда 
		Объект.ТекстПисьма = "рассылка прайсов";
	КонецЕсли;
	Если Объект.ТемаПисьма = "" Тогда 
		Объект.ТемаПисьма = "рассылка прайсов";
	КонецЕсли;
	ОтправитьПрайсыПоВидамЦенНаСервере();
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура УдалитьДокументыИзБазыНаСервере()
	//УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТекСтрока Из Объект.ТаблицаЗаявок Цикл
		ДокОбъект = ТекСтрока.Документ.ПолучитьОбъект();
		ДокОбъект.Удалить();
		ТекСтрока.Документ = "";
	КонецЦикла;
	//УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КодСтатусаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//Если ЭтаФорма.ТекущийЭлемент.ТекущиеДанные = Неопределено Тогда
	//Иначе
	Попытка
		ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекСтрока.АдресСервиса) Тогда
			СписокСтатусов = ПолучитьСписокСтатусов(Истина, ТекСтрока.АдресСервиса, ТекСтрока.Пользователь);
		Иначе
			СписокСтатусов = ПолучитьСписокСтатусов(Истина);
		КонецЕсли;
	Исключение
		СписокСтатусов = ПолучитьСписокСтатусов(Истина);
	КонецПопытки;
	//КонецЕсли;
	Если Не ЗначениеЗаполнено(СписокСтатусов) Тогда
		Возврат;
	КонецЕсли;
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораСтатуса", ЭтотОбъект, Элемент.Имя);
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ВыбранныйЭлемент = СписокСтатусов.НайтиПоЗначению(Число(Элемент.ТекстРедактирования));
	Иначе
		ВыбранныйЭлемент = Неопределено;
	КонецЕсли;
	СписокСтатусов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите соответствующий статус", ВыбранныйЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтатуса(Элемент, Параметры) Экспорт
	Если Элемент <> Неопределено Тогда
		//Если Параметры = "ТаблицаСтатусовМенятьСтатусПриПоступлении" Тогда
		//	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.МенятьСтатусПриПоступлении = Элемент.Значение;
		//ИначеЕсли Параметры = "ТаблицаСтатусовМенятьСтатусПриРеализации" Тогда
		//	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.МенятьСтатусПриРеализации = Элемент.Значение;
		Если Параметры = "СтатусЗаявкиКлиента" Тогда
        	Объект[Параметры] = Элемент.Значение;
			//ЭтаФорма.СтатусЗаявкиКлиента = Элемент.Значение;
		Иначе
			//сообщить("Обработка по умолчанию, возможно, не добавлена обработка элемента, параметр: "+Параметры);
			Если Параметры = "ТаблицаСтатусовКодСледующегоСтатуса" Тогда
				Элементы.ТаблицаСтатусов.ТекущиеДанные.КодСледующегоСтатуса = Элемент.Значение;
			Иначе
	        	Объект[Параметры] = Элемент.Значение;
				Если Параметры = "КодСтатусаНовый" Тогда
					ПроверитьПризнакЗаказПоставщика();
				ИначеЕсли Параметры = "КодСтатусаНаличие" Тогда
					сообщить("В новых заказах у позиций, с поставщиком "+Объект.ИдентификаторПоставщика+" код статуса будет автоматически изменен на "+Формат(Элемент.Значение,"ЧГ=0"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьПризнакЗаказПоставщика()
	КодСтатусаНовый = Объект.КодСтатусаНовый;
	Для Каждого ТекСтрока Из Объект.ТаблицаСтатусов Цикл
		Если ТекСтрока.КодСтатуса = КодСтатусаНовый Тогда
			ТекСтрока.СоздаватьЗаявкуПокупателя = Истина;
			ТекСтрока.СоздаватьЗаказПоставщикам = Истина;
			СохранитьНастройкиДляРегламентногоЗаданияНаСервере();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБалансКлиентов(Команда)
	Если Объект.ТаблицаКлиентов.Количество() = 0 Тогда
		ОбновитьБалансКлиентовСервер();
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбновитьБалансКлиентов", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Перезаполнить таблицу данными из 1С?", Режим, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбновитьБалансКлиентов(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ТаблицаКлиентов.Очистить();
    КонецЕсли;
	ОбновитьБалансКлиентовСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьБалансКлиентовСервер()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбновитьБалансКлиентов();
	Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ТаблицаКлиентов.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ОбновитьБалансКлиентовЗаТекущийДеньНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбновитьБалансКлиентовЗаТекущийДень();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБалансКлиентовЗаТекущийДень(Команда)
	ОбновитьБалансКлиентовЗаТекущийДеньНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДоступов()
	СписокДоступов = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Объект.ТаблицаДоступов Цикл
		Структура = Новый Структура("АдресСервиса,Пользователь,Пароль");
		Если ТекСтрока.Использовать Тогда
			ЗаполнитьЗначенияСвойств(Структура, ТекСтрока);
			СписокДоступов.Добавить(Структура, ТекСтрока.АдресСервиса + " / "+ТекСтрока.Пользователь);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокДоступов;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСклады(Команда)
	Если Объект.ТаблицаДоступов.Количество() = 0 Или Объект.Франчайзи = Ложь Тогда
		ЗаполнитьСкладыСервер();
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьСклады", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Возможно, есть несколько доступов к ABCP с разными складами, очистить таблицу?", Режим, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСпискаДоступа(Элемент, Параметры) Экспорт
    Если Элемент <> Неопределено Тогда
        Структура = Элемент.Значение;
		ЗаполнитьСкладыСервер(Ложь, Структура);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьСклады(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ТаблицаСкладов.Очистить();
    КонецЕсли;
	СписокДоступов = ПолучитьСписокДоступов();
	Если СписокДоступов.Количество() = 0 Тогда
		сообщить("В таблице доступов ничего нет, или не установлен флажок «Использовать»");
		Возврат;
	КонецЕсли;
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораИзСпискаДоступа", ЭтотОбъект);
	СписокДоступов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите позицию из списка доступа");	
	//ЗаполнитьСкладыСервер(Ложь);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладыСервер(ОчищатьТаблицу = Истина, СтруктураДоступов = Неопределено)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//проверить, все галочки или нет
	СтараяТаблица = Объект.ТаблицаСкладов.Выгрузить();
	Если ОчищатьТаблицу Тогда
		Объект.ТаблицаСкладов.Очистить();
	КонецЕсли;
	Структура = Новый Структура("ИдентификаторПоставщика");
	СписокПоставщиков = Новый СписокЗначений;
	Если НЕ ОбработкаОбъект.ПараметрыЗаполнены(Истина) Тогда
		сообщить("Не все параметры заполнены");
		Возврат;
	КонецЕсли;
	Если СтруктураДоступов = Неопределено Тогда
		АдресСервиса = Объект.АдресСервиса;
		Пользователь = Объект.Пользователь;
		Пароль = Объект.Пароль;
	Иначе
		АдресСервиса = СтруктураДоступов.АдресСервиса;
		Пользователь = СтруктураДоступов.Пользователь;
		Пароль = СтруктураДоступов.Пароль;
	КонецЕсли;
	ТекстЗапроса = "/cp/distributors?userlogin="+Пользователь+"&userpsw="+Пароль;
	Если Объект.Отладка Тогда
		сообщить(АдресСервиса+ТекстЗапроса);
	КонецЕсли;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	//ЭтотОбъект.UnicodeEncode(СтрокаОтветUTF8);
	//только на сервере РеквизитФормыВЗначение("Объект").UnicodeEncode(СтрокаОтвет);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	КонецЕсли;
	//Сообщить(СтрокаОтвет);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Соответствие = Неопределено;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого Элемент Из СписокЭлементов Цикл
		//Если Элемент.isEnabled = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		//Если Найти(Элемент.description, "Необходимо связаться с менеджером для предоставления прав  для работы с веб сервисом.") > 0 Тогда
		//	//Продолжить;
		//КонецЕсли;
		Если Элемент.name = "storezone" Тогда //это склад theSklad
			Продолжить;
		КонецЕсли;
		Если НЕ ОчищатьТаблицу Тогда
			Структура.ИдентификаторПоставщика = Число(Элемент.id);
			НайденныеСтроки = Объект.ТаблицаСкладов.НайтиСтроки(Структура);
			Если НайденныеСтроки.Количество()>0 Тогда
				СтрокаСклада = НайденныеСтроки[0];
				Если СтрокаСклада.АдресСервиса = АдресСервиса И СтрокаСклада.Пользователь = Пользователь Тогда
					НовСтрока = СтрокаСклада;
				Иначе
					НовСтрока = Объект.ТаблицаСкладов.Добавить();
					НовСтрока.ДополнительныйКод = Истина;
				КонецЕсли;
			Иначе
				НовСтрока = Объект.ТаблицаСкладов.Добавить();
			КонецЕсли;
		Иначе
			НовСтрока = Объект.ТаблицаСкладов.Добавить();
		КонецЕсли;
		НовСтрока.ИдентификаторПоставщика = Элемент.id;
		НовСтрока.НаименованиеПоставщика = Элемент.name;
		НовСтрока.ИНН = Элемент.inn;
		НовСтрока.КПП = Элемент.kpp;
		НовСтрока.mobile = Элемент.mobile;
		НовСтрока.phone = СокрЛП(Элемент.phone);
		НовСтрока.НашСклад = Ложь;
		Если Элемент.contractor <> Неопределено Тогда
			НовСтрока.contractorid = Элемент.contractor.id;
			НовСтрока.contractorname = Элемент.contractor.name;
		КонецЕсли;
		Структура.ИдентификаторПоставщика = НовСтрока.ИдентификаторПоставщика;
		НайденныеСтроки = СтараяТаблица.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество()> 0 Тогда
			СтрокаСклада = НайденныеСтроки[0];
			Если СтрокаСклада.АдресСервиса = АдресСервиса И СтрокаСклада.Пользователь = Пользователь Тогда
				//ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаСклада,"Выгружать,Склад,Контрагент,Партнер,ВидЦены,НашСклад,НалогообложениеНДСПоступление,Соглашение,СоглашениеСКлиентом,ИдентификаторОсновногоПоставщика,ОсновнойКонтрагент,Организация");
				ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаСклада,,"ИдентификаторПоставщика,НаименованиеПоставщика");
			Иначе
				//ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаСклада,"Выгружать,Склад,Контрагент,Партнер,ВидЦены,НашСклад,НалогообложениеНДСПоступление,Соглашение,СоглашениеСКлиентом,ИдентификаторОсновногоПоставщика,ОсновнойКонтрагент,Организация");
				//НовСтрока.ДополнительныйКод = Истина;
				НовСтрока.ДополнительныйКод = Истина;
			КонецЕсли; 
			Если Найти(Строка(НовСтрока.Контрагент), "<Объект не найден>") > 0 Тогда
				НовСтрока.Контрагент = "";
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовСтрока.Контрагент) И ЗначениеЗаполнено(НовСтрока.ИНН) И НовСтрока.ИдентификаторОсновногоПоставщика = 0 Тогда
			НовСтрока.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",НовСтрока.ИНН);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовСтрока.Контрагент) И НовСтрока.ИдентификаторОсновногоПоставщика = 0 Тогда
			НовСтрока.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(НовСтрока.НаименованиеПоставщика,Истина);
			//НовСтрока.Организация = Объект.Организация;//есть разные настройки
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовСтрока.Контрагент) И НовСтрока.ИдентификаторОсновногоПоставщика = 0 Тогда
			//ищем в регистре сведений
			Если Соответствие = Неопределено Тогда
				Соответствие = ВернутьСоответствиеИдентификатораПоставщику();
			КонецЕсли;
			КонтрагентПоСоответствию = Соответствие.Получить(НовСтрока.ИдентификаторПоставщика);
			Если КонтрагентПоСоответствию <> Неопределено Тогда
				НовСтрока.Контрагент = КонтрагентПоСоответствию.Ссылка;
			КонецЕсли;
		КонецЕсли;
		Если НовСтрока.mobile<>"" Тогда
			КонтрагентПоТелефону = ОбработкаОбъект.НайтиКонтрагентаПоТелефону(НовСтрока.mobile);
		ИначеЕсли НовСтрока.phone<>"" Тогда
			КонтрагентПоТелефону = ОбработкаОбъект.НайтиКонтрагентаПоТелефону(НовСтрока.phone);
		КонецЕсли;
		Если ЗначениеЗаполнено(КонтрагентПоТелефону) Тогда
			сообщить("Найден поставщик "+КонтрагентПоТелефону+" по телефону "+НовСтрока.mobile);
			НовСтрока.Контрагент = КонтрагентПоТелефону;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовСтрока.Контрагент) И НовСтрока.contractorname<>"" Тогда
			НовСтрока.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(НовСтрока.contractorname,Истина);
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтрока.Контрагент) И НЕ ЗначениеЗаполнено(НовСтрока.Партнер) Тогда
			НовСтрока.Партнер = НовСтрока.Контрагент.Партнер;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовСтрока.Склад) Тогда // и Не ЗначениеЗаполнено(НовСтрока.Контрагент)
			НовСтрока.Склад = Справочники.Склады.НайтиПоНаименованию(НовСтрока.НаименованиеПоставщика,Истина);
			Если НЕ ЗначениеЗаполнено(НовСтрока.Склад) Тогда
				//НовСтрока.НашСклад = Истина;
			КонецЕсли;
		КонецЕсли;
		НовСтрока.АдресСервиса = АдресСервиса;
		НовСтрока.Пользователь = Пользователь;
	КонецЦикла;
КонецПроцедуры

Функция ВернутьСоответствиеИдентификатораПоставщику()
	Соответствие = Новый Соответствие;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	distributorId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("distributorId");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект КАК Объект,
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство";
	               //|	И ДополнительныеСведения.Объект.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Свойство", distributorId.Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Соответствие;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Значение, Выборка.Объект);
	КонецЦикла;
	Возврат Соответствие;
КонецФункции

Функция НайтиПоставщикаПоИдентификатору(ИдПоставщика)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Объект КАК Объект
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Значение = &Значение
	               |	И ДополнительныеСведения.Свойство.Наименование = &Наименование
	               |	И ДополнительныеСведения.Объект.ПометкаУдаления = Ложь";
	Запрос.УстановитьПараметр("Значение", ИдПоставщика);
	Запрос.УстановитьПараметр("Наименование", "distributorId (Контрагенты)");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Объект;
КонецФункции

&НаСервере
Процедура УдалитьНеЗаполненныеСкладыНаСервере()
	Структура = Новый Структура("Склад",Справочники.Склады.ПустаяСсылка());
	НайденныеСтроки = Объект.ТаблицаСкладов.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество()> 0 Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если (Не ЗначениеЗаполнено(НайденнаяСтрока.Контрагент)) И (НЕ НайденнаяСтрока.Выгружать) Тогда
				Объект.ТаблицаСкладов.Удалить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНеЗаполненныеСклады(Команда)
	// спросить асинхронно
	УдалитьНеЗаполненныеСкладыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИмяЛогФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
    ДиалогОткрытияФайла.ПолноеИмяФайла     = Объект.ЛогФайл; 
    ДиалогОткрытияФайла.МножественныйВыбор = Ложь; 
	ДиалогОткрытияФайла.Фильтр = "Текстовый файл(*.txt)|*.txt";
    ДиалогОткрытияФайла.Заголовок = "Выберите текстовый файл (txt)"; 
    Если ДиалогОткрытияФайла.Выбрать()Тогда 
    	Объект.ЛогФайл = ДиалогОткрытияФайла.ПолноеИмяФайла; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяЛогФайлаОткрытие(Элемент, СтандартнаяОбработка)
	Текст = ИмяЛогФайлаСервер();
	Текст.Показать();
	//ЗапуститьПриложение(Объект.ИмяФайлаExcel);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Функция ИмяЛогФайлаСервер()
	Текст = Новый ТекстовыйДокумент;
	ЛогФайл = Новый Файл(Объект.ЛогФайл);
    Если ЛогФайл.Существует() Тогда
		Текст.Прочитать(Объект.ЛогФайл, КодировкаТекста.ANSI); 
	Иначе
		сообщить("Файл не существует");
	КонецЕсли;
	Возврат Текст;
КонецФункции

&НаСервере
Процедура ЗаполнитьПоставщиковНаСервере()
	//сейчас не используется
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//проверить, все галочки или нет
	СтараяТаблица = Объект.ТаблицаСкладов.Выгрузить();
	Объект.ТаблицаСкладов.Очистить();
	Структура = Новый Структура("ИдентификаторПоставщика");
	СписокПоставщиков = Новый СписокЗначений;
	Если НЕ ОбработкаОбъект.ПараметрыЗаполнены(Истина) Тогда
		сообщить("Не все параметры заполнены");
		Возврат;
	КонецЕсли;
	АдресСервиса = Объект.АдресСервиса;
	Пользователь = Объект.Пользователь;
	Пароль = Объект.Пароль;
	ТекстЗапроса = "/cp/distributors?userlogin="+Пользователь+"&userpsw="+Пароль;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	//ЭтотОбъект.UnicodeEncode(СтрокаОтветUTF8);
	//только на сервере РеквизитФормыВЗначение("Объект").UnicodeEncode(СтрокаОтвет);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	КонецЕсли;
	//Сообщить(СтрокаОтвет);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если Элемент.isEnabled = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(Элемент.description, "Необходимо связаться с менеджером для предоставления прав  для работы с веб сервисом.") > 0 Тогда
			Продолжить;
		КонецЕсли;
		НовСтрока = Объект.ТаблицаСкладов.Добавить();
		НовСтрока.ИдентификаторПоставщика = Элемент.id;
		НовСтрока.НаименованиеПоставщика = Элемент.name;
		НовСтрока.ИНН = Элемент.inn;
		НовСтрока.КПП = Элемент.kpp;
		//если были галочки, ставим их обратно
		Структура.ИдентификаторПоставщика = НовСтрока.ИдентификаторПоставщика;
		НайденныеСтроки = СтараяТаблица.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество()> 0 Тогда
			НСтрока = НайденныеСтроки[0];
			ЗаполнитьЗначенияСвойств(НовСтрока, НСтрока, "Выгружать,Склад,ВидЦены,НашСклад,НеЗагружать,ДополнительныйКод");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщиков(Команда)
	ЗаполнитьПоставщиковНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовКонтрагентПриИзменении(Элемент)
	ТД =  ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	ДополнительныйКод = ТД.ДополнительныйКод;
	ИдПоставщика = ТД.ИдентификаторПоставщика;
	Если ДополнительныйКод Тогда
		ПоказатьОповещениеПользователя(,,"Для кода «"+ИдПоставщика+"» игнорируются проверки");
		Возврат;
	КонецЕсли; 
	Контрагент = ТД.Контрагент;
	НомерВыбраннойСтроки = ТД.НомерСтроки-1;
	Если НЕ НайтиДубликатКонтрагента(ИдПоставщика, Контрагент,НомерВыбраннойСтроки) Тогда
		Если ЗначениеЗаполнено(Контрагент) И ИдПоставщика<>0 Тогда
			сообщить("Контрагенту "+Контрагент+" установлен distributorId "+Формат(ИдПоставщика,"ЧГ=0"));
			ДобавитьИзменитьdistributorId(Контрагент, ИдПоставщика);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//если у поставщика несколько складов, то у первого мы выбираем, как положено, а у остальных заполняем колонку с ид.основного поставщика
Функция НайтиДубликатКонтрагента(ИдПоставщика, Контрагент, НомерВыбраннойСтроки)
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	Структура = Новый Структура("Контрагент", Контрагент);
	Объект.ТаблицаСкладов[НомерВыбраннойСтроки].Контрагент = "";
	Объект.ТаблицаСкладов[НомерВыбраннойСтроки].Партнер = "";
	ИдентификаторОсновногоПоставщика = 0;
	НСтроки = Объект.ТаблицаСкладов.НайтиСтроки(Структура);
	Для Каждого НСтрока Из НСтроки Цикл
		ИдентификаторОсновногоПоставщика = НСтрока.ИдентификаторПоставщика;
	КонецЦикла;
	Если ИдентификаторОсновногоПоставщика<>0 Тогда
		сообщить("Идентификатор основного поставщика "+ИдентификаторОсновногоПоставщика);
		Объект.ТаблицаСкладов[НомерВыбраннойСтроки].ИдентификаторОсновногоПоставщика = ИдентификаторОсновногоПоставщика;
		Объект.ТаблицаСкладов[НомерВыбраннойСтроки].ОсновнойКонтрагент = Контрагент;
		Возврат Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Объект.ТаблицаСкладов[НомерВыбраннойСтроки].Контрагент = Контрагент;
		Объект.ТаблицаСкладов[НомерВыбраннойСтроки].Партнер = Контрагент.Партнер;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ДобавитьИзменитьdistributorId(Контрагент, ИдПоставщика)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьИзменитьdistributorId(Контрагент, ИдПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТЗЗаявкиНомерЗаявкиОткрытие(Элемент, СтандартнаяОбработка)
	НомерЗаявки = Элемент.ТекстРедактирования;
	ЗапуститьПриложение("http://cp.abcp.ru/?page=orders&id_order="+Формат(Число(НомерЗаявки), "ЧГ=0"));
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТЗЗаявкиИдентификаторКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	НомерКонтрагента = Элемент.ТекстРедактирования;
	//ЗапуститьПриложение("http://cp.abcp.ru/?page=customers&customerId="+НомерКонтрагента+"&action=editCustomer");
	ЗапуститьПриложение("https://cp.abcp.ru/customers/clients/"+НомерКонтрагента+"/edit");
	//https://cp.abcp.ru/customers/clients/5578931/edit
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыНаСервере(ОчищатьФлажки = Ложь)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если НЕ ОбработкаОбъект.ПараметрыЗаполнены(,Истина) Тогда
		сообщить("Не все параметры заполнены");
		Возврат;
	КонецЕсли;
	Объект.КодСтатусаСНаличия = 1;
	Объект.КодСтатусаНаСкладе = 1;
	Объект.КодСтатусаВыдано = 1;
	Объект.КодСтатусаОтказ = 1;
	Объект.КодСтатусаГотовКВыдаче = 1;
	Объект.КодСтатусаВозврат = 1;
	Если Объект.Франчайзи Тогда
		Структура = Новый Структура("Использовать", Истина);
		НайденныеСтроки = Объект.ТаблицаДоступов.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если ОчищатьФлажки Тогда
				Объект.ТаблицаСтатусов.Очистить();
			КонецЕсли;
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				//ЗаполнитьЗначенияСвойств(Объект,ТекСтрока);
				ЗаполнитьСтатусыНаСервереПорция(Ложь, ТекСтрока.АдресСервиса, ТекСтрока.Пользователь, ТекСтрока.Пароль);
			КонецЦикла;
			Объект.ТаблицаСтатусов.Сортировать("НаименованиеСтатуса");
		Иначе
			ЗаполнитьСтатусыНаСервереПорция(Ложь);
		КонецЕсли;
	Иначе
		Если ОчищатьФлажки Тогда
			Объект.ТаблицаСтатусов.Очистить();
		КонецЕсли;
		ЗаполнитьСтатусыНаСервереПорция(Ложь);
		Для Каждого СтрокаТаблицы Из Объект.ТаблицаСтатусов Цикл
			СтрокаТаблицы.СоздаватьЗаявкуПокупателя = Истина;
		КонецЦикла;
	КонецЕсли;
	Если Объект.КодСтатусаНаСкладе = 0 Или Объект.КодСтатусаВыдано = 0 Тогда
		сообщить("Заполните коды статусов на закладке «Настройки»");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыНаСервереПорция(ОчищатьФлажки = Ложь, АдресСервиса = "", Пользователь = "", Пароль = "")
	Если АдресСервиса = "" Тогда
		АдресСервиса = Объект.АдресСервиса;
	КонецЕсли;
	Если Пользователь = "" Тогда
		Пользователь = Объект.Пользователь;
	КонецЕсли;
	Если Пароль = "" Тогда
		Пароль = Объект.Пароль;
	КонецЕсли;
	Если Объект.Заказы20 Тогда
		СписокЭлементов = Новый Массив;
		Структура = Новый Структура("id,name,color");
		//https://www.abcp.ru/wiki/API.TS.Admin#position_statuses
		Структура = Новый Структура("id,name,color", 1, "new - Новый", "FFFFFF"); СписокЭлементов.Добавить(Структура);
		Структура = Новый Структура("id,name,color", 2, "reservation - Бронь", "FFFF20"); СписокЭлементов.Добавить(Структура);
		Структура = Новый Структура("id,name,color", 3, "finished - Подтверждён/Завершен", "FFFF40"); СписокЭлементов.Добавить(Структура);
		Структура = Новый Структура("id,name,color", 4, "prepayment - Требуется предоплата", "FFFF60"); СписокЭлементов.Добавить(Структура);
		Структура = Новый Структура("id,name,color", 5, "orderPicking - Отгрузка", "00FFFF"); СписокЭлементов.Добавить(Структура);
		Структура = Новый Структура("id,name,color", 6, "delivery - Доставка", "20FFFF"); СписокЭлементов.Добавить(Структура);
		Структура = Новый Структура("id,name,color", 7, "canceled - Аннулировано", "FF0000"); СписокЭлементов.Добавить(Структура);
		Структура = Новый Структура("id,name,color", 8, "supOrder - Заказ поставщику", "00FF00"); СписокЭлементов.Добавить(Структура);
		Структура = Новый Структура("id,name,color", 9, "supOrderCanceled - Заказ поставщику Отказ", "FF8000"); СписокЭлементов.Добавить(Структура);
	Иначе
		ТекстЗапроса = "/cp/statuses?userlogin="+Пользователь+"&userpsw="+Пароль;
		Если Объект.Отладка Тогда
			сообщить(АдресСервиса+ТекстЗапроса);
		КонецЕсли;
		ЗаписьВЛог(ТекстЗапроса,3);
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = Ответ.КодСостояния;
		СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат;
		КонецЕсли;
		//Сообщить(СтрокаОтвет);
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	КонецЕсли;

	НС = 0;
	ПредыдущаяТаблицаСтатусов = Объект.ТаблицаСтатусов.Выгрузить();
	Если ОчищатьФлажки Тогда
		Объект.ТаблицаСтатусов.Очистить();
	КонецЕсли;
	Для Каждого Элемент Из СписокЭлементов Цикл
		НС = НС + 1;
		Если НЕ ОчищатьФлажки Тогда
			НайденныеСтроки = Объект.ТаблицаСтатусов.НайтиСтроки(Новый Структура("КодСтатуса", Элемент.id));
			Если НайденныеСтроки.Количество() > 0 Тогда
				//ЗаполнитьЗначенияСвойств(НовСтрока, НайденныеСтроки[0], "СоздаватьЗаявкуПокупателя, СоздаватьЗаказПоставщикам, СоздаватьПоступление, СоздаватьРеализацию");
				НайденныеСтроки[0].НаименованиеСтатуса = Элемент.name;
				НайденныеСтроки[0].АдресСервиса = АдресСервиса;
				НайденныеСтроки[0].Пользователь = Пользователь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НовСтрока = Объект.ТаблицаСтатусов.Добавить();
		НовСтрока.Порядок = НС;
		НаименованиеСтатуса = Элемент.name;
		НовСтрока.НаименованиеСтатуса = НаименованиеСтатуса;
		НовСтрока.ЦветСтатуса = Элемент.color;
		КодСтатуса = Элемент.id;
		НовСтрока.КодСтатуса = КодСтатуса;
		НовСтрока.АдресСервиса = АдресСервиса;
		НовСтрока.Пользователь = Пользователь;
		Если НЕ ОчищатьФлажки Тогда
			//ищем в предыдущей таблице флажки и вставляем в новую таблицу
			НайденныеСтроки = ПредыдущаяТаблицаСтатусов.НайтиСтроки(Новый Структура("КодСтатуса", НовСтрока.КодСтатуса));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НовСтрока, НайденныеСтроки[0], "СоздаватьЗаявкуПокупателя, СоздаватьЗаказПоставщикам, СоздаватьПоступление, СоздаватьРеализацию");
				НайденныеСтроки[0].АдресСервиса = АдресСервиса;
				НайденныеСтроки[0].Пользователь = Пользователь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого НовСтрока Из Объект.ТаблицаСтатусов Цикл
		ННаименованиеСтатуса = НРег(НовСтрока.НаименованиеСтатуса);
		КодСтатуса = НовСтрока.КодСтатуса;
		Если Найти(ННаименованиеСтатуса,"склад") > 0 Тогда
			Объект.КодСтатусаНаСкладе = КодСтатуса;
			Объект.СтатусПослеПоступления = КодСтатуса;
		ИначеЕсли Найти(ННаименованиеСтатуса,"поступил") > 0 Тогда
			Объект.КодСтатусаНаСкладе = КодСтатуса;
			Объект.СтатусПослеПоступления = КодСтатуса;
		ИначеЕсли Найти(ННаименованиеСтатуса,"выдан") > 0 Тогда
			Объект.КодСтатусаВыдано = КодСтатуса;
			Объект.СтатусПослеРеализации = КодСтатуса;
		ИначеЕсли Найти(ННаименованиеСтатуса,"отказ") > 0 Тогда
			Объект.КодСтатусаОтказ = КодСтатуса;
		ИначеЕсли Найти(ННаименованиеСтатуса,"возврат") > 0 Тогда
			Объект.КодСтатусаВозврат = КодСтатуса;
		ИначеЕсли Найти(ННаименованиеСтатуса,"новый") > 0 Тогда
			Объект.КодСтатусаНовый = КодСтатуса;
		ИначеЕсли Найти(ННаименованиеСтатуса,"в работе") > 0 Тогда
			Объект.КодСтатусаВРаботе = КодСтатуса;
		ИначеЕсли Найти(ННаименованиеСтатуса, "пришло") > 0 И Найти(ННаименованиеСтатуса, "склад") > 0 Тогда
			Объект.КодСтатусаНаСкладе = КодСтатуса;
			Объект.СтатусПослеПоступления = КодСтатуса;
		ИначеЕсли Найти(ННаименованиеСтатуса,"выдач") > 0 Тогда
			Объект.КодСтатусаГотовКВыдаче = КодСтатуса;
		КонецЕсли;
	КонецЦикла;	
	Объект.ТаблицаСтатусов.Сортировать("КодСтатуса");
	РаскраситьСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполнитьСтатусы(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
       	ЗаполнитьСтатусыНаСервере(Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьСтатусыНаСервере(Ложь);
	Иначе
		Возврат;
    КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьСтатусы(Команда)
	Если Объект.ТаблицаСтатусов.Количество() = 0 Тогда
		ЗаполнитьСтатусыНаСервере(Ложь);
 		Возврат;
	КонецЕсли;
	Режим = РежимДиалогаВопрос.ДаНетОтмена;
	Оповещение = Новый ОписаниеОповещения("ОповещениеЗаполнитьСтатусы", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Очистить флажки?", Режим, 0);
КонецПроцедуры

&НаСервере
Процедура ПолучитьОплатыНаСервере(Свежие = Ложь)
	Если Лев(Объект.АдресСервиса, 7) = "id22842" Тогда
		id22842 = Истина;
	Иначе
		id22842 = Ложь;
	КонецЕсли;
	//http://docs.abcp.ru/wiki/API:Docs#.D0.9F.D0.BE.D0.BB.D1.83.D1.87.D0.B5.D0.BD.D0.B8.D0.B5_.D0.B8.D0.BD.D1.84.D0.BE.D1.80.D0.BC.D0.B0.D1.86.D0.B8.D0.B8_.D0.BE.D0.B1_.D0.BE.D0.BF.D0.BB.D0.B0.D1.82.D0.B0.D1.85_.D0.B8.D0.B7_.D1.84.D0.B8.D0.BD.D0.BC.D0.BE.D0.B4.D1.83.D0.BB.D1.8F
	//сначала заполняем клиентов
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//ТаблицаОплат
	Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ВернутьТаблицуОплат(,,Свежие).Выгрузить());
	Если Объект.ТипПлатежаНаличный = 0 Тогда
		Объект.ТипПлатежаНаличный = ОбработкаОбъект.ТипПлатежаНаличный;
	КонецЕсли;
	Если Объект.ТипПлатежаЭлектронный = 0 Тогда
		Объект.ТипПлатежаЭлектронный = ОбработкаОбъект.ТипПлатежаЭлектронный;
	КонецЕсли;
	Если Элементы.paymentOrderLinks.Видимость Тогда
		Объект.paymentOrderLinks.Загрузить(ОбработкаОбъект.paymentOrderLinks.Выгрузить());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОплаты(Команда)
	ПолучитьОплатыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСвежиеОплаты(Команда)
	ПолучитьОплатыНаСервере(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовПриИзменении(Элемент)
	//ТаблицаСкладовПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыОплатыНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ВернутьДокументыОплатыНаСервере().Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыОплаты(Команда)
	СоздатьДокументыОплатыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоставщика(Команда)
	Если ЭтаФорма.Элементы.ТаблицаСкладов.ВыделенныеСтроки.Количество() = 1 Тогда
		ТД = ЭтаФорма.Элементы.ТаблицаСкладов.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТД.Контрагент) Тогда
			Возврат;
		КонецЕсли;
		//создаем поставщика по текущей строке
		НаименованиеПоставщика = ТД.НаименованиеПоставщика;
		ИдПоставщика = ТД.ИдентификаторПоставщика;
		Контрагент = СоздатьПоставщикаСервер(НаименованиеПоставщика, ИдПоставщика);
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Контрагент = Контрагент;
	Иначе
		Для Каждого Номер Из ЭтаФорма.Элементы.ТаблицаСкладов.ВыделенныеСтроки Цикл
			ЭтаФорма.Элементы.ТаблицаСкладов.ТекущаяСтрока = Номер;
			ТД = ЭтаФорма.Элементы.ТаблицаСкладов.ТекущиеДанные;
			Если ЗначениеЗаполнено(ТД.Контрагент) Тогда
				Продолжить;
			КонецЕсли;
			//создаем поставщика по текущей строке
			НаименованиеПоставщика = ТД.НаименованиеПоставщика;
			ИдПоставщика = ТД.ИдентификаторПоставщика;
			Контрагент = СоздатьПоставщикаСервер(НаименованиеПоставщика, ИдПоставщика);
			ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Контрагент = Контрагент;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьПоставщикаСервер(НаименованиеПоставщика, ИдПоставщика)
	//создаем контрагента и клиента
	//НачатьТранзакцию();
	
	НайденныйПартнер = Справочники.Партнеры.НайтиПоНаименованию(НаименованиеПоставщика, Истина);
	Если НайденныйПартнер = Справочники.Партнеры.ПустаяСсылка() Тогда
		Партнер = Справочники.Партнеры.СоздатьЭлемент();
		Партнер.Наименование = НаименованиеПоставщика;
		Партнер.НаименованиеПолное = НаименованиеПоставщика;
		//Партнер.ОсновнойМенеджер = НайтиДобавитьОтветственногоПоИдентификатору(Число(НовСтрока.ИдентификаторМенеджера));
		ТекстСообщения = "добавлен партнер-поставщик: "+СокрЛП(Партнер.Наименование);//+", Идентификатор менеджера "+НовСтрока.employeeId;
		ЗаписьВЛог(ТекстСообщения)
	Иначе
		Партнер = НайденныйПартнер.ПолучитьОбъект(); 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НайденныйПартнер) Тогда
		Партнер.Поставщик = Истина;
		Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		Партнер.Записать();
	КонецЕсли;
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();//СоздатьПоставщикаСервер
	Контрагент.Партнер = Партнер.Ссылка;
	Контрагент.Наименование = НаименованиеПоставщика;
	Контрагент.НаименованиеПолное = НаименованиеПоставщика;
	Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	//Контрагент.ДополнительнаяИнформация //Дополнительная информация о контактном лице. Доступна для изменения партнером при самообслуживании.
	Контрагент.Записать();
	////http://forum.infostart.ru/forum33/topic107160/
    
	//добавляем свойство
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей(); 
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("distributorId (Контрагент");
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Контрагент.Ссылка;
	МенеджерЗаписи.Свойство = Свойство;
	МенеджерЗаписи.Значение = ИдПоставщика;
	МенеджерЗаписи.Записать();
	//ЗафиксироватьТранзакцию();
	ТекстСообщения = "добавлен поставщик: "+СокрЛП(Контрагент.Наименование)+", идентификатор "+СокрЛП(ИдПоставщика);
	ЗаписьВЛог(ТекстСообщения);
	Возврат Контрагент.Ссылка;	
КонецФункции

&НаКлиенте
Процедура ТаблицаСкладовПриАктивизацииСтроки(Элемент)
	Возврат;
	
	Попытка
		КнопкаСоздатьПоставщика = ЭтаФорма.Элементы.ТаблицаСкладов.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаСкладовСоздатьПоставщика;
		Если Элемент.ТекущиеДанные.Выгружать Тогда
			КнопкаСоздатьПоставщика.Заголовок = "Уже создан";
			КнопкаСоздатьПоставщика.Доступность = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контрагент) Тогда
			КнопкаСоздатьПоставщика.Заголовок = "Уже создан";
			КнопкаСоздатьПоставщика.Доступность = Ложь;
		Иначе
			Если ЭтаФорма.Элементы.ТаблицаСкладов.ВыделенныеСтроки.Количество()>1 Тогда
				КнопкаСоздатьПоставщика.Заголовок = "Создать несколько";
			Иначе
				НаименованиеПоставщика = Элемент.ТекущиеДанные.НаименованиеПоставщика;
				КнопкаСоздатьПоставщика.Заголовок = "Создать поставщика «"+СтрЗаменить(НаименованиеПоставщика, " [online]", "")+"»";
			КонецЕсли;
			КнопкаСоздатьПоставщика.Доступность = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьОстаткиПоВсемСкладамНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если НЕ ОбработкаОбъект.ПараметрыЗаполнены(, Истина) Тогда
		сообщить("Не все параметры заполнены");
		Возврат;
	КонецЕсли;
	ОбработкаОбъект.ВыгрузитьОстаткиПоСкладам();
	//Для Каждого ТекСтрока Из Объект.ТаблицаСкладов Цикл
	//	Если НЕ ТекСтрока.Выгружать Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	сообщить("Выгружаем остатки по складу: "+ТекСтрока.Склад);
	//	Объект.ТЗОстатки.Загрузить(ОбработкаОбъект.ПолучитьОстатки(Истина, Объект.ВидЦены, ТекСтрока.Склад).Выгрузить());
	//	ОбработкаОбъект.ВыгрузитьПрайсНаСайт();//не работает корректно интерактивно, так как надо передавать ид поставщика. Переделать, как в РМА
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОстаткиПоВсемСкладам(Команда)
	ВыгрузитьОстаткиПоВсемСкладамНаСервере();
	//ПоказатьОповещениеПользователя(,,"Выгружаем остатки");
КонецПроцедуры

&НаСервере
Процедура КлиентИзменитьЛимитКредитаНаСервере(ДоговорКонтрагента, ДопустимаяСуммаЗадолженности)
	//это в базе, это пока не нужно
	//Об = ДоговорКонтрагента.ПолучитьОбъект();
	//Об.ДопустимаяСуммаЗадолженности = ДопустимаяСуммаЗадолженности;
	//Об.Записать();
КонецПроцедуры

&НаКлиенте
Процедура КлиентИзменитьЛимитКредита(ДоговорКонтрагента, ДопустимаяСуммаЗадолженности)
	ТД = ЭтаФорма.Элементы.ТЗКлиенты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ДопустимаяСуммаЗадолженности = ТД.creditLimit;
	КЧ = Новый КвалификаторыЧисла(15,2);
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , , КЧ);
	Если ВвестиЗначение(ДопустимаяСуммаЗадолженности, "Введите лимит кредита", ОписаниеТиповЧ) Тогда
		КлиентИзменитьЛимитКредитаНаСервере(ТД, ДопустимаяСуммаЗадолженности);
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.creditLimit = ДопустимаяСуммаЗадолженности;
	КонецЕсли;
КонецПроцедуры

&НаСервере
//выгружаем отсрочку платежа в ABCP
Процедура КлиентИзменитьОтсрочкуПлатежаНаСервере(ИдентификаторКлиента, СрокОплаты)
	//ИдентификаторКлиента = СтрокаКлиента.ИдентификаторКонтрагента;
	//Контрагент = СтрокаКлиента.Контрагент;
	//Если Объект.ФинансовыйМодульВключен Тогда
	//	ТекстСообщения = "включен финансовый модуль, ручной баланс не выгружается";
	//	ЗаписьВЛог(ТекстСообщения,3);
	//	Возврат;
	//КонецЕсли;
	АдресСервиса = Объект.АдресСервиса;
	Пользователь = Объект.Пользователь;
	Пароль = Объект.Пароль;
	ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль+"&userId="+Формат(ИдентификаторКлиента,"ЧГ=0")+"&payDelay="+Формат(СрокОплаты,"ЧГ=0");
	ИмяФайлаСТекстомЗапроса = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСТекстомЗапроса, КодировкаТекста.UTF8);//КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(ФрагментЗапроса);
	ЗаписьТекста.Закрыть();
	
	//отправим файл на сервер для обработки
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
	ФайлОтправки = Новый Файл(ИмяФайлаСТекстомЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/finance/userInfo?userlogin="+Пользователь+"&userpsw="+Пароль, , Пользователь, Пароль);
	//так тоже работает
	//HTTPЗапрос = Новый HTTPЗапрос("/cp/finance/userBalance");
	//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаСТекстомЗапроса);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//HTTPЗапрос.Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);	
	
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/finance/userBalance", ИмяВыходногоФайла, Заголовки);	
	КодСостояния = HTTPОтвет.КодСостояния;
	Если НЕ КодСостояния200(КодСостояния, , ИмяВыходногоФайла) Тогда
		ЕстьОшибка = Истина;
	Иначе
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла);
		ТекстИзФайла = ТекстовыйДокумент.ПолучитьТекст();
		ТекстСообщения = "Фрагмент ответа с сайта по контрагенту № "+ИдентификаторКлиента+": "+Лев(ТекстИзФайла,200)+" ... "+Прав(ТекстИзФайла,200);
		ЗаписьВЛог(ТекстСообщения,3,Истина);
		//ЧтениеJSON = Новый ЧтениеJSON;
		//ЧтениеJSON.ОткрытьФайл(ИмяВыходногоФайла);	
		//СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		//ЧтениеJSON.Закрыть();
		//ТекстСообщения =СокрЛП(Контрагент)+" идентификатор: " + СписокЭлементов.userId+", баланс на сайте = "+СписокЭлементов.balance;
		//ЗаписьВЛог(ТекстСообщения,3);
	КонецЕсли;
	Попытка
	    УдалитьФайлы(ИмяФайлаСТекстомЗапроса);
	Исключение
	КонецПопытки;
	Попытка
	    УдалитьФайлы(ИмяВыходногоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура КлиентИзменитьОтсрочкуПлатежа(Команда)
	ТД = ЭтаФорма.Элементы.ТЗКлиенты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	payDelay = ТД.payDelay;
	КЧ = Новый КвалификаторыЧисла(15,2);
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , , КЧ);
	Если ВвестиЗначение(payDelay, "Введите отсрочку платежа для изменения на сайте", ОписаниеТиповЧ) Тогда
		КлиентИзменитьОтсрочкуПлатежаНаСервере(ТД.ИдентификаторКонтрагента, payDelay);
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.payDelay = payDelay;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодобратьПоступленияНаСервере()
	Объект.ТаблицаПоступлений.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	//заполняем заявки "В работе", ищем к ним заказы поставщикам, к ним поступления и проверяем цены
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПоступления(Команда)
	ПодобратьПоступленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодобратьРеализацииНаСервере()
	Объект.ТаблицаРеализаций.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "";
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьРеализации(Команда)
	ПодобратьРеализацииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьЕстьСправочникСтатусыABCP()
	Возврат Метаданные.Справочники.Найти("СтатусыABCP") <> Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьЕстьРегистрНиракс_АВСРКонтрагенты()
	Возврат Метаданные.РегистрыСведений.Найти("Ниракс_АВСРКонтрагенты") <> Неопределено;
КонецФункции

Функция СкрыватьТиповыеСоглашения()
	ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	Если ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения Или
		ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьЕстьПродажаПоПатенту()
	Возврат Метаданные.Перечисления.ТипыНалогообложенияНДС.ЗначенияПеречисления.Найти("ПродажаПоПатенту") <> Неопределено;
КонецФункции
	
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЭтаФорма.Элементы.ТаблицаСтатусов.ФиксацияСлева = 3;
	ТекстСообщения = ПроверитьНастройкиФункциональныхОпций();
	Если ТекстСообщения<>"" Тогда
		сообщить(ТекстСообщения);
	КонецЕсли;
	Если Объект.АвтоматическоеИзменениеСтатусовНаСайтеПриПоступленииИРеализации Тогда
		Элементы.ИзменитьСостоянияВЗаказах.Видимость = Ложь;
		Элементы.ИзменитьСтатусыПослеПоступления.Видимость = Ложь;
		Элементы.ИзменитьСтатусыПослеРеализации.Видимость = Ложь;
	КонецЕсли;
	Если ПолучитьЕстьПродажаПоПатенту() Тогда
		Попытка
			Элементы.НалогообложениеНДСРеализация.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту"), "Продажа по патенту");
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если НЕ Объект.ИспользоватьОрдерныеСклады Тогда
		Элементы.СоздатьРазмещение.Видимость = Ложь;
	КонецЕсли;
	Если ПолучитьЕстьРегистрНиракс_АВСРКонтрагенты() Тогда
		Элементы.ЗаполнитьИзНиракс.Видимость = Истина;
	КонецЕсли;
	Если НЕ Объект.ИспользоватьОрдерныеСклады Тогда
		Элементы.ГруппаПриходныйОрдер.Видимость = Ложь;
	КонецЕсли;
	ИспользоватьСоглашенияСКлиентами = ПроверитьФункциональныеОпции("ИспользоватьСоглашенияСКлиентами");
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		Элементы.СоглашениеОпт.Видимость = Ложь;
		Элементы.СоглашениеРозница.Видимость = Ложь;
		Элементы.СоздаватьИндивидуальныеСоглашения.Видимость = Ложь;
	Иначе
		Если СкрыватьТиповыеСоглашения() Тогда
			Элементы.СоглашениеОпт.Видимость = Ложь;
			Элементы.СоглашениеРозница.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	//Элементы.ТаблицаСкладовПартнер.Видимость = Ложь;
	//Элементы.КодСтатусаГотовКВыдаче.Видимость = Ложь;
	//Элементы.КодСтатусаСНаличия.Видимость = Ложь;
	Если НЕ Объект.Франчайзи Тогда
		Элементы.СтраницаФранчайзи.Видимость = Ложь;
	КонецЕсли;
	Если Объект.ОтображатьВторостепенныеЗакладки Тогда
		Элементы.СтраницаЗаказыПоставщику.Видимость = Истина;
		Элементы.СтраницаEmail.Видимость = Истина;
		Элементы.СтраницаРеализация.Видимость = Истина;
	КонецЕсли;
	Если НЕ ПроверитьФункциональныеОпции("ИспользоватьСерииНоменклатуры") Тогда
		Элементы.ИспользоватьСерииНоменклатуры.Видимость = Ложь;
	КонецЕсли;
	ЕстьСправочникСтатусыABCP = ПолучитьЕстьСправочникСтатусыABCP();
	Если ЕстьСправочникСтатусыABCP Тогда
		Элементы.ТаблицаСтатусовЗаполнитьСправочникСтатусовВ1С.Видимость = Истина;
	КонецЕсли;
	Если Объект.ДокументыПоТипамПлатежей Тогда
		Элементы.БанковскийСчет.Доступность = Ложь;
		Элементы.Касса.Доступность = Ложь;
		Элементы.ЭквайринговыйТерминал.Доступность = Ложь;
		Элементы.КассаККМ.Доступность = Ложь;
	КонецЕсли;
	Если Лев(Объект.АдресСервиса, 6) = "id9652" Тогда
		Элементы.СинонимыБрендовСвойствоБренд.Видимость = Истина;
		Элементы.СинонимыБрендовПрефикс.Видимость = Истина;
	КонецЕсли;
	
	ЗаписьВЛог("Интерактивное открытие формы модуля",7);
	//КаталогИБ = НСтр(СтрокаСоединенияИнформационнойБазы(),"File");
	//Если КаталогИБ = "" Тогда
		СервернаяБаза = Истина;//для асинхронной загрузки файла прихода
	//Иначе
	//	СервернаяБаза = Ложь;
	//КонецЕсли;
	Объект.ЗагружатьНаКлиенте = Истина;
	Объект.ИспользоватьADO = Ложь;
	
	//ПоказатьОповещениеПользователя(,,ТекстСообщения);
	//ЭтаФорма.Элементы.ТаблицаСтатусовМенятьСтатусПриПоступлении.СписокВыбора = ПолучитьПереченьПоставщиков();
	//Список = Элемент.СписокВыбора;
	//Список.ЗагрузитьЗначения(ПолучитьПереченьПоставщиков().Выгрузить());
	ПроверитьКонтрольРабочегоНаименованияНоменклатуры();
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрольРабочегоНаименованияНоменклатуры()
	Если Константы.КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик.Получить() = Истина Тогда
		сообщить("Установлен контроль рабочего наименования, могут быть проблемы с созданием новой номенклатуры, рекомендуется отключить:
		|«НСИ и Администрирование» - «Настройка НСИ и разделов» - «Номенклатура» - «Настройки создания»");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтатусовМенятьСтатусПриПоступленииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	//Список = Элемент.СписокВыбора;
	//Список.ЗагрузитьЗначения(ПолучитьПереченьПоставщиков().Выгрузить());
	//заполнить список выбора
КонецПроцедуры

&НаСервере
Процедура ПолучитьБалансНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбновитьБалансКлиентов(Истина);
	Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ТаблицаКлиентов.Выгрузить());
	
	Возврат;

	userId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("userId");
	ДатаОбновленияСальдо = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("Дата обновления сальдо");
	ВыгруженноеСальдо = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("Выгруженное сальдо");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДополнительныеСведения.Объект КАК Контрагент,
	               |	ДополнительныеСведения.Значение КАК ИдентификаторКонтрагента
	               |ПОМЕСТИТЬ ВТКлиенты
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект.Ссылка ССЫЛКА Справочник.Контрагенты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	-РасчетыСКлиентамиОстатки.СуммаОстаток КАК Баланс,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК АналитикаУчетаПоПартнерамКонтрагент
	               |ПОМЕСТИТЬ ВТБалансы
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент В
	               |			(ВЫБРАТЬ
	               |				ВТКлиенты.Контрагент
	               |			ИЗ
	               |				ВТКлиенты)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект КАК Объект,
	               |	ДополнительныеСведения.Значение КАК ДатаОбновленияСальдо
	               |ПОМЕСТИТЬ ВТДатаСальдо
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект В
	               |			(ВЫБРАТЬ
	               |				ВТКлиенты.Контрагент
	               |			ИЗ
	               |				ВТКлиенты)
	               |	И ДополнительныеСведения.Свойство = &ДатаОбновленияСальдо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект КАК Объект,
	               |	ДополнительныеСведения.Значение КАК ВыгруженноеCальдо
	               |ПОМЕСТИТЬ ВТВыгруженноеСальдо
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект В
	               |			(ВЫБРАТЬ
	               |				ВТКлиенты.Контрагент
	               |			ИЗ
	               |				ВТКлиенты)
	               |	И ДополнительныеСведения.Свойство = &ВыгруженноеCальдо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТКлиенты.Контрагент КАК Контрагент,
	               |	ВТКлиенты.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	               |	ВТБалансы.Баланс КАК Баланс,
	               |	ВТДатаСальдо.ДатаОбновленияСальдо КАК ДатаОбновленияСальдо,
	               |	ВТВыгруженноеСальдо.ВыгруженноеCальдо КАК ВыгруженноеCальдо
	               |ИЗ
	               |	ВТКлиенты КАК ВТКлиенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТБалансы КАК ВТБалансы
	               |		ПО ВТКлиенты.Контрагент = ВТБалансы.АналитикаУчетаПоПартнерамКонтрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаСальдо КАК ВТДатаСальдо
	               |		ПО ВТКлиенты.Контрагент = ВТДатаСальдо.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыгруженноеСальдо КАК ВТВыгруженноеСальдо
	               |		ПО ВТКлиенты.Контрагент = ВТВыгруженноеСальдо.Объект";
	//если были взаиморасчеты по документам и без, то неправильно считает |	И РасчетыСКлиентамиОстатки.ЗаказКлиента.Ссылка ЕСТЬ NULL 
	Запрос.УстановитьПараметр("Свойство", userId);
	Запрос.УстановитьПараметр("ДатаОбновленияСальдо", ДатаОбновленияСальдо);
	Запрос.УстановитьПараметр("ВыгруженноеCальдо", ВыгруженноеСальдо);
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Объект.ТаблицаКлиентов.Загрузить(Результат.Выгрузить());
	Для Каждого ТекСтрока Из Объект.ТаблицаКлиентов Цикл
		Если ТекСтрока.Баланс <> ТекСтрока.ВыгруженноеСальдо Тогда
			ТекСтрока.Обновить = Истина;
		КонецЕсли;
	КонецЦикла;
	ОбработкаОбъект.ВыгрузитьБалансИФинансовуюИнформацию();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьБаланс(Команда)
	ПолучитьБалансНаСервере();
КонецПроцедуры

&НаСервере
Функция НезакрытыеЗаказыПоставщикуНаСервере(ПерезаполнитьМассивАртикулов = Ложь)
	Если Не ЗначениеЗаполнено(Объект.ВариантОбеспечения) Тогда
		Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СтатусПослеПоступления) Тогда
		сообщить("Заполните статус, на который меняются заказы на сайте при поступлении");
	КонецЕсли;
	Объект.ПоступлениеТоваровУслуг = "";
	Объект.ПриходныйОрдерНаТовары = "";
	Объект.ОтборРазмещениеТоваров = "";
	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Массив = Новый Массив;
	// Вставить содержимое обработчика.
	//ЗаполнитьПоЗаказуСервер() - в поступлении
	//ПоступлениеТоваровУслуг МодульМенеджера
	//очень большой запрос, делаем проще
	Если Не ПерезаполнитьМассивАртикулов Тогда
		Объект.ТаблицаПоступленийОтбор.Очистить();
		Объект.ТаблицаПоступлений.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		               |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
		               |	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК Количество,
		               |	ЗаказыПоставщикамОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
		               |	ЗаказыПоставщикамОстатки.Номенклатура.Артикул КАК Артикул,
		               |	ЗаказыПоставщикамОстатки.Номенклатура.Производитель КАК Производитель,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование КАК ЗаказКлиента,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.Контрагент КАК Контрагент,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.НомерПоДаннымКлиента КАК НомерЗаявки,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата КАК ЗаказПоставщикуДата,
		               |	ЗаказыПоставщикамОстатки.КодСтроки КАК КодСтроки,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент КАК Поставщик,
		               |	ЗаказыПоставщикамОстатки.Склад КАК Склад,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Организация КАК Организация,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Соглашение КАК Соглашение,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Договор КАК Договор,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ПоступлениеОднойДатой КАК ПоступлениеОднойДатой,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, ) КАК ЗаказыПоставщикамОстатки
		               |ГДЕ
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент = &Контрагент
		               |	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата > &СДаты
		               |	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЗаказПоставщикуДата";
		Если НЕ Объект.НеУчитыватьЗакрытыеЗаказыПоставщикам Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)", "");
		КонецЕсли;
		Запрос.УстановитьПараметр("Контрагент", Объект.Поставщик);
		Запрос.УстановитьПараметр("НаДату", ТекущаяДатаСеанса());
		Если ЗначениеЗаполнено(Объект.ДатаНачалаУчета) Тогда
			Запрос.УстановитьПараметр("СДаты", Объект.ДатаНачалаУчета);
		Иначе
			Запрос.УстановитьПараметр("СДаты", ДобавитьМесяц(ТекущаяДатаСеанса(),-6));
		КонецЕсли;
		Если Объект.УТ111 Тогда
			//если статус не будет Закрыт, тогда в движениях по регистру "Заказы поставщикам" не заполнится реквизит "К оформлению" (текст запроса в процедуре ТекстЗапросаТаблицаЗаказыПоставщикам())
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)", "");
		КонецЕсли;
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Массив;
		КонецЕсли;
		Объект.ТаблицаПоступлений.Загрузить(Результат.Выгрузить());
	КонецЕсли;
	
	//в отбор могут попасть отменённые позиции
	Структура = Новый Структура("Отменено,КодСтроки", Истина,0);
	СтруктураДатаПоступления = Новый Структура("КодСтроки", 0);
	МассивОтменённыхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаПоступлений Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказКлиента) Тогда
			Продолжить;
		КонецЕсли;
		Структура.КодСтроки = СтрокаТаблицы.ИдентификаторНоменклатуры;
		Если Структура.КодСтроки = 0 Тогда
			Структура.КодСтроки = СтрокаТаблицы.КодСтроки;
		КонецЕсли;
		//Если Объект.Отладка Тогда
		//	сообщить(Формат(Структура.КодСтроки,"ЧГ=0"))
		//КонецЕсли;
		НСтроки = СтрокаТаблицы.ЗаказКлиента.Товары.НайтиСтроки(Структура);
		Для Каждого НСтрока Из НСтроки Цикл
			Дата7дней = ТекущаяДата()-3600*24*7;
			СтрокаТаблицы.ДатаОтгрузки = НСтрока.ДатаОтгрузки;
			МассивОтменённыхСтрок.Добавить(СтрокаТаблицы);
			Если СтрокаТаблицы.ДатаОтгрузки > Дата7дней Тогда
				ЗаписьВЛог("Найден отмененный "+СтрокаТаблицы.Артикул+", № заказа "+Формат(СтрокаТаблицы.НомерЗаявки,"ЧГ=0")+", позиция "+Формат(Структура.КодСтроки,"ЧГ=0"), , Объект.Отладка);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПоставщику) Тогда
			Если НЕ СтрокаТаблицы.ПоступлениеОднойДатой Тогда
				СтруктураДатаПоступления.КодСтроки = СтрокаТаблицы.ИдентификаторНоменклатуры;
				Если СтруктураДатаПоступления.КодСтроки = 0 Тогда
					СтруктураДатаПоступления.КодСтроки = СтрокаТаблицы.КодСтроки;
				КонецЕсли;
				НСтроки = СтрокаТаблицы.ЗаказПоставщику.Товары.НайтиСтроки(СтруктураДатаПоступления);
				Для Каждого НСтрока Из НСтроки Цикл
					СтрокаТаблицы.ДатаПоступления = НСтрока.ДатаПоступления;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если МассивОтменённыхСтрок.Количество()>0 Тогда
		Попытка
			//сообщить("Удаляем из списка отменённые позиции "+МассивОтменённыхСтрок.Количество());
			Для Каждого УдаляемаяСтрока Из МассивОтменённыхСтрок Цикл
				Объект.ТаблицаПоступлений.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		Исключение
			сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Структура = Новый Структура("КодСтроки", Истина,0);
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаПоступлений Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказКлиента) Тогда
			Продолжить;
		КонецЕсли;
		Структура.КодСтроки = СтрокаТаблицы.ИдентификаторНоменклатуры;
		Если Структура.КодСтроки = 0 Тогда
			Структура.КодСтроки = СтрокаТаблицы.КодСтроки;
		КонецЕсли;
		НСтроки = СтрокаТаблицы.ЗаказКлиента.Товары.НайтиСтроки(Структура);
		Для Каждого НСтрока Из НСтроки Цикл
			СтрокаТаблицы.ДатаОтгрузки = НСтрока.ДатаОтгрузки;
		КонецЦикла;
	КонецЦикла;
	Если Лев(Объект.АдресСервиса, 7) = "id16943" Тогда
		Объект.ТаблицаПоступлений.Сортировать("ДатаОтгрузки,ЗаказКлиента");
	КонецЕсли;
	Массив = ДозаполнитьНезакрытыеЗаказыПоставщикуНаСервере(ПерезаполнитьМассивАртикулов);
	Возврат Массив;
КонецФункции

Функция ДозаполнитьНезакрытыеЗаказыПоставщикуНаСервере(ПерезаполнитьМассивАртикулов = Ложь, ПоСтроке = Неопределено)
	//проходим по каждой строке ищем позиции в заказе поставщика и заказе клиента и дозаполняем колонки
	//Структура = Новый Структура("Номенклатура,Количество");
	Структура = Новый Структура("Номенклатура,КодСтроки");
	СтруктураСтарая = Новый Структура("Номенклатура,Количество");
	Для Каждого ТекСтрока Из Объект.ТаблицаПоступлений Цикл
		Если ПоСтроке <> Неопределено Тогда
			Если ТекСтрока <> ПоСтроке Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока.Количество < 0 Тогда
			ТекСтрока.ЦенаЗакупки = 0;
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
			ТекСтрока.Количество = 0;
		КонецЕсли;
		Структура.Номенклатура = ТекСтрока.Номенклатура;
		Структура.КодСтроки = ТекСтрока.КодСтроки;
		НайденныеСтроки = ТекСтрока.ЗаказПоставщику.Товары.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() > 1 Тогда
			сообщить(""+ТекСтрока.ЗаказПоставщику+", несколько одинаковых позиций: "+ТекСтрока.Номенклатура+", код строки "+ТекСтрока.КодСтроки);
		КонецЕсли;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Отменено Тогда
				Продолжить;
			КонецЕсли;
			ТекСтрока.ЦенаЗакупки = НайденнаяСтрока.Цена;
			ТекСтрока.КодСтроки = НайденнаяСтрока.КодСтроки;
			Прервать;
		КонецЦикла;
		НайденныеСтроки = ТекСтрока.ЗаказКлиента.Товары.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ТекСтрока.ВариантОбеспечения = НайденнаяСтрока.ВариантОбеспечения;
				Если НайденнаяСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
					ТекСтрока.ЦенаПродажи = НайденнаяСтрока.Цена;
					Прервать;
				Иначе
					//может быть, тоже удалять из списка - лучше блокировать
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтруктураСтарая.Номенклатура = ТекСтрока.Номенклатура;
			СтруктураСтарая.Количество = ТекСтрока.Количество;
			НайденныеСтроки = ТекСтрока.ЗаказКлиента.Товары.НайтиСтроки(СтруктураСтарая);
			Если НайденныеСтроки.Количество() > 1 Тогда
				сообщить(""+ТекСтрока.ЗаказКлиента+", несколько одинаковых позиций: "+ТекСтрока.Номенклатура);
			КонецЕсли;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ТекСтрока.ВариантОбеспечения = НайденнаяСтрока.ВариантОбеспечения;
				ТекСтрока.ЦенаПродажи = НайденнаяСтрока.Цена;
				Если НайденнаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
					сообщить(""+ТекСтрока.ЗаказКлиента+", уже «Отгрузить»: "+ТекСтрока.Номенклатура);
				КонецЕсли;
			КонецЦикла;
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТекСтрока.ЗаказКлиента.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
				ТекстСообщения = ""+ТекСтрока.ЗаказКлиента+", не нашли по товару и количеству (возможно, был изменён заказ поставщику, или заказ франча, или отказная позиция), ищем по товару: "+ТекСтрока.Номенклатура;
				Если НайденныеСтроки.Количество() > 1 Тогда
					сообщить(""+ТекСтрока.ЗаказКлиента+", несколько одинаковых позиций: "+ТекСтрока.Номенклатура);
				КонецЕсли;
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ТекСтрока.ВариантОбеспечения = НайденнаяСтрока.ВариантОбеспечения;
					ТекСтрока.ЦенаПродажи = НайденнаяСтрока.Цена;
					Если НайденнаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
						сообщить(""+ТекСтрока.ЗаказКлиента+", уже «Отгрузить»: "+ТекСтрока.Номенклатура);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//ищем отказные позиции и удаляем их из табличной части
	Структура = Новый Структура("ЦенаЗакупки",0);
	СписокОтказных = Новый СписокЗначений;
	НайденныеСтроки = Объект.ТаблицаПоступлений.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.ТаблицаПоступлений.Удалить(НайденнаяСтрока);
	КонецЦикла;
	//привязанные к платежам заказы клиентов нельзя разделять, поэтому их надо заблокировать
	ТЗ = Объект.ТаблицаПоступлений.Выгрузить();
	ТЗ.Свернуть("Артикул");
	Массив = ТЗ.ВыгрузитьКолонку("Артикул");
	ТЗП = Объект.ТаблицаПоступлений.Выгрузить();
	ТЗП.Свернуть("НомерЗаявки,ЗаказКлиента");
	
	//проходим по всем заказам, получаем связанную таблицу, из которой получаем routeId, deadline
	КлючОбъекта  = "ABCP_1C";
	ИмяПользователя = "Администратор";//иначе другие пользователи не будут иметь доступа к этой таблице значений 
	Для Каждого СтрокаНомерЗаявки Из ТЗП Цикл
		КлючНастроек = "ЗаказКлиента_"+Формат(СтрокаНомерЗаявки.НомерЗаявки,"ЧГ=0");
		Попытка
			СтатусыABCPЗаказа = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователя);
		Исключение
			//ТекстСообщения = "не найдена связанная таблица по заказу "+Формат(СтрокаНомерЗаявки.НомерЗаявки,"ЧГ=0")+", "+СтрокаНомерЗаявки.ЗаказКлиента;
			//ЗаписьВЛог(ТекстСообщения, 5, Ложь);
			Продолжить;
		КонецПопытки;
		Если СтатусыABCPЗаказа = Неопределено Тогда
			ТекстСообщения = "не найдена связанная таблица по заказу "+Формат(СтрокаНомерЗаявки.НомерЗаявки,"ЧГ=0")+", "+СтрокаНомерЗаявки.ЗаказКлиента;
			ЗаписьВЛог(ТекстСообщения, 5, Ложь);
			Продолжить;
		КонецЕсли;
		СтруктураПоиска = Новый Структура("КодСтроки");
		Для Каждого ТекСтрока Из СтатусыABCPЗаказа Цикл
			СтруктураПоиска.КодСтроки = ТекСтрока.ИдентификаторНоменклатуры;
			НайденныеСтроки = Объект.ТаблицаПоступлений.НайтиСтроки(СтруктураПоиска);
			Попытка
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, ТекСтрока, "routeId,deadline");
				КонецЦикла;
			Исключение
				//в старых заказах этих колонок нет
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Если Объект.РазделятьПозицииЗаказовПриНеобходимости Тогда
		//сообщить("Всего поступлений по поставщику: "+Объект.ТаблицаПоступлений.Количество());
		НС = 0;
		НомераПлатежей = "";
		Для Каждого ТекСтрока Из ТЗП Цикл
			НомераПлатежей = НомераПлатежей+"&orderIds[]="+Формат(ТекСтрока.НомерЗаявки,"ЧГ=0");
			//может быть слишком много платежей, надо предусмотреть порциями
		КонецЦикла;
		ТекстЗапроса = "cp/finance/paymentOrderLinks?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль+НомераПлатежей;
		HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = Ответ.КодСостояния;
		СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат Массив;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		Попытка
			СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		Исключение
			ЧтениеJSON.Закрыть();
			ТекстСообщения = "ошибка обработки оплат для привязки к поставщику с сайта в формате JSON, ответ сервера:"+СтрокаОтвет;
			ЗаписьВЛог(ТекстСообщения,6,Истина);
			Возврат Массив;
		КонецПопытки;
		ЧтениеJSON.Закрыть();
		Структура = Новый Структура("НомерЗаявки");
		Для Каждого Элемент Из СписокЭлементов Цикл
			Структура.НомерЗаявки = Число(Элемент.orderId);
			НайденныеСтроки = Объект.ТаблицаПоступлений.НайтиСтроки(Структура);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Элемент);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьШтрихКодыПоступлениеРеализация();
	Возврат Массив;
КонецФункции

Процедура ЗаполнитьШтрихКодыПоступлениеРеализация(Реализация = Ложь, ЗаказПоставщику = Ложь)
	Запрос = Новый Запрос;
	//заполняем штрих-коды
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШтрихкодыНоменклатуры.Штрихкод,
	               |	ШтрихкодыНоменклатуры.Номенклатура
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |ГДЕ
	               |	ШтрихкодыНоменклатуры.Номенклатура.Ссылка В(&Ссылка)";
	Если ЗаказПоставщику Тогда
		Запрос.УстановитьПараметр("Ссылка", Объект.ТаблицаЗаказовПоставщикам.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Иначе
		Если Реализация Тогда
			Запрос.УстановитьПараметр("Ссылка", Объект.ТаблицаРеализаций.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		Иначе
			Запрос.УстановитьПараметр("Ссылка", Объект.ТаблицаПоступлений.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		КонецЕсли;
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Структура = Новый Структура("Номенклатура");
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Структура.Номенклатура = Выборка.Номенклатура; 
		Если ЗаказПоставщику Тогда
			НайденныеСтроки = Объект.ТаблицаЗаказовПоставщикам.НайтиСтроки(Структура);
		Иначе
			Если Реализация Тогда
				НайденныеСтроки = Объект.ТаблицаРеализаций.НайтиСтроки(Структура);
			Иначе
				НайденныеСтроки = Объект.ТаблицаПоступлений.НайтиСтроки(Структура);
			КонецЕсли;
		КонецЕсли;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ШтрихКод = Выборка.ШтрихКод;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//заполняет уникальный идентификатор позиции в ABCP в ТаблицаПоступленийОтбор на закладке "Поступления"
//не вызывает ниоткуда, устаревшая процедура, когда не было сохранения id позиции в коде строки
&НаСервере
Процедура ЗаполнитьИдентификаторыНоменклатуры(Вид = "Поступление")
	ТекстЗапроса = "/cp/order?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль+"&number=";
	СтруктураСКоличеством = Новый Структура("Номенклатура");
	СтруктураСКоличеством.Вставить("Количество");
	СтруктураСКоличеством.Вставить("НомерЗаявки");
	//ЗаписьВЛог(ТекстЗапроса);
	HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
	Если Вид = "Поступление" Тогда
		Для Каждого ТекСтрока Из Объект.ТаблицаПоступлений Цикл
			//сообщить(ТекстЗапроса+Формат(ТекСтрока.НомерЗаявки,"ЧГ=0"));
			HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса+Формат(ТекСтрока.НомерЗаявки,"ЧГ=0"));
			Ответ = HTTPСоединение.Получить(HTTPЗапрос);
			КодСостояния = Ответ.КодСостояния;
			СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
			Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
				Продолжить;
			КонецЕсли;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
			Элемент = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			Для Каждого Позиция Из Элемент.positions Цикл
				Производитель = ОбработкаОбъект.НайтиДобавитьБренд(СокрЛП(Позиция.brand));
				Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(СокрЛП(Позиция.number), Производитель, Позиция);
				ИдентификаторНоменклатуры = Позиция.id;
				Количество = Число(Позиция.quantityFinal);
				Цена = Число(Позиция.priceIn);
				СтруктураСКоличеством.НомерЗаявки = ТекСтрока.НомерЗаявки;
				СтруктураСКоличеством.Номенклатура = Номенклатура;
				СтруктураСКоличеством.Количество = Количество;
				НайденныеСтроки = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(СтруктураСКоличеством);
				Если НайденныеСтроки.Количество()>0 Тогда
					ТекСтрока.ИдентификаторНоменклатуры = ИдентификаторНоменклатуры;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#Область ЗакладкаПоступление
&НаКлиенте
Процедура НезакрытыеЗаказыПоставщику(Команда)
	//если есть основной поставщик, то надо по нескольким поставщикам брать
	Если НЕ ЗначениеЗаполнено(Объект.ВариантОбеспечения) Тогда
		Объект.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		сообщить("Заполните поставщика");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СтатусПослеПоступления) Тогда
		сообщить("Заполните статус после поступления");
		Возврат;
	КонецЕсли;
	Массив = НезакрытыеЗаказыПоставщикуНаСервере();
	Элементы.АртикулПоступление.СписокВыбора.ЗагрузитьЗначения(Массив);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЗаказовПоставщику()
	СписокЗаказовПоставщику = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПоставщику.Ссылка КАК Ссылка,
		|	ЗаказПоставщику.Дата КАК Дата,
		|	ЗаказПоставщику.НомерПоДаннымПоставщика КАК НомерЗаказа,
		|	ЗаказПоставщику.Номер КАК Номер,
		|	ЗаказПоставщику.ДатаПоДаннымПоставщика КАК ДатаЗаказа
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	НЕ ЗаказПоставщику.Ссылка В (&Ссылка)
		|	И ЗаказПоставщику.Контрагент = &Контрагент
		|	И ЗаказПоставщику.Дата >= &Дата
		|	И ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|	И ЗаказПоставщику.Проведен = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*30);//2 недели смотрим
	Запрос.УстановитьПараметр("Контрагент", Объект.Поставщик);
	Если Объект.ТаблицаПоступлений.Количество() = 0 Тогда
		СписокЗаказов = Документы.ЗаказПоставщику.ПустаяСсылка();
	Иначе
		СписокЗаказов = Объект.ТаблицаПоступлений.Выгрузить(,"ЗаказПоставщику").ВыгрузитьКолонку("ЗаказПоставщику");
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", СписокЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокЗаказовПоставщику.Добавить(ВыборкаДетальныеЗаписи.Ссылка, "№"+ВыборкаДетальныеЗаписи.Номер+" от "+ВыборкаДетальныеЗаписи.Дата+" по заказу № "+ВыборкаДетальныеЗаписи.НомерЗаказа+" от "+ВыборкаДетальныеЗаписи.ДатаЗаказа);
	КонецЦикла;
	
	Возврат СписокЗаказовПоставщику;

КонецФункции

&НаКлиенте
Процедура ДобавитьНоменклатуруВПоступление(Команда)
	//про просьбе Велес-Авто добавляем не заказ поставщику, а номенклатуру
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	//ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора"",ПараметрыВыбора,ЭтаФорма);	
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбораНоменклатуры", ЭтаФорма,"ВыборНоменклатуры");
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыВыбора,ЭтаФорма, , , , ОбработкаВыбора);	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбораНоменклатуры(Значение, ДопПараметры) Экспорт
    Если Значение = Неопределено Тогда  ///Если ничего не выбрать - вернется пустое значение (Неопределено)
        Возврат;
    КонецЕсли;
    ДобавитьНоменклатуруВПоступлениеНаСервере(Значение);
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруВПоступлениеНаСервере(Значение)
	НовСтрока = Объект.ТаблицаПоступленийОтбор.Добавить();
	НовСтрока.Номенклатура = Значение;
	НовСтрока.Артикул = Значение.Артикул;
	НовСтрока.Производитель = СокрЛП(Значение.Производитель);
	НовСтрока.Количество = 1;
	НовСтрока.ЦенаЗакупки = 1;
	НовСтрока.ВДокумент = Истина;
	НовСтрока.Контрагент = Объект.Поставщик;
	НовСтрока.Поставщик = Объект.Поставщик;
	НовСтрока.Организация = Объект.Организация;
	НовСтрока.Склад = Объект.Склад;
КонецПроцедуры

&НаСервере  ///СЕРВЕР Работает до 8.3.13.1644, с 8.3.16.1063 этот метод недоступен.
Процедура ПриЗакрытииФормыВыбораНоменклатурыНаСервере(Значение, ДопПараметры) ///Процедура НЕ экспортная
    Если Значение = Неопределено Тогда  ///Если ничего не выбрать - вернется пустое значение (Неопределено)
        Возврат;
    КонецЕсли;
    ВыбраннаяНоменклатура = Значение;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруВРеализацию(Команда)
	//про просьбе Велес-Авто добавляем не заказ поставщику, а номенклатуру
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	//ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора"",ПараметрыВыбора,ЭтаФорма);	
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбораНоменклатурыВРеализацию", ЭтаФорма,"ВыборНоменклатуры");
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыВыбора,ЭтаФорма, , , , ОбработкаВыбора);	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбораНоменклатурыВРеализацию(Значение, ДопПараметры) Экспорт
    Если Значение = Неопределено Тогда  ///Если ничего не выбрать - вернется пустое значение (Неопределено)
        Возврат;
    КонецЕсли;
    ДобавитьНоменклатуруВРеализациюНаСервере(Значение);
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруВРеализациюНаСервере(Значение)
	НовСтрока = Объект.ТаблицаРеализацийОтбор.Добавить();
	НовСтрока.Номенклатура = Значение;
	НовСтрока.Артикул = Значение.Артикул;
	НовСтрока.Производитель = СокрЛП(Значение.Производитель);
	НовСтрока.Количество = 1;
	НовСтрока.ЦенаПродажи = 1;
	НовСтрока.ВДокумент = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказПоставщика(Команда)
	//в некоторых случаях (возможно, проблемы с базой), видит не все закрытые заказы поставщикам
	СписокЗаказовПоставщику = ПолучитьСписокЗаказовПоставщику();
	Если СписокЗаказовПоставщику.Количество() = 0 Тогда
		сообщить("За 30 дней нет неучтенных, проведенных, незакрытых заказов поставщику: "+Объект.Поставщик);
		Возврат;
	КонецЕсли;
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораЗаказаПоставщику", ЭтотОбъект);//, Элемент.Имя);
	ВыбранныйЭлемент = Неопределено;
	СписокЗаказовПоставщику.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите заказ", ВыбранныйЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЗаказаПоставщику(Элемент, Параметры) Экспорт
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДобавитьЗаказПоставщикуИДозаполнитьКолонки(Элемент.Значение);
КонецПроцедуры

Процедура ДобавитьЗаказПоставщикуИДозаполнитьКолонки(ЗаказПоставщику)
	Для Каждого СтрокаДокумента Из ЗаказПоставщику.Товары Цикл
		НовСтрока = Объект.ТаблицаПоступлений.Добавить();
		НовСтрока.ЗаказПоставщику = ЗаказПоставщику;
		НовСтрока.Номенклатура = СтрокаДокумента.Номенклатура;
		НовСтрока.Количество = СтрокаДокумента.Количество;
		НовСтрока.Артикул = СтрокаДокумента.Номенклатура.Артикул;
		НовСтрока.Производитель = СтрокаДокумента.Номенклатура.Производитель;
		НовСтрока.ЗаказКлиента = ЗаказПоставщику.ДокументОснование;
		НовСтрока.Контрагент = ЗаказПоставщику.ДокументОснование.Контрагент;
		НовСтрока.НомерЗаявки = ЗаказПоставщику.НомерПоДаннымПоставщика;
		НовСтрока.КодСтроки = СтрокаДокумента.КодСтроки;
		НовСтрока.Поставщик = Объект.Поставщик;
		НовСтрока.Склад = ЗаказПоставщику.Склад;
	КонецЦикла;
	Массив = ДозаполнитьНезакрытыеЗаказыПоставщикуНаСервере();//ПерезаполнитьМассивАртикулов = Ложь, ПоСтроке = Неопределено)
КонецПроцедуры

//из закладки "Поступление" создает документ "ПоступлениеТоваровУслуг"
//у позиций, которых пришло меньше, чем заказано - делим в заказе клиента и заказе поставщику
//у новых строк пока неправильный код строки
&НаСервере
Процедура СоздатьПоступленияНаСервереИзменитьЗаказы()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//Если УТ111 Тогда
	//	ИспользоватьСоглашенияСПоставщиками = Ложь;
	//	ИспользоватьДоговорыСПоставщиками = Ложь;
	//Иначе
	//	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	//	ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	//КонецЕсли;
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	ЕстьЭтапыГрафикаОплатыВариантОтсчета = Метаданные.Документы.ПриобретениеТоваровУслуг.ТабличныеЧасти.ЭтапыГрафикаОплаты.Реквизиты.Найти("ВариантОтсчета")<>Неопределено;
	
	ОсновнаяСтавкаНДС = Объект.ОсновнаяСтавкаНДС;
	Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		РазмерСтавкиНДС = 0;
		РазмерСтавкиНДС100 = 100;
	Иначе
		РазмерСтавкиНДС = ?(ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС18, 18, 20);
		РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
	КонецЕсли;
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено Тогда
		ЕстьВариантПриемкиТоваров = Ложь;
		ВариантПриемкиТоваров = "";
	Иначе
		ЕстьВариантПриемкиТоваров = Истина;
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	Структура = Новый Структура("ВДокумент", Ложь);
	НайденныеСтроки = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.ТаблицаПоступленийОтбор.Удалить(НайденнаяСтрока);
	КонецЦикла;
	Если Объект.ТаблицаПоступленийОтбор.Количество() = 0 Тогда
		сообщить("Не заполнена таблица отобранных позиций");
		Возврат; 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ВариантОбеспечения) Тогда
		Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		сообщить("Автоматически заполнен вариант обеспечения «Отгрузить» для изменения в заказах 1С");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СтатусПослеПоступления) Тогда
		сообщить("Заполните статус, на который меняются заказы на сайте при поступлении");
		Возврат; 
	КонецЕсли;
	Объект.ПоступлениеТоваровУслуг = "";//иначе могут испортиться уже созданные поступления
	Объект.СчетФактураПолученный = "";
	Если Метаданные.Документы.Найти("ПриобретениеТоваровУслуг") = Неопределено Тогда
		ДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	Иначе
		ДокОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		Если Метаданные.Документы.ПриобретениеТоваровУслуг.Реквизиты.Найти("ВариантПриемкиТоваров") <> Неопределено Тогда
			ДокОбъект.ВариантПриемкиТоваров = ВариантПриемкиТоваров;
		КонецЕсли;
		ДокОбъект.Подразделение = Объект.Подразделение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		ДокОбъект.НомерВходящегоДокумента = Объект.НомерВходящегоДокумента;
		ДокОбъект.ДатаВходящегоДокумента = Объект.ДатаВходящегоДокумента;
		Если Объект.УТ111 Тогда
			ДокОбъект.ПредъявленСчетФактура = Истина;
			ДокОбъект.НомерСчетаФактуры = Объект.НомерВходящегоДокумента;
			ДокОбъект.ДатаСчетаФактуры = Объект.ДатаВходящегоДокумента;
			ДокОбъект.ВалютаСчетаФактуры = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.Контрагент = Объект.Поставщик;
	Если ЗначениеЗаполнено(Объект.ОрганизацияВПоступлении) Тогда
		ДокОбъект.Организация = Объект.ОрганизацияВПоступлении;
	Иначе
		ДокОбъект.Организация = Объект.Организация;
		Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ДокОбъект.Организация = Объект.ОрганизацияРозница;
		КонецЕсли;
	КонецЕсли;
	НеМенятьОрганизацию = Ложь;
	НеМенятьСклад = Ложь;
	НСтроки = Объект.ТаблицаСкладов.НайтиСтроки(Новый Структура("Контрагент", ДокОбъект.Контрагент));
	Если НСтроки.Количество() > 0 Тогда
		Для Каждого НСтрока Из НСтроки Цикл
			Если ЗначениеЗаполнено(НСтрока.Организация) Тогда
				ДокОбъект.Организация = НСтрока.Организация;
				НеМенятьОрганизацию = Истина;
				Прервать;
			КонецЕсли;
			Если ЗначениеЗаполнено(НСтрока.Склад) Тогда
				ДокОбъект.Склад = НСтрока.Склад;
				НеМенятьСклад = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДокОбъект.ПоступлениеПоЗаказам = Истина;
	ДокОбъект.Дата = ТекущаяДата();
	Если ЗначениеЗаполнено(Объект.ДатаПоступления) Тогда
		ДокОбъект.Дата = Объект.ДатаПоступления;
	КонецЕсли;
	//ДокОбъект.Дата = СтрокаЗаявки.dateUpdated;//если загрузка за большой период, лучше ставить дату последнего обновления
	ДокОбъект.НалогообложениеНДС = Объект.НалогообложениеНДСПоступление;
	Попытка
		ДокОбъект.ЗакупкаПодДеятельность = Объект.НалогообложениеНДСПоступление;
	Исключение
	КонецПопытки;
	ДокОбъект.ЦенаВключаетНДС = Объект.ЦенаВключаетНДСПриПокупке;
	Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
	Иначе
		Если НЕ Объект.УТ111 И НЕ Объект.УТ112 Тогда
			ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
	КонецЕсли;
	
	ДокОбъект.БанковскийСчетОрганизации = ОбработкаОбъект.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДокОбъект.Организация, Объект.Валюта);
	ДокОбъект.Согласован = Истина;
	Если НЕ Объект.УТ111 Тогда
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	КонецЕсли;
	Если Объект.УТ114 И Объект.Подверсия3 < 6 Тогда
		ДокОбъект.ДатаПлатежа = ДокОбъект.Дата + 3600*24;
	КонецЕсли;		
	ДокОбъект.Комментарий = "создано из модуля обмена по незакрытым заказам поставщику "+ТекущаяДата();
	ДокОбъект.Валюта = Объект.Валюта;//Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.ЦеныЗакупкиВРублях Тогда
		Рубли = Справочники.Валюты.НайтиПоКоду("643");//могут быть расчеты в рублях, например, в Казахстане
		ДокОбъект.Валюта = Рубли;
	КонецЕсли;
	ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
	СкладПоступления = Объект.Склад;
	СкладЗаполненИзЗаказаПоставщику = Ложь;
	Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаПоступленийОтбор Цикл
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.ЗаказПоставщику) Тогда
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.ЗаказПоставщику.Склад) Тогда
				СкладПоступления = СтрокаНоменклатуры.ЗаказПоставщику.Склад;
				СкладЗаполненИзЗаказаПоставщику = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СкладЗаполненИзЗаказаПоставщику = Ложь Тогда
		Если НеМенятьСклад = Ложь Тогда
			Если ЗначениеЗаполнено(Объект.СкладВПоступлении) Тогда
				ДокОбъект.Склад = Объект.СкладВПоступлении;
				СкладПоступления= Объект.СкладВПоступлении;
			Иначе
				ДокОбъект.Склад = Объект.Склад;
				СкладПоступления = Объект.Склад;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект.Склад = СкладПоступления;
	КонецЕсли;
	ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокОбъект.Контрагент = Объект.Поставщик;
	ДокОбъект.Партнер = ДокОбъект.Контрагент.Партнер;
	ДокОбъект.Грузоотправитель = ДокОбъект.Контрагент;
	ДокОбъект.БанковскийСчетКонтрагента = ОбработкаОбъект.ПолучитьБанковскийСчетПоУмолчанию(ДокОбъект.Контрагент, Объект.Валюта);
	Если ИспользоватьДоговорыСПоставщиками Тогда
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация);
		Если НЕ ЗначениеЗаполнено(Договор) Тогда
			Договор = ОбработкаОбъект.ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация, , ДокОбъект.Контрагент);
		КонецЕсли;
		Если ЗначениеЗаполнено(Договор) Тогда
			Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
				Попытка
					Если Не ЗначениеЗаполнено(Договор.СтавкаНДС) Тогда
						Об = Договор.ПолучитьОбъект();
						Об.СтавкаНДС = ПолучитьСправочникСтавкаНДСПоПеречислению(Объект.ОсновнаяСтавкаНДС);
						Об.ЗАписать();
						Договор = Об.Ссылка;
					КонецЕсли;
					Если Договор.СтавкаНДС.ПеречислениеСтавкаНДС <> Объект.ОсновнаяСтавкаНДС Тогда
						сообщить("В договоре ставка НДС ("+Договор.СтавкаНДС+") не совпадает с настройками модуля ("+Объект.ОсновнаяСтавкаНДС+")");
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				Если Договор.СтавкаНДС <> Объект.ОсновнаяСтавкаНДС Тогда
					сообщить("В договоре ставка НДС ("+Договор.СтавкаНДС+") не совпадает с настройками модуля ("+Объект.ОсновнаяСтавкаНДС+")");
				КонецЕсли;
				ДокОбъект.ПорядокОплаты = Договор.ПорядокОплаты;
			КонецЕсли;
			ДокОбъект.ПорядокРасчетов = Договор.ПорядокРасчетов;
			Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДСОпределяетсяВДокументе") <> Неопределено Тогда
				Если Договор.НалогообложениеНДСОпределяетсяВДокументе = Ложь Тогда
					ДокОбъект.НалогообложениеНДС = Договор.НалогообложениеНДС;
				КонецЕсли;
			КонецЕсли;
			//в договоре может быть другой счет
			Если ЗначениеЗаполнено(Договор.БанковскийСчет) Тогда
				ДокОбъект.БанковскийСчетОрганизации = Договор.БанковскийСчет;
			КонецЕсли;
			Если ЗначениеЗаполнено(Договор.БанковскийСчетКонтрагента) Тогда
				ДокОбъект.БанковскийСчетКонтрагента = Договор.БанковскийСчетКонтрагента;
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.Договор = Договор;
	КонецЕсли;

	//ищем соглашение
	Если Объект.УТ111 Тогда
		ИспользоватьСоглашенияСПоставщиками = Ложь;
	Иначе
		ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	КонецЕсли;
	Если ИспользоватьСоглашенияСПоставщиками Тогда
		СтрокиПоставщика = Объект.ТаблицаСкладов.НайтиСтроки(Новый Структура("Контрагент", Объект.Поставщик));
		Если СтрокиПоставщика.Количество() > 0 Тогда
			Соглашение = СтрокиПоставщика[0].Соглашение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Соглашение) Тогда //И СоздаватьИндивидуальныеСоглашения Тогда
			Соглашение = ОбработкаОбъект.ПолучитьСоглашениеСПоставщиком(ДокОбъект.Контрагент);
		КонецЕсли;
		Если ЗначениеЗаполнено(Соглашение) Тогда
			ДокОбъект.Соглашение = Соглашение;
			ДокОбъект.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;
			Если ЗначениеЗаполнено(Соглашение.Менеджер) Тогда
				ДокОбъект.Менеджер = Соглашение.Менеджер;
			КонецЕсли;
			Если ЗначениеЗаполнено(Соглашение.ФормаОплаты) Тогда
				ДокОбъект.ФормаОплаты = Соглашение.ФормаОплаты;
			КонецЕсли;
			Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
			Иначе
				Если ЗначениеЗаполнено(Соглашение.ПорядокОплаты) Тогда
					ДокОбъект.ПорядокОплаты = Соглашение.ПорядокОплаты;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Соглашение.НаправлениеДеятельности) Тогда
				ДокОбъект.НаправлениеДеятельности = Соглашение.НаправлениеДеятельности;
			КонецЕсли;
			Если ЗначениеЗаполнено(Соглашение.СтатьяДвиженияДенежныхСредств) Тогда
				ДокОбъект.СтатьяДвиженияДенежныхСредств = Соглашение.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Попытка
				Если ЗначениеЗаполнено(Соглашение.НалогообложениеНДС) Тогда
					ДокОбъект.НалогообложениеНДС = Соглашение.НалогообложениеНДС;
				КонецЕсли;
			Исключение
			КонецПопытки;
			ДокОбъект.РегистрироватьЦеныПоставщика = Соглашение.РегистрироватьЦеныПоставщика;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
		ДокОбъект.Принял = ДокОбъект.Менеджер.ФизическоеЛицо;
	КонецЕсли;
	Если НеМенятьОрганизацию = Ложь Тогда
		Если Объект.ЗаполнятьОрганизациюПоСоглашению И ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
			Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Организация) И ДокОбъект.Организация = ДокОбъект.Соглашение.Организация Тогда
				ДокОбъект.Организация = ДокОбъект.Соглашение.Организация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Попытка
		ВидДеятельностиНДСОрганизации = Справочники.Организации.ЗакупкаПодДеятельность(Объект.Организация, Объект.Склад, ДокОбъект.Дата);
		ДокОбъект.ЗакупкаПодДеятельность = ВидДеятельностиНДСОрганизации;
	Исключение
	КонецПопытки;
	//ДокОбъект.ЗакупкаПодДеятельность = Объект.НалогообложениеНДСПоступление;
	
	Если ((НЕ Объект.УТ111 И НЕ Объект.УТ112) Или Объект.УТ114) И НЕ Объект.УТ115 Тогда
		Попытка
			ДокОбъект.Курс = 1;
			ДокОбъект.Кратность = 1;
		Исключение
		Конецпопытки;
	КонецЕсли;
	Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
		ДокОбъект.КурсЧислитель = 1;
		ДокОбъект.КурсЗнаменатель = 1;
		ДокОбъект.УдалитьПорядокОплаты = Перечисления.УдалитьПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;	
	ДокОбъект.Согласован = Истина;

	ДокОбъект.ПорядокРасчетов = Объект.ПорядокРасчетовЗаказПоставщику;
	
	СтруктураОтветственныхЛиц = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(ДокОбъект.Организация, ТекущаяДата());
	ДокОбъект.Руководитель = СтруктураОтветственныхЛиц.РуководительСсылка;
	ДокОбъект.ГлавныйБухгалтер = СтруктураОтветственныхЛиц.ГлавныйБухгалтерСсылка;
	
	ЗаполнитьОрганизациюИзТабличнойЧасти = Истина;
	Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаПоступленийОтбор Цикл
		Если ЗаполнитьОрганизациюИзТабличнойЧасти Тогда
			ЗаполнитьЗначенияСвойств(ДокОбъект, СтрокаНоменклатуры, "Организация,Договор,Соглашение");
			ЗаполнитьОрганизациюИзТабличнойЧасти = Ложь;
		КонецЕсли;
		СтрокаДокумента = ДокОбъект.Товары.Добавить();
		СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		Если Объект.НаименованиеХарактеристики<>"" И СтрокаДокумента.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
			СтрокаДокумента.Характеристика = ОбработкаОбъект.ПолучитьХарактеристикуНоменклатуры(СтрокаДокумента.Номенклатура);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.ЗаказПоставщику) Тогда
			СтрокаДокумента.ЗаказПоставщику = СтрокаНоменклатуры.ЗаказПоставщику;
			СтрокаДокумента.КодСтроки = СтрокаНоменклатуры.КодСтроки;
		КонецЕсли;
		ДокОбъект.ЗаказПоставщику = СтрокаНоменклатуры.ЗаказПоставщику;
		СтрокаДокумента.Склад = СкладПоступления;
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.Склад) Тогда
			СтрокаДокумента.Склад = СтрокаНоменклатуры.Склад;
		КонецЕсли;
		Если СтрокаНоменклатуры.Контрагент = Объект.КонтрагентНаНаличие Тогда
			Если ЗначениеЗаполнено(Объект.СкладВПоступлении) Тогда
				СтрокаДокумента.Склад = Объект.СкладВПоступлении;
				ЗаписьВЛог(""+СтрокаДокумента.Номенклатура+", "+СтрокаНоменклатуры.ЗаказПоставщику+" устанавливаем склад "+Объект.СкладВПоступлении,Объект.Отладка);
			КонецЕсли;
		КонецЕсли;
		Если СтрокаНоменклатуры.Количество > СтрокаНоменклатуры.ИсходноеКоличество И ЗначениеЗаполнено(СтрокаДокумента.ЗаказПоставщику) Тогда
			СтрокаДокумента.Количество = СтрокаНоменклатуры.ИсходноеКоличество;
		Иначе
			СтрокаДокумента.Количество = СтрокаНоменклатуры.Количество;
		КонецЕсли;
		СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество;
		СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаЗакупки;
		//такого в документе нет, только в форме СтрокаДокумента.ЦенаЗаказа = СтрокаНоменклатуры.ЦенаЗакупки;
		СтрокаДокумента.Сумма = СтрокаНоменклатуры.ЦенаЗакупки * СтрокаНоменклатуры.Количество;
		ОбработкаОбъект.ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтрокаДокумента, ДокОбъект.Договор);
		СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.НомерГТД) Тогда
			СтрокаДокумента.НомерГТД = СтрокаНоменклатуры.НомерГТД;
			Если НЕ СтрокаНоменклатуры.Номенклатура.ВестиУчетПоГТД Тогда
				ОбНоменклатура = СтрокаНоменклатуры.Номенклатура.ПолучитьОбъект();
				//ОбНоменклатура.ОбменДанными.Загрузка = Истина;
				ОбНоменклатура.ВестиУчетПоГТД = Истина;
				ОбНоменклатура.Записать();
			КонецЕсли;
		КонецЕсли;
		Если Объект.УТ114 Тогда
			СтрокаДокумента.Подразделение = Объект.Подразделение;
		КонецЕсли;
		Если Объект.ИспользоватьСерииНоменклатуры Тогда
			СтрокаДокумента.Серия = ОбработкаОбъект.НайтиДобавитьСериюНоменклатуры(СтрокаНоменклатуры);
			СтрокаДокумента.СтатусУказанияСерий = 14;//13;
		Иначе
			СтрокаДокумента.СтатусУказанияСерий = 0;//почему-то так надо
			СтрокаДокумента.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		Если ДокОбъект.Организация <> СтрокаНоменклатуры.ЗаказПоставщику.Организация Тогда
			сообщить("Не совпадает организация в поступлении и в заказе поставщику: "+СтрокаНоменклатуры.ЗаказПоставщику);
			//ДокОбъект.Организация = СтрокаНоменклатуры.ЗаказПоставщику.Организация;
		КонецЕсли;
		
		Если СтрокаНоменклатуры.Количество > СтрокаНоменклатуры.ИсходноеКоличество И ЗначениеЗаполнено(СтрокаДокумента.ЗаказПоставщику) Тогда
			СвободноеКоличество = СтрокаНоменклатуры.Количество - СтрокаНоменклатуры.ИсходноеКоличество;
			сообщить(""+СтрокаНоменклатуры.Номенклатура+" лишнее количество "+СвободноеКоличество+" не будет привязано к заказам");
			СтрокаСвободногоКоличества = ДокОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСвободногоКоличества, СтрокаДокумента, "Номенклатура,Цена,НомерГТД,СтатусУказанияСерий,СтавкаНДС,Склад");
			СтрокаСвободногоКоличества.Количество = СвободноеКоличество;
			СтрокаСвободногоКоличества.Сумма = СтрокаНоменклатуры.ЦенаЗакупки * СтрокаНоменклатуры.Количество;
			Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
				СтрокаСвободногоКоличества.СуммаНДС = СтрокаДокумента.Сумма/РазмерСтавкиНДС100*РазмерСтавкиНДС;
			Иначе
				СтрокаСвободногоКоличества.СуммаНДС = 0;
			КонецЕсли;
			СтрокаСвободногоКоличества.СуммаСНДС = СтрокаДокумента.Сумма;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Объект.СкладВПоступлении) Тогда
		ВТ = ДокОбъект.Товары.Выгрузить(,"Склад");
		СтрокВДокументе = ВТ.Количество();
		ВТ.Свернуть("Склад",);
		Если ВТ.Количество() = 1 Тогда
			ДокОбъект.Склад = ВТ[0].Склад;
		Иначе
			Если ДокОбъект.Склад.ЭтоГруппа Тогда
			Иначе
				времГруппа = ВТ[0].Склад.Родитель;
				Если ЗначениеЗаполнено(времГруппа) И времГруппа.ЭтоГруппа Тогда
					ДокОбъект.Склад = времГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.СуммаВзаиморасчетов = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.СуммаВзаиморасчетовПоЗаказу = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	Если Метаданные.Документы.ПриобретениеТоваровУслуг.Реквизиты.Найти("Согласован") <> Неопределено Тогда
		ДокОбъект.Согласован = Истина;
	КонецЕсли;
	ДокОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
		ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
		Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
			СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
			ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
			СтрокаЭтапыГрафикаОплаты = ДокОбъект.ЭтапыГрафикаОплаты[0];
			СтрокаЭтапыГрафикаОплаты.Заказ = СтрокаДокумента.ЗаказПоставщику;
			СтрокаЭтапыГрафикаОплаты.СверхЗаказа = Ложь;
			Если ЕстьЭтапыГрафикаОплатыВариантОтсчета Тогда
				СтрокаЭтапыГрафикаОплаты.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
			//ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(ДокОбъект, ДокОбъект.Товары.Итог("Сумма"), 0, Ложь);
			Попытка
				ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаЗакупкиПоСоглашению(ДокОбъект, ДокОбъект.СуммаДокумента);
				//ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
			Исключение
			КонецПопытки;
		Иначе
			Попытка
				ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	ТекстСообщения = "Записываем поступление интерактивно: "+ДокОбъект+", позиций "+Объект.ТаблицаПоступленийОтбор.Количество()+" дата документа: "+ДокОбъект.Дата+" пользователь: "+ПараметрыСеанса.ТекущийПользователь;
	ЗаписьВЛог(ТекстСообщения);
	ДокОбъект.Записать();
	Объект.ПоступлениеТоваровУслуг = ДокОбъект.Ссылка;
	ЕстьОшибка = Ложь;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = "Проведено поступление "+ДокОбъект.Ссылка;
		ЗаписьВЛог(ТекстСообщения,,Истина);
	Исключение
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),6,Истина);
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	//создаём с/ф полученную
	Если ЗначениеЗаполнено(Объект.НомерВходящейСчетФактуры) Тогда
		ПараметрыРегистрации = Документы.ПриобретениеТоваровУслуг.ПараметрыРегистрацииСчетовФактурПолученных(Объект.ПоступлениеТоваровУслуг);
		Если НЕ Объект.УТКазахстан Тогда
			Результат = Неопределено;
			Попытка
				ОбщийМодуль = Вычислить("УчетНДСУП");//в Казахстане вообще таких функций нет
				Результат = ОбщийМодуль.СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрации);
			Исключение
			КонецПопытки;
			Если Результат = Неопределено Тогда
				Попытка
					ОбщийМодуль = Вычислить("УчетНДСУПСлужебный");//в Казахстане вообще таких функций нет
					Результат = ОбщийМодуль.СчетаФактурыПолученныеПоДокументуЗакупки(ПараметрыРегистрации);
				Исключение
				КонецПопытки;
			КонецЕсли;			
			Если НЕ Результат = Неопределено Тогда
				Если Результат.СчетаФактуры.Количество() > 0 Тогда
					Попытка
						Объект.СФ = Результат.СчетаФактуры[0];
					Исключение
					КонецПопытки;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//СчетФактураДокумента = ЗакупкиВызовСервера.СчетФактураДокумента(Объект.ПоступлениеТоваровУслуг, Объект.ПоступлениеТоваровУслуг.Организация, Ложь);
		//Если ЗначениеЗаполнено(СчетФактураДокумента) Тогда
		//	//сообщить("Уже есть");
		//	Объект.СФ = СчетФактураДокумента;
		//	Возврат;
		//КонецЕсли;
		СФ = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДанныеЗаполнения = Новый Структура("ДокументОснование", Объект.ПоступлениеТоваровУслуг);
		СФ.Заполнить(ДанныеЗаполнения);	
		СФ.Дата = Объект.ПоступлениеТоваровУслуг.Дата+1;
		Если Объект.НомерВходящейСчетФактуры = "" Тогда
			СФ.Номер = Объект.ПоступлениеТоваровУслуг.НомерВходящегоДокумента;
		Иначе
			СФ.Номер = Объект.НомерВходящейСчетФактуры;
		КонецЕсли;
		СФ.ДатаСоставления = Объект.ДатаВходящегоДокумента;
		Попытка
			СФ.Записать();
			Объект.СчетФактураПолученный = СФ.Ссылка;
		Исключение
		КонецПопытки;
		Попытка
			СФ.Записать(РежимЗаписиДокумента.Проведение);
			Объект.СчетФактураПолученный = СФ.Ссылка;
		Исключение
		КонецПопытки;
		ДокОбъект.НомерВходящегоДокумента = Объект.НомерВходящегоДокумента;
		ДокОбъект.ДатаВходящегоДокумента = Объект.ДатаВходящегоДокумента;
		Если Объект.УТ111 Тогда
			ДокОбъект.ПредъявленСчетФактура = Истина;
			ДокОбъект.НомерСчетаФактуры = Объект.НомерВходящегоДокумента;
			ДокОбъект.ДатаСчетаФактуры = Объект.ДатаВходящегоДокумента;
			ДокОбъект.ВалютаСчетаФактуры = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
	КонецЕсли;
	
	//документ создали, теперь смотрим, у каких позиций надо разделить строки
	//делим строки в заказе клиента, при необходимости
	Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ТекПроцентНДС = 0;
	Иначе
		ТекПроцентНДС = 20;
	КонецЕсли;
	Если Объект.РазделятьПозицииЗаказовПриНеобходимости Тогда
		Для Каждого ТекСтрока Из Объект.ТаблицаПоступленийОтбор Цикл
			Если ТекСтрока.Количество < ТекСтрока.ИсходноеКоличество И ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику)  И ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента)Тогда
				ТекСтрока.ИзменилиСтатус = Истина;;
				Структура = Новый Структура("Номенклатура, КодСтроки");
				Структура.Номенклатура = ТекСтрока.Номенклатура;
				Структура.КодСтроки = ТекСтрока.КодСтроки;
				
				Об = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
				НайденныеСтроки = Об.Товары.НайтиСтроки(Структура);
				Для Каждого СтараяСтрока Из НайденныеСтроки Цикл
					Если СтараяСтрока.ВариантОбеспечения <> Объект.ВариантОбеспечения Тогда
						//что пришло - меняем количество на факт
						//СтараяСтрока = Об.Товары[ТекСтрока.НомерСтроки-1];
						СтавкаНДС = СтараяСтрока.СтавкаНДС;
						//ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС, Ложь);
						СтараяСтрока.Количество = ТекСтрока.Количество;
						СтараяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
						СтараяСтрока.Цена = ТекСтрока.ЦенаПродажи;
						СтараяСтрока.Сумма = СтараяСтрока.Количество * ТекСтрока.ЦенаПродажи;
						//СтараяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтараяСтрока.Сумма, ТекПроцентНДС, Ложь);
						ОбработкаОбъект.ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтараяСтрока, ДокОбъект.Договор);
						СтараяСтрока.СуммаСНДС = СтараяСтрока.Сумма;// + ?(Об.ЦенаВключаетНДС, 0, СтараяСтрока.СуммаНДС);
						СтараяСтрока.ВариантОбеспечения = Объект.ВариантОбеспечения;
						
						//что не пришло - добавляем новой строкой
						НовСтрока = Об.Товары.Вставить(ТекСтрока.НомерСтроки-1);//добавляем нераспределенное количество новой строкой
						ЗаполнитьЗначенияСвойств(НовСтрока, СтараяСтрока);
						НовСтрока.Количество = ТекСтрока.ИсходноеКоличество-ТекСтрока.Количество;
						НовСтрока.КоличествоУпаковок = НовСтрока.Количество;
						НовСтрока.Цена = ТекСтрока.ЦенаПродажи;
						НовСтрока.КодСтроки = 0;//после записи всё равно заполняется
						
						НовСтрока.Сумма = НовСтрока.Количество * ТекСтрока.ЦенаПродажи;
						//НовСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НовСтрока.Сумма, ТекПроцентНДС, Ложь);
						ОбработкаОбъект.ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, НовСтрока, ДокОбъект.Договор);
						НовСтрока.СуммаСНДС = НовСтрока.Сумма;// + ?(Об.ЦенаВключаетНДС, 0, НовСтрока.СуммаНДС);
						Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
							НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
						Иначе
							НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
						КонецЕсли;
						Об.Комментарий = СокрЛП(Об.Комментарий)+" раздел "+ТекСтрока.Номенклатура.Артикул;
						ЗаписьВЛог(""+ТекСтрока.ЗаказКлиента+" разделили строку № "+СтараяСтрока.НомерСтроки+", "+ТекСтрока.Номенклатура,1,Истина);
					КонецЕсли;
				КонецЦикла;
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ЗаписьВЛог("Не удалось провести документ: "+Об+" "+ОписаниеОшибки(),1,Истина);
					Об.Записать();
				КонецПопытки;
				
			//если надо, то делим и строки в заказе поставщику
				Об = ТекСтрока.ЗаказПоставщику.ПолучитьОбъект();
				НайденныеСтроки = Об.Товары.НайтиСтроки(Структура);
				Для Каждого СтараяСтрока Из НайденныеСтроки Цикл
					СтавкаНДС = СтараяСтрока.СтавкаНДС;
					//ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС, Ложь);
					СтараяСтрока.Количество = ТекСтрока.Количество;
					СтараяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
					СтараяСтрока.Цена = ТекСтрока.ЦенаЗакупки;
					СтараяСтрока.Сумма = СтараяСтрока.Количество * ТекСтрока.ЦенаЗакупки;
					//СтараяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтараяСтрока.Сумма, ТекПроцентНДС, Ложь);
					ОбработкаОбъект.ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтараяСтрока, ДокОбъект.Договор);
					СтараяСтрока.СуммаСНДС = СтараяСтрока.Сумма + ?(Об.ЦенаВключаетНДС, 0, СтараяСтрока.СуммаНДС);
					
					//что не пришло - добавляем новой строкой
					НовСтрока = Об.Товары.Вставить(ТекСтрока.НомерСтроки-1);//добавляем нераспределенное количество новой строкой
					ЗаполнитьЗначенияСвойств(НовСтрока, СтараяСтрока);
					НовСтрока.Количество = ТекСтрока.ИсходноеКоличество-ТекСтрока.Количество;
					НовСтрока.КоличествоУпаковок = НовСтрока.Количество;
					НовСтрока.Цена = ТекСтрока.ЦенаЗакупки;
					НовСтрока.КодСтроки = НовСтрока.НомерСтроки;//после записи всё равно заполняется, если 0 ставить, поэтому пишем просто № строки, чтобы потом корректный идентификатор вставить
					
					НовСтрока.Сумма = НовСтрока.Количество * ТекСтрока.ЦенаПродажи;
					//НовСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НовСтрока.Сумма, ТекПроцентНДС, Ложь);
					ОбработкаОбъект.ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, НовСтрока, ДокОбъект.Договор);
					НовСтрока.СуммаСНДС = НовСтрока.Сумма + ?(Об.ЦенаВключаетНДС, 0, НовСтрока.СуммаНДС);
					Об.Комментарий = СокрЛП(Об.Комментарий)+" раздел "+ТекСтрока.Номенклатура.Артикул;
					ЗаписьВЛог(""+ТекСтрока.ЗаказПоставщику+" разделили строку № "+СтараяСтрока.НомерСтроки+", "+ТекСтрока.Номенклатура,1,Истина);
				КонецЦикла;
				
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ЗаписьВЛог("Не удалось провести документ: "+Об+" "+ОписаниеОшибки(),1,Истина);
					Об.Записать();
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПолучитьСтатусыABCPДляПоступления();//дозаполняем статус ABCP, deadline, routeId в ТаблицаПоступленийОтбор, они нужны, если надо изменить количество в заказе на сайте
КонецПроцедуры

Функция ВернутьПараметрыЭтапаОплаты(Знач ДокОбъект, СуммаОплатыПоДокументу)
	ПараметрыЭтапа = Новый Структура();
	ПараметрыЭтапа.Вставить("Объект", ДокОбъект);
	ПараметрыЭтапа.Вставить("ЖелаемаяДата", ДокОбъект.Дата);
	ПараметрыЭтапа.Вставить("ВариантОплаты", Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления);
	ПараметрыЭтапа.Вставить("СуммаОплатыПоДокументу", СуммаОплатыПоДокументу);
	ПараметрыЭтапа.Вставить("СуммаОтклоненияМерныхТоваров", 0);
	ПараметрыЭтапа.Вставить("СуммаЗалогаПоДокументу", 0);
	Возврат ПараметрыЭтапа;
КонецФункции

Функция ПолучитьСправочникСтавкаНДСПоПеречислению(ПеречислениеСтавкаНДС)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.ПеречислениеСтавкаНДС = &ПеречислениеСтавкаНДС";
	
	Запрос.УстановитьПараметр("ПеречислениеСтавкаНДС", ПеречислениеСтавкаНДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ИзменитьДатыПоступленияВЗаказахПоставщикам()
	//проверяем в заказе поставщику колонку ДатаПоступления, и поступление одной датой, и ставим текущую дату, иначе не создаётся приходный ордер на товары
	СтруктураДатаПоступления = Новый Структура("КодСтроки", 0);	
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаПоступленийОтбор Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПоставщику) Тогда
			Если СтрокаТаблицы.ДатаПоступления > ТекущаяДата() Тогда
				Об = СтрокаТаблицы.ЗаказПоставщику.ПолучитьОбъект();
				СтруктураДатаПоступления.КодСтроки = СтрокаТаблицы.ИдентификаторНоменклатуры;
				Если СтруктураДатаПоступления.КодСтроки = 0 Тогда
					СтруктураДатаПоступления.КодСтроки = СтрокаТаблицы.КодСтроки;
				КонецЕсли;
				НСтроки = Об.Товары.НайтиСтроки(СтруктураДатаПоступления);
				Для Каждого НСтрока Из НСтроки Цикл
					НСтрока.ДатаПоступления = ТекущаяДата();
				КонецЦикла;
				Если СтрокаТаблицы.ПоступлениеОднойДатой Тогда
					Об.ДатаПоступления = ТекущаяДата();
				КонецЕсли;
				//Об.ЖелаемаяДатаПоступления = НачалоТекущегоДня;//возможно, нет необходимости
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					сообщить(СокрЛП(СтрокаТаблицы.ЗаказПоставщику)+" не удалось поменять дату поступления ("+СтрокаТаблицы.ДатаПоступления+") на текущую, могут быть проблемы с созданием приходного ордера на товары");
					сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусЗаявокПослеПоступления()
	
	Возврат; //сейчас не используется
	
	ТаблицаНомеровЗаявок = Объект.ТаблицаПоступленийОтбор.Выгрузить(,"НомерЗаявки");
	ТаблицаНомеровЗаявок.Свернуть("НомерЗаявки");
	Структура = Новый Структура("НомерЗаявки");
	КодСтатусаСайт = Формат(Объект.СтатусПослеПоступления, "ЧГ=0");
	Если Не ЗначениеЗаполнено(КодСтатусаСайт) Тогда
		сообщить("Не заполнен новый статус");
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаНомераЗаявки Из ТаблицаНомеровЗаявок Цикл
		Структура.НомерЗаявки = СтрокаНомераЗаявки.НомерЗаявки;
		НайденныеСтроки = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество()>0 Тогда
			НС = 0;
			ПереченьПозиций = "";
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(НайденнаяСтрока.ИдентификаторНоменклатуры) Тогда
					НС = НС + 1;
					ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(НайденнаяСтрока.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатусаСайт;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПереченьПозиций<>"" Тогда
			сообщить(ПереченьПозиций);
			ИзменитьСтатусПозицииНаСайтеСервер(Формат(СтрокаНомераЗаявки.НомерЗаявки,"ЧГ=0"), ПереченьПозиций, КодСтатусаСайт);
		КонецЕсли;
	КонецЦикла;
	//делаем отбор по заявкам
	//ПереченьПозиций = "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатусаСайт;

	//Для Каждого ТекСтрока Из Объект.ТаблицаПоступленийОтбор Цикл
	//		ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(НайденнаяСтрока.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатусаСайт;
	//КонецЦикла;
	//ИзменитьСтатусПозицииНаСайтеСервер(НомерЗаявки, ПереченьПозиций, КодСтатусаСайт);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеИзменитьСостоянияВЗаказах(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;
	ИзменитьСостоянияВЗаказахНаСервере();
	Оповещение = Новый ОписаниеОповещения("ОповещениеИзменитьСтатусыПослеПоступления", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Изменить статусы в заказах ABCP?", РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеСоздатьПриходныйОрдерНаТовары(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;
	СоздатьПриходныйОрдерНаТоварыНаСервере();
	СоздатьОтборНаСервере();
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеИзменитьСостоянияВЗаказах", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Изменить состояния на «Отгрузить» в заказах?", РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеИзменитьСтатусыПослеПоступления(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;
	ИзменитьСтатусыПослеПоступленияНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьИспользоватьОрдернуюСхемуПриПоступлении()
	Возврат Объект.Склад.ИспользоватьОрдернуюСхемуПриПоступлении;
КонецФункции

Функция ПолучитьИспользоватьОрдернуюСхемуПриОтгрузке()
	Возврат Объект.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке;
КонецФункции

&НаСервере
Функция ЕстьНовоеПоступление()
	Если Объект.Поставщик = Объект.ПоступлениеТоваровУслуг.Контрагент Тогда
		Разница = ТекущаяДата()	- Объект.ПоступлениеТоваровУслуг.Дата;
		Если Разница<300 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СоздатьПоступления(Команда)
	Если Объект.ТаблицаПоступленийОтбор.Количество() = 0 Тогда
		сообщить("Не заполнена таблица");
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПоступлениеТоваровУслуг)  Тогда
		Если ЕстьНовоеПоступление() Тогда
			ТекстСообщения = "Уже есть свежее поступление по этому контрагенту";
			ЗаписьВЛог(ТекстСообщения,,Истина);
			ПоказатьЗначение(,Объект.ПоступлениеТоваровУслуг);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СоздатьЗаказыПоставщикамДляДобавленнойНоменклатуры();//если номенклатуру добавили кнопкой "+", то к ней нет заказа поставщику, и поступление не будет проводиться
	СоздатьПоступленияНаСервереИзменитьЗаказы();//у позиций, которых пришло меньше, чем заказано - делим в заказе клиента и заказе поставщику
	ИзменитьДатыПоступленияВЗаказахПоставщикам();//если в заказе поставщика дата поступления больше, чем в поступлении, то не создаётся приходный ордер
	Если НЕ Объект.АвтоматическоеИзменениеСтатусовНаСайтеПриПоступленииИРеализации Тогда//если не надо задавать лишние вопросы, делаем всё автоматически
		ЗакрытьЗаказыПоставщикамПослеСозданияПоступления();//надо закрыть заказы поставщику, по которым пришли все товары, но, если он неоплачен, то тогда он не закроется
	КонецЕсли;
	Если Объект.РегистрироватьЦеныНоменклатуры Тогда
		сообщить("Создаём установку цен номенклатуры, вид цены (покупки): "+Объект.ВидЦены+", вид цены продажи (Настройки+): "+Объект.ВидЦеныПродажи);
		СоздатьУстановкуЦенНоменклатуры(,Объект.ПоступлениеТоваровУслуг);//создаем документ "Установка цен номенклатуры", чтобы руками не делать
	КонецЕсли;
	Если Объект.АвтоматическоеИзменениеСтатусовНаСайтеПриПоступленииИРеализации Тогда//если не надо задавать лишние вопросы, делаем всё автоматически
		Если Объект.ИспользоватьОрдерныеСклады И ПолучитьИспользоватьОрдернуюСхемуПриПоступлении() Тогда
			СоздатьПриходныйОрдерНаТоварыНаСервере();
			СоздатьОтборНаСервере();
		КонецЕсли;
		ИзменитьСостоянияВЗаказахНаСервере();//в заказах клиентов изменяем статус на "К отгрузке"
		ЗакрытьЗаказыПоставщикамПослеСозданияПоступления();//надо закрыть заказы поставщику, по которым пришли все товары, но, если он неоплачен, то тогда он не закроется
		ИзменитьСтатусыПослеПоступленияНаСервере();////меняем статусы на сайте, с учетом разделенных позиций,
		//у новых позиций добавляем специальный комментарий, по которому определяем, какой код строки надо поставить в заказ клиента и заказ поставщику

	Иначе
		Если Элементы.ГруппаПриходныйОрдер.Видимость Тогда
			Если Объект.ИспользоватьОрдерныеСклады И ПолучитьИспользоватьОрдернуюСхемуПриПоступлении() Тогда
				Оповещение = Новый ОписаниеОповещения("ОповещениеСоздатьПриходныйОрдерНаТовары", ЭтаФорма, Параметры);
				ПоказатьВопрос(Оповещение, "Создать приходный ордер на товары и отбор?", РежимДиалогаВопрос.ДаНет, 0);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ОповещениеИзменитьСостоянияВЗаказах", ЭтаФорма, Параметры);
				ПоказатьВопрос(Оповещение, "Изменить состояния на «Отгрузить» в заказах?", РежимДиалогаВопрос.ДаНет, 0);
			КонецЕсли;
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОповещениеИзменитьСостоянияВЗаказах", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, "Изменить состояния на «Отгрузить» в заказах?", РежимДиалогаВопрос.ДаНет, 0);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры//СоздатьПоступления
#КонецОбласти

&НаСервере
Процедура СоздатьЗаказыПоставщикамДляДобавленнойНоменклатуры()
	//если номенклатуру добавили кнопкой "+", то к ней нет заказа поставщику, и поступление не будет проводиться
	НСтроки = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(Новый Структура("ЗаказПоставщику",Документы.ЗаказПоставщику.ПустаяСсылка()));
	Если НСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	ЕстьЭтапыГрафикаОплатыВариантОтсчета = Метаданные.Документы.ПриобретениеТоваровУслуг.ТабличныеЧасти.ЭтапыГрафикаОплаты.Реквизиты.Найти("ВариантОтсчета")<>Неопределено;
	
	ОсновнаяСтавкаНДС = Объект.ОсновнаяСтавкаНДС;
	Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		РазмерСтавкиНДС = 0;
		РазмерСтавкиНДС100 = 100;
	Иначе
		РазмерСтавкиНДС = ?(ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС18, 18, 20);
		РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
	КонецЕсли;
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено Тогда
		ЕстьВариантПриемкиТоваров = Ложь;
		ВариантПриемкиТоваров = "";
	Иначе
		ЕстьВариантПриемкиТоваров = Истина;
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	ДокОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
	ДокОбъект.Заполнить(Неопределено);
	//ДокОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
	//ДокОбъект.Приоритет = Объект.Приоритет;
	Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		ДокОбъект.НомерПоДаннымПоставщика = Объект.НомерВходящегоДокумента;
		ДокОбъект.ДатаПоДаннымПоставщика = Объект.ДатаВходящегоДокумента;
	КонецЕсли;
	ДокОбъект.Контрагент = Объект.Поставщик;
	Если ЗначениеЗаполнено(Объект.ОрганизацияВПоступлении) Тогда
		ДокОбъект.Организация = Объект.ОрганизацияВПоступлении;
	Иначе
		ДокОбъект.Организация = Объект.Организация;
		Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ДокОбъект.Организация = Объект.ОрганизацияРозница;
		КонецЕсли;
	КонецЕсли;
	НеМенятьОрганизацию = Ложь;
	НеМенятьСклад = Ложь;
	НСтроки2 = Объект.ТаблицаСкладов.НайтиСтроки(Новый Структура("Контрагент", ДокОбъект.Контрагент));
	Если НСтроки2.Количество() > 0 Тогда
		Для Каждого НСтрока Из НСтроки2 Цикл
			Если ЗначениеЗаполнено(НСтрока.Организация) Тогда
				ДокОбъект.Организация = НСтрока.Организация;
				НеМенятьОрганизацию = Истина;
				Прервать;
			КонецЕсли;
			Если ЗначениеЗаполнено(НСтрока.Склад) Тогда
				ДокОбъект.Склад = НСтрока.Склад;
				НеМенятьСклад = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДокОбъект.Дата = ТекущаяДата();
	Если ЗначениеЗаполнено(Объект.ДатаПоступления) Тогда
		ДокОбъект.Дата = Объект.ДатаПоступления;
	КонецЕсли;
	//ДокОбъект.Дата = СтрокаЗаявки.dateUpdated;//если загрузка за большой период, лучше ставить дату последнего обновления
	ДокОбъект.НалогообложениеНДС = Объект.НалогообложениеНДСПоступление;
	Попытка
		ДокОбъект.ЗакупкаПодДеятельность = Объект.НалогообложениеНДСПоступление;
	Исключение
	КонецПопытки;
	ДокОбъект.ЦенаВключаетНДС = Объект.ЦенаВключаетНДСПриПокупке;
	Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
	Иначе
		Если НЕ Объект.УТ111 И НЕ Объект.УТ112 Тогда
			ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.УТ111 Тогда
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	КонецЕсли;
	//Если Объект.УТ114 И Объект.Подверсия3 < 6 Тогда
	//	ДокОбъект.ДатаПлатежа = ДокОбъект.Дата + 3600*24;
	//КонецЕсли;		
	ДокОбъект.Комментарий = "создано из модуля обмена по незакрытым заказам поставщику "+ТекущаяДата();
	ДокОбъект.Валюта = Объект.Валюта;//Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.ЦеныЗакупкиВРублях Тогда
		Рубли = Справочники.Валюты.НайтиПоКоду("643");//могут быть расчеты в рублях, например, в Казахстане
		ДокОбъект.Валюта = Рубли;
	КонецЕсли;
	СкладПоступления = Объект.Склад;
	СкладЗаполненИзЗаказаПоставщику = Ложь;
	Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаПоступленийОтбор Цикл
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.ЗаказПоставщику) Тогда
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.ЗаказПоставщику.Склад) Тогда
				СкладПоступления = СтрокаНоменклатуры.ЗаказПоставщику.Склад;
				СкладЗаполненИзЗаказаПоставщику = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СкладЗаполненИзЗаказаПоставщику = Ложь Тогда
		Если НеМенятьСклад = Ложь Тогда
			Если ЗначениеЗаполнено(Объект.СкладВПоступлении) Тогда
				ДокОбъект.Склад = Объект.СкладВПоступлении;
				СкладПоступления= Объект.СкладВПоступлении;
			Иначе
				ДокОбъект.Склад = Объект.Склад;
				СкладПоступления = Объект.Склад;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект.Склад = СкладПоступления;
	КонецЕсли;
	ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокОбъект.Контрагент = Объект.Поставщик;
	ДокОбъект.Партнер = ДокОбъект.Контрагент.Партнер;
	Если ИспользоватьДоговорыСПоставщиками Тогда
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация);
		Если НЕ ЗначениеЗаполнено(Договор) Тогда
			Договор = ОбработкаОбъект.ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация, , ДокОбъект.Контрагент);
		КонецЕсли;
		Если ЗначениеЗаполнено(Договор) Тогда
			Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
				Попытка
					Если Не ЗначениеЗаполнено(Договор.СтавкаНДС) Тогда
						Об = Договор.ПолучитьОбъект();
						Об.СтавкаНДС = ПолучитьСправочникСтавкаНДСПоПеречислению(Объект.ОсновнаяСтавкаНДС);
						Об.ЗАписать();
						Договор = Об.Ссылка;
					КонецЕсли;
					Если Договор.СтавкаНДС.ПеречислениеСтавкаНДС <> Объект.ОсновнаяСтавкаНДС Тогда
						сообщить("В договоре ставка НДС ("+Договор.СтавкаНДС+") не совпадает с настройками модуля ("+Объект.ОсновнаяСтавкаНДС+")");
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				Если Договор.СтавкаНДС <> Объект.ОсновнаяСтавкаНДС Тогда
					сообщить("В договоре ставка НДС ("+Договор.СтавкаНДС+") не совпадает с настройками модуля ("+Объект.ОсновнаяСтавкаНДС+")");
				КонецЕсли;
			КонецЕсли;
			ДокОбъект.ПорядокРасчетов = Договор.ПорядокРасчетов;
			Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДСОпределяетсяВДокументе") <> Неопределено Тогда
				Если Договор.НалогообложениеНДСОпределяетсяВДокументе = Ложь Тогда
					ДокОбъект.НалогообложениеНДС = Договор.НалогообложениеНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.Договор = Договор;
	КонецЕсли;

	//ищем соглашение
	Если Объект.УТ111 Тогда
		ИспользоватьСоглашенияСПоставщиками = Ложь;
	Иначе
		ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	КонецЕсли;
	Если ИспользоватьСоглашенияСПоставщиками Тогда
		СтрокиПоставщика = Объект.ТаблицаСкладов.НайтиСтроки(Новый Структура("Контрагент", Объект.Поставщик));
		Если СтрокиПоставщика.Количество() > 0 Тогда
			Соглашение = СтрокиПоставщика[0].Соглашение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Соглашение) Тогда //И СоздаватьИндивидуальныеСоглашения Тогда
			Соглашение = ОбработкаОбъект.ПолучитьСоглашениеСПоставщиком(ДокОбъект.Контрагент);
		КонецЕсли;
		Если ЗначениеЗаполнено(Соглашение) Тогда
			ДокОбъект.Соглашение = Соглашение;
			ДокОбъект.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;
			Если ЗначениеЗаполнено(Соглашение.Менеджер) Тогда
				ДокОбъект.Менеджер = Соглашение.Менеджер;
			КонецЕсли;
			Если ЗначениеЗаполнено(Соглашение.ФормаОплаты) Тогда
				ДокОбъект.ФормаОплаты = Соглашение.ФормаОплаты;
			КонецЕсли;
			Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
			Иначе
				Если ЗначениеЗаполнено(Соглашение.ПорядокОплаты) Тогда
					ДокОбъект.ПорядокОплаты = Соглашение.ПорядокОплаты;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Соглашение.НаправлениеДеятельности) Тогда
				ДокОбъект.НаправлениеДеятельности = Соглашение.НаправлениеДеятельности;
			КонецЕсли;
			Попытка
				Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
				Иначе
					Если ЗначениеЗаполнено(Соглашение.НалогообложениеНДС) Тогда
						ДокОбъект.НалогообложениеНДС = Соглашение.НалогообложениеНДС;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			ДокОбъект.РегистрироватьЦеныПоставщика = Соглашение.РегистрироватьЦеныПоставщика;
		КонецЕсли;
	КонецЕсли;
	Если НеМенятьОрганизацию = Ложь Тогда
		Если Объект.ЗаполнятьОрганизациюПоСоглашению И ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
			Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Организация) И ДокОбъект.Организация = ДокОбъект.Соглашение.Организация Тогда
				ДокОбъект.Организация = ДокОбъект.Соглашение.Организация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
		Иначе
			ВидДеятельностиНДСОрганизации = Справочники.Организации.ЗакупкаПодДеятельность(Объект.Организация, Объект.Склад, ДокОбъект.Дата);
			ДокОбъект.ЗакупкаПодДеятельность = ВидДеятельностиНДСОрганизации;
		КонецЕсли;
	Исключение
	КонецПопытки;
	//ДокОбъект.ЗакупкаПодДеятельность = Объект.НалогообложениеНДСПоступление;
	
	//Если ((НЕ Объект.УТ111 И НЕ Объект.УТ112) Или Объект.УТ114) И НЕ Объект.УТ115 Тогда
	//	Попытка
	//		ДокОбъект.Курс = 1;
	//		ДокОбъект.Кратность = 1;
	//	Исключение
	//	Конецпопытки;
	//КонецЕсли;
	//Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
	//	ДокОбъект.КурсЧислитель = 1;
	//	ДокОбъект.КурсЗнаменатель = 1;
	//	ДокОбъект.УдалитьПорядокОплаты = Перечисления.УдалитьПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	//КонецЕсли;	

	//ДокОбъект.ПорядокРасчетов = Объект.ПорядокРасчетовЗаказПоставщику;
	ДокОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;//иначе на объект расчетов будет ругаться
	
	//ЗаполнитьОрганизациюИзТабличнойЧасти = Истина;
	ЗаполнитьОрганизациюИзТабличнойЧасти = Ложь;
	Для Каждого СтрокаНоменклатуры Из НСтроки Цикл
		Если ЗаполнитьОрганизациюИзТабличнойЧасти Тогда
			ЗаполнитьЗначенияСвойств(ДокОбъект, СтрокаНоменклатуры, "Организация,Договор,Соглашение");
			ЗаполнитьОрганизациюИзТабличнойЧасти = Ложь;
		КонецЕсли;
		СтрокаДокумента = ДокОбъект.Товары.Добавить();
		СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		Если Объект.НаименованиеХарактеристики<>"" И СтрокаДокумента.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
			СтрокаДокумента.Характеристика = ОбработкаОбъект.ПолучитьХарактеристикуНоменклатуры(СтрокаДокумента.Номенклатура);
		КонецЕсли;
		СтрокаДокумента.Склад = СкладПоступления;
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.Склад) Тогда
			СтрокаДокумента.Склад = СтрокаНоменклатуры.Склад;
		КонецЕсли;
		Если СтрокаНоменклатуры.Контрагент = Объект.КонтрагентНаНаличие Тогда
			Если ЗначениеЗаполнено(Объект.СкладВПоступлении) Тогда
				СтрокаДокумента.Склад = Объект.СкладВПоступлении;
				ЗаписьВЛог(""+СтрокаДокумента.Номенклатура+", "+СтрокаНоменклатуры.ЗаказПоставщику+" устанавливаем склад "+Объект.СкладВПоступлении,Объект.Отладка);
			КонецЕсли;
		КонецЕсли;
		СтрокаДокумента.Количество = СтрокаНоменклатуры.Количество;
		СтрокаНоменклатуры.ИсходноеКоличество = СтрокаНоменклатуры.Количество;
		СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество;
		СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаЗакупки;
		//такого в документе нет, только в форме СтрокаДокумента.ЦенаЗаказа = СтрокаНоменклатуры.ЦенаЗакупки;
		СтрокаДокумента.Сумма = СтрокаНоменклатуры.ЦенаЗакупки * СтрокаНоменклатуры.Количество;
		ОбработкаОбъект.ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтрокаДокумента, ДокОбъект.Договор);
		СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.НомерГТД) Тогда
			СтрокаДокумента.НомерГТД = СтрокаНоменклатуры.НомерГТД;
			Если НЕ СтрокаНоменклатуры.Номенклатура.ВестиУчетПоГТД Тогда
				ОбНоменклатура = СтрокаНоменклатуры.Номенклатура.ПолучитьОбъект();
				//ОбНоменклатура.ОбменДанными.Загрузка = Истина;
				ОбНоменклатура.ВестиУчетПоГТД = Истина;
				ОбНоменклатура.Записать();
			КонецЕсли;
		КонецЕсли;
		Если Объект.УТ114 Тогда
			СтрокаДокумента.Подразделение = Объект.Подразделение;
		КонецЕсли;
		//Если Объект.ИспользоватьСерииНоменклатуры Тогда
		//	СтрокаДокумента.Серия = ОбработкаОбъект.НайтиДобавитьСериюНоменклатуры(СтрокаНоменклатуры);
		//	СтрокаДокумента.СтатусУказанияСерий = 14;//13;
		//Иначе
		//	СтрокаДокумента.СтатусУказанияСерий = 0;//почему-то так надо
		//	СтрокаДокумента.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		//КонецЕсли;
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Объект.СкладВПоступлении) Тогда
		ВТ = ДокОбъект.Товары.Выгрузить(,"Склад");
		СтрокВДокументе = ВТ.Количество();
		ВТ.Свернуть("Склад",);
		Если ВТ.Количество() = 1 Тогда
			ДокОбъект.Склад = ВТ[0].Склад;
		Иначе
			Если ДокОбъект.Склад.ЭтоГруппа Тогда
			Иначе
				времГруппа = ВТ[0].Склад.Родитель;
				Если ЗначениеЗаполнено(времГруппа) И времГруппа.ЭтоГруппа Тогда
					ДокОбъект.Склад = времГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	//ДокОбъект.ДополнительнаяИнформация = 
	Если Метаданные.Документы.ЗаказПоставщику.Реквизиты.Найти("Согласован") <> Неопределено Тогда
		ДокОбъект.Согласован = Истина;
	КонецЕсли;
	//раньше из настроек заполнилиДокОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
		ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
		Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
			СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
			ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
			СтрокаЭтапыГрафикаОплаты = ДокОбъект.ЭтапыГрафикаОплаты[0];
			//СтрокаЭтапыГрафикаОплаты.Заказ = СтрокаДокумента.ЗаказПоставщику;
			//СтрокаЭтапыГрафикаОплаты.СверхЗаказа = Ложь;
			Если ЕстьЭтапыГрафикаОплатыВариантОтсчета Тогда
				СтрокаЭтапыГрафикаОплаты.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
			Попытка
				ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаЗакупкиПоСоглашению(ДокОбъект, ДокОбъект.СуммаДокумента);
			Исключение
			КонецПопытки;
		Иначе
			Попытка
				ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	ТекстСообщения = "Создали заказ поставщику: "+ДокОбъект+", позиций "+НСтроки.Количество()+" дата документа: "+ДокОбъект.Дата+" пользователь: "+ПараметрыСеанса.ТекущийПользователь;
	ЗаписьВЛог(ТекстСообщения,,Истина);
	ДокОбъект.Записать();
	Для Каждого НСтрока Из НСтроки Цикл
		НСтрока.ЗаказПоставщику = ДокОбъект.Ссылка;
	КонецЦикла;
	ЕстьОшибка = Ложь;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = "Проведен заказ поставщику "+ДокОбъект.Ссылка;
		ЗаписьВЛог(ТекстСообщения,,Истина);
	Исключение
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),6,Истина);
		ЕстьОшибка = Истина;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ИзменитьВремяСоздания(ПоДате)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УстановкаЦенНоменклатуры.Ссылка,
		|	УстановкаЦенНоменклатуры.Дата
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		|ГДЕ
		|	УстановкаЦенНоменклатуры.Дата МЕЖДУ &НачДата И &КонДата";
	
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ПоДате));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ПоДате));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НачалоДня(ПоДате)+1;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НаДату = Дата(1,1,1);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаДату = Макс(НаДату, ВыборкаДетальныеЗаписи.Дата + 1);
		//Возврат ВыборкаДетальныеЗаписи.Дата + 1;
	КонецЦикла;
	Возврат НаДату;
КонецФункции

//создаем документ "Установка цен номенклатуры", чтобы руками не делать
Процедура СоздатьУстановкуЦенНоменклатуры(ЗаказПоставщику = Ложь, ДокументОснование = Неопределено)
	//создается установка цен номенклатуры после поступления
	Если ЗаказПоставщику Тогда
		НаДату = ИзменитьВремяСоздания(Объект.ЗаказПоставщику.Дата);
	Иначе
		НаДату = ИзменитьВремяСоздания(Объект.ПоступлениеТоваровУслуг.Дата);
	КонецЕсли;
	ЦенаЗакупочная = Объект.ВидЦены;//ЦенаЗакупочная;
	ВидЦеныПродажи = Объект.ВидЦеныПродажи;//ЦенаЗакупочная;
	//НачатьТранзакцию();
	//Если ЗначениеЗаполнено(Объект.УстановкаЦенНоменклатуры) Тогда
	//	Док = Объект.УстановкаЦенНоменклатуры.ПолучитьОбъект();
	//Иначе
	Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	Если НЕ ДокументОснование = Неопределено Тогда
		Док.ДокументОснование = ДокументОснование;
	КонецЕсли;
	//КонецЕсли;
	Док.Дата = НаДату;
	Док.Согласован = Истина;
	Док.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	Док.ВидыЦен.Очистить();
	НовСтрока = Док.ВидыЦен.Добавить();
	НовСтрока.ВидЦены = ЦенаЗакупочная;
	Если ЗначениеЗаполнено(ВидЦеныПродажи) Тогда
		НовСтрока = Док.ВидыЦен.Добавить();
		НовСтрока.ВидЦены = ВидЦеныПродажи;
	КонецЕсли;
	Док.Товары.Очистить();
	
	МассивНоменклатуры = Новый Массив;
	ПроверятьЦены = Ложь;
	Структура = Новый Структура("Номенклатура"); 
	Если ЗаказПоставщику Тогда
		Если Объект.НеРегистрироватьДешевыеЦены Тогда //Если новая цена дешевле текущей, то не регистрировать её
			//получаем текущие цены из СтрокиНоменклатуры
			Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаЗаказовПоставщикамОтбор Цикл
				МассивНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);
			КонецЦикла;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			               |ИЗ
			               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних";
			Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
			Запрос.УстановитьПараметр("НаДату", НаДату);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
			Иначе
				ПроверятьЦены = Истина;
				ТаблицаЦен = Результат.Выгрузить();
			КонецЕсли;
		КонецЕсли;
		Массив = Новый Массив;
		Для Каждого СтрокаТаблицы Из Объект.ТаблицаЗаказовПоставщикамОтбор Цикл
			Если СтрокаТаблицы.ЦенаПродажи < 0.02 Тогда
				Продолжить;
			КонецЕсли;
			Если Массив.Найти(СтрокаТаблицы.Номенклатура) = Неопределено Тогда
				Массив.Добавить(СтрокаТаблицы.Номенклатура);
				НовСтрока = Док.Товары.Добавить();
				НовСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
				НовСтрока.ВидЦены = ЦенаЗакупочная;
				НовСтрока.Цена = СтрокаТаблицы.ЦенаЗакупки;
				
				Если ПроверятьЦены Тогда
					Структура.Номенклатура = СтрокаТаблицы.Номенклатура;
					НСтроки = ТаблицаЦен.НайтиСтроки(Структура);
					Для Каждого НСтрока Из НСтроки Цикл
						Если СтрокаТаблицы.ЦенаПродажи < НСтрока.Цена Тогда
							Продолжить;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВидЦеныПродажи) Тогда
					НовСтрока = Док.Товары.Добавить();
					НовСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
					НовСтрока.ВидЦены = ВидЦеныПродажи;
					НовСтрока.Цена = СтрокаТаблицы.ЦенаПродажи;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Док.Комментарий = "после заказа поставщику авт. создано из модуля обмена с УТ 11 "+ТекущаяДата();
	Иначе
		Массив = Новый Массив;
		Если Объект.НеРегистрироватьДешевыеЦены Тогда //Если новая цена дешевле текущей, то не регистрировать её
			//получаем текущие цены из СтрокиНоменклатуры
			Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаЗаказовПоставщикамОтбор Цикл
				МассивНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);
			КонецЦикла;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			               |ИЗ
			               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних";
			Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
			Запрос.УстановитьПараметр("НаДату", НаДату);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
			Иначе
				ПроверятьЦены = Истина;
				ТаблицаЦен = Результат.Выгрузить();
			КонецЕсли;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из Объект.ТаблицаПоступленийОтбор Цикл
			Если Массив.Найти(СтрокаТаблицы.Номенклатура) = Неопределено Тогда
				Массив.Добавить(СтрокаТаблицы.Номенклатура);
				НовСтрока = Док.Товары.Добавить();
				НовСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
				НовСтрока.ВидЦены = ЦенаЗакупочная;
				НовСтрока.Цена = СтрокаТаблицы.ЦенаЗакупки;
				
				Если ПроверятьЦены Тогда
					Структура.Номенклатура = СтрокаТаблицы.Номенклатура;
					НСтроки = ТаблицаЦен.НайтиСтроки(Структура);
					Для Каждого НСтрока Из НСтроки Цикл
						Если СтрокаТаблицы.ЦенаПродажи < НСтрока.Цена Тогда
							Продолжить;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВидЦеныПродажи) Тогда
					НовСтрока = Док.Товары.Добавить();
					НовСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
					НовСтрока.ВидЦены = ВидЦеныПродажи;
					НовСтрока.Цена = СтрокаТаблицы.ЦенаПродажи;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Док.Комментарий = "после поступления авт. создано из модуля обмена с УТ 11 "+ТекущаяДата();
	КонецЕсли;
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = "Создана и проведена установка цен номенклатуры по виду цены ("+ЦенаЗакупочная+")"+Док.Ссылка;
		ЗаписьВЛог(ТекстСообщения,1);
		сообщить(ТекстСообщения);
	Исключение
		Док.Записать();
		ТекстСообщения = "Создана, но не проведена установка цен номенклатуры по виду цены ("+ЦенаЗакупочная+")"+Док.Ссылка;
		сообщить(ТекстСообщения);
	КонецПопытки;
	//Объект.УстановкаЦенНоменклатуры = Док.Ссылка;
	//ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаСервере
Функция НезакрытыеЗаказыКлиентаНаСервере(ПерезаполнитьМассивАртикулов = Ложь)
	Если Не ЗначениеЗаполнено(Объект.СтатусПослеРеализации) Тогда
		сообщить("Заполните статус, на который меняются заказы на сайте при реализации");
	КонецЕсли;
	Объект.РеализацияТоваровУслуг = "";
	//РеализацияТоваровУслуг - ПолучитьРезультатЗапросаПоОстаткамЗаказов
	//РегистрНакопления.ТоварыКОтгрузке
	// Список товаров будет перезаполнен остатками неоформленных товаров по заказам. Продолжить?
	//не срабатывает почему-то, делаем по-своему
	//ПолучитьОстатки(Полная = Ложь, ВидЦены, Склад = Неопределено, СписокНоменклатуры = Неопределено) Экспорт
	Массив = Новый Массив;
	Если НЕ ПерезаполнитьМассивАртикулов Тогда
		Объект.ТаблицаРеализаций.Очистить();
		Объект.ТаблицаРеализацийОтбор.Очистить();
		//потом переделать, чтобы не по номенклатуре стыковал, а по кодам строк
		Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		//               |	ЗаказыКлиентовОстатки.ЗаказКлиента,
		//               |	ЗаказыКлиентовОстатки.Номенклатура,
		//               |	ЗаказыКлиентовОстатки.ЗаказаноОстаток КАК Количество,
		//               |	ЗаказыКлиентовОстатки.КОформлениюОстаток,
		//               |	ВЫБОР
		//               |		КОГДА ЗаказыКлиентовОстатки.ЗаказаноОстаток = 0
		//               |			ТОГДА 0
		//               |		ИНАЧЕ ЗаказыКлиентовОстатки.СуммаОстаток / ЗаказыКлиентовОстатки.ЗаказаноОстаток
		//               |	КОНЕЦ КАК ЦенаПродажи,
		//               |	ЗаказыКлиентовОстатки.СуммаОстаток,
		//               |	ЗаказыКлиентовОстатки.ЗаказКлиента.НомерПоДаннымКлиента КАК НомерЗаявки,
		//               |	ЗаказПоставщикуТовары.Ссылка КАК ЗаказПоставщику,
		//               |	ЗаказыКлиентовОстатки.Номенклатура.Артикул КАК Артикул,
		//               |	ЗаказыКлиентовОстатки.Номенклатура.Производитель КАК Производитель,
		//               |	ЗаказыКлиентовОстатки.КодСтроки,
		//               |	ЗаказыКлиентовОстатки.КодСтроки КАК ИдентификаторНоменклатуры,
		//               |	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток КАК КОтгрузке,
		//               |	ВЫБОР
		//               |		КОГДА ЗаказыКлиентовОстатки.ЗаказаноОстаток > ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток
		//               |			ТОГДА ИСТИНА
		//               |		ИНАЧЕ ЛОЖЬ
		//               |	КОНЕЦ КАК Некорректная,
		//               |	ЗаказПоставщикуТовары.Цена КАК ЦенаПродажиЗаказПоставщику
		//               |ИЗ
		//               |	РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		//               |		ПО ЗаказыКлиентовОстатки.ЗаказКлиента = ЗаказПоставщикуТовары.Ссылка.ДокументОснование
		//               |			И ЗаказыКлиентовОстатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		//               |		ПО ЗаказыКлиентовОстатки.ЗаказКлиента = РеализацияТоваровУслугТовары.ЗаказКлиента
		//               |			И ЗаказыКлиентовОстатки.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
		//               |		ПО ЗаказыКлиентовОстатки.Номенклатура = ТоварыКОтгрузкеОстатки.Номенклатура
		//               |ГДЕ
		//               |	ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент = &Контрагент
		//               |	И ЗаказыКлиентовОстатки.ЗаказКлиента.НомерПоДаннымКлиента <> &НомерПоДаннымКлиента
		//               |	И ЗаказыКлиентовОстатки.ЗаказКлиента.Проведен = ИСТИНА
		//               |	И ЗаказыКлиентовОстатки.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		//               |	И ЗаказыКлиентовОстатки.ЗаказаноОстаток <= ЗаказыКлиентовОстатки.КОформлениюОстаток
		//               |	И ЗаказыКлиентовОстатки.ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		//               |
		//               |УПОРЯДОЧИТЬ ПО
		//               |	НомерЗаявки";
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента,
		               |	ЗаказыКлиентовОстатки.Номенклатура КАК Номенклатура,
		               |	ЗаказыКлиентовОстатки.ЗаказаноОстаток КАК Количество,
		               |	ЗаказыКлиентовОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
		               |	ВЫБОР
		               |		КОГДА ЗаказыКлиентовОстатки.ЗаказаноОстаток = 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ЗаказыКлиентовОстатки.СуммаОстаток / ЗаказыКлиентовОстатки.ЗаказаноОстаток
		               |	КОНЕЦ КАК ЦенаПродажи,
		               |	ЗаказыКлиентовОстатки.СуммаОстаток КАК СуммаОстаток,
		               |	ЗаказыКлиентовОстатки.ЗаказКлиента.НомерПоДаннымКлиента КАК НомерЗаявки,
		               |	ЗаказПоставщикуТовары.Ссылка КАК ЗаказПоставщику,
		               |	ЗаказыКлиентовОстатки.Номенклатура.Артикул КАК Артикул,
		               |	ЗаказыКлиентовОстатки.Номенклатура.Производитель КАК Производитель,
		               |	ЗаказыКлиентовОстатки.КодСтроки КАК КодСтроки,
		               |	ЗаказыКлиентовОстатки.КодСтроки КАК ИдентификаторНоменклатуры,
		               |	ЗаказПоставщикуТовары.Цена КАК ЦенаПродажиЗаказПоставщику,
		               |	ЗаказыКлиентовОстатки.Склад КАК Склад
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		               |		ПО ЗаказыКлиентовОстатки.ЗаказКлиента = ЗаказПоставщикуТовары.Ссылка.ДокументОснование
		               |			И ЗаказыКлиентовОстатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |		ПО ЗаказыКлиентовОстатки.ЗаказКлиента = РеализацияТоваровУслугТовары.ЗаказКлиента
		               |			И ЗаказыКлиентовОстатки.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
		               |ГДЕ
		               |	ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент = &Контрагент
		               |	И ЗаказыКлиентовОстатки.ЗаказКлиента.НомерПоДаннымКлиента <> &ПустойНомерПоДаннымКлиента
		               |	И ЗаказыКлиентовОстатки.ЗаказКлиента.Проведен = ИСТИНА
		               |	И ЗаказыКлиентовОстатки.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		               |	И ЗаказыКлиентовОстатки.ЗаказаноОстаток <= ЗаказыКлиентовОстатки.КОформлениюОстаток
		               |	И ЗаказыКлиентовОстатки.ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		               |	И (ЗаказПоставщикуТовары.Ссылка ЕСТЬ NULL
		               |			ИЛИ ЗаказПоставщикуТовары.Ссылка.Дата > &СДаты)
		               |	И ЗаказыКлиентовОстатки.ЗаказаноОстаток > 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
		               |	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
		               |	ТоварыКОтгрузкеОстатки.Склад КАК Склад
		               |ПОМЕСТИТЬ ВТКОтгрузке
		               |ИЗ
		               |	РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
		               |ГДЕ
		               |	ТоварыКОтгрузкеОстатки.Номенклатура В
		               |			(ВЫБРАТЬ
		               |				ВТ.Номенклатура
		               |			ИЗ
		               |				ВТ)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ.ЗаказКлиента КАК ЗаказКлиента,
		               |	ВТ.Номенклатура КАК Номенклатура,
		               |	ВТ.Количество КАК Количество,
		               |	ВТ.КОформлениюОстаток КАК КОформлениюОстаток,
		               |	ВТ.ЦенаПродажи КАК ЦенаПродажи,
		               |	ВТ.СуммаОстаток КАК СуммаОстаток,
		               |	ВТ.НомерЗаявки КАК НомерЗаявки,
		               |	ВТ.ЗаказПоставщику КАК ЗаказПоставщику,
		               |	ВТ.Артикул КАК Артикул,
		               |	ВТ.Производитель КАК Производитель,
		               |	ВТ.КодСтроки КАК КодСтроки,
		               |	ВТ.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
		               |	ВТ.ЦенаПродажиЗаказПоставщику КАК ЦенаПродажиЗаказПоставщику,
		               |	ВТ.Склад КАК Склад,
		               |	ВТКОтгрузке.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
		               |	ВЫБОР
		               |		КОГДА ВТ.Количество > ВТКОтгрузке.КОтгрузкеОстаток
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Некорректная
		               |ИЗ
		               |	ВТ КАК ВТ
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКОтгрузке КАК ВТКОтгрузке
		               |		ПО ВТ.Номенклатура = ВТКОтгрузке.Номенклатура";
		//|	И ЗаказыКлиентовОстатки.ЗаказаноОстаток <= ЗаказыКлиентовОстатки.КОформлениюОстаток - тогда то, что у нас на наличии, не будет попадать
		//|	РеализацияТоваровУслугТовары.Ссылка КАК РеализацияТоваровУслуг,
		Если НЕ Объект.НеУчитыватьЗакрытыеЗаказыПокупателя Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаказыКлиентовОстатки.ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)", "");
		КонецЕсли;
		               
		Запрос.УстановитьПараметр("Контрагент", Объект.Клиент);
		Запрос.УстановитьПараметр("ПустойНомерПоДаннымКлиента", "");
		Если ЗначениеЗаполнено(Объект.ДатаНачалаУчета) Тогда
			Запрос.УстановитьПараметр("СДаты", Объект.ДатаНачалаУчета);
		Иначе
			Запрос.УстановитьПараметр("СДаты", ДобавитьМесяц(ТекущаяДатаСеанса(),-6));
		КонецЕсли;
		Результат = Запрос.Выполнить();//Запрос.ВыполнитьПакетСПромежуточнымиДанными()[0].Выгрузить()
		Если Результат.Пустой() Тогда
			ЗаписьВЛог("Нет незакрытых заказов клиента "+Объект.Клиент,1,Истина);
			Возврат Массив;
		КонецЕсли;
		Объект.ТаблицаРеализаций.Загрузить(Результат.Выгрузить());
	КонецЕсли;
	МассивУникальныхАртикулов = Новый Массив;
	Для Каждого ТекСтрока Из Объект.ТаблицаРеализаций Цикл
		Если ТекСтрока.Количество < 0 Тогда
			ТекСтрока.Количество = 0;
		КонецЕсли;
	КонецЦикла;
	Структура = Новый Структура("Количество",0);
	НайденныеСтроки = Объект.ТаблицаРеализаций.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.ТаблицаРеализаций.Удалить(НайденнаяСтрока);
	КонецЦикла;
	МассивУникальныхАртикулов = Новый Массив;
	Для Каждого ТекСтрока Из Объект.ТаблицаРеализаций Цикл
		врем = ТекСтрока.Артикул+ТекСтрока.КодСтроки;
		Если МассивУникальныхАртикулов.Найти(врем) = Неопределено Тогда
			МассивУникальныхАртикулов.Добавить(врем);
		Иначе
			ТекСтрока.Количество = 0;
		КонецЕсли;
	КонецЦикла;
	//в каких-то случаях строки задваиваются, поэтому, проверяем и удаляем задвоения
	НайденныеСтроки = Объект.ТаблицаРеализаций.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.ТаблицаРеализаций.Удалить(НайденнаяСтрока);
	КонецЦикла;
	ЗаполнитьШтрихКодыПоступлениеРеализация(Истина);
	//Массив = Объект.ТаблицаРеализаций.Выгрузить().Свернуть("Артикул").ВыгрузитьКолонку("Артикул");
	Если Объект.ТаблицаРеализаций.Количество()>0 Тогда
		ЗаполнитьСтатусыССайта();
	КонецЕсли;

	ТЗ = Объект.ТаблицаРеализаций.Выгрузить();
	ТЗ.Свернуть("Артикул");
	Массив = ТЗ.ВыгрузитьКолонку("Артикул");
	Возврат Массив;
	//Выборка = Результат.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Не ЗначениеЗаполнено(Выборка.НомерЗаявки) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	НовСтрока = Объект.ТаблицаРеализаций.Добавить();
	//	ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
	//КонецЦикла;
КонецФункции

&НаКлиенте
Процедура НезакрытыеЗаказыКлиента(Команда)
	Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
		сообщить("Заполните клиента");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СтатусПослеРеализации) Тогда
		сообщить("Заполните статус после реализации");
		Возврат;
	КонецЕсли;
	Массив = НезакрытыеЗаказыКлиентаНаСервере();
	Элементы.АртикулРеализация.СписокВыбора.ЗагрузитьЗначения(Массив);
КонецПроцедуры

&НаСервере
Процедура СоздатьРеализацииНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//взял из модуля процедуру СоздатьРеализацииТоваровУслуг               
	//ЭтотОбъект.ТЗНоменклатура.Сортировать("НомерЗаявки, distributorId");
	//Структура = Новый Структура("НомерЗаявки");
	ОсновнаяСтавкаНДС = Объект.ОсновнаяСтавкаНДС;
	Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		РазмерСтавкиНДС = 0;
		РазмерСтавкиНДС100 = 100;
	Иначе
		РазмерСтавкиНДС = ?(ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС18, 18, 20);
		РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
	КонецЕсли;
	Если Объект.ТаблицаРеализацийОтбор.Количество() = 0 Тогда
		сообщить("Не заполнена таблица незакрытых реализаций");
		Возврат;
	КонецЕсли;
	Структура = Новый Структура("ВДокумент", Ложь);
	НайденныеСтроки = Объект.ТаблицаРеализацийОтбор.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.ТаблицаРеализацийОтбор.Удалить(НайденнаяСтрока);
	КонецЦикла;
	Если Объект.ТаблицаРеализацийОтбор.Количество() = 0 Тогда
		сообщить("Не заполнена таблица");
		Возврат; 
	КонецЕсли;
	//Если Не ЗначениеЗаполнено(Объект.СтатусДоРеализации) И Не ЗначениеЗаполнено(Объект.СтатусПослеРеализации) Тогда
	Если Не ЗначениеЗаполнено(Объект.СтатусПослеРеализации) Тогда
		сообщить("Заполните статусы, на который меняются позиции в заказах на сайте после реализации");
		Возврат; 
	КонецЕсли;
	ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	ДокОбъект.Комментарий = "Авт. создан "+ТекущаяДата();
	Если Объект.ТаблицаРеализацийОтбор.Количество() = 1 Тогда
		стр = Объект.ТаблицаРеализацийОтбор[0];
		ДокОбъект.ЗаказКлиента = стр.ЗаказКлиента;
		ДокОбъект.АдресДоставки = стр.ЗаказКлиента.АдресДоставки;
		ДокОбъект.ОснованиеДата = НачалоДня(стр.ЗаказКлиента.Дата);
		ДокОбъект.ОснованиеНомер = Формат(стр.НомерЗаявки, "ЧГ=0");
		ДокОбъект.Основание = "Заказ № " + Формат(стр.НомерЗаявки, "ЧГ=0") + " от "+Дата(стр.ЗаказКлиента.Дата);
	Иначе
		стр = Объект.ТаблицаРеализацийОтбор[0];
		ДокОбъект.ОснованиеДата = НачалоДня(стр.ЗаказКлиента.Дата);
		ДокОбъект.ОснованиеНомер = Формат(стр.НомерЗаявки, "ЧГ=0");
		ДокОбъект.Основание = "Первый Заказ № " + Формат(стр.НомерЗаявки, "ЧГ=0") + " от "+Дата(стр.ЗаказКлиента.Дата);
		ДокОбъект.ЗаказКлиента = стр.ЗаказКлиента;//иначе не видно во взаиморасчетах, но ниже указано
		//ДокОбъект.ОснованиеДата = НачалоДня(СтрокаЗаявки.ДатаЗаявки);
		//ДокОбъект.ОснованиеНомер = Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0");
		//ДокОбъект.Основание = "Заказ № " + Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0") + " от "+Дата(СтрокаЗаявки.ДатаЗаявки);
	КонецЕсли;
	ДокОбъект.Склад = Объект.Склад;
	ДокОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	ДокОбъект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.ЦеныПродажиВРублях Тогда
		Рубли = Справочники.Валюты.НайтиПоКоду("643");//могут быть расчеты в рублях, например, в Казахстане
		ДокОбъект.Валюта = Рубли;
	КонецЕсли;
	ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
	Попытка
		ДокОбъект.Курс = 1;
		ДокОбъект.Кратность = 1;
	Исключение
	Конецпопытки;
	//Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Если Не Объект.УТ111 Тогда
		//ДокОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг;
		ДокОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	КонецЕсли;
	Если Не Объект.УТ112 Тогда
		Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
		Иначе
			ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
	КонецЕсли;
	Если Объект.УТ114 И Объект.Подверсия3 < 6 Тогда
		ДокОбъект.ДатаПлатежа = ДокОбъект.Дата;
	КонецЕсли;
	ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;//РеглУчет;//РеализацияКлиенту
	//теперь заполняем табличную часть
	ДокОбъект.Партнер = Объект.Клиент.Партнер;
	ДокОбъект.Контрагент = Объект.Клиент;
	ДокОбъект.Организация = Объект.Организация;//Розница;
	Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ДокОбъект.Организация = Объект.ОрганизацияРозница;
	КонецЕсли;
	ДокОбъект.БанковскийСчетКонтрагента = ОбработкаОбъект.ПолучитьБанковскийСчетПоУмолчанию(ДокОбъект.Контрагент, ДокОбъект.Валюта);
	ДокОбъект.БанковскийСчетОрганизации = ОбработкаОбъект.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДокОбъект.Организация, ДокОбъект.Валюта);	
	Если Не ЗначениеЗаполнено(ДокОбъект.БанковскийСчетОрганизации) Тогда
		ДокОбъект.БанковскийСчетОрганизации = Объект.БанковскийСчет;
	КонецЕсли;
	ДокОбъект.НалогообложениеНДС = Объект.НалогообложениеНДСРеализация;
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	Если ИспользоватьСоглашенияСКлиентами Тогда
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокОбъект.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
		Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
			ДокОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			ОбработкаОбъект.ЗаполнитьПоСоглашениюСКлиентом(ДокОбъект);
		КонецЕсли;
		//Если Не ЗначениеЗаполнено(ДокОбъект.Соглашение) И НЕ СоздаватьИндивидуальныеСоглашения Тогда
		//	Если СтрокаЗаявки.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		//		ДокОбъект.Соглашение = СоглашениеРозница;
		//	Иначе
		//		ДокОбъект.Соглашение = СоглашениеОпт;
		//	КонецЕсли;
		//КонецЕсли;
		//ЗаполнитьПоСоглашениюСКлиентом(ДокОбъект);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокОбъект.Соглашение) И Объект.СоздаватьИндивидуальныеСоглашения Тогда
		ДокОбъект.Соглашение = ОбработкаОбъект.ПолучитьСоглашениеСКлиентом(ДокОбъект.Контрагент);
		Если ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
			ОбработкаОбъект.ЗаполнитьПоСоглашениюСКлиентом(ДокОбъект);
		КонецЕсли;
	КонецЕсли;
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	Если ИспользоватьСоглашенияСКлиентами Тогда
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокОбъект.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
		Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
			ДокОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
			Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				ДокОбъект.Соглашение = Объект.СоглашениеРозница;
			Иначе
				ДокОбъект.Соглашение = Объект.СоглашениеОпт;
			КонецЕсли;
		КонецЕсли;
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ЗаполнитьПоСоглашениюСКлиентом(ДокОбъект);
	КонецЕсли;
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	Если ИспользоватьДоговорыСКлиентами Тогда
		ДокОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация, ДокОбъект.Валюта);
		Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
			Договор = ДокОбъект.Договор;
			Если НЕ Объект.УТ111 И НЕ Объект.УТ112 И НЕ Объект.УТ113 И НЕ Объект.УТ113 И НЕ (Объект.УТ114 И (Объект.Подверсия3=3 Или Объект.Подверсия3=1)) Тогда //в 11.4.3 этого реквизита нет
				Если Договор.НалогообложениеНДСОпределяетсяВДокументе = Ложь Тогда
					ДокОбъект.НалогообложениеНДС = Договор.НалогообложениеНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.СкидкиРассчитаны = Истина;
	ДокОбъект.РеализацияПоЗаказам = Истина;
	//ПеречислениеСсылка.ПорядокРасчетов
	ДокОбъект.ПорядокРасчетов = Объект.ПорядокРасчетов;
	ДокОбъект.Дата = ТекущаяДата();
	СтруктураОтветственныхЛиц = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(ДокОбъект.Организация, ДокОбъект.Дата);
	ДокОбъект.Руководитель = СтруктураОтветственныхЛиц.РуководительСсылка;
	ДокОбъект.ГлавныйБухгалтер = СтруктураОтветственныхЛиц.ГлавныйБухгалтерСсылка;
	//ДокОбъект.ЗакупкаПодДеятельность = Объект.НалогообложениеНДСРеализация;
	//ДокОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная
	ДокОбъект.Согласован = Истина;
	//ДокОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	//Если СтрокаЗаявки.АдресДоставки = "Самовывоз" Тогда
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;//Если НЕ УТ111 Тогда
	//Иначе
	//	ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
	//КонецЕсли;
	//ДокОбъект.АдресДоставки = СтрокаЗаявки.АдресДоставки + " по заявке № "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" от "+СтрокаЗаявки.ДатаЗаявки;
	ДокОбъект.ЦенаВключаетНДС = Объект.ЦенаВключаетНДСПриПродаже;
	ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	//ДокОбъект.АдресДоставки = СтрокаЗаявки.АдресДоставки + " по заявке № "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" от "+СтрокаЗаявки.ДатаЗаявки;
	//ДокОбъект.НаправлениеДеятельности = НаправлениеДеятельности;
	ДокОбъект.Подразделение = Объект.Подразделение;
	//еще нужно Обработка.ПомощникЗачетаОплат - будет или в РасшифровкаПлатежа или во временном хранилище
	ДокОбъект.Товары.Очистить();
	НС = 0;
	//ДокОбъект.Организация = Объект.Организация;
	ДокОбъект.Дата = ТекущаяДата();//СтрокаНоменклатуры.ЗаказКлиента.ДатаОбновления;//- а то возвраты  некорректные будут ТекущаяДата();//ЗаказКлиента.Дата;
	Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаРеализацийОтбор Цикл
		Если Не ЗначениеЗаполнено(ДокОбъект.ЗаказКлиента) Тогда
			ДокОбъект.ЗаказКлиента = СтрокаНоменклатуры.ЗаказКлиента;
		КонецЕсли;
		СтрокаДокумента = ДокОбъект.Товары.Добавить();
		СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.Склад) Тогда
			СтрокаДокумента.Склад = СтрокаНоменклатуры.Склад;
		Иначе
			СтрокаДокумента.Склад = Объект.Склад;
		КонецЕсли;
		СтрокаДокумента.Количество = СтрокаНоменклатуры.Количество;
		СтрокаДокумента.КоличествоУпаковок = СтрокаНоменклатуры.Количество;
		СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаПродажи;
		СтрокаДокумента.Сумма = СтрокаНоменклатуры.ЦенаПродажи*СтрокаНоменклатуры.Количество;
		Если Объект.НалогообложениеНДСРеализация = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			СтрокаДокумента.СтавкаНДС = ОсновнаяСтавкаНДС;
			СтрокаДокумента.СуммаНДС = СтрокаДокумента.Сумма/РазмерСтавкиНДС100*РазмерСтавкиНДС;
		Иначе
			СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтрокаДокумента.СуммаНДС = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.ЗаказКлиента) Тогда
			СтрокаДокумента.ЗаказКлиента = СтрокаНоменклатуры.ЗаказКлиента;
			ДокОбъект.Организация = СтрокаНоменклатуры.ЗаказКлиента.Организация;
			Если НС = 0 И ((СтрокаДокумента.ЗаказКлиента.Партнер <> ДокОбъект.Партнер) Или (СтрокаДокумента.ЗаказКлиента.Контрагент <> ДокОбъект.Контрагент)) Тогда
				ДокОбъект.Партнер = СтрокаДокумента.ЗаказКлиента.Партнер;
				ДокОбъект.Контрагент = СтрокаДокумента.ЗаказКлиента.Контрагент;
				Объект.Клиент = СтрокаДокумента.ЗаказКлиента.Контрагент;
				сообщить("Исправлен контрагент и партнер на данные из заказа: "+ДокОбъект.Партнер.Код);
			КонецЕсли;
		КонецЕсли;
		СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
		СтрокаДокумента.КодСтроки = СтрокаНоменклатуры.КодСтроки;
		//СтрокаДокумента.КлючСвязи = СтрокаДокумента.НомерСтроки;
		НС = НС + 1;
	КонецЦикла;
	ВТ = Объект.ТаблицаРеализацийОтбор.Выгрузить(,"Склад");
	СтрокВДокументе = ВТ.Количество();
	ВТ.Свернуть("Склад",);
	Если ВТ.Количество() = 1 Тогда
		ДокОбъект.Склад = ВТ[0].Склад;
	Иначе
		Если ДокОбъект.Склад.ЭтоГруппа Тогда
		Иначе
			времГруппа = ВТ[0].Склад.Родитель;
			Если ЗначениеЗаполнено(времГруппа) И времГруппа.ЭтоГруппа Тогда
				ДокОбъект.Склад = времГруппа;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.СуммаВзаиморасчетов = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	//ВариантОплатыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки");
	Попытка
		Если Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Найти("ДатаПлатежа") <> Неопределено Тогда
			ДокОбъект.ДатаПлатежа = ДокОбъект.Дата;
		КонецЕсли;
		Если Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Найти("ДатаРаспоряжения") <> Неопределено Тогда
			ДокОбъект.ДатаРаспоряжения = ДокОбъект.Дата;
		КонецЕсли;
	Исключение
		сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЖелаемаяДатаОтгрузки = ДокОбъект.Дата;
	ДокОбъект.Комментарий = "Авт. создана реализация по клиенту "+ТекущаяДата();
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
	КонецПопытки;
	Объект.РеализацияТоваровУслуг = ДокОбъект.Ссылка;
	//записываем статус
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
			     |	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
			     |ИЗ
			     |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			     |ГДЕ
			     |	ДополнительныеРеквизитыИСведения.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", "ДатаОбновленияСтатусаABCP (Реализации товаров и услуг)");
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СведениеДатаОбновленияСтатусаABCP = Выборка.Ссылка;
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
		МенеджерЗаписи.Свойство = СведениеДатаОбновленияСтатусаABCP;
		МенеджерЗаписи.Значение = ТекущаяДата();
		МенеджерЗаписи.Записать();
	КонецЕсли;
	ПолучитьСтатусыABCPДляРеализации();
	
	//!!! изменить статус заказов на "Закрыт", по которым прошла реализация
	Если Лев(Объект.АдресСервиса,4) <> "7car" Тогда
		ТЗ = Объект.ТаблицаРеализацийОтбор.Выгрузить(,"ЗаказКлиента");
		ТЗ.Свернуть("ЗаказКлиента",);
		МассивЗаказов = ТЗ.ВыгрузитьКолонку("ЗаказКлиента");
		Для Каждого ЗаказСсылка Из МассивЗаказов Цикл
			Если ЗаказСсылка.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
				Продолжить;
			КонецЕсли;
			ПозицийТоваров = 0;
			ПозицийОтгрузить = 0;
			Для Каждого ТекСтрока Из ЗаказСсылка.Товары Цикл
				Если ТекСтрока.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
					ПозицийТоваров = ПозицийТоваров + 1;
					//если позиция отгружена, или не требуется, тогда её считаем
					Если ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Или ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
						ПозицийОтгрузить = ПозицийОтгрузить + 1;
					КонецЕсли;
				КонецЕсли;
				//если у всех строк статус "Отгрузить"
			КонецЦикла;
			Если ПозицийТоваров > 0 И ПозицийТоваров = ПозицийОтгрузить Тогда
				ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
				ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					ТекстСообщения = "Закрыт заказ клиента "+ДокОбъект.Ссылка;
					ЗаписьВЛог(ТекстСообщения,,Истина);
				Исключение
					ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),6,Истина);
					ДокОбъект.Записать();
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусыABCPДляРеализации()
	//получаем с сервера статусы ABCP
	//лучше сделать фильтр по заявкам и проходит по позициям, вдруг все строки - это одна заявка, тогда один запрос делать
	ЗагружатьОчищенныеАртикулы = Объект.ЗагружатьОчищенныеАртикулы;
	ТЗ = Объект.ТаблицаРеализацийОтбор.Выгрузить(, "НомерЗаявки");
	ТЗ.Свернуть("НомерЗаявки",);
	Структура = Новый Структура("ИдентификаторНоменклатуры");
	СтруктураСтарая = Новый Структура("НомерЗаявки");
	СтруктураСтарая.Вставить("Артикул");
	СтруктураСтарая.Вставить("Производитель");
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если ТекСтрока.НомерЗаявки = 0 Тогда
			сообщить("Нет № заказа");// у позиции: "+ТекСтрока.Номенклатура);
			Продолжить;
		КонецЕсли;
		ТекстЗапроса = "/cp/order?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль+"&number="+Формат(ТекСтрока.НомерЗаявки, "ЧГ=0");
		HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		Элемент = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Для Каждого Позиция Из Элемент.positions Цикл
			Структура.ИдентификаторНоменклатуры = Число(Позиция.id);
			НайденныеСтроки = Объект.ТаблицаРеализацийОтбор.НайтиСтроки(Структура);
			Если НайденныеСтроки.Количество()>0 Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.КодСтатуса = Позиция.statusCode;
					НайденнаяСтрока.deadline = Позиция.deadline;
					НайденнаяСтрока.routeId = Позиция.routeId;
					НайденнаяСтрока.КодСтатуса = Позиция.statusCode;
					Прервать;//иначе при задвоениях некорректно работает
				КонецЦикла;
			Иначе
				//ищем по старому
				СтруктураСтарая.НомерЗаявки = ТекСтрока.НомерЗаявки;
				Если ЗагружатьОчищенныеАртикулы Тогда
					СтруктураСтарая.Артикул = Позиция.numberFix;
				Иначе
					СтруктураСтарая.Артикул = Позиция.number;
				КонецЕсли;
				СтруктураСтарая.Производитель = Позиция.brand;
				НайденныеСтроки = Объект.ТаблицаРеализацийОтбор.НайтиСтроки(СтруктураСтарая);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока.ИдентификаторНоменклатуры > 10000 Тогда //одна и та же позиция в документе, предыдущая уже заполнена
						Продолжить;
					КонецЕсли;
					НайденнаяСтрока.КодСтатуса = Позиция.statusCode;
					НайденнаяСтрока.ИдентификаторНоменклатуры = Число(Позиция.id);//чтобы, когда статусы на сайт позиции выгружаются, нужен ид.позиции
					НайденнаяСтрока.deadline = Позиция.deadline;
					НайденнаяСтрока.routeId = Позиция.routeId;
					ТекстСообщения = "по заявке "+Формат(ТекСтрока.НомерЗаявки, "ЧГ=0")+" артикул "+СтруктураСтарая.Артикул+" бренд "+СтруктураСтарая.Производитель+", статус в ABCP "+НайденнаяСтрока.КодСтатуса;
					ЗаписьВЛог("подбор кодов строк в реализации "+ТекстСообщения,1);
					Если (НайденнаяСтрока.КодСтатуса = Объект.КодСтатусаОтказ) Или (НайденнаяСтрока.КодСтатуса = Объект.КодСтатусаВозврат) Тогда
						ЗаписьВЛог("На сайте отказ по позиции "+ТекстСообщения,5,Истина);
					КонецЕсли;
					Если (НайденнаяСтрока.КодСтатуса = Объект.СтатусПослеРеализации) Тогда
						ЗаписьВЛог("На сайте уже статус "+Формат(Объект.СтатусПослеРеализации,"ЧГ=0")+" по позиции "+ТекстСообщения,5,Истина);
					КонецЕсли;
					Прервать;//иначе при задвоениях некорректно работает
					//Если НайденнаяСтрока.КодСтатуса <> Объект.СтатусДоПоступления Тогда
					//	сообщить("Не сходится статус ("+НайденнаяСтрока.КодСтатуса+") с заданным ("+Объект.СтатусДоПоступления+") по позиции " + СокрЛП(Позиция.numberFix) + " " + Позиция.description);
					//	НайденнаяСтрока.Некорректная = Истина;
					//Иначе
					//КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеИзменитьСтатусыПослеРеализации(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		//ОткрытьЗначение(Объект.РеализацияТоваровУслуг);
		ПоказатьЗначение(,Объект.РеализацияТоваровУслуг);
	    Возврат;
	КонецЕсли;
	ИзменитьСтатусыПослеРеализацииНаСервере();
	//Попытка
	//	ОткрытьЗначение(Объект.РеализацияТоваровУслуг);
	//Исключение
	//КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура СоздатьРасходныйОрдер()
	Если НЕ ЗначениеЗаполнено(Объект.РеализацияТоваровУслуг) Тогда
		Сообщить("Расходный ордер на товары можно создать только после создания реализации");
		Возврат;
	КонецЕсли;
	ДокОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.ДатаОтгрузки = ДокОбъект.Дата;
	ДокОбъект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.НайтиПоКоду("Отгрузка");
	ДокОбъект.Комментарий = "Создан автоматически "+ДокОбъект.Дата;
	ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.ОтгружаемыеТовары.Очистить();
	ДокОбъект.Получатель = Объект.Клиент.Партнер;
	ДокОбъект.Склад = Объект.Склад;
	ДокОбъект.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
	ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;
	ДокОбъект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");

	ДокОбъект.ТоварыПоРаспоряжениям.Очистить();
	Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаРеализацийОтбор Цикл
		СтрокаОтгружаемыеТовары = ДокОбъект.ОтгружаемыеТовары.Добавить();
		СтрокаОтгружаемыеТовары.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		СтрокаОтгружаемыеТовары.Количество = СтрокаНоменклатуры.Количество;
		СтрокаОтгружаемыеТовары.КоличествоУпаковок = СтрокаНоменклатуры.Количество;
		СтрокаОтгружаемыеТовары.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		
		СтрокаТоварыПоРаспоряжениям = ДокОбъект.ТоварыПоРаспоряжениям.Добавить();
		СтрокаТоварыПоРаспоряжениям.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		СтрокаТоварыПоРаспоряжениям.Количество = СтрокаНоменклатуры.Количество;
		СтрокаТоварыПоРаспоряжениям.Распоряжение = СтрокаНоменклатуры.ЗаказКлиента;
	КонецЦикла;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),5,Истина);
	КонецПопытки;
	ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),5,Истина);
	КонецПопытки;
	Объект.РасходныйОрдерНаТовары = ДокОбъект.Ссылка;
КонецПроцедуры

&НаСервере
Процедура СоздатьОтборИзЯчеек()
	Если НЕ ЗначениеЗаполнено(Объект.РасходныйОрдерНаТовары) Тогда
		Сообщить("Документ отбора можно создать только после расходного одера на товары");
		Возврат;
	КонецЕсли;
	ДокОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.ДатаНачалаВыполнения = ДокОбъект.Дата;
	ДокОбъект.ДатаОкончанияВыполнения = ДокОбъект.Дата;
	ДокОбъект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.НайтиПоКоду("Отгрузка");
	ДокОбъект.Комментарий = "Создан автоматически "+ДокОбъект.Дата;;
	ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
	ДокОбъект.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.Распоряжение = Объект.РасходныйОрдерНаТовары;
	ДокОбъект.Склад = Объект.Склад;
	ДокОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокОбъект.ТоварыОтбор.Очистить();
	
	Помещение=Справочники.СкладскиеПомещения.ПустаяСсылка();
	Распоряжение=Объект.РасходныйОрдерНаТовары;
	Склад=Объект.Склад;
	Менеджер = Новый МенеджерВременныхТаблиц;	
	СкладыСервер.ОстаткиТоваровКОтбору(Менеджер, Распоряжение, Склад, Помещение);	
	СтруктураВозврата = СкладыСервер.ОтобратьТоварИзЯчеек(Менеджер,Склад,Помещение);	
	Менеджер.Закрыть();	
	ДокОбъект.ТоварыОтбор.Очистить();
	Для Каждого СтрокаТаблицыОшибок Из СтруктураВозврата.ТаблицаОшибок Цикл
		Если СтрокаТаблицыОшибок.Количество > 0 Тогда	
			НоваяСтрока = ДокОбъект.ТоварыОтбор.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыОшибок);		
			Если НоваяСтрока.КоличествоУпаковок = 0 Тогда
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			КонецЕсли;		
		КонецЕсли;	
	КонецЦикла;
	Для Каждого СтрокаТаблицыРезультатов из СтруктураВозврата.ТаблицаРезультатов Цикл	
		Если СтрокаТаблицыРезультатов.Количество > 0 Тогда		
			НоваяСтрока = ДокОбъект.ТоварыОтбор.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРезультатов);		
		КонецЕсли;	
	КонецЦикла;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
	КонецПопытки;
	Объект.ОтборРазмещениеТоваров = ДокОбъект.Ссылка;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализации(Команда)
	Если Объект.СтатусПослеРеализации = 0 Тогда
		сообщить("Выберите статус, на который изменятся позиции");
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтрока Из Объект.ТаблицаРеализацийОтбор Цикл
		Если ТекСтрока.ИдентификаторНоменклатуры = 0 Тогда
			сообщить(""+ТекСтрока.Номенклатура+" - не заполнен идентификатор, возможно товар был добавлен вручную");
			//Возврат;
		КонецЕсли;
	КонецЦикла;
	//надо проверку, если контрагент заполнен, то тогда несколько реализаций создаем
	Если Объект.ТаблицаРеализацийОтбор.Количество() = 0 Тогда
		сообщить("Не заполнена таблица незакрытых реализаций");
		Возврат;
	КонецЕсли;
	СоздатьРеализацииНаСервере();
	
	Если Объект.ИспользоватьОрдерныеСклады И ПолучитьИспользоватьОрдернуюСхемуПриОтгрузке() Тогда
		СоздатьРасходныйОрдер();
		СоздатьОтборИзЯчеек();
	КонецЕсли;
	Если Объект.АвтоматическоеИзменениеСтатусовНаСайтеПриПоступленииИРеализации Тогда
		ИзменитьСтатусыПослеРеализацииНаСервере();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОповещениеИзменитьСтатусыПослеРеализации", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Изменить статусы в заказах ABCP?", РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоЗаявкеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НомерЗаявки = Элемент.ТекстРедактирования;
	ЗапуститьПриложение("http://cp.abcp.ru/?page=orders&id_order="+Формат(Число(НомерЗаявки), "ЧГ=0"));
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовВЗаявкахНаСервере()
	//!!!!!
	сообщить("Получаем все заявки с сайта без загрузки в базу и проверяем, все ли клиенты и поставщики сопоставлены");
	//!!! cp/users - есть параметр customersIds, в который можно передать список не найденных контрагентов и добавить их
	//http://api.demo.abcp.ru/cp/users?userlogin=username&userpsw=md5pass&customersIds[]=574823&customersIds[]=86954&customersIds[]=56234786
	//!!! можно также синхронизировать поставщиков на всякий случай
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовВЗаявках(Команда)
	ПроверитьКонтрагентовВЗаявкахНаСервере();
КонецПроцедуры

#Область МножественныеИдентификаторы
&НаСервере
Процедура ЗаполнитьТаблицуКлиентовССайтаНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ТаблицаКлиентов.Очистить();
	//Если клиента нет, в базе, то добавляем, поэтому параметр "Истина"
	//Объект.ТЗКлиенты.Загрузить(ОбработкаОбъект.ВернутьТаблицуКлиентовССайта(Истина).Выгрузить());
	ОбработкаОбъект.ЗаполнитьТаблицуКлиентовССайта(Ложь);
	Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ТаблицаКлиентов.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКлиентовССайта(Команда)
	ЗаполнитьТаблицуКлиентовССайтаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФинансовуюИнформациюПоКлиенту(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВводКодаКлиентаДляФинансовойИнформации", ЭтаФорма);
	ПоказатьВводЧисла(ОписаниеОповещения, 0, "Введите код клиента из ABCP",8,0);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводКодаКлиентаДляФинансовойИнформации(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПолученноеЗначение < 100 Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьФинансовуюИнформациюПоКлиентуНаСервере(ПолученноеЗначение);
	//ЗадолженностьКлиентов - отчет СостояниеРасчетовСКлиентами
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта","Основной");
	Если Объект.ТаблицаКлиентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	НайденныйКлиент = Объект.ТаблицаКлиентов[0].Контрагент;
	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура;
	//Отбор.Вставить("Контрагент",НайденныйКлиент);
	Отбор.Вставить("Партнер", ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(НайденныйКлиент, "Партнер"));
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.СостояниеРасчетовСКлиентами.Форма",ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФинансовуюИнформациюПоКлиентуНаСервере(Ид)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	НайденныйКлиент = ОбработкаОбъект.НайтиКонтрагентаПоИдентификатору(Ид);
	Если НЕ ЗначениеЗаполнено(НайденныйКлиент) Тогда
		сообщить("Не нашли клиента по коду: "+Ид);
		Возврат;
	КонецЕсли;
	Объект.ТаблицаКлиентов.Очистить();
	НовСтрока = Объект.ТаблицаКлиентов.Добавить();
	НовСтрока.ИдентификаторКонтрагента = Ид;
	НовСтрока.Фамилия = СокрЛП(НайденныйКлиент);
	НовСтрока.НаименованиеОрганизации = СокрЛП(НайденныйКлиент);
	НовСтрока.Контрагент = НайденныйКлиент;
	МассивКлиентовСИдентификаторами = Новый Массив;
	МассивКлиентовСИдентификаторами.Добавить(НайденныйКлиент);
	//Объект.ТаблицаКлиентов.ВыгрузитьКолонку("Контрагент");
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПерезаполнитьБаланс(МассивКлиентовСИдентификаторами);
	ОбработкаОбъект.ЗаполнитьДополнительнуюФинансовуюИнформацию(МассивКлиентовСИдентификаторами);
	Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ТаблицаКлиентов.Выгрузить());
	Для Каждого ТекСтрока Из Объект.ТаблицаКлиентов Цикл
		Если ТекСтрока.Баланс <> ТекСтрока.ВыгруженноеСальдо Или ТекСтрока.creditLimit <> ТекСтрока.ВыгруженныйЛимитКредита Или ТекСтрока.payDelay <> ТекСтрока.ВыгруженнаяОтсрочкаПлатежа Или ТекСтрока.overdueSaldo <> ТекСтрока.ВыгруженныйПросроченныйБаланс Тогда
			ТекСтрока.Обновить = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ТЗЗаявкиКодСтатусаСайтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокСтатусов = ПолучитьСписокСтатусов(Истина);
	Если Не ЗначениеЗаполнено(СписокСтатусов) Тогда
		Возврат;
	КонецЕсли;
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ИзменитьСтатусЗаявкиНаСайте", ЭтотОбъект, Элемент.Имя);
	ВыбранныйЭлемент = СписокСтатусов.НайтиПоЗначению(Число(Элемент.Родитель.ТекущиеДанные.КодСтатусаСайт));
	//ВыбранныйЭлемент = СписокСтатусов.НайтиПоЗначению(Число(Элемент.ТекстРедактирования));
	СписокСтатусов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите новый статус", ВыбранныйЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ТЗНоменклатураКодСтатусаСайтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ Объект.РазрешитьИзменениеСтатусаИз1С Тогда
		Возврат;
		//устаревший код, использовался для флажка "Подтверждать интерактивное изменение статуса
		//Режим = РежимДиалогаВопрос.ДаНет;
		//Оповещение = Новый ОписаниеОповещения("ПодтверждениеИзмененияСтатуса", ЭтаФорма, Элемент);
		//ПоказатьВопрос(Оповещение, "Изменить статус позиции """ +СокрЛП(Элемент.Родитель.ТекущиеДанные.Номенклатура)+"""?", Режим, 0);
		//Возврат;
	КонецЕсли;	
	
	СписокСтатусов = ПолучитьСписокСтатусов(Истина);
	Если Не ЗначениеЗаполнено(СписокСтатусов) Тогда
		Возврат;
	КонецЕсли;
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ИзменитьСтатусПозицииНаСайте", ЭтотОбъект, Элемент.Имя);
	ВыбранныйЭлемент = СписокСтатусов.НайтиПоЗначению(Число(Элемент.Родитель.ТекущиеДанные.КодСтатусаСайт));
	СписокСтатусов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите новый статус", ВыбранныйЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеИзмененияСтатуса(Результат, Элемент) Экспорт
	//Если Результат = КодВозвратаДиалога.Нет Тогда
	//	Возврат;
	//КонецЕсли;
	//СписокСтатусов = ПолучитьСписокСтатусов(Истина);
	//Если Не ЗначениеЗаполнено(СписокСтатусов) Тогда
	//	Возврат;
	//КонецЕсли;
	//ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ИзменитьСтатусПозицииНаСайте", ЭтотОбъект, Элемент.Имя);
	//ВыбранныйЭлемент = СписокСтатусов.НайтиПоЗначению(Число(Элемент.Родитель.ТекущиеДанные.КодСтатусаСайт));
	//СписокСтатусов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите новый статус", ВыбранныйЭлемент);
КонецПроцедуры

&НаСервере
Функция НаименованиеПоКодуСтатуса(КодСтатуса)
	Структура = Новый Структура("КодСтатуса");
	Структура.КодСтатуса = КодСтатуса;
	НайденныеСтроки = Объект.ТаблицаСтатусов.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденныеСтроки[0].НаименованиеСтатуса;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ИзменитьСтатусПозицииНаСайте(Элемент, Параметры) Экспорт
	Если Элемент = Неопределено Тогда//не меняем статус, так как ничего не выбрали
		Возврат;
	КонецЕсли;
	Если ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.КодСтатусаСайт = Элемент.Значение Тогда
		Возврат;
	КонецЕсли;
	КодСтатусаСайт = Формат(Элемент.Значение,"ЧГ=0");
	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.КодСтатусаСайт = КодСтатусаСайт;
	НайденнаяСтрока = НаименованиеПоКодуСтатуса(Элемент.Значение);
	Если НайденнаяСтрока = Неопределено Тогда
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.СтатусСайт = "";
	Иначе
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.СтатусСайт = НайденнаяСтрока;
	КонецЕсли;
	ИдентификаторНоменклатуры = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ИдентификаторНоменклатуры;
	НС = 0;
	НС = НС + 1;
	ПереченьПозиций = "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатусаСайт;
	НомерЗаявки = Число(ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки);
	ИзменитьСтатусПозицииНаСайтеСервер(НомерЗаявки, ПереченьПозиций, КодСтатусаСайт);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусПозицииНаСайтеСервер(НомерЗаявки, ПереченьПозиций, КодСтатусаСайт);
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбновитьСтатусЗаявки(НомерЗаявки, ПереченьПозиций, КодСтатусаСайт, ,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусЗаявкиНаСайте(Элемент, Параметры) Экспорт
	Если Объект.РазрешитьИзменениеСтатусаИз1С Тогда
		//!!! - добавить подтверждение
	КонецЕсли;
	Если Элемент = Неопределено Тогда//не меняем статус, так как ничего не выбрали
		Возврат;
	КонецЕсли;
	Если ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.КодСтатусаСайт = Элемент.Значение Тогда
		Возврат;
	КонецЕсли;
	КодСтатусаСайт = Формат(Элемент.Значение,"ЧГ=0");
	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.КодСтатусаСайт = КодСтатусаСайт;
	НайденнаяСтрока = НаименованиеПоКодуСтатуса(Элемент.Значение);
	Если НайденнаяСтрока = Неопределено Тогда
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.СтатусСайт = "";
	Иначе
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.СтатусСайт = НайденнаяСтрока;
	КонецЕсли;
	НомерЗаявки = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки;
	ИзменитьСтатусЗаявкиНаСайтеСервер(НомерЗаявки, "", КодСтатусаСайт);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусЗаявкиНаСайтеСервер(НомерЗаявки, ПереченьПозиций, КодСтатусаСайт);
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Структура = Новый Структура("НомерЗаявки");
	Структура.НомерЗаявки = НомерЗаявки;
	НайденныеСтроки = Объект.ТаблицаНоменклатуры.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПереченьПозиций = "";
	НС = 0;
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		НС = НС + 1;
		ИдентификаторНоменклатуры = ТекСтрока.ИдентификаторНоменклатуры;
		ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатусаСайт;
	КонецЦикла;
	ОбработкаОбъект.ОбновитьСтатусЗаявки(Формат(НомерЗаявки,"ЧГ=0"), ПереченьПозиций, КодСтатусаСайт, ,Истина);
КонецПроцедуры

//раскрасить строки, чтобы выглядело, как в ABCP
Процедура РаскраситьСтроки()
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	Для Каждого ТекСтрока Из Объект.ТаблицаСтатусов Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСтатусовКодСтатуса");
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСтатусовНаименованиеСтатуса");
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСтатусов.КодСтатуса");
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСтатусов.НаименованиеСтатуса");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//ЭлементОтбора.ПравоеЗначение = ТекСтрока.КодСтатуса;
		ЭлементОтбора.ПравоеЗначение = ТекСтрока.НаименованиеСтатуса;
		Цвет16 = ТекСтрока.ЦветСтатуса;
		Красный = HexToDec(Лев(Цвет16, 2));
		Зеленый = HexToDec(Сред(Цвет16, 3, 2));
		Синий = HexToDec(Прав(Цвет16, 2));
		ЦветЯчейки = Новый Цвет(Красный, Зеленый, Синий);
		//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(Красный, Зеленый, Синий));	
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветЯчейки);	
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЗЗаявкиКодСтатусаСайт");
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЗЗаявкиСтатусСайт");
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТЗЗаявки.КодСтатусаСайт");
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаЗаявок.СтатусСайт");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//ЭлементОтбора.ПравоеЗначение = ТекСтрока.КодСтатуса;
		ЭлементОтбора.ПравоеЗначение = ТекСтрока.НаименованиеСтатуса;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветЯчейки);	
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЗНоменклатураКодСтатусаСайт");
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЗНоменклатураСтатусСайт");
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТЗНоменклатура.КодСтатусаСайт");
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаНоменклатуры.СтатусСайт");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//ЭлементОтбора.ПравоеЗначение = ТекСтрока.КодСтатуса;
		ЭлементОтбора.ПравоеЗначение = ТекСтрока.НаименованиеСтатуса;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветЯчейки);	
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЗНоменклатураКодСтатусаСайт");
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаРеализацийНаименованиеСтатуса");
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТЗНоменклатура.КодСтатусаСайт");
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаРеализаций.НаименованиеСтатуса");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//ЭлементОтбора.ПравоеЗначение = ТекСтрока.КодСтатуса;
		ЭлементОтбора.ПравоеЗначение = ТекСтрока.НаименованиеСтатуса;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветЯчейки);	
	КонецЦикла;
	//раскраска ячейки с ценой доставки
	//раскраска ячейки с заполненной доставкой
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЗЗаявкиСтоимостьДоставки");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаЗаявок.СтоимостьДоставки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗеленый);	
	
	Если Объект.СинхронизироватьПоставщиков Тогда
		//раскраска ячейки с пустым поставщиком
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЗНоменклатураПоставщик");
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаНоменклатуры.Поставщик");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		//ЭлементОтбора.ПравоеЗначение = Справочники.Контрагенты.ПустаяСсылка();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);	
	КонецЕсли;
	
	//раскраска ячейки с пустым контрагентом
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЗЗаявкиКонтрагент");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаЗаявок.Контрагент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	//ЭлементОтбора.ПравоеЗначение = Справочники.Контрагенты.ПустаяСсылка();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);	
	
	//раскраска ячеек с незаполненной номенклатурой при загрузке приходов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПриходНомерСтроки");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПриход.Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	//ЭлементОтбора.ПравоеЗначение = Справочники.Контрагенты.ПустаяСсылка();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);	
	
	//раскраска ячеек с незаполненным ид.номенклатуры или неправильным статусом в таблице поступлений
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПоступленийНомерСтроки");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПоступлений.Некорректная");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);	
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаРеализацийНомерСтроки");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаРеализаций.Некорректная");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);	
КонецПроцедуры

// Функция переводит шестнадцатеричное число в десятичное
// Параметры: _Hex     - Строка              - Шестнадцатеричное число
// Возвращаемое значение: Число   - Десятичное число
//
Функция HexToDec(Знач _Hex)
	//0-9 48-57 A-Z 65-70
	Старший = Лев(_Hex, 1);
	Младший = Прав(_Hex, 1);
	Старший = КодСимвола(Старший)-48;
	Если Старший > 9 Тогда Старший = Старший - 7; КонецЕсли;
	Младший = КодСимвола(Младший)-48;
	Если Младший > 9 Тогда Младший = Младший - 7; КонецЕсли;
	Результат = Старший*16+Младший;
	Возврат Результат;
	//База = 16;
	//_Hex = СокрЛП(_Hex);
	//СтаршаяСтепень = СтрДлина(_Hex) - 1;
	//Результат = 0;
	//счСимволов = 1;
	//Пока СтаршаяСтепень >=0 Цикл
	//	_HexСимвол = Сред(_Hex, счСимволов, 1);
	//	Представление = Найти("0123456789ABCDEF", _HexСимвол) - 1;
	//	//Результат = Результат + Представление * Степень(База, СтаршаяСтепень);
	//	СтаршаяСтепень = СтаршаяСтепень - 1;
	//	СчСимволов = СчСимволов + 1;
	//КонецЦикла;   
	//Возврат Результат;
КонецФункции // HexToDec()

&НаКлиенте
Процедура ПоступлениеТоваровУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	////Форма = ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаСписка"); //Открываем форму
	//Форма = ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора"); //Открываем форму
	//ОтборВладелец =Форма.СписокДокументыПоступления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); //Добавлям отбор
	//ОтборВладелец.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; //Как будем сравнивать
	//ОтборВладелец.Использование = Истина; // Устанавливаем галку использованияНовый ПолеКомпоновкиДанных("Контрагент")
	//ОтборВладелец.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент"); //По какому реквизиту будем делать отбор
	//ОтборВладелец.ПравоеЗначение = ВернутьПоставщика();//ЭтаФорма.Элементы.Поставщик; // И само значение отбора
	
	//ОтборВладелец.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номер"); //По какому реквизиту будем делать отбор
	//ОтборВладелец.ПравоеЗначение = "0000-000495";//ЭтаФорма.Элементы.Поставщик; // И само значение отбора
	//ПоступлениеТоваровУслугНачалоВыбораНаСервере();
	
	//ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора( , Элемент);
	//ФормаВыбора.Отбор.Контрагент.Установить(ВернутьПоставщика(), Истина);
	//  ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.Равно;
	//ЗначениеОтбора = Новый Структура("Контрагент", ВернутьПоставщика());
	//ПараметрыВыбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, Отбор", Истина, Ложь, ЗначениеОтбора);
	//РезультатОтбора = ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыВыбора);
//П = Новый Структура;
//Отбор = Новый Структура;
//Отбор.Вставить("Контрагент", ВернутьПоставщика());
//П.Вставить("Отбор", Отбор);

//ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", П);
КонецПроцедуры

&НаСервере
Функция ВернутьПоставщика()
	Возврат Объект.Поставщик;
КонецФункции

&НаКлиенте
Процедура ПоступлениеТоваровУслугПриИзменении(Элемент)
	ПоступлениеТоваровУслугПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПоступлениеТоваровУслугПриИзмененииНаСервере()
	Объект.Поставщик = Объект.ПоступлениеТоваровУслуг.Контрагент;
	Объект.ТаблицаПоступлений.Загрузить(Объект.ПоступлениеТоваровУслуг.Товары.Выгрузить());
	Структура = Новый Структура("Номенклатура,Количество");
	Для Каждого ТекСтрока Из Объект.ТаблицаПоступлений Цикл
		ТекСтрока.ЗаказКлиента = ТекСтрока.ЗаказПоставщику.ДокументОснование;
		ТекСтрока.НомерЗаявки = ТекСтрока.ЗаказКлиента.НомерПоДаннымКлиента;
		ТекСтрока.ПоступлениеТоваровУслуг = Объект.ПоступлениеТоваровУслуг;
		ТекСтрока.Артикул = ТекСтрока.Номенклатура.Артикул;
		ТекСтрока.Производитель = ТекСтрока.Номенклатура.Производитель.Наименование;
		Структура.Номенклатура = ТекСтрока.Номенклатура;
		Структура.Количество = ТекСтрока.Количество;
		НайденныеСтроки = ТекСтрока.ЗаказПоставщику.Товары.НайтиСтроки(Структура);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТекСтрока.ЦенаЗакупки = НайденнаяСтрока.Цена;
			ТекСтрока.КодСтроки = НайденнаяСтрока.КодСтроки;
			Прервать;
		КонецЦикла;
		НайденныеСтроки = ТекСтрока.ЗаказКлиента.Товары.НайтиСтроки(Структура);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТекСтрока.ЦенаПродажи = НайденнаяСтрока.Цена;
			Прервать;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РеализацияТоваровУслугПриИзменении(Элемент)
	РеализацияТоваровУслугПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РеализацияТоваровУслугПриИзмененииНаСервере()
	Объект.Клиент = Объект.РеализацияТоваровУслуг.Контрагент;
КонецПроцедуры

&НаКлиенте
Процедура АртикулПоступлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	АртикулПоступлениеОкончаниеВводаТекстаНаСервере(Текст);
	ПодключитьОбработчикОжидания("ПослеВводаАртикулПоступление",0.2,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаАртикулПоступление()
	ЭтаФорма.ТекущийЭлемент = Элементы.АртикулПоступление;
	ОтключитьОбработчикОжидания("ПослеВводаАртикулПоступление");
КонецПроцедуры

&НаСервере
Процедура АртикулПоступлениеОкончаниеВводаТекстаНаСервере(Текст)
	Нормальный = СтрЗаменить(Текст," ","");
	Нормальный = СтрЗаменить(Нормальный,".","");
	Нормальный = СтрЗаменить(Нормальный,",","");
	Нормальный = СтрЗаменить(Нормальный,":","");
	Нормальный = СтрЗаменить(Нормальный,";","");
	Нормальный = СтрЗаменить(Нормальный,"/","");
	Нормальный = СтрЗаменить(Нормальный,"\","");
	Нормальный = СтрЗаменить(Нормальный,"-","");
	Нормальный = СтрЗаменить(Нормальный,"+","");
	Нормальный = СтрЗаменить(Нормальный,"=","");
	Нормальный = СтрЗаменить(Нормальный,"_","");
	Структура = Новый Структура("Артикул", ВРег(Нормальный));
	НайденныеСтроки = Объект.ТаблицаПоступлений.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ВДокумент = Истина;
	КонецЦикла;
	//Объект.АртикулПоступление = "";
КонецПроцедуры

&НаКлиенте
Процедура АртикулРеализацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Нормальный = СтрЗаменить(Текст," ","");
	Нормальный = СтрЗаменить(Нормальный,".","");
	Нормальный = СтрЗаменить(Нормальный,",","");
	Нормальный = СтрЗаменить(Нормальный,":","");
	Нормальный = СтрЗаменить(Нормальный,";","");
	Нормальный = СтрЗаменить(Нормальный,"/","");
	Нормальный = СтрЗаменить(Нормальный,"\","");
	Нормальный = СтрЗаменить(Нормальный,"-","");
	Нормальный = СтрЗаменить(Нормальный,"+","");
	Нормальный = СтрЗаменить(Нормальный,"=","");
	Нормальный = СтрЗаменить(Нормальный,"_","");
	АртикулРеализацияОкончаниеВводаТекстаНаСервере(Нормальный);
	ПодключитьОбработчикОжидания("ПослеВводаАртикулРеализация",0.2,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаАртикулРеализация()
	ЭтаФорма.ТекущийЭлемент = Элементы.АртикулРеализация;
	ОтключитьОбработчикОжидания("ПослеВводаАртикулРеализация");
КонецПроцедуры

&НаСервере
Процедура АртикулРеализацияОкончаниеВводаТекстаНаСервере(Текст)
	Структура = Новый Структура("Артикул", ВРег(Текст));
	НайденныеСтроки = Объект.ТаблицаРеализаций.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Количество <= НайденнаяСтрока.КОтгрузке Тогда
			НайденнаяСтрока.ВДокумент = Истина;
			НайденнаяСтрока.Некорректная = Ложь;
		Иначе
			сообщить(Текст+" в заявке № "+НайденнаяСтрока.НомерЗаявки+" количество "+НайденнаяСтрока.Количество+" больше, чем в наличии "+НайденнаяСтрока.КОтгрузке);
		КонецЕсли;
	КонецЦикла;
	//Объект.АртикулРеализация = "";
КонецПроцедуры

&НаСервере
Процедура ПодобратьЗаказыПодПоступлениеНаСервере()
	сообщить("делаем полу вручную, надо добавить ещё одну таблицу, чтобы было видно, в каких заказах эта позиция, и сколько распределно");
КонецПроцедуры	
	
Процедура ПодобратьЗаказыПодПоступлениеНаСервереСтарая()
	//Если в 1С уже есть поступление, тогда проходим по строкам
	//и определяем, к каким заказам клиентов пришли товары
	//надо определять, если одна позиция пришла под несколько заказов,
	//то её надо распределить на эти заказы, начиная с самого старого
	//после этого можно изменить статус на "Пришло на склад"
	
	//Если Не ЗначениеЗаполнено(КонтрагентПоставщик) Тогда
	//	сообщить("Выберите поставщика");
	//	Возврат;
	//КонецЕсли;
	////или выбирать поставщика из списка (как в поле «ИдентификаторПоставщика»)
	//Если НЕ ПараметрыЗаполнены() Тогда
	//	Возврат;
	//КонецЕсли;
	//ВерсияОбработки = ПолучитьВерсиюОбработки();
	//ЗаписьВЛог("Интерактивная обработка заявок "+ВерсияОбработки);
	//ТЗЗаявки.Очистить();
	//ТЗНоменклатура.Очистить();
	//
	//ВерсияОбработки = ПолучитьВерсиюОбработки();
	//ИдПоставщика = НайтиСвойствоКонтрагента(КонтрагентПоставщик, "distributorId");
	//Если ИдПоставщика = "" Тогда
	//	сообщить("У этого поставщика нет свойства «distributorId»");
	//	Возврат;
	//КонецЕсли;
	//ТЗЗаявки.Очистить();
	//ТЗНоменклатура.Очистить();
	////ЗаполнитьТаблицуЗаявокССайта(,КодСтатусаПолучен, , , , , ИдПоставщика);
	//Статусы = "";
	//Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
	//	Если НЕ СтрокаСтатуса.ИспользоватьДляПоставщика Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ЗаписьВЛог("получить заявки по поставщику № "+ИдПоставщика+" «"+КонтрагентПоставщик+"» по коду статуса: "+СтрокаСтатуса.КодСтатуса);
	//	//ЗаполнитьТаблицуЗаявокССайта(,СтрокаСтатуса.КодСтатуса, , , СтрокаСтатуса, , Число(ИдКлиента));
	//	ЗаполнитьТаблицуЗаявокССайта(,СтрокаСтатуса.КодСтатуса, , , , , , ИдПоставщика);
	//	Статусы = Статусы + "«"+СтрокаСтатуса.НаименованиеСтатуса+"»"; 
	//КонецЦикла;
	//Если ТЗЗаявки.Количество() = 0 Тогда
	//	сообщить("Нет заявок со статусами: "+Статусы+" по поставщику "+КонтрагентПоставщик);
	//	Возврат;
	//КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикОтгрузкиТоваровОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ГрафикОтгрузкиТоваровОстаткиИОбороты.Номенклатура.Артикул КАК Артикул,
		|	ГрафикОтгрузкиТоваровОстаткиИОбороты.Номенклатура.Производитель.Наименование КАК Производитель,
		|	ГрафикОтгрузкиТоваровОстаткиИОбороты.Номенклатура.Наименование КАК Наименование,
		|	ГрафикОтгрузкиТоваровОстаткиИОбороты.Регистратор КАК Регистратор,
		|	ГрафикОтгрузкиТоваровОстаткиИОбороты.Регистратор.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
		|	ГрафикОтгрузкиТоваровОстаткиИОбороты.Регистратор.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
		|	ГрафикОтгрузкиТоваровОстаткиИОбороты.КоличествоНеобеспеченоКонечныйОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров.ОстаткиИОбороты(, , Регистратор, , ) КАК ГрафикОтгрузкиТоваровОстаткиИОбороты
		|ГДЕ
		|	ГрафикОтгрузкиТоваровОстаткиИОбороты.Номенклатура В(&Номенклатура)
		|	И ГрафикОтгрузкиТоваровОстаткиИОбороты.КоличествоНеобеспеченоКонечныйОстаток > 0
		|	И ГрафикОтгрузкиТоваровОстаткиИОбороты.Регистратор.НомерПоДаннымКлиента <> """"
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	ОБЩИЕ,
		|	Номенклатура,
		|	Регистратор";
	Запрос.УстановитьПараметр("Номенклатура", Объект.ТаблицаПоступлений.Выгрузить(,"Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	//сообщить(РезультатЗапроса.Выгрузить().Количество());
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
	Структура = Новый Структура("Номенклатура");
	Пока ВыборкаНоменклатура.Следующий() Цикл
		Структура.Номенклатура = ВыборкаНоменклатура.Номенклатура;
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Структура);
		ВЗаказах = ВыборкаНоменклатура.Количество;//всего в заказах
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ВПоступлении = НайденнаяСтрока.Количество;//исходное количество в документе поступления
			ОсталосьРаспределить = Мин(ВПоступлении, ВЗаказах);
			НайденнаяСтрока.ВПоступлении = ВПоступлении;
			НС = 0;
			ВыборкаКоличество = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор", "ВСЕ");
			Пока ВыборкаКоличество.Следующий() Цикл
				НС = НС + 1;
				Если ОсталосьРаспределить > ВыборкаКоличество.Количество Тогда
					//сообщить(""+ВыборкаКоличество.НомерПоДаннымКлиента+" "+ОсталосьРаспределить);
					Если НС = 1 Тогда
						НайденнаяСтрока.Количество = ВыборкаКоличество.Количество;
						НайденнаяСтрока.Сумма = НайденнаяСтрока.Количество * НайденнаяСтрока.Цена;
						НайденнаяСтрока.СуммаНДС = НайденнаяСтрока.Сумма / РазмерСтавкиНДС100 * РазмерСтавкиНДС;
						НайденнаяСтрока.СуммаНДСВзаиморасчетов = НайденнаяСтрока.СуммаНДС;
						НайденнаяСтрока.ВЗаказах = ВЗаказах;
						//ЗаполнитьЗначенияСвойств(НайденнаяСтрока, ВыборкаКоличество, "
						НайденнаяСтрока.ЗаказКлиента = ВыборкаКоличество.Регистратор;
						НайденнаяСтрока.НомерПоДаннымКлиента = ВыборкаКоличество.НомерПоДаннымКлиента;
						НайденнаяСтрока.ДатаПоДаннымКлиента = ВыборкаКоличество.ДатаПоДаннымКлиента;
						ОсталосьРаспределить = ОсталосьРаспределить - ВыборкаКоличество.Количество;
					Иначе
						НовСтрока = Объект.Товары.Вставить(НайденнаяСтрока.НомерСтроки);
						ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
						НовСтрока.Количество = ВыборкаКоличество.Количество;
						НовСтрока.Сумма = НайденнаяСтрока.Количество * НайденнаяСтрока.Цена;
						НовСтрока.СуммаНДС = НайденнаяСтрока.Сумма / РазмерСтавкиНДС100 * РазмерСтавкиНДС;
						НовСтрока.СуммаНДСВзаиморасчетов = НовСтрока.СуммаНДС;
						НовСтрока.ВЗаказах = ВЗаказах;
						НовСтрока.ЗаказКлиента = ВыборкаКоличество.Регистратор;
						НовСтрока.НомерПоДаннымКлиента = ВыборкаКоличество.Регистратор.НомерПоДаннымКлиента;
						НовСтрока.ДатаПоДаннымКлиента = ВыборкаКоличество.Регистратор.ДатаПоДаннымКлиента;
						ОсталосьРаспределить = ОсталосьРаспределить - ВыборкаКоличество.Количество;
					КонецЕсли;
				Иначе
					//сообщить(""+ВыборкаКоличество.НомерПоДаннымКлиента+" "+ОсталосьРаспределить);
					Если НС = 1 Тогда
						НайденнаяСтрока.Количество = ВЗаказах;
						НайденнаяСтрока.Сумма = НайденнаяСтрока.Количество * НайденнаяСтрока.Цена;
						НайденнаяСтрока.СуммаНДС = НайденнаяСтрока.Сумма / РазмерСтавкиНДС100 * РазмерСтавкиНДС;
						НайденнаяСтрока.СуммаНДСВзаиморасчетов = НайденнаяСтрока.СуммаНДС;
						НайденнаяСтрока.ВЗаказах = ОсталосьРаспределить;
						НайденнаяСтрока.ЗаказКлиента = ВыборкаКоличество.Регистратор;
						НайденнаяСтрока.НомерПоДаннымКлиента = ВыборкаКоличество.Регистратор.НомерПоДаннымКлиента;
						НайденнаяСтрока.ДатаПоДаннымКлиента = ВыборкаКоличество.Регистратор.ДатаПоДаннымКлиента;
						НайденнаяСтрока.Нераспределено = ВыборкаКоличество.Количество - ОсталосьРаспределить;
						ОсталосьРаспределить = 0;
						Прервать;
					Иначе
						НовСтрока = Объект.Товары.Вставить(НайденнаяСтрока.НомерСтроки);
						ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
						НовСтрока.Количество = ОсталосьРаспределить;
						НовСтрока.Сумма = НайденнаяСтрока.Количество * НайденнаяСтрока.Цена;
						НовСтрока.СуммаНДС = НайденнаяСтрока.Сумма / РазмерСтавкиНДС100 * РазмерСтавкиНДС;
						НовСтрока.СуммаНДСВзаиморасчетов = НовСтрока.СуммаНДС;
						НовСтрока.ВЗаказах = ВЗаказах;
						НовСтрока.ЗаказКлиента = ВыборкаКоличество.Регистратор;
						НовСтрока.НомерПоДаннымКлиента = ВыборкаКоличество.Регистратор.НомерПоДаннымКлиента;
						НовСтрока.ДатаПоДаннымКлиента = ВыборкаКоличество.Регистратор.ДатаПоДаннымКлиента;
						НовСтрока.Нераспределено = ВыборкаКоличество.Количество - ОсталосьРаспределить;
						ОсталосьРаспределить = 0;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		//сообщить(""+ВыборкаНоменклатура.Номенклатура+"	"+ВыборкаНоменклатура.Количество+"	"+ВыборкаНоменклатура.Регистратор);
	КонецЦикла;
	ПолучитьВариантОбеспеченияИзЗаказов();
	//Возврат;
	ПолучитьСтатусыABCPДляПоступления();
	//ВыгрузитьТаблицуВCSV();
КонецПроцедуры

//дозаполняем статус ABCP, deadline, routeId в ТаблицаПоступленийОтбор
&НаСервере
Процедура ПолучитьСтатусыABCPДляПоступления()
	ЗагружатьОчищенныеАртикулы = Объект.ЗагружатьОчищенныеАртикулы;
	СтатусПослеПоступления = Объект.СтатусПослеПоступления;
	//получаем с сервера статусы ABCP
	//лучше сделать фильтр по заявкам и проходит по позициям, вдруг все строки - это одна заявка, тогда один запрос делать
	ТЗ = Объект.ТаблицаПоступленийОтбор.Выгрузить(, "НомерЗаявки");
	ТЗ.Свернуть("НомерЗаявки",);
	Структура = Новый Структура("КодСтроки");
	СтруктураСтарая = Новый Структура("НомерЗаявки");
	СтруктураСтарая.Вставить("Артикул");
	СтруктураСтарая.Вставить("Производитель");
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если ТекСтрока.НомерЗаявки = 0 Тогда
			//ЗаписьВЛог("Нет № заказа у позиции: "+ТекСтрока.Номенклатура,1,Истина);
			ЗаписьВЛог("Нет номера заявки, возможно, заказ поставщику сделан руками ",1,Истина);
			Продолжить;
		КонецЕсли;
		ТекстЗапроса = "/cp/order?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль+"&number="+Формат(ТекСтрока.НомерЗаявки, "ЧГ=0");
		HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		Элемент = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Для Каждого Позиция Из Элемент.positions Цикл
			Если Число(Позиция.statusCode) = СтатусПослеПоступления Тогда
				Продолжить;
			КонецЕсли;
			Структура.КодСтроки = Число(Позиция.id);
			НайденныеСтроки = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(Структура);
			Если НайденныеСтроки.Количество()>0 Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.КодСтатуса = Позиция.statusCode;
					НайденнаяСтрока.deadline = Позиция.deadline;
					НайденнаяСтрока.routeId = Позиция.routeId;
					НайденнаяСтрока.statusCode = СокрЛП(Позиция.statusCode);
					Прервать;//иначе при задвоениях некорректно работает
				КонецЦикла;
			Иначе
				//ищем по старому
				СтруктураСтарая.НомерЗаявки = ТекСтрока.НомерЗаявки;
				Если ЗагружатьОчищенныеАртикулы Тогда
					СтруктураСтарая.Артикул = Позиция.numberFix;
				Иначе
					СтруктураСтарая.Артикул = Позиция.number;
				КонецЕсли;
				СтруктураСтарая.Производитель = Позиция.brand;
				НайденныеСтроки = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(СтруктураСтарая);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока.ИдентификаторНоменклатуры > 10000 Тогда //одна и та же позиция в документе, предыдущая уже заполнена
						Продолжить;
					КонецЕсли;
					НайденнаяСтрока.КодСтатуса = Позиция.statusCode;
					НайденнаяСтрока.ИдентификаторНоменклатуры = Число(Позиция.id);//чтобы, когда статусы на сайт позиции выгружаются, нужен ид.позиции
					НайденнаяСтрока.deadline = Позиция.deadline;
					НайденнаяСтрока.routeId = Позиция.routeId;
					НайденнаяСтрока.statusCode = СокрЛП(Позиция.statusCode);
					Прервать;//иначе при задвоениях некорректно работает
					//Если НайденнаяСтрока.КодСтатуса <> Объект.СтатусДоПоступления Тогда
					//	сообщить("Не сходится статус ("+НайденнаяСтрока.КодСтатуса+") с заданным ("+Объект.СтатусДоПоступления+") по позиции " + СокрЛП(Позиция.numberFix) + " " + Позиция.description);
					//	НайденнаяСтрока.Некорректная = Истина;
					//Иначе
					//КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//НовСтрока.Количество = Позиция.quantity;
			//НовСтрока.Номенклатура = НайтиДобавитьНоменклатуруПоАртикулу(СокрЛП(Позиция.numberFix), НовСтрока.Производитель, Позиция);
		КонецЦикла;
		//Прервать;
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.ТаблицаПоступленийОтбор Цикл
		Если ТекСтрока.КодСтатуса = 0 Тогда
			ЗаписьВЛог("В заявке "+Формат(ТекСтрока.НомерЗаявки)+" не заполнен статус у позиции "+Формат(ТекСтрока.КодСтроки,"ЧГ=0")+", артикул "+ТекСтрока.Артикул,,Истина);
		КонецЕсли;
		Если ТекСтрока.routeId = 0 Тогда
			ЗаписьВЛог("В заявке "+Формат(ТекСтрока.НомерЗаявки)+" не заполнен routeId у позиции "+Формат(ТекСтрока.КодСтроки,"ЧГ=0")+", артикул "+ТекСтрока.Артикул,,Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьТаблицуВCSV()
	//получить папку из ИмяФайлаExcel
	ПапкаДляАрхива = Объект.ИмяФайлаExcel;
	Для А = 1 По СтрДлина(ПапкаДляАрхива) Цикл
		Если Сред(ПапкаДляАрхива,СтрДлина(ПапкаДляАрхива) - А,1) = "\" Тогда
			ПапкаДляАрхива = Лев(ПапкаДляАрхива,СтрДлина(ПапкаДляАрхива)-А);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПапкаДляАрхива = "" Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = Объект.ПапкаДляАрхива+"\"+СокрЛП(Объект.ПоступлениеТоваровУслуг.Номер)+".csv";
	ФайлCSV = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
	ФайлCSV.ЗаписатьСтроку("Заказ;НомерABCP;Артикул;Наименование;Количество;Цена;Сумма;КодСтатуса;ВариантОбеспечения");
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Описание = СтрЗаменить(СокрЛП(ТекСтрока.Номенклатура),"'", "`");
		Описание = СтрЗаменить(Описание,"""", "`");
		Артикул = СтрЗаменить(ТекСтрока.Артикул,"'", "`");
		Артикул = СтрЗаменить(Артикул,"""", "`");
		SQL = """" + ТекСтрока.ЗаказКлиента.Номер + """;""" + Формат(ТекСтрока.НомерПоДаннымКлиента,"ЧГ=0") + """;""" + Артикул + """;""" + Описание + """;"+Формат(ТекСтрока.Количество, "ЧН=0; ЧГ=0")+";" + Формат(ТекСтрока.Цена,"ЧДЦ=2; ЧРД=,; ЧН=0; ЧГ=0") + ";" + Формат(ТекСтрока.Сумма,"ЧДЦ=2; ЧРД=,; ЧН=0; ЧГ=0") + ";"+ Формат(ТекСтрока.КодСтатуса, "ЧГ=0") + ";""" + СокрЛП(ТекСтрока.ВариантОбеспечения) + """";
		ФайлCSV.ЗаписатьСтроку(SQL);
	КонецЦикла;
	ФайлCSV.Закрыть();
КонецПроцедуры

&НаСервере
Процедура ПолучитьВариантОбеспеченияИзЗаказов()
	//заполняем обеспечение из заказов
	Структура = Новый Структура("Номенклатура");
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Структура.	Номенклатура = ТекСтрока.Номенклатура;
		НайденныеСтроки = ТекСтрока.ЗаказКлиента.Товары.НайтиСтроки(Структура);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТекСтрока.ВариантОбеспечения = НайденнаяСтрока.ВариантОбеспечения;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЗаказыПодПоступление(Команда)
	ПодобратьЗаказыПодПоступлениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодобратьЗаказыПодРеализациюНаСервере()
	//Если в 1С уже есть реализация, тогда проходим по строкам
	//и определяем, к каким заказам клиента реализованы товары
	//надо определять, если одна позиция реализована из нескольких заказов,
	//то её надо распределить на эти заказы, начиная с самого старого
	//после этого можно изменить статус на "Выдано"
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Ссылка КАК РеализацияТоваровУслуг,
	               |	РеализацияТоваровУслугТовары.Номенклатура,
	               |	РеализацияТоваровУслугТовары.Количество,
	               |	РеализацияТоваровУслугТовары.ВидЦены,
	               |	РеализацияТоваровУслугТовары.Цена КАК ЦенаПродажи,
	               |	ЗаказыКлиентовОстатки.ЗаказКлиента,
	               |	ЗаказыКлиентовОстатки.ЗаказКлиента.НомерПоДаннымКлиента КАК НомерЗаявки,
	               |	ЗаказПоставщикуТовары.Ссылка КАК ЗаказПоставщику,
	               |	ЗаказыКлиентовОстатки.КлючСвязи КАК КодСтатусаСайт
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	               |			ПО ЗаказыКлиентовОстатки.ЗаказКлиента = ЗаказПоставщикуТовары.Ссылка.ДокументОснование
	               |				И ЗаказыКлиентовОстатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	               |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗаказыКлиентовОстатки.Номенклатура
	               |			И РеализацияТоваровУслугТовары.Количество = ЗаказыКлиентовОстатки.ЗаказаноОстаток
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.РеализацияТоваровУслуг);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		сообщить("Нет позиций в реализации");
		Возврат;
	КонецЕсли;
	Объект.ТаблицаРеализаций.Загрузить(Результат.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЗаказыПодРеализацию(Команда)
	ПодобратьЗаказыПодРеализациюНаСервере();
КонецПроцедуры

//вызывается из ДобавитьКодСтрокиВНовуюПозицию
//в ответе с ABCP ищем идентификатор позиции, который надо будет вставить в заказ клиента
&НаСервере
Функция ВернутьИдентификаторИзмененнойПозиции(УИ, Номенклатура, ТекстМаркера, ЗаказКлиента)
	СтрокаОтвет = ПолучитьИзВременногоХранилища(УИ);
	КлючОбъекта  = "ABCP_1C";
	ИмяПользователя = "Администратор";//иначе другие пользователи не будут иметь доступа к этой таблице значений 
	КлючНастроек = ЗаказКлиента.НомерПоДаннымКлиента+" "+ТекстМаркера;//сохраняем полный ответ сервера в базе, на всякий случай
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, СтрокаОтвет, , ИмяПользователя);
	ТекстСообщения = "Сохранены данные для отладки: Заказа клиента: "+СокрЛП(ЗаказКлиента)+" текст маркера «"+ТекстМаркера+"» номенклатура "+Номенклатура;
	ТекстСообщения = ТекстСообщения + ", Ключ объекта «"+КлючОбъекта+"» Имя пользователя «"+ИмяПользователя+"» Ключ настроек «"+КлючНастроек+"»";
	ЗаписьВЛог(ТекстСообщения);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	Попытка
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ТекстСообщения = ""+ЗаказКлиента+", "+Номенклатура+" не удалось прочитать возвращаемый с платформы JSON";
		ЗаписьВЛог(ТекстСообщения,5);
		ЗаписьВЛог(СтрокаОтвет,5);
		Возврат 0;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	//проходим по позициям заказа из ABCP
	Для Каждого Элемент Из СписокЭлементов Цикл
		Попытка
			ДатаОбновления = ПреобразоватьИзСтрокиВДату(Элемент.dateUpdated);
		Исключение
			сообщить(ОписаниеОшибки());
			Прервать;
		КонецПопытки;
		Для Каждого Позиция Из Элемент.positions Цикл
			comment = СокрЛП(Позиция.comment);
			Если comment = "" Тогда
				Продолжить;
			КонецЕсли;
			Если comment = ТекстМаркера Тогда
				//Если Объект.ЗагружатьОчищенныеАртикулы Тогда
					Артикул = Позиция.numberFix;
				//Иначе
				//	Артикул = Позиция.number;
				//КонецЕсли;
				statusCode = Число(Позиция.statusCode);
				//statusCode = Объект.КодСтатусаНаСкладе
				Производитель = Позиция.brand;
				Количество = Позиция.quantity;
				ИдентификаторНоменклатуры = Число(Позиция.id);
				ЦенаЗакупки = Позиция.priceIn;
				ЦенаПродажи = Позиция.priceOut;
				ЗаписьВЛог("По комментарию «"+comment+"» найден идентификатор позиции: «"+Номенклатура+"», артикул «"+Артикул+"», производитель «"+Производитель+"», количество «"+Количество+"», статус «"+statusCode+"» :"+ИдентификаторНоменклатуры,1,Истина);
				
				ТекстСообщения = "Документ "+ЗаказКлиента+", обновлена дата изменения " +СокрЛП(ДатаОбновления);
				ЗаписьВЛог(ТекстСообщения);
				//сразу меняем дату обновления заявки, чтобы не загружалась снова
				МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = ЗаказКлиента;
				dateUpdated = ОбработкаОбъект.НайтиДобавитьСвойствоЗаказа("dateUpdated");
				МенеджерЗаписи.Свойство = dateUpdated;
				МенеджерЗаписи.Значение = ДатаОбновления;
				МенеджерЗаписи.Записать();

				Возврат ИдентификаторНоменклатуры;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ЗаписьВЛог("Не найден текст в комментариях на сайте: «"+ТекстМаркера+"» у номенклатуры "+Номенклатура,6,Истина);
	Возврат 0;
КонецФункции //ВернутьИдентификаторИзмененнойПозиции

//находим идентификатор новой позиции по тексту маркера и вносим его в нужную позицию заказ клиента в 1С
&НаСервере
Процедура ДобавитьКодСтрокиВНовуюПозицию(УИ, ЗаказКлиента, ЗаказПоставщику, Номенклатура, ТекстМаркера, НовоеКоличество)
	//заходим в заказ, ищем позицию
	Структура = Новый Структура("Номенклатура, Количество, ВариантОбеспечения");
	Структура.Номенклатура = Номенклатура;
	//Структура.КодСтроки = 0; КодСтроки присваивается сам при записи Заказа клиента, не может быть 0
	Структура.Количество = НовоеКоличество;
	Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
		Структура.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
	Иначе
		Структура.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;//К обеспечению
	КонецЕсли;
	ДокОбъект = ЗаказКлиента.ПолучитьОбъект();
	НайденныеСтроки = ДокОбъект.Товары.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ЗаписьВЛог("В документе " +ЗаказКлиента +" нет позиции «" +Номенклатура+"» с не сопоставленным кодом строки ");
		Возврат;
	КонецЕсли;
	//Если НайденныеСтроки.Количество() > 1 Тогда
	//	ЗаписьВЛог("В документе " +ЗаказКлиента +" позиция «" +Номенклатура+"» и пустой код строки ");
	//КонецЕсли;
	//меняем кодстроки на ид.позиции, который получили с сайта
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.КодСтроки > 10000 Тогда //идентификаторы из ABCP исчисляются десятками миллионов
			Продолжить;
		КонецЕсли;
		ИдентификаторНоменклатуры = ВернутьИдентификаторИзмененнойПозиции(УИ, Номенклатура, ТекстМаркера, ЗаказКлиента);
		НайденнаяСтрока.КодСтроки = ИдентификаторНоменклатуры;
		ЗаписьВЛог("В документе " +ЗаказКлиента +" позиция «" +Номенклатура+"» код строки: "+ИдентификаторНоменклатуры);
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение); 
			ДокументПроведен = Истина;
			ЗаписьВЛог("Заполнен код строки у позиции "+Номенклатура+", и проведен "+СокрЛП(ДокОбъект),1,Истина);
		Исключение
			ДокОбъект.Записать();
			ЗаписьВЛог("Не удалось провести "+СокрЛП(ДокОбъект)+ОписаниеОшибки(),5,Истина);
		КонецПопытки;
		Прервать;
	КонецЦикла;
	//теперь меняем заказ поставщку, в нём тоже позицию раздвоили
	Структура.Удалить("ВариантОбеспечения");
	ДокОбъект = ЗаказПоставщику.ПолучитьОбъект();
	НайденныеСтроки = ДокОбъект.Товары.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ЗаписьВЛог("В документе " +ЗаказПоставщику +" нет позиции «" +Номенклатура+"» с не сопоставленным кодом строки ");
		Возврат;
	КонецЕсли;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.КодСтроки > 10000 Тогда //идентификаторы из ABCP исчисляются десятками миллионов
			Продолжить;
		КонецЕсли;
		НайденнаяСтрока.КодСтроки = ИдентификаторНоменклатуры;
		ЗаписьВЛог("В документе " +ЗаказПоставщику +" позиция «" +Номенклатура+"» код строки: "+ИдентификаторНоменклатуры);
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение); 
			ДокументПроведен = Истина;
			ЗаписьВЛог("Заполнен код строки у позиции "+Номенклатура+", и проведен "+СокрЛП(ДокОбъект),1,Истина);
		Исключение
			ДокОбъект.Записать();
			ЗаписьВЛог("Не удалось провести "+СокрЛП(ДокОбъект)+ОписаниеОшибки(),5,Истина);
		КонецПопытки;
		Прервать;
	КонецЦикла;
КонецПроцедуры

//меняем статусы на сайте, с учетом разделенных позиций,
//у новых позиций добавляем специальный комментарий, по которому определяем, какой код строки надо поставить в заказ клиента и заказ поставщику
&НаСервере
Процедура ИзменитьСтатусыПослеПоступленияНаСервере()
	РазделятьПозицииЗаказовПриНеобходимости = Объект.РазделятьПозицииЗаказовПриНеобходимости;
	КодСтатуса = Формат(Объект.СтатусПослеПоступления, "ЧГ=0");
	ТЗ = Объект.ТаблицаПоступленийОтбор.Выгрузить(, "НомерЗаявки");
	ТЗ.Свернуть("НомерЗаявки",);
	Структура = Новый Структура("НомерЗаявки");
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если ТекСтрока.НомерЗаявки = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПереченьПозиций = "";
		Структура.НомерЗаявки = ТекСтрока.НомерЗаявки;
		НайденныеСтроки = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(Структура);
		НС = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ИдентификаторНоменклатуры = 0 Тогда
				НайденнаяСтрока.ИдентификаторНоменклатуры = НайденнаяСтрока.КодСтроки;
				Продолжить;
			КонецЕсли;
			Если НайденнаяСтрока.ИдентификаторНоменклатуры = 0 Тогда
				ЗаписьВЛог("изменение статусов на сервере, нет ид.номенклатуры у позиции: "+НайденнаяСтрока.Артикул);
				Продолжить;
			КонецЕсли;
			НС = НС + 1;
			Если РазделятьПозицииЗаказовПриНеобходимости И ((НайденнаяСтрока.Количество <> НайденнаяСтрока.ИсходноеКоличество) 
					Или (НайденнаяСтрока.ЦенаЗакупки <> НайденнаяСтрока.ИсходнаяЦенаЗакупки)
					Или (НайденнаяСтрока.ЦенаПродажи <> НайденнаяСтрока.ИсходнаяЦенаПродажи)) Тогда
				//если количество меньше, то делим позицию, если нет, то меняем позицию
				//!!! не забыть делить заказ покупателя
				Если НайденнаяСтрока.Количество < НайденнаяСтрока.ИсходноеКоличество Тогда
					//эти надо обрабатывать отдельно и дозаписываать коды строк у разделённых позиций
					//количество, которое пришло
					НП = "&order[positions]["+Формат(НС,"ЧГ=0")+"]";
					Позиции = "";
					Позиции = Позиции + НП + "[id]="+Формат(НайденнаяСтрока.ИдентификаторНоменклатуры,"ЧГ=0") + НП + "[statusCode]="+КодСтатуса + НП + "[quantity]=" + Формат(НайденнаяСтрока.Количество,"ЧГ=0")+
						НП + "[priceIn]=" + Формат(НайденнаяСтрока.ЦенаЗакупки,"ЧДЦ=2; ЧРД=.; ЧГ=0") +
						НП + "[priceOut]=" + Формат(НайденнаяСтрока.ЦенаПродажи,"ЧДЦ=2; ЧРД=.; ЧГ=0");
					//количество, которое не пришло - новая позиция
					НС = НС + 1;
					НП = "&order[positions]["+Формат(НС,"ЧГ=0")+"]";
					ДобавляемыеПоля = НП + "[brand]="+СокрЛП(НайденнаяСтрока.Номенклатура.Производитель);
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[number]="+СокрЛП(НайденнаяСтрока.Номенклатура.Артикул);
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[description]="+СокрЛП(НайденнаяСтрока.Номенклатура);
					НовоеКоличество = НайденнаяСтрока.ИсходноеКоличество-НайденнаяСтрока.Количество;
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[quantity]=" + Формат(НовоеКоличество,"ЧГ=0");
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[priceIn]=" + Формат(НайденнаяСтрока.ИсходнаяЦенаЗакупки,"ЧДЦ=2; ЧРД=.; ЧГ=0");
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[priceOut]=" + Формат(НайденнаяСтрока.ИсходнаяЦенаПродажи,"ЧДЦ=2; ЧРД=.; ЧГ=0");
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[deadline]=" + Формат(НайденнаяСтрока.deadline,"ЧН=0; ЧГ=0");
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[routeId]=" + Формат(НайденнаяСтрока.routeId,"ЧГ=0");
					//commentAnswer
					//в комментарии добавляем текст для более удобного поиска 
					//ДобавляемыеПоля = ДобавляемыеПоля + НП + "[comment]="+"недопоставка "+СокрЛП(ТекущаяДата());
					ТекстМаркера = "разд. "+Формат(ТекущаяДата(),"ДФ=dd.MM");
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[comment]="+ТекстМаркера;
					Позиции = Позиции + ДобавляемыеПоля + НП + "[statusCode]="+Формат(НайденнаяСтрока.statusCode,"ЧГ=0");
					ЗаписьВЛог("В заявке № "+Формат(ТекСтрока.НомерЗаявки,"ЧГ=0")+" разделили позицию, артикул "+СокрЛП(НайденнаяСтрока.Номенклатура.Артикул), 4, Истина);
					
					ОбработкаОбъект.ОбновитьСтатусЗаявки(ТекСтрока.НомерЗаявки, Позиции, КодСтатуса,,Истина);
					УИ = ОбработкаОбъект.ВременныйИдентификатор;
					ДобавитьКодСтрокиВНовуюПозицию(УИ, НайденнаяСтрока.ЗаказКлиента, НайденнаяСтрока.ЗаказПоставщику, НайденнаяСтрока.Номенклатура, ТекстМаркера, НовоеКоличество);
					//находим идентификатор новой позиции по тексту маркера и вносим его в нужную позицию заказ клиента в 1С
				Иначе
					НП = "&order[positions]["+Формат(НС,"ЧГ=0")+"]";
					ПереченьПозиций = ПереченьПозиций + НП + "[id]="+Формат(НайденнаяСтрока.ИдентификаторНоменклатуры,"ЧГ=0") + НП + "[statusCode]="+КодСтатуса + НП + "[quantity]=" + Формат(НайденнаяСтрока.Количество,"ЧГ=0");
					ДобавляемыеПоля = НП + "[brand]="+СокрЛП(НайденнаяСтрока.Номенклатура.Производитель);
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[number]="+СокрЛП(НайденнаяСтрока.Номенклатура.Артикул);
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[description]="+СокрЛП(НайденнаяСтрока.Номенклатура);
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[quantity]=" + Формат(НайденнаяСтрока.Количество,"ЧГ=0");
					//Если ЗначениеЗаполнено(НайденнаяСтрока.PaymentId) Тогда
					//Иначе
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[priceIn]=" + Формат(НайденнаяСтрока.ЦенаЗакупки,"ЧДЦ=2; ЧРД=.; ЧГ=0");
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[priceOut]=" + Формат(НайденнаяСтрока.ЦенаПродажи,"ЧДЦ=2; ЧРД=.; ЧГ=0");
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[deadline]=" + Формат(НайденнаяСтрока.deadline,"ЧН=0; ЧГ=0");
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[routeId]=" + Формат(НайденнаяСтрока.routeId,"ЧГ=0");
					//КонецЕсли;
					ДобавляемыеПоля = ДобавляемыеПоля + НП + "[comment]="+"изм. из 1С "+СокрЛП(ТекущаяДата());
					ПереченьПозиций = ПереченьПозиций + ДобавляемыеПоля + НП + "[statusCode]="+КодСтатуса;
					ЗаписьВЛог("В заявке № "+Формат(ТекСтрока.НомерЗаявки,"ЧГ=0")+" изменили позицию, артикул "+СокрЛП(НайденнаяСтрока.Номенклатура.Артикул), 2, Истина);
				КонецЕсли;
			Иначе
				ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(НайденнаяСтрока.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатуса;
			КонецЕсли;
		КонецЦикла;
		Если ПереченьПозиций <> "" Тогда
			ЗаписьВЛог(ПереченьПозиций);
			Если Объект.Отладка Тогда
				сообщить(ПереченьПозиций);
			КонецЕсли;
			ОбработкаОбъект.ОбновитьСтатусЗаявки(ТекСтрока.НомерЗаявки, ПереченьПозиций, КодСтатуса,,Истина);
		КонецЕсли;
	КонецЦикла;
	ИзменитьНаСтатусКВыдаче();
КонецПроцедуры

//Процедура меняет статусы заявок, у которых все позиции стоят в статусах "На складе", "С наличия", "Возврат", "Отказ"
//т.е. все позиции заказа или на складе или отменены
//им меняется статус "Готов к выдаче", а в административной панели настроена отправка СМС с этим статусом, чтобы не рассылать СМС по каждой позиции
&НаСервере
Процедура ИзменитьНаСтатусКВыдаче(ЗакладкаПриход = Ложь)
	Если НЕ Объект.СтатусГотовКВыдачеПриНеобходимости Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КодСтатусаГотовКВыдаче) Или Объект.КодСтатусаГотовКВыдаче = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Объект.АдресСервиса = "catalog.detali812.ru.public.api.abcp.ru" Тогда
		ЭтоДетали812 = Истина;
	Иначе
		ЭтоДетали812 = Ложь;
	КонецЕсли;
	КодСтатусаНаСкладе = Объект.КодСтатусаНаСкладе;
	КодСтатусаОтказ = Объект.КодСтатусаОтказ;
	КодСтатусаВозврат = Объект.КодСтатусаВозврат;
	КодСтатусаГотовКВыдаче = Объект.КодСтатусаГотовКВыдаче;
	//КодСтатусаСНаличия = Объект.КодСтатусаСНаличия; //Или КодСтатуса = КодСтатусаСНаличия 
	Структура = Новый Структура("НомерЗаявки");
	СтруктураДоставка = Новый Структура("НомерЗаявки");
	СтруктураДоставка.Вставить("Номенклатура");
	//проходим по всем заявкам, которые были, если у всех вариант обеспечения "Отгрузить", то загружаем заявку, получаем все позиции и присваиваем статус КВыдаче
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//Загружаем заявки с сайта, если их нет в 1С, то создаем (и если стоит "Изменять Статус Новых Заявок", то у новых ставим статус "В работе")
	//если стоит галочка "Синхронизировать статус заявок", то изменяем статус каждой позиции в заявке на сайте
	Объект.ТаблицаКлиентов.Очистить();
	Объект.ТаблицаЗаявок.Очистить();
	Объект.ТаблицаНоменклатуры.Очистить();
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//ищем все со статусом КодСтатусаНаСкладе и сравниваем с заказом, кроме позиции "Доставка"
	Если ЗакладкаПриход Тогда
		ТЗ = Объект.ЗаказыДляПодбора.Выгрузить(, "ВПриход,НомерЗаявки,ЗаказКлиента");
		НСтроки = ТЗ.НайтиСтроки(Новый Структура("ВПриход",0));
		Для Каждого НСтрока Из НСтроки Цикл
			ТЗ.Удалить(НСтрока);
		КонецЦикла;
		ТЗ.Свернуть("НомерЗаявки,ЗаказКлиента",);
	Иначе
		ТЗ = Объект.ТаблицаПоступленийОтбор.Выгрузить(, "НомерЗаявки,ЗаказКлиента");
		ТЗ.Свернуть("НомерЗаявки,ЗаказКлиента",);
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из ТЗ Цикл
		//получаем все заявки из списка, проверяем их статусы
		//или загрузить?
		Если СтрокаТаблицы.НомерЗаявки = 0 Тогда
			Продолжить;
		КонецЕсли;
		//загружаем заявку с сайта и проверяем статусы
		Объект.ТаблицаЗаявок.Загрузить(ОбработкаОбъект.ВернутьЗаявкуССайта(СтрокаТаблицы.НомерЗаявки).Выгрузить());
		//МассивИзТаблицыНоменклатуры = ОбработкаОбъект.ПолучитьТаблицуНоменклатуры();
		//ТаблицаНоменклатуры = МассивВТаблицуЗначений(МассивИзТаблицыНоменклатуры).Скопировать();
	    //Объект.ТЗНоменклатура.Загрузить(ТЗНоменклатура);
		УИ = ОбработкаОбъект.ПолучитьТаблицуНоменклатуры();
		Если УИ <> Неопределено Тогда
			ТаблицаНоменклатуры = ПолучитьИзВременногоХранилища(УИ);
			УдалитьИзВременногоХранилища(УИ);
		КонецЕсли;
		СтруктураОтказ = Новый Структура("КодСтатуса", КодСтатусаОтказ);//надо учесть, что отказные позиции не должны менять статус
		НСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтказ);
		Для Каждого НСтрока Из НСтроки Цикл
			ТаблицаНоменклатуры.Удалить(НСтрока);
		КонецЦикла;
		СтруктураДоставка.НомерЗаявки = СтрокаТаблицы.НомерЗаявки;
		СтруктураДоставка.Номенклатура = Объект.УслугаДоставки;
		НайденныеСтрокиДоставка = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(СтруктураДоставка);
		КоличествоДоставка = НайденныеСтрокиДоставка.Количество();
		Структура.НомерЗаявки = СтрокаТаблицы.НомерЗаявки;
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Структура);
		КоличествоДляИзменения = НайденныеСтроки.Количество()-КоличествоДоставка;
		КоличествоНаСкладе = 0;
		ТекстСообщения = "Строк в таблице: "+ТаблицаНоменклатуры.Количество()+", количество для изменения "+КоличествоДляИзменения;
		Для Каждого НСтрока Из НайденныеСтроки Цикл
			КодСтатуса = НСтрока.КодСтатуса;
			Если КодСтатуса = КодСтатусаНаСкладе Или КодСтатуса = КодСтатусаОтказ Или КодСтатуса = КодСтатусаВозврат Или КодСтатуса = КодСтатусаГотовКВыдаче Тогда//случайно могли сделать
				КоличествоНаСкладе = КоличествоНаСкладе + 1;
				ТекстСообщения = ТекстСообщения + " "+ Формат(НСтрока.ИдентификаторНоменклатуры,"ЧГ=0")+" - "+КодСтатуса;//чтобы в лог можно было записать
			КонецЕсли;
		КонецЦикла;
		Если КоличествоДляИзменения = КоличествоНаСкладе Тогда
			ЗаписьВЛог("Проверенные позиции: "+ТекстСообщения, , Истина);
			ЗаписьВЛог(ТекстСообщения, , Истина);
			ТекстСобщения = "Позиций для изменения "+КоличествоДляИзменения+" совпадает с количеством пришедших на склад "+КоличествоНаСкладе+", изменяем статусы";
			ЗаписьВЛог(ТекстСобщения, , Истина);
			ПереченьПозиций = "";
			НС = 0;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.ИдентификаторНоменклатуры = 0 Тогда
					Продолжить;
				КонецЕсли;
				НС = НС + 1;
				ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(НайденнаяСтрока.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+Формат(КодСтатусаГотовКВыдаче,"ЧГ=0");
			КонецЦикла;
			ОбработкаОбъект.ОбновитьСтатусЗаявки(СтрокаТаблицы.НомерЗаявки, ПереченьПозиций, КодСтатусаГотовКВыдаче,,Истина);
			Если ЭтоДетали812 И ЗначениеЗаполнено(СтрокаТаблицы.ЗаказКлиента) Тогда
				ЗаписьВЛог("Отправляем сообщение клиенту по заявке № "+СтрокаТаблицы.НомерЗаявки);
				Попытка
					Об = СтрокаТаблицы.ЗаказКлиента.ПолучитьОбъект();
					Об.ОповеститьКлиентаОГотовностиТовараКОтгрузке();
				Исключение
					ТекстСообщения = ОписаниеОшибки();
					ЗаписьВЛог(ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		Иначе
			ЗаписьВЛог("Проверенные позиции: "+ТекстСообщения, , Истина);
			ТекстСобщения = "Позиций для изменения "+КоличествоДляИзменения+" не совпадает с количеством пришедших на склад "+КоличествоНаСкладе+", пока ничего не меняем";
			ЗаписьВЛог(ТекстСобщения, , Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусыПослеПоступления(Команда)
	ИзменитьСтатусыПослеПоступленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуОбновленияЗаказаКлиента(УИ, ЗаказКлиента)
	СтрокаОтвет = ПолучитьИзВременногоХранилища(УИ);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	Если Лев(СтрокаОтвет, 13) = "{""0"":{""number" Тогда
		//нет позиции в этой заявке, наверное, руками добавили
		Возврат;
	КонецЕсли;
	Попытка
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ЗаписьВЛог(СтрокаОтвет,5,Истина);
		сообщить(ОписаниеОшибки());
		сообщить("Не удалось обновить дату изменения документа: "+СокрЛП(ЗаказКлиента));
	КонецПопытки;
	//СписокЭлементов = ПрочитатьJSON(ЧтениеJSON, Истина);
	//Для Каждого Элемент Из СписокЭлементов Цикл
	//Возврат Число(Элемент["userId"]);
	//КонецЦикла;

	ЧтениеJSON.Закрыть();
	Для Каждого Элемент Из СписокЭлементов Цикл
		Попытка
			ДатаОбновления = ПреобразоватьИзСтрокиВДату(Элемент.dateUpdated);
			ТекстСообщения = "Документ "+ЗаказКлиента+", при реализации обновлена дата изменения " +СокрЛП(ДатаОбновления);
			ЗаписьВЛог(ТекстСообщения,1,Истина);
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ЗаказКлиента;
			dateUpdated = ОбработкаОбъект.НайтиДобавитьСвойствоЗаказа("dateUpdated");
			МенеджерЗаписи.Свойство = dateUpdated;
			МенеджерЗаписи.Значение = ДатаОбновления;
			МенеджерЗаписи.Записать();
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьВЛог(ТекстСообщения,5,Истина);
			ТекстСообщения = СтрокаОтвет;
			ЗаписьВЛог(ТекстСообщения,5,Истина);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура ИзменитьСтатусыПослеРеализацииНаСервере()
	КодСтатуса = Формат(Объект.СтатусПослеРеализации, "ЧГ=0");
	ТЗ = Объект.ТаблицаРеализацийОтбор.Выгрузить(, "НомерЗаявки");
	ТЗ.Свернуть("НомерЗаявки",);
	Структура = Новый Структура("НомерЗаявки");
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если ТекСтрока.НомерЗаявки = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПереченьПозиций = "";
		Структура.НомерЗаявки = ТекСтрока.НомерЗаявки;
		НайденныеСтроки = Объект.ТаблицаРеализацийОтбор.НайтиСтроки(Структура);
		НС = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ИдентификаторНоменклатуры = 0 Тогда
				Продолжить;
			КонецЕсли;
			НС = НС + 1;
			ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(НайденнаяСтрока.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатуса;
		КонецЦикла;
		ОбработкаОбъект.ОбновитьСтатусЗаявки(ТекСтрока.НомерЗаявки, ПереченьПозиций, КодСтатуса,,Истина);
		УИ = ОбработкаОбъект.ВременныйИдентификатор;
		ИзменитьДатуОбновленияЗаказаКлиента(УИ, НайденнаяСтрока.ЗаказКлиента);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусыПослеРеализации(Команда)
	ИзменитьСтатусыПослеРеализацииНаСервере();
КонецПроцедуры

&НаСервере
Функция ВернутьКлиента()
	Возврат Объект.Клиент;
КонецФункции

&НаКлиенте
Процедура РеализацияТоваровУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	////Форма = ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаСписка"); //Открываем форму
	//Форма = ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаВыбора"); //Открываем форму
	//ОтборВладелец =Форма.СписокРеализацииТоваровУслуг.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); //Добавлям отбор
	//ОтборВладелец.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; //Как будем сравнивать
	//ОтборВладелец.Использование = Истина; // Устанавливаем галку использованияНовый ПолеКомпоновкиДанных("Контрагент")
	//ОтборВладелец.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент"); //По какому реквизиту будем делать отбор
	//ОтборВладелец.ПравоеЗначение = ВернутьКлиента();//ЭтаФорма.Элементы.Поставщик; // И само значение отбора
КонецПроцедуры
			
&НаКлиенте
Процедура СтатусЗаявкиКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокСтатусов = ПолучитьСписокСтатусов(Истина);
	Если Не ЗначениеЗаполнено(СписокСтатусов) Тогда
		Возврат;
	КонецЕсли;
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораСтатуса", ЭтотОбъект, Элемент.Имя);
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ВыбранныйЭлемент = СписокСтатусов.НайтиПоЗначению(Число(Элемент.ТекстРедактирования));
	Иначе
		ВыбранныйЭлемент = Неопределено;
	КонецЕсли;
	СписокСтатусов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите соответствующий статус", ВыбранныйЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура КодСтатусаСНаличияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокСтатусов = ПолучитьСписокСтатусов(Истина);
	Если Не ЗначениеЗаполнено(СписокСтатусов) Тогда
		Возврат;
	КонецЕсли;
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораСтатуса", ЭтотОбъект, Элемент.Имя);
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ВыбранныйЭлемент = СписокСтатусов.НайтиПоЗначению(Число(Элемент.ТекстРедактирования));
	Иначе
		ВыбранныйЭлемент = Неопределено;
	КонецЕсли;
	СписокСтатусов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите соответствующий статус", ВыбранныйЭлемент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьИзСтрокиВДату(ДС)
	Возврат Дата(Лев(ДС,4), Сред(ДС,6,2), Сред(ДС,9,2), Сред(ДС,12,2), Сред(ДС,15,2), Сред(ДС,18,2));
КонецФункции

&НаСервере
Процедура ЗагрузитьЗаявкиКлиентаПоСтатусуНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СтатусЗаявкиКлиента = Объект.СтатусЗаявкиКлиента;
	НенайденныеПоставщики = Новый СписокЗначений;//чтобы по несколько раз не предупреждал
	Структура = Новый Структура("КодСтатуса", СтатусЗаявкиКлиента);
	НайденныеСтроки = Объект.ТаблицаСтатусов.НайтиСтроки(Структура);
	СтатусЗаявкиКлиентаСтрокой = "";
	Если НайденныеСтроки.Количество() = 0 Тогда
		сообщить("У выбранного кода статуса нет строкового представления");
		//Возврат;
	Иначе
		СтатусЗаявкиКлиентаСтрокой = НайденныеСтроки[0].НаименованиеСтатуса;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
		сообщить("Не выбран клиент");
		Возврат;
	КонецЕсли;
	ИдентификаторКонтрагента = ОбработкаОбъект.ПолучитьИдентификаторКонтрагента(Объект.Клиент);
	Если ИдентификаторКонтрагента = 0 Тогда
		сообщить("У выбранного клиента нет идентификатора");
		Возврат;
	КонецЕсли;
	//видоизменённая процедура модуля ЗаполнитьТаблицуЗаявокССайта
	Если НЕ ОбработкаОбъект.ПараметрыЗаполнены() Тогда
		сообщить("Не все параметры заполнены");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СтатусЗаявкиКлиента) Тогда
		сообщить("Не заполнен статус заявок клиента");
		Возврат;
	КонецЕсли;
	ДатаНачала = НачалоДня(ТекущаяДата())-Объект.ГлубинаПросмотраЗаявок*24*3600;
	ДатаОкончания = ТекущаяДата();
	ТекстЗапроса = "/cp/orders?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль+"&dateUpdatedStart="+Формат(ДатаНачала, "ДФ=yyyy-MM-dd")+" 00:00:00&dateUpdatedEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59&statusCode="+Формат(Объект.СтатусЗаявкиКлиента,"ЧГ=0");
	HTTPСоединение = Новый HTTPСоединение(ОбработкаОбъект.АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	ЗаписьВЛог("Загрузка заявок контрагента: "+Объект.Клиент+", идентификатор: "+ИдентификаторКонтрагента+" со статусом: "+Формат(Объект.СтатусЗаявкиКлиента,"ЧГ=0"));
	Для Каждого Элемент Из СписокЭлементов Цикл
		//https://helpf.pro/faq/view/1302.html - обработка ожидания
		Если (ИдентификаторКонтрагента <> Элемент.userId) Тогда
			Продолжить;
		КонецЕсли;
		Если (Объект.ФильтрПоЗаявке <> 0) И (Объект.ФильтрПоЗаявке <> Число(Элемент.number)) Тогда
			Продолжить;
		КонецЕсли;
		НовЗаявка = Объект.ТаблицаЗаявок.Добавить();
		НовЗаявка.КодСтатусаСайт = СтатусЗаявкиКлиента;
		НовЗаявка.СтатусСайт = СтатусЗаявкиКлиентаСтрокой;
		НовЗаявка.НомерЗаявки = Элемент.number;
		НовЗаявка.ДатаЗаявки = ПреобразоватьИзСтрокиВДату(Элемент.date);
		НовЗаявка.ИмяПокупателя = Элемент.userName;
		НовЗаявка.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		НовЗаявка.Контрагент = Объект.Клиент;
		НовЗаявка.Позиций = Элемент.positionsQuantity;
		НовЗаявка.СуммаЗаявки = Элемент.sum;
		НовЗаявка.ДатаОбновления = ПреобразоватьИзСтрокиВДату(Элемент.dateUpdated);
		НовЗаявка.Комментарий = Элемент.comment;
		//НовЗаявка.ТипДоставки = Элемент.deliveryType;
		НовЗаявка.ТипОплаты = Элемент.paymentType;//Наличный (Элемент.paymentTypeId="2920") Электронный (2921) Безналичный расчет  (2985)
		Если НовЗаявка.ТипОплаты = "Оплата не выбрана" Тогда
			НовЗаявка.ТипОплаты = "";
		КонецЕсли;
		НовЗаявка.АдресДоставки = Элемент.deliveryAddress;//самовывоз или наш адрес или другой адрес
		НовЗаявка.ЗаказКлиента = ОбработкаОбъект.НайтиЗаявку(НовЗаявка.НомерЗаявки, Дата(НовЗаявка.ДатаЗаявки));
		НовЗаявка.СтоимостьДоставки = Элемент.deliveryCost;
		Для Каждого Позиция Из Элемент.positions Цикл			
			statusCode = СокрЛП(Позиция.statusCode);
			НовСтрока = Объект.ТаблицаНоменклатуры.Добавить();
			НовСтрока.НомерЗаявки = НовЗаявка.НомерЗаявки;
			НовСтрока.Производитель = ОбработкаОбъект.НайтиДобавитьБренд(СокрЛП(Позиция.brand));
			НовСтрока.Производитель = ОбработкаОбъект.НайтиДобавитьПроизводитель(СокрЛП(Позиция.brand));
			
			НовСтрока.НомерДетали = Позиция.number;
			НовСтрока.Описание = Позиция.description;
			НовСтрока.Количество = Позиция.quantity;
			НовСтрока.Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(СокрЛп(Позиция.number), НовСтрока.Производитель, Позиция);
			НовСтрока.ИдентификаторНоменклатуры = Позиция.id;
			НовСтрока.ЦенаЗакупки = Позиция.priceIn;
			НовСтрока.ЦенаПродажи = Позиция.priceOut;
			НовСтрока.Сумма = НовСтрока.ЦенаПродажи * НовСтрока.Количество;//Позиция.priceInSiteCurrency;
			//НовСтрока.Статус = Позиция.status;
			НовСтрока.КодСтатуса = Позиция.statusCode;
			НовСтрока.КодСтатусаСайт = Позиция.statusCode;//зачем, забыл, потом разберусь
			НовСтрока.СтатусСайт = Позиция.status;
			НовСтрока.distributorId = Позиция.distributorId;
			НовСтрока.distributorName = Позиция.distributorName;
			НовСтрока.distributorOrderId = Позиция.distributorOrderId;
			НовСтрока.Поставщик = ОбработкаОбъект.НайтиКонтрагентаПоИдентификатору(НовСтрока.distributorId, "distributorId (Контрагенты)");
			Если НЕ ЗначениеЗаполнено(НовСтрока.Поставщик) Тогда
				Если НенайденныеПоставщики.НайтиПоЗначению(НовСтрока.distributorId) = Неопределено Тогда
					ТекстСообщения = "Ошибка: Не удалось сопоставить поставщика с ид = "+СокрЛП(НовСтрока.distributorId)+", «"+Позиция.distributorName+"» с контрагентом, заказы поставщикам не будут созданы";
					ЗаписьВЛог(ТекстСообщения);
					сообщить(ТекстСообщения);
					НенайденныеПоставщики.Добавить(НовСтрока.distributorId);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаявкиКлиентаПоСтатусу(Команда)
	ЗагрузитьЗаявкиКлиентаПоСтатусуНаСервере();
КонецПроцедуры

//Произвольное изменение статуса заявок клиента, используется для выдачи клиенту товаров из нескольких заказов
&НаСервере
Процедура ИзменитьСтатусЗаявокКлиентаНаСервере()
	СтатусЗаявкиКлиента = Объект.СтатусЗаявкиКлиента;
	СписокЗаявок = Новый СписокЗначений;
	ТаблицаПозиций = Новый ТаблицаЗначений;
	ТаблицаПозиций.Колонки.Добавить("НомерЗаявки", Новый ОписаниеТипов("Число"));
	ТаблицаПозиций.Колонки.Добавить("Номенклатура");
	ТаблицаПозиций.Колонки.Добавить("ИдентификаторНоменклатуры", Новый ОписаниеТипов("Число"));
	ТаблицаПозиций.Колонки.Добавить("Статус", Новый ОписаниеТипов("Число"));
	Структура = Новый Структура("НомерЗаявки");
	Для Каждого СтрокаЗаявки Из Объект.ТаблицаЗаявок Цикл
		СписокЗаявок.Добавить(СтрокаЗаявки.НомерЗаявки);
		Структура.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		НайденныеСтроки = Объект.ТаблицаНоменклатуры.НайтиСтроки(Структура);
		Для Каждого Позиция Из НайденныеСтроки Цикл
			НовСтрока = ТаблицаПозиций.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Позиция);
			НовСтрока.Статус = СтатусЗаявкиКлиента;
		КонецЦикла;
	КонецЦикла;
	ИзменитьСтатусыABCP(СписокЗаявок, ТаблицаПозиций);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусЗаявокКлиента(Команда)
	ИзменитьСтатусЗаявокКлиентаНаСервере();
КонецПроцедуры

//Изменение статусов в ABCP по переданной таблице значений
//передается таблица значений вида
//НомерЗаявки, Номенклатура, ИдентификаторНоменклатуры, Статус
&НаСервере
Процедура ИзменитьСтатусыABCP(СписокЗаявок, ТаблицаПозиций, ВыводитьВЛог = Истина)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если ТаблицаПозиций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПереченьПозиций = "";
	Структура = Новый Структура("НомерЗаявки");
	Для Каждого СтрокаЗаявки Из СписокЗаявок Цикл
		Структура.НомерЗаявки = СтрокаЗаявки.Значение;
		НайденныеСтроки = ТаблицаПозиций.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекстСообщения = "Нет позиций для обновления статуса в заявке: "+СтрокаЗаявки.Значение;
			ЗаписьВЛог(ТекстСообщения);
		Иначе
			ПереченьПозиций = "";
			НС = 0;
			Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
				НС = НС + 1;
				ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(СтрокаТовара.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+Формат(СтрокаТовара.Статус,"ЧГ=0");
				КодСтатуса = СтрокаТовара.Статус;
			КонецЦикла;
			//сообщить(Формат(СтрокаЗаявки.Значение)+" -> "+ПереченьПозиций);
			ОбработкаОбъект.ОбновитьСтатусЗаявки(СтрокаЗаявки.Значение, ПереченьПозиций, КодСтатуса, , Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	//Попытка
	//	ОтключитьОбработчикОжидания("СостояниеЗагрузки");
	//Исключение
	//КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗагрузки()
	//есть еще такой способ
	//надо смотреть, что находится в хранилище значений и выводить %
	Сообщение = Новый СообщениеПользователю();
	//Сообщение.Текст = "Проба";
	//СтруктураИндикатора = ПолучитьИзВременногоХранилища(АдресХранилищаИндикатора);
	//ПорядковыйНомерЗаявки = СтруктураИндикатора.ПорядковыйНомерЗаявки;
	//СостояниеЗагрузки = СтруктураИндикатора.СостояниеЗагрузки;
	//Если СостояниеЗагрузки = 0 Тогда
		//Сообщение.Текст = ПорядковыйНомерЗаявки;
		//Сообщение.Сообщить();
	//Иначе
	//	Состояние(ПорядковыйНомерЗаявки, Цел(ПорядковыйНомерЗаявки/СостояниеЗагрузки*100), "Загрузка заявок"); 
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СтатусСдвинуть(НомерСтроки, Куда)
	Объект.ТаблицаСтатусов.Сдвинуть(НомерСтроки, Куда);
КонецПроцедуры

&НаКлиенте
Процедура СтатусВверх(Команда)
	Если Элементы.ТаблицаСтатусов.ТекущаяСтрока>0 Тогда
		СтатусСдвинуть(Элементы.ТаблицаСтатусов.ТекущаяСтрока, -1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусВниз(Команда)
	Если Элементы.ТаблицаСтатусов.ТекущаяСтрока < (Объект.ТаблицаСтатусов.Количество()-1) Тогда
		СтатусСдвинуть(Элементы.ТаблицаСтатусов.ТекущаяСтрока, 1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеализацийНомерЗаявкиОткрытие(Элемент, СтандартнаяОбработка)
	НомерЗаявки = Элемент.ТекстРедактирования;
	ЗапуститьПриложение("http://cp.abcp.ru/?page=orders&id_order="+Формат(Число(НомерЗаявки), "ЧГ=0"));
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриходНомерЗаявкиОткрытие(Элемент, СтандартнаяОбработка)
	НомерЗаявки = Элемент.ТекстРедактирования;
	ЗапуститьПриложение("http://cp.abcp.ru/?page=orders&id_order="+Формат(Число(НомерЗаявки), "ЧГ=0"));
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#Область ЗагрузкаФайлаУправляемыеФормы
//https://infostart.ru/public/1075055/
//https://infostart.ru/public/396459/ - похуже
// Открывает диалог выбора файла.
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл.
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует.
// 
&НаКлиенте
Процедура ИмяФайлаНачалоВыбораАсинхронный(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Описание	= Новый ОписаниеОповещения("ЗакончитьВыборФайлов", ЭтотОбъект);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ИмяФайлаПриход; 
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь; 
	ДиалогОткрытияФайла.Фильтр = "Файл Excel 97-2003, 2007(*.xls*)|*.xls*";
	ДиалогОткрытияФайла.Заголовок = "Выберите файл в формате Excel"; 
	    
	НачатьПомещениеФайлов(Описание, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьВыборФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт 
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПереданныйФайл Из ПомещенныеФайлы Цикл
		ИмяФайла		= ПереданныйФайл.Имя;
		АдресХранения	= ПереданныйФайл.Хранение;
		Объект.ИмяФайлаПриход = ИмяФайла;
		//ПутьКФайлу = ПереданныйФайл.Имя;
		//Запись.ИмяФайла = РазборСтроки(ПутьКФайлу, "\");
		//Элементы.ОткрытьФайл.Заголовок = Запись.ИмяФайла;        
		//Адрес = ПереданныйФайл.Хранение;
		ЗагрузитьАсинхронно();
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьАсинхронно()
	ВременныйИдентификатор = "";
	//Элементы.ИмяЛиста.Видимость = Ложь;
	Если АдресХранения = Неопределено Тогда
		сообщить("Не определен АдресХранения");
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Попытка
			ТабличныйДокумент.Прочитать(Объект.ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		Исключение
			Сообщить(ОписаниеОшибки());
			//это лог Текст.ДобавитьСтроку(ОписаниеОшибки());
			//Возврат Текст;
		КонецПопытки;
	Иначе
		НРегИмяФайла = Нрег(ИмяФайла);
		Если Прав(НРегИмяФайла, 3) = "xls" Тогда
			Расширение = "xls";
		ИначеЕсли Прав(НРегИмяФайла, 4) = "xlsx" Тогда
			Расширение = "xlsx";
		Иначе
			сообщить("Формат файлов не поддерживается, неизвестное расширение: "+Расширение+" у файла: "+ИмяФайла);
		КонецЕсли;
		Путь	= КаталогВременныхФайлов() +
					Новый УникальныйИдентификатор() + "."+Расширение;
		Файл	= ПолучитьИзВременногоХранилища(АдресХранения);
		
		Файл.Записать(Путь);
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(Путь, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	КонецЕсли;
	ОбластьЛиста = ТабличныйДокумент.ПолучитьОбласть();//Объект.ИмяЛиста);
	УИ = ПоместитьВоВременноеХранилище(ОбластьЛиста);
	Объект.ВременныйИдентификатор = УИ;
	
	Строк = ОбластьЛиста.ПолучитьРазмерОбластиДанныхПоВертикали();
	Объект.КонечнаяСтрока = Строк;
	ВсегоКолонок = ОбластьЛиста.ПолучитьРазмерОбластиДанныхПоГоризонтали();
	//сообщить("Строк "+Строк+", колонок "+ВсегоКолонок);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИмяФайлаПриходОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//КаталогИБ = НСтр(СтрокаСоединенияИнформационнойБазы(),"File");
	//Если КаталогИБ <> "" Тогда
	ЗапуститьПриложение(Элемент.ТекстРедактирования);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПриходНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Если НЕ Объект.ВестиУчетПоГТД Тогда
	//	Элементы.ТаблицаПриходКодСтраны.Видимость = Ложь;
	//	Элементы.ТаблицаПриходСтрана.Видимость = Ложь;
	//	Элементы.ТаблицаПриходНомерГТД.Видимость = Ложь;
	//КонецЕсли;
	//Если СервернаяБаза Тогда
		ИмяФайлаНачалоВыбораАсинхронный(Элемент, ДанныеВыбора, СтандартнаяОбработка);
		Возврат;
	//КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
    ДиалогОткрытияФайла.ПолноеИмяФайла     = Объект.ИмяФайлаПриход; 
    ДиалогОткрытияФайла.МножественныйВыбор = Ложь; 
	ДиалогОткрытияФайла.Фильтр = "Файл Excel(*.xls*)|*.xls*";
    ДиалогОткрытияФайла.Заголовок = "Выберите файл Excel(xls, xlsx)"; 
    Если ДиалогОткрытияФайла.Выбрать()Тогда 
    	Объект.ИмяФайлаПриход = ДиалогОткрытияФайла.ПолноеИмяФайла; 
	КонецЕсли;
	ПоказатьОповещениеПользователя(,,"Заполнение списка листов ");
	ЗаполнитьСписокЛистовExcel();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокЛистовExcel()
	Если Объект.ЗагружатьНаКлиенте Тогда
		//МассивЛистов = ВернутьСписокЛистовКлиент(,Истина);
		//https://infostart.ru/public/341855/
		Попытка
			МассивЛистов = ВернутьСписокЛистовТабличныйДокумент(,Истина);
		Исключение
		КонецПопытки;
	Иначе
		МассивЛистов = ВернутьСписокЛистовСервер(,Истина);
	КонецЕсли;
	Массив = НезакрытыеЗаказыПоставщикуНаСервере();
	//Элементы.ИмяЛиста.СписокВыбора.ЗагрузитьЗначения(МассивЛистов);
	Если МассивЛистов.Количество()>0 Тогда
		Объект.ИмяЛиста = МассивЛистов[0];
	КонецЕсли;
	Объект.НачальнаяСтрока = 1;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервереADO()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ИмяФайла = Объект.ИмяФайлаПриход;
	Если ИмяФайла = "" Тогда
		сообщить("Не выбран файл");
		Возврат;
	КонецЕсли;
	Объект.ТаблицаПриход.Очистить();
	db = Новый COMОбъект("ADODB.Connection");
	Rs = Новый COMОбъект("ADODB.RecordSet");
	ЕстьОшибка = Ложь;
	Попытка
		Если Прав(ИмяФайла,3) = "xls" Тогда
			db.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source="+ИмяФайла+";Extended Properties=""Excel 8.0;HDR=NO; IMEX=1;""";
		Иначе
		//db.ConnectionString = "OLEDB;Provider=Microsoft.Jet.OLEDB.4.0;Data Source="+СокрЛП(ИмяФайла)+";Extended Properties=""Excel 8.0;HDR=NO;IMEX=1""";
			db.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source="+ИмяФайла+";Extended Properties=""Excel 12.0;HDR=NO; IMEX=1;""";//2007 office
		КонецЕсли;
		db.Open();
		ЕстьОшибка = Ложь;
	Исключение 
		сообщить("Невозможно установить соединение (проверьте соответствие разрядности 1С и AccessDatabaseEngine): "+ОписаниеОшибки());
		ЕстьОшибка = Истина;
		//Возврат;
	КонецПопытки;
	//пробуем через ODBC
	Если ЕстьОшибка Тогда
		Попытка
			db.ConnectionString = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)}; DBQ="+ИмяФайла+";";
			db.Open();
		Исключение
			сообщить("Невозможно установить соединение (возможно, в указанном DSN архитектура драйвера и арихтектура приложения не соответствуют друг другу): "+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;

	
	rs.ActiveConnection = db;
	rs.LockType = 2;
	//cat=Новый COMОбъект("ADOX.Catalog");
	//cat.ActiveConnection=db;
	//СписокЛистов = ВернутьСписокЛистов(ИмяФайла);
	//ИмяЛиста = СписокЛистов.Получить(0).Значение;
	ИмяЛиста = Объект.ИмяЛиста;
	rs.Open("SELECT * FROM ["+ИмяЛиста+"$]");
	//rs.MoveNext();//пропускаем первую строку
	//Начисления.Очистить();
	//НДата = '20500101';
	//КДата = '00010101';
	СтрокаГруппа = "";
	НачальнаяСтрока = Объект.НачальнаяСтрока;
	КонечнаяСтрока = Объект.КонечнаяСтрока;
	КолонкаАртикул = Объект.КолонкаАртикул-1;
	КолонкаПроизводитель = Объект.КолонкаПроизводитель-1;				//это ADO!!!
	КолонкаНаименование = Объект.КолонкаНаименование-1;
	КолонкаКоличество = Объект.КолонкаКоличество-1;
	КолонкаЦена = Объект.КолонкаЦена-1;
	КолонкаНДС = Объект.КолонкаНДС-1;
	КолонкаСумма = Объект.КолонкаСумма-1;
	КолонкаКодСтраны = Объект.КолонкаКодСтраны-1;
	КолонкаСтрана = Объект.КолонкаСтрана-1;
	КолонкаНомерГТД = Объект.КолонкаНомерГТД-1;
	КолонкаШтрихКод = Объект.КолонкаШтрихКод-1;
	КолонкаЯчейка = Объект.КолонкаЯчейка-1;
	НС = 0;
	Пока rs.Eof()=0 Цикл
		//ОбработкаПрерыванияПользователя();
		НС = НС + 1;
		Если НачальнаяСтрока>0 Тогда
			Если НС<(НачальнаяСтрока-1) Тогда
				rs.MoveNext();
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если КонечнаяСтрока>0 Тогда
			Если НС>КонечнаяСтрока Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаАртикул > 0 Тогда
			Артикул = СокрЛП(rs.Fields(КолонкаАртикул).Value);
			Если Объект.ЗагружатьОчищенныеАртикулы Тогда
				Артикул = ОчиститьАртикул(Артикул);
			КонецЕсли;
		Иначе
			Артикул = "";
		КонецЕсли;
		Если (Артикул = "") Тогда
			//сообщить("В строке № "+НС+" нет артикула, загрузка прервана");
			//Прервать;
			сообщить("В строке № "+(НС+1)+" нет артикула");
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		Если (Найти(НРег(Артикул),"код товара"))>0 Тогда
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		Если (Найти(НРег(Артикул),"наименование товара"))>0 Тогда
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		Если Артикул="Б" Тогда
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		Если КолонкаНаименование > 0 Тогда
			НаименованиеТовара = СокрЛП(rs.Fields(КолонкаНаименование).Value);
			Если НаименованиеТовара = "Описание" Тогда
				rs.MoveNext();
				Продолжить;//заголовок
			КонецЕсли;
		КонецЕсли;
		НовСтрока = Объект.ТаблицаПриход.Добавить();
		Если КолонкаАртикул > 0 Тогда
			НовСтрока.Артикул = СокрЛП(rs.Fields(КолонкаАртикул).Value);
			Если Объект.ЗагружатьОчищенныеАртикулы Тогда
				НовСтрока.Артикул = ОчиститьАртикул(НовСтрока.Артикул);
			КонецЕсли;
		КонецЕсли;
		Если КолонкаНаименование > 0 Тогда
			НовСтрока.Наименование = СокрЛП(rs.Fields(КолонкаНаименование).Value);
			Если НовСтрока.Артикул<>"" Тогда
				//НовСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", НовСтрока.Артикул, НовСтрока.Группа);
				//НовСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", НовСтрока.Артикул);
				//НовСтрока.Номенклатура = НайтиНоменклатуруПоАртикулуИБренду(НовСтрока.Артикул, НовСтрока.Бренд)
				Если КолонкаПроизводитель > 0 Тогда
					ПроизводительСтрокой = СокрЛП(rs.Fields(КолонкаПроизводитель).Value);
					НовСтрока.ПроизводительСтрокой = ПроизводительСтрокой;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПроизводительСтрокой) Тогда
					Производитель = Неопределено;
				Иначе
					Производитель = ОбработкаОбъект.НайтиДобавитьПроизводитель(ПроизводительСтрокой, Истина);//только ищем, не создаем
					НовСтрока.Производитель = Производитель;
				КонецЕсли;
				Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(СокрЛП(НовСтрока.Артикул), Производитель, ,НовСтрока.Наименование, Ложь);//только ищем, не создаем
				//сообщить(Номенклатура);
				НовСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаКоличество > 0 Тогда
			Попытка
				НовСтрока.Количество = Число(СтрЗаменить(rs.Fields(КолонкаКоличество).Value," ",""));
			Исключение
				сообщить(СокрЛП(НС) + " количество " + rs.Fields(КолонкаКоличество).Value);
				Сообщить(ОписаниеОшибки());
				//Инфо = ИнформацияОбОшибке();
				//Сообщить("Описание='" + Инфо.Описание + "'");
				//Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
				//Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
				//Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
			КонецПопытки;
		КонецЕсли;
		Если КолонкаНДС > 0 Тогда
			врем = НРег(rs.Fields(КолонкаНДС).Value);
			Если врем = "" Тогда
				НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			ИначеЕсли Найти(врем, "20") > 0 Тогда
				Если НЕ Объект.УТКазахстан Тогда
					НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				КонецЕсли;
			ИначеЕсли Найти(врем, "18") > 0 Тогда
				НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			ИначеЕсли Найти(врем, "12") > 0 Тогда
				Если Объект.УТКазахстан Тогда
					НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			ИначеЕсли Найти(врем, "10") > 0 Тогда
				НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли Найти(врем, "без") > 0 Тогда
				НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
		Иначе
			НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		Если КолонкаЦена > 0 Тогда
			Попытка
				НовСтрока.ЦенаЗакупки = Число(СтрЗаменить(rs.Fields(КолонкаЦена).Value," ",""));
			Исключение
				сообщить(СокрЛП(НС) + " цена " + rs.Fields(КолонкаЦена).Value);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			Если НЕ Объект.УТКазахстан Тогда
				Если НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
					Если Объект.ЦенаБезНДС Тогда
						НовСтрока.ЦенаЗакупки = НовСтрока.ЦенаЗакупки * 1.2;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если НовСтрока.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
					НовСтрока.ЦенаЗакупки = НовСтрока.ЦенаЗакупки * 1.12;
					//Справочники["СтавкиНДС"]["НДС12"]
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаСумма > 0 Тогда
			Попытка
				НовСтрока.Сумма = Число(СтрЗаменить(rs.Fields(КолонкаСумма).Value," ",""));
			Исключение
				сообщить(СокрЛП(НС) + " сумма " + rs.Fields(КолонкаСумма).Value);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		Если КолонкаКодСтраны > 0 Тогда
			Попытка
				врем = rs.Fields(КолонкаКодСтраны).Value;
				Если врем = "" Тогда
					врем = 0;
				Иначе
					Попытка
						врем = Число(СтрЗаменить(СтрЗаменить(врем," ",""),",","."));
					Исключение
						врем=  0;
					КонецПопытки;
				КонецЕсли;
				Если врем <> 0 И врем <> 643 Тогда //Россию тоже не загружаем
					НовСтрока.КодСтраны = врем;
					НовСтрока.Страна = Справочники.СтраныМира.НайтиПоКоду(НовСтрока.КодСтраны);
					Если Не ЗначениеЗаполнено(НовСтрока.Страна) И КолонкаСтрана > 0 Тогда
						Об = Справочники.СтраныМира.СоздатьЭлемент();
						Об.Код = врем;
						Об.Наименование = rs.Fields(КолонкаСтрана).Value;
						Об.НаименованиеПолное = Об.Наименование;
						Об.Записать();
						НовСтрока.Страна = Об.Ссылка;
					Иначе
						НовСтрока.Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
			Исключение
				сообщить(СокрЛП(НС) + " код страны " + rs.Fields(КолонкаКодСтраны).Value);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		Если КолонкаСтрана > 0 И не ЗначениеЗаполнено(НовСтрока.Страна) Тогда
			врем = СокрЛП(rs.Fields(КолонкаСтрана).Value);
			Если врем <> "" Тогда
				НовСтрока.Страна = Справочники.СтраныМира.НайтиПоНаименованию(врем);
				Если ЗначениеЗаполнено(НовСтрока.Страна) Тогда
					НовСтрока.Ошибка = Ложь;
				Иначе
					сообщить(СокрЛП(НС) + " добавляем страну (не забудьте добавить код) " + врем);
					Страна = Справочники.СтраныМира.СоздатьЭлемент();
					Страна.Наименование = врем;
					Страна.Записать();
					НовСтрока.Страна = Страна.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаНомерГТД > 0 Тогда
			врем = rs.Fields(КолонкаНомерГТД).Value;
			Если врем<>"" И Лев(врем, 2) <> "--" Тогда
				НовСтрока.НомерГТД = Справочники.НомераГТД.НайтиПоКоду(врем);
				Если Не ЗначениеЗаполнено(НовСтрока.НомерГТД) Тогда
					Об = Справочники.НомераГТД.СоздатьЭлемент();
					Об.Код = врем;
					Об.СтранаПроисхождения = НовСтрока.Страна;//Об.Наименование;
					Об.Записать();
					НовСтрока.НомерГТД = Об.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаШтрихКод > 0 Тогда
			врем = rs.Fields(КолонкаШтрихКод).Value;
			НовСтрока.ШтрихКод = врем;
		КонецЕсли;
		Если КолонкаЯчейка > 0 Тогда
			врем = rs.Fields(КолонкаЯчейка).Value;
			НовСтрока.Ячейка = врем;
		КонецЕсли;
		Если КолонкаНаименование > 0 И КолонкаАртикул > 0 Тогда
			Если (НовСтрока.Артикул = "" Или НовСтрока.Наименование = "") Тогда
				//сообщить("В строке № "+НС+" нет артикула или наименования, загрузка прервана");
				сообщить("В строке № "+НС+" нет артикула (в колонке "+КолонкаАртикул+") или наименования (в колонке "+КолонкаНаименование+")");
				//Прервать;
				Объект.ТаблицаПриход.Удалить(НовСтрока.НомерСтроки-1);
			КонецЕсли;
		КонецЕсли;
		rs.MoveNext();	
	КонецЦикла;
	rs.Close();
	rs = "";
	db.Close();
	db = "";
КонецПроцедуры

&НаСервере
Функция НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Создавать = Истина)
	Если ПроизводительСтрокой = "" Тогда
		Возврат Справочники.Производители.ПустаяСсылка();
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Производитель = ОбработкаОбъект.НайтиДобавитьПроизводитель(ПроизводительСтрокой, Создавать);
	Возврат Производитель;	
КонецФункции

&НаСервере
Функция НайтиДобавитьНоменклатуруПоАртикулуИзКлиента(Артикул, Производитель, Знач Позиция, НаименованиеНоменклатуры = "", Создавать = Истина)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(Артикул, Производитель, Позиция, НаименованиеНоменклатуры, Создавать);
	Возврат Номенклатура;
КонецФункции

&НаСервере
Функция НайтиДобавитьСтрануИзКлиента(КодСтраны, Наименование, НомерКолонки = 0)
	Страна = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
	Если ЗначениеЗаполнено(Страна) Тогда
		Если (СтрДлина(Страна.Наименование)<4 Или Найти(Страна.Наименование,"/")) И СтрДлина(Наименование)>3 Тогда //вдруг некорректно раньше сопоставили колонкии наименование кривое встало
			Об = Страна.ПолучитьОбъект();
			Об.Наименование = Наименование;
			Об.Записать();
		КонецЕсли;
		Возврат Страна;
	КонецЕсли;
	Если НомерКолонки = 0 Тогда
		Возврат Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;
	Об = Справочники.СтраныМира.СоздатьЭлемент();
	Об.Код = КодСтраны;
	Об.Наименование = Наименование;
	Об.НаименованиеПолное = Наименование;
	Об.Записать();
	Возврат Об.Ссылка;
	//	НовСтрока.Страна = Об.Ссылка;
КонецФункции

&НаСервере
Функция НайтиДобавитьГТДИзКлиента(времГТД, КодСтраны)
	Номер = Справочники.НомераГТД.НайтиПоКоду(времГТД);
	Если Не ЗначениеЗаполнено(Номер) Тогда
		Попытка
			Об = Справочники.НомераГТД.СоздатьЭлемент();
			Об.Код = времГТД;
			Об.РегистрационныйНомер = времГТД;
			Об.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
			Об.Записать();
			Возврат Об.Ссылка;
		Исключение
			сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		НачатьТранзакцию();
		Если Номер.РегистрационныйНомер = "" Тогда
			Об = Номер.ПолучитьОбъект();
			Об.РегистрационныйНомер = времГТД;
			Об.Записать();
		КонецЕсли;
		Если КодСтраны<>"" И (НЕ ЗначениеЗаполнено(Номер.СтранаПроисхождения) ИЛИ СокрЛП(Номер.СтранаПроисхождения.Код)<>КодСтраны) Тогда //если код страны другой, то обновляем и страну
			Об = Номер.ПолучитьОбъект();
			Об.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
			Если ЗначениеЗаполнено(Об.СтранаПроисхождения) Тогда
				Об.Записать();
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Возврат Номер.Ссылка;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаНаСервереКлиент()
	//"C:\Program Files (x86)\1cv8\8.3.10.2299\bin\conf\conf.cfg" 
	//DisableUnsafeActionProtection=.*;
	Excel = Новый COMОбъект("Excel.Application");
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Excel.Visible = Ложь;
	ИмяФайла = Объект.ИмяФайлаПриход;
	WorkBook = Excel.WorkBooks.Open(СокрЛП(ИмяФайла));
	Sheet = WorkBook.WorkSheets(СокрЛП(Объект.ИмяЛиста));
	НачальнаяКолонка = 1;
    НачальнаяСтрока = Объект.НачальнаяСтрока;
    КонечнаяСтрока = Объект.КонечнаяСтрока;
    Если Версия = "8" Тогда
        КонечнаяКолонка = Sheet.Cells.CurrentRegion.Columns.Count;
		Если КонечнаяСтрока = 0 Тогда
        	КонечнаяСтрока = Sheet.Cells.CurrentRegion.Rows.Count;
		Иначе                                                                  
        	КонечнаяСтрока = Мин(КонечнаяСтрока, Sheet.Cells.CurrentRegion.Rows.Count);
		КонецЕсли;
    Иначе
        КонечнаяКолонка = Sheet.Cells.SpecialCells(11).Column;
		Если КонечнаяСтрока = 0 Тогда
	        КонечнаяСтрока  = Sheet.Cells.SpecialCells(11).Row;
		Иначе
        	КонечнаяСтрока = Мин(КонечнаяСтрока, Sheet.Cells.SpecialCells(11).Row);
		КонецЕсли;
	Конецесли;
	Если КонечнаяСтрока > 65000 Тогда
		КонечнаяСтрока = 500;
	КонецЕсли;
	Если НачальнаяСтрока = 0 Тогда
		НачальнаяСтрока = 1;
	КонецЕсли;
	Объект.КонечнаяСтрока = КонечнаяСтрока;
	Объект.НачальнаяСтрока = НачальнаяСтрока;
	КолонкаАртикул = Объект.КолонкаАртикул;
	КолонкаПроизводитель = Объект.КолонкаПроизводитель;
	КолонкаНаименование = Объект.КолонкаНаименование;                      //это Excel
	КолонкаКоличество = Объект.КолонкаКоличество;
	КолонкаЦена = Объект.КолонкаЦена;
	КолонкаНДС = Объект.КолонкаНДС;
	КолонкаСумма = Объект.КолонкаСумма;
	КолонкаКодСтраны = Объект.КолонкаКодСтраны;
	КолонкаСтрана = Объект.КолонкаСтрана;
	КолонкаНомерГТД = Объект.КолонкаНомерГТД;
	КолонкаШтрихКод = Объект.КолонкаШтрихКод;
	КолонкаЯчейка = Объект.КолонкаЯчейка;
	Для НС = НачальнаяСтрока По КонечнаяСтрока Цикл
		Если КолонкаАртикул > 0 Тогда
			Артикул = СокрЛП(Sheet.Cells(НС, КолонкаАртикул).Value);
		Иначе
			Артикул = "";
		КонецЕсли;
		Если (Артикул = "") Тогда
			//сообщить("В строке № "+НС+" нет артикула, загрузка прервана");
			//Прервать;
			сообщить("В строке № "+(НС+1)+" нет артикула");
			Продолжить;
		КонецЕсли;
		Если (Найти(НРег(Артикул),"код товара"))>0 Тогда
			Продолжить;
		КонецЕсли;
		Если (Найти(НРег(Артикул),"наименование товара"))>0 Тогда
			Продолжить;
		КонецЕсли;
		Если Артикул="Б" Тогда
			Продолжить;
		КонецЕсли;
		НовСтрока = Объект.ТаблицаПриход.Добавить();
		Если КолонкаАртикул > 0 Тогда
			НовСтрока.Артикул = СокрЛП(Sheet.Cells(НС, КолонкаАртикул).Value);
		КонецЕсли;
		Если КолонкаНаименование > 0 Тогда
			НовСтрока.Наименование = СокрЛП(Sheet.Cells(НС, КолонкаНаименование).Value);
			Если НовСтрока.Артикул<>"" Тогда
				//НовСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", НовСтрока.Артикул, НовСтрока.Группа);
				//НовСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", НовСтрока.Артикул);
				//НовСтрока.Номенклатура = НайтиНоменклатуруПоАртикулуИБренду(НовСтрока.Артикул, НовСтрока.Бренд)
				Если КолонкаПроизводитель > 0 Тогда
					ПроизводительСтрокой = СокрЛП(Sheet.Cells(НС, КолонкаПроизводитель).Value);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПроизводительСтрокой) Тогда
					Производитель = Неопределено;
				Иначе
					Производитель = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Ложь);//только ищем, не создаем
					НовСтрока.Производитель = Производитель;
				КонецЕсли;
				Если ЗначениеЗаполнено(Производитель) Тогда
					Номенклатура = НайтиДобавитьНоменклатуруПоАртикулуИзКлиента(СокрЛП(НовСтрока.Артикул), Производитель, ,НовСтрока.Наименование, Истина);//и создаем
				Иначе
					Номенклатура = НайтиДобавитьНоменклатуруПоАртикулуИзКлиента(СокрЛП(НовСтрока.Артикул), Производитель, ,НовСтрока.Наименование, Ложь);//только ищем, не создаем
				КонецЕсли;
				//сообщить(Номенклатура);
				НовСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаКоличество > 0 Тогда
			Попытка
				НовСтрока.Количество = Число(СтрЗаменить(Sheet.Cells(НС, КолонкаКоличество).Value," ",""));
			Исключение
				сообщить(СокрЛП(НС) + " количество " + Sheet.Cells(НС, КолонкаКоличество).Value);
				Сообщить(ОписаниеОшибки());
				//Инфо = ИнформацияОбОшибке();
				//Сообщить("Описание='" + Инфо.Описание + "'");
				//Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
				//Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
				//Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
			КонецПопытки;
		КонецЕсли;
		Если КолонкаНДС > 0 Тогда
			врем = НРег(Sheet.Cells(НС, КолонкаНДС).Value);
			Если врем = "" Тогда
				НовСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
			ИначеЕсли Найти(врем, "20") > 0 Тогда
				НовСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисления.СтавкиНДС.НДС20");
			ИначеЕсли Найти(врем, "18") > 0 Тогда
				НовСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисления.СтавкиНДС.НДС18");
			ИначеЕсли Найти(врем, "10") > 0 Тогда
				НовСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисления.СтавкиНДС.НДС10");
			ИначеЕсли Найти(врем, "без") > 0 Тогда
				НовСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисления.СтавкиНДС.БезНДС");
			КонецЕсли;
		Иначе
			НовСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисления.СтавкиНДС.БезНДС");
		КонецЕсли;
		Если КолонкаЦена > 0 Тогда
			Попытка
				НовСтрока.ЦенаЗакупки = Число(СтрЗаменить(Sheet.Cells(НС, КолонкаЦена).Value," ",""));
			Исключение
				сообщить(СокрЛП(НС) + " цена " + Sheet.Cells(НС, КолонкаЦена).Value);
				Сообщить(ОписаниеОшибки());
				//Инфо = ИнформацияОбОшибке();
				//Сообщить("Описание='" + Инфо.Описание + "'");
				//Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
				//Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
				//Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
			КонецПопытки;
			Если НЕ Объект.УТКазахстан Тогда
				Если НовСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисления.СтавкиНДС.НДС20") Тогда
					Если Объект.ЦенаБезНДС Тогда
						НовСтрока.ЦенаЗакупки = НовСтрока.ЦенаЗакупки * 1.2;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаКодСтраны > 0 Тогда
			Попытка
				врем = Sheet.Cells(НС, КолонкаКодСтраны).Value;
				Если врем = "" Тогда
					врем = 0;
				Иначе
					Попытка
						врем = Число(СтрЗаменить(СтрЗаменить(врем," ",""),",","."));
					Исключение
						врем=  0;
					КонецПопытки;
				КонецЕсли;
				Если врем <> "" И врем <> 0 И врем <> 643 Тогда //Россию тоже не загружаем
					НовСтрока.КодСтраны = врем;
					НовСтрока.Страна = НайтиДобавитьСтрануИзКлиента(НовСтрока.КодСтраны, Sheet.Cells(НС, КолонкаСтрана).Value, КолонкаКодСтраны);
					Если Не ЗначениеЗаполнено(НовСтрока.Страна) Тогда
						НовСтрока.Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
			Исключение
				сообщить(СокрЛП(НС) + " код страны " + Sheet.Cells(НС, КолонкаКодСтраны).Value);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		Если КолонкаНомерГТД > 0 Тогда
			времГТД = Sheet.Cells(НС, КолонкаНомерГТД).Value;
			Если времГТД<>"" И Лев(времГТД, 2) <> "--" Тогда
				НовСтрока.НомерГТД = НайтиДобавитьГТДИзКлиента(времГТД, НовСтрока.КодСтраны);
				//НовСтрока.НомерГТД = Справочники.НомераГТД.НайтиПоКоду(врем);
				//Если Не ЗначениеЗаполнено(НовСтрока.НомерГТД) Тогда
				//	Об = Справочники.НомераГТД.СоздатьЭлемент();
				//	Об.Код = врем;
				//	Об.СтранаПроисхождения = Об.Наименование;
				//	Об.Записать();
				//	НовСтрока.НомерГТД = Об.Ссылка;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаШтрихКод > 0 Тогда
			врем = Sheet.Cells(НС, КолонкаШтрихКод).Value;
			НовСтрока.ШтрихКод = врем;
		КонецЕсли;
		
		Если КолонкаЯчейка > 0 Тогда
			врем = Sheet.Cells(НС, КолонкаЯчейка).Value;
			НовСтрока.Ячейка = врем;
		КонецЕсли;
		Если КолонкаНаименование > 0 И КолонкаАртикул > 0 Тогда
			Если (НовСтрока.Артикул = "" Или НовСтрока.Наименование = "") Тогда
				//сообщить("В строке № "+НС+" нет артикула или наименования, загрузка прервана");
				сообщить("В строке № "+НС+" нет артикула или наименования");
				//Прервать;
				Объект.ТаблицаПриход.Удалить(НовСтрока.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	WorkBook.Close();
	WorkBook = Неопределено;
	Excel.Application.Quit();
	Excel = Неопределено;
КонецПроцедуры

Функция ОчиститьАртикул(Артикул)
	врем = ВРЕГ(СокрЛП(Артикул));
	врем = СтрЗаменить(врем,".","");
	врем = СтрЗаменить(врем,":","");
	врем = СтрЗаменить(врем,"/","");
	врем = СтрЗаменить(врем,"\","");
	врем = СтрЗаменить(врем,"-","");
	врем = СтрЗаменить(врем,"_","");
	врем = СтрЗаменить(врем,";","");
	врем = СтрЗаменить(врем,"=","");
	врем = СтрЗаменить(врем," ","");
	Возврат врем;
КонецФункции

Процедура ЗагрузитьИзФайлаТабличныйДокумент(Асинхронно = Ложь)
	//1c-e.ru/образец-внешней-обработки-с-длительн/ - длительные операции в фоне
	//https://infostart.ru/public/525648/ здесь пример
	//"C:\Program Files (x86)\1cv8\8.3.10.2299\bin\conf\conf.cfg" 
	//DisableUnsafeActionProtection=.*;
	Если Асинхронно Тогда
		Если АдресХранения = Неопределено Тогда
			сообщить("Не определен АдресХранения");
			ТабличныйДокумент = Новый ТабличныйДокумент;
			Попытка
				ТабличныйДокумент.Прочитать(Объект.ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
			Исключение
				Сообщить(ОписаниеОшибки());
				//это лог Текст.ДобавитьСтроку(ОписаниеОшибки());
				//Возврат Текст;
			КонецПопытки;
		Иначе
			НРегИмяФайла = Нрег(ИмяФайла);
			Если Прав(НРегИмяФайла, 3) = "xls" Тогда
				Расширение = "xls";
			ИначеЕсли Прав(НРегИмяФайла, 4) = "xlsx" Тогда
				Расширение = "xlsx";
			Иначе
				сообщить("Формат файлов не поддерживается, неизвестное расширение: "+Расширение+" у файла: "+ИмяФайла);
			КонецЕсли;
			Путь	= КаталогВременныхФайлов() +
						Новый УникальныйИдентификатор() + "."+Расширение;
			Файл	= ПолучитьИзВременногоХранилища(АдресХранения);
			
			Файл.Записать(Путь);
			
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.Прочитать(Путь, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		КонецЕсли;
		ОбластьЛиста = ТабличныйДокумент.ПолучитьОбласть();//Объект.ИмяЛиста);
		УИ = ПоместитьВоВременноеХранилище(ОбластьЛиста);
		Объект.ВременныйИдентификатор = УИ;
		
		НачальнаяСтрока = Объект.НачальнаяСтрока;
		КонечнаяСтрока = ОбластьЛиста.ПолучитьРазмерОбластиДанныхПоВертикали();
		Если КонечнаяСтрока = 0 Тогда
			//КонечнаяСтрока = ОбластьЛиста.ВысотаСтраницы;
			сообщить("Не определили количество строк, пересохраните документ из Excel");
			Возврат;
		КонецЕсли;
		Если Объект.КонечнаяСтрока > КонечнаяСтрока Тогда
			Объект.КонечнаяСтрока = КонечнаяСтрока;
		Иначе
			КонечнаяСтрока = Объект.КонечнаяСтрока;
		КонецЕсли;
		ВсегоКолонок = ОбластьЛиста.ПолучитьРазмерОбластиДанныхПоГоризонтали();
		Если ВсегоКолонок = 0 Тогда
			сообщить("Не определили количество колонок, пересохраните документ из Excel");
			Возврат;
			//ВсегоКолонок = ОбластьЛиста.ШиринаСтраницы;
		КонецЕсли;
	Иначе
		ИмяФайла = Объект.ИмяФайлаПриход;
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Попытка
			// Выполняется долго на больших файлах.
			ТабличныйДокумент.Прочитать(ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		НачальнаяСтрока = Объект.НачальнаяСтрока;
		// Платформа 8.3.9 и более ранние (Файл EXCEL как 1 лист).
		КонечнаяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		Если Объект.КонечнаяСтрока <> 0 Тогда
			КонечнаяСтрока = Мин(КонечнаяСтрока, Объект.КонечнаяСтрока);
		КонецЕсли;
		ВсегоКолонок = ТабличныйДокумент.ШиринаТаблицы;
	КонецЕсли;//Асинхронно
	
	Если КонечнаяСтрока = 0 Тогда
		сообщить("Нет строк в файле");
	КонецЕсли;
	
	Если КонечнаяСтрока > 100000 Тогда
		сообщить("Строка больше 100000, обрезаем до 500");
		КонечнаяСтрока = 500;
	КонецЕсли;
	Если НачальнаяСтрока = 0 Тогда
		НачальнаяСтрока = 1;
	КонецЕсли;
	Объект.КонечнаяСтрока = КонечнаяСтрока;
	Объект.НачальнаяСтрока = НачальнаяСтрока;
	КолонкаАртикул = Объект.КолонкаАртикул;
	КолонкаПроизводитель = Объект.КолонкаПроизводитель;
	КолонкаНаименование = Объект.КолонкаНаименование;
	КолонкаКоличество = Объект.КолонкаКоличество;
	КолонкаЦена = Объект.КолонкаЦена;
	КолонкаНДС = Объект.КолонкаНДС;
	КолонкаСумма = Объект.КолонкаСумма;
	КолонкаСуммаНДС = Объект.КолонкаСуммаНДС;
	КолонкаКодСтраны = Объект.КолонкаКодСтраны;
	КолонкаСтрана = Объект.КолонкаСтрана;
	КолонкаНомерГТД = Объект.КолонкаНомерГТД;
	КолонкаШтрихКод = Объект.КолонкаШтрихКод;
	КолонкаЯчейка = Объект.КолонкаЯчейка;
	КолонкаВес = Объект.КолонкаВес;
	КолонкаТНВЭД = Объект.КолонкаТНВЭД;
	БрендСАртикулом = Объект.БрендСАртикулом;
	БрендПередАртикулом = Объект.БрендПередАртикулом;
	БрендПослеАртикула = Объект.БрендПослеАртикула;
	ЗагружатьОчищенныеАртикулы = Объект.ЗагружатьОчищенныеАртикулы;
	АртикулПослеСимвола = Объект.АртикулПослеСимвола;
	КолонкаВсегоКОплате = Объект.КолонкаВсегоКОплате;
	АртикулВКонце = Объект.АртикулВКонце;
	Если Объект.ОграничениеАртикула<>"" Тогда
		ОграничениеАртикула = Объект.ОграничениеАртикула;
	Иначе
		ОграничениеАртикула = "";
	КонецЕсли;
	#Область НомерДатаГТД
	Если Объект.СтрокаНомераУПД<>0 Тогда
		ВыделенныйНомер = "";
		ВыделеннаяДата = "";
		Если Объект.КолонкаНомераУПД = Объект.КолонкаДатыУПД Тогда////СЧЕТ-ФАКТУРА №040822/2205 от 04.08.2022
			СтрокаСНомеромИДатой = СтрЗаменить(СокрЛП(ТабличныйДокумент.ПолучитьОбласть(Объект.СтрокаНомераУПД, Объект.КолонкаНомераУПД).ТекущаяОбласть.Текст),Символ(160),"");
			СтрокаСНомеромИДатой = СокрЛП(СтрЗаменить(СтрокаСНомеромИДатой,"счет-фактура",""));
			СтрокаСНомеромИДатой = СокрЛП(СтрЗаменить(СтрокаСНомеромИДатой,"СЧЕТ-ФАКТУРА",""));
			СтрокаСНомеромИДатой = СокрЛП(СтрЗаменить(СтрокаСНомеромИДатой,"СЧЕТ - ФАКТУРА",""));
			СтрокаСНомеромИДатой = СокрЛП(СтрЗаменить(СтрокаСНомеромИДатой,"СЧЕТ- ФАКТУРА",""));
			СтрокаСНомеромИДатой = СокрЛП(СтрЗаменить(СтрокаСНомеромИДатой,"СЧЕТ -ФАКТУРА",""));
			СтрокаСНомеромИДатой = СокрЛП(СтрЗаменить(СтрокаСНомеромИДатой,"СЧЕТ ФАКТУРА",""));
			СтрокаСНомеромИДатой = СокрЛП(СтрЗаменить(СтрокаСНомеромИДатой,"Счет-фактура",""));
			СтрокаСНомеромИДатой = СокрЛП(СтрЗаменить(СтрокаСНомеромИДатой,"Счет фактура",""));
			СтрокаСНомеромИДатой = СокрЛП(СтрЗаменить(СтрокаСНомеромИДатой,"счет фактура",""));
			Если Лев(СтрокаСНомеромИДатой,1) = "№" Тогда
				СтрокаСНомеромИДатой = Сред(СтрокаСНомеромИДатой,2);
			КонецЕсли;
			ПозицияОт = Найти(СтрокаСНомеромИДатой," от ");
			Если ПозицияОт>0 Тогда
				ВыделенныйНомер = СокрЛП(Лев(СтрокаСНомеромИДатой, ПозицияОт));
				ВыделеннаяДата = СокрЛП(Сред(СтрокаСНомеромИДатой,ПозицияОт+4));
			КонецЕсли;
		КонецЕсли;
		Если Объект.КолонкаНомераУПД<>0 Тогда
			Если ВыделенныйНомер = "" Тогда
				Объект.НомерВходящегоДокумента = СтрЗаменить(СокрЛП(ТабличныйДокумент.ПолучитьОбласть(Объект.СтрокаНомераУПД, Объект.КолонкаНомераУПД).ТекущаяОбласть.Текст),Символ(160),"");
			Иначе
				Объект.НомерВходящегоДокумента = ВыделенныйНомер;
			КонецЕсли;
		КонецЕсли;
		Если Объект.КолонкаДатыУПД<>0 Тогда
			Если ВыделеннаяДата = "" Тогда
				ДатаВходящегоДокументаСтрокой = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(Объект.СтрокаНомераУПД, Объект.КолонкаДатыУПД).ТекущаяОбласть.Текст);
				Если СтрДлина(ДатаВходящегоДокументаСтрокой) < 3 Тогда //тут только число, а месяц и год в других ячейках
					//так не работает, надо перебирать колонки
					//ДатаВходящегоДокументаСтрокой = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(Объект.СтрокаНомераУПД, Объект.КолонкаДатыУПД,Объект.СтрокаНомераУПД, Объект.КолонкаДатыУПД+20).ТекущаяОбласть.Текст);
					//ищем в других колонках, до 20, например
					времОстатокДаты = "";
					предврем = "";
					Для НКД = Объект.КолонкаДатыУПД+1 По Объект.КолонкаДатыУПД + 15 Цикл 
						врем = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(Объект.СтрокаНомераУПД, НКД).ТекущаяОбласть.Текст);
						Если предврем = врем Тогда
							Продолжить;
						КонецЕсли;
						предврем = врем;
						Если врем = ДатаВходящегоДокументаСтрокой Тогда //если объединённая ячейка, то одинаковое наименование
							Продолжить;
						КонецЕсли;
						Если врем = "" Тогда
							Продолжить;
						КонецЕсли;
						времОстатокДаты = времОстатокДаты + врем + " ";
						Если СтрДлина(времОстатокДаты) > 20 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					времОстатокДаты = СокрЛП(времОстатокДаты);
					ДатаВходящегоДокументаСтрокой = ДатаВходящегоДокументаСтрокой + " " + времОстатокДаты;
				КонецЕсли;
			Иначе
				ДатаВходящегоДокументаСтрокой = ВыделеннаяДата;
			КонецЕсли;
			ДатаВходящегоДокументаСтрокой = НРег(СокрЛП(СтрЗаменить(ДатаВходящегоДокументаСтрокой,"""","")));
			ДатаВходящегоДокументаСтрокой = СокрЛП(СтрЗаменить(ДатаВходящегоДокументаСтрокой,"'",""));
			ДатаВходящегоДокументаСтрокой = СокрЛП(СтрЗаменить(ДатаВходящегоДокументаСтрокой,"«",""));
			ДатаВходящегоДокументаСтрокой = СокрЛП(СтрЗаменить(ДатаВходящегоДокументаСтрокой,"»",""));
			ДатаВходящегоДокументаСтрокой = СокрЛП(СтрЗаменить(ДатаВходящегоДокументаСтрокой,"г.",""));
			ДатаВходящегоДокументаСтрокой = СокрЛП(СтрЗаменить(ДатаВходящегоДокументаСтрокой,"    "," "));
			ДатаВходящегоДокументаСтрокой = СокрЛП(СтрЗаменить(ДатаВходящегоДокументаСтрокой,"    "," "));
			ДатаВходящегоДокументаСтрокой = СокрЛП(СтрЗаменить(ДатаВходящегоДокументаСтрокой,"   "," "));
			ДатаВходящегоДокументаСтрокой = СокрЛП(СтрЗаменить(ДатаВходящегоДокументаСтрокой,"  "," "));
			ДатаВходящегоДокументаСтрокой = СокрЛП(СтрЗаменить(ДатаВходящегоДокументаСтрокой,"  "," "));
			Если ДатаВходящегоДокументаСтрокой = "" Тогда
			Иначе
				//преобразуем названия месяцев в их представления
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," января ",".01.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," февраля ",".02.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," марта ",".03.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," апреля ",".04.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," мая ",".05.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," июня ",".06.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," июля ",".07.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," августа ",".08.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," сентября ",".09.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," октября ",".10.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," ноября ",".11.");
				ДатаВходящегоДокументаСтрокой = СтрЗаменить(ДатаВходящегоДокументаСтрокой," декабря ",".12.");
				Если Сред(ДатаВходящегоДокументаСтрокой,2,1) = "." Тогда //число месяца меньше 10
					ДатаВходящегоДокументаСтрокой = "0"+ДатаВходящегоДокументаСтрокой;
				КонецЕсли;
				ДатаВходящегоДокументаСтрокой = Лев(ДатаВходящегоДокументаСтрокой,10);
				ПреобразованнаяДата = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаВходящегоДокументаСтрокой);
				Если ЗначениеЗаполнено(ПреобразованнаяДата) Тогда
					Объект.ДатаВходящегоДокумента = ПреобразованнаяДата;
				Иначе
					ПреобразованнаяДата = СтрокаСМесяцемВДату(ДатаВходящегоДокументаСтрокой);
					Если ЗначениеЗаполнено(ПреобразованнаяДата) Тогда
						Объект.ДатаВходящегоДокумента = ПреобразованнаяДата;
					Иначе
						сообщить("Не удалось определить дату: "+ДатаВходящегоДокументаСтрокой);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	Для НС = НачальнаяСтрока По КонечнаяСтрока Цикл
		Если КолонкаВсегоКОплате > 0 Тогда
			врем = НРег(СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаВсегоКОплате).ТекущаяОбласть.Текст));
			Если Лев(врем, 14) = "всего к оплате" Тогда //закончилась таблица с данными
				Прервать;
			КонецЕсли;
		КонецЕсли;
		ПроизводительСтрокой = "";
		ПроизводительСсылка = Неопределено;
		Артикул = "";
		#Область КолонкаАртикул
		Если КолонкаАртикул > 0 Тогда
			Артикул = СтрЗаменить(СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаАртикул).ТекущаяОбласть.Текст),Символ(160),"");
			Если Артикул <> "" Тогда
				Если Найти(Артикул,"Код товара")>0 Или Найти(Артикул,"Наименование товара")>0 Тогда
					//сообщить("В строке № "+НС+" найден разделитель страниц («Код товара/ работ, услуг»)");
					Продолжить;
				КонецЕсли;
				Если (Артикул = "А") Или (Артикул = "1А") Или (Артикул = "1а") Тогда
					//сообщить("В строке № "+НС+" найден шапка разделителя страниц («А»)");
					Продолжить;
				КонецЕсли;
				Если Найти(Артикул,"Документ составлен на")>0 Тогда
					сообщить("В строке № "+НС+" найден подвал УПД («Документ составлен на ...»), загрузка прервана");
					Объект.КонечнаяСтрока = НС;
					Возврат;
				КонецЕсли;
				Если Найти(Артикул,"Основание передачи")>0 Тогда
					сообщить("В строке № "+НС+" найден подвал УПД («Основание передачи»), загрузка прервана");
					Объект.КонечнаяСтрока = НС;
					Возврат;
				КонецЕсли;
				Если Найти(Артикул,"Руководитель")>0 Тогда
					сообщить("В строке № "+НС+" найден подвал УПД («Руководитель ...»), загрузка прервана");
					Объект.КонечнаяСтрока = НС;
					Возврат;
				КонецЕсли;
				Если АртикулПослеСимвола<>"" Тогда
					ПозицияНачала = Найти(Артикул, АртикулПослеСимвола);
					Если ПозицияНачала > 0 Тогда
						врем = Сред(Артикул, ПозицияНачала+СтрДлина(АртикулПослеСимвола));
						Артикул = врем;
					КонецЕсли;
				КонецЕсли;
				Если АртикулВКонце Тогда
					Если БрендСАртикулом И БрендПослеАртикула И ОграничениеАртикула <> "" Тогда
						ПроизводительСтрокой = ВернутьПоследнееСловоДоРазделителя(Артикул);
						Если ПроизводительСтрокой <> "" Тогда //отрезаем бренд, чтобы перейти к артикулу
							ПроизводительСсылка = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Истина);							
							Артикул = СокрЛП(Лев(Артикул, СтрДлина(Артикул) - СтрДлина(ПроизводительСтрокой)));
							//ищем разделитель который был между артикулом и брендом, и убираем его, чтобы не мешался
							Артикул = ОтрезатьРазделительВКонцеСтроки(Артикул);
							Артикул = ВернутьПоследнееСлово(Артикул);
						КонецЕсли;
					Иначе
						Артикул = ВернутьПоследнееСлово(Артикул);
					КонецЕсли;
				КонецЕсли;
				ИсходныйАртикул = Артикул;
				Если ОграничениеАртикула <> "" Тогда
					Поз = Найти(Артикул, ОграничениеАртикула);
					Если Поз = 0 Тогда
						Артикул = Артикул;
					Иначе
						Если БрендПередАртикулом Тогда
							Артикул = Сред(Артикул, Поз+1);
							НаименованиеБренда = Лев(ИсходныйАртикул,Поз-1);
						Иначе
							Артикул = Лев(Артикул, Поз-1);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если КолонкаАртикул <> КолонкаНаименование Тогда
					Если Объект.ЗагружатьОчищенныеАртикулы Тогда
						Артикул = ОчиститьАртикул(Артикул);
					КонецЕсли;
				Иначе
					//артикул в названии, ищем первый пробел, но чтобы артикул был не короче 4 символов
					ПозицияПробела = Найти(Артикул, " ");
					Если ПозицияПробела < 5 Тогда
						//коротковат, ищем второй пробел, или, как вариант, первую русскую букву, но тоже не панацея
						Позиция2Пробела = Найти(Артикул, ПозицияПробела+1);
						Если ПозицияПробела <> 0 И Позиция2Пробела = 0 Тогда
							Артикул = Лев(Артикул, ПозицияПробела-1);
						ИначеЕсли ПозицияПробела<>0 И Позиция2Пробела<>0 Тогда
							Артикул = Лев(Артикул, СокрЛП(ПозицияПробела+Позиция2Пробела));
						КонецЕсли;
					Иначе
						Артикул = Лев(Артикул, ПозицияПробела-1);
					КонецЕсли;
					Если ЗагружатьОчищенныеАртикулы Тогда
						Артикул = ОчиститьАртикул(Артикул);
					КонецЕсли;
				КонецЕсли;
				Если НЕ БрендПередАртикулом Тогда 
					ИсходныйАртикул = Артикул;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Артикул = "";
		КонецЕсли;
		Если (Артикул = "") Тогда
			//сообщить("В строке № "+НС+" нет артикула, загрузка прервана");
			//Прервать;
			сообщить("В строке № "+(НС+1)+" нет артикула, больше ничего не загружаем");
			Продолжить;
		КонецЕсли;
		Если (Найти(НРег(Артикул),"код товара"))>0 Тогда
			Продолжить;
		КонецЕсли;
		Если (Найти(НРег(Артикул),"наименование товара"))>0 Тогда
			Продолжить;
		КонецЕсли;
		Если (Найти(НРег(Артикул),"КОДТОВАРАРАБОТ,УСЛУГ"))>0 Тогда
			Продолжить;
		КонецЕсли;
		Если Артикул="Б" Тогда
			Продолжить;
		КонецЕсли;
		#КонецОбласти
		НовСтрока = Объект.ТаблицаПриход.Добавить();
		НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Если ЗначениеЗаполнено(ПроизводительСсылка) Тогда
			НовСтрока.Производитель = ПроизводительСсылка;
			НовСтрока.ПроизводительСтрокой = ПроизводительСтрокой;
		КонецЕсли;
		#Область КолонкаАртикул2
		Если КолонкаАртикул > 0 Тогда
			Если БрендСАртикулом Тогда
				Если БрендПередАртикулом Тогда
					Позиция_ = Найти(ИсходныйАртикул,"_");//делим по "_"
					Если Позиция_ = 0 Тогда
						Позиция_ = Найти(ИсходныйАртикул, ОграничениеАртикула);
					КонецЕсли;
					Если Позиция_ > 0 Тогда
						Если НЕ ЗначениеЗаполнено(ПроизводительСсылка) Тогда
							ПроизводительСтрокой = Лев(ИсходныйАртикул,Позиция_-1);
							Если НовСтрока.ПроизводительСтрокой = "" Тогда
								НовСтрока.ПроизводительСтрокой = ПроизводительСтрокой;
								НовСтрока.Производитель = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Истина);
							КонецЕсли;
						КонецЕсли;
						Артикул = Сред(ИсходныйАртикул,Позиция_+1);
						Если ЗагружатьОчищенныеАртикулы Тогда
							Артикул = ОчиститьАртикул(Артикул);
						Иначе
						КонецЕсли;
					Иначе //бренд в скобках, как у nextavto
						//такого пока не бывает
					КонецЕсли;
				Иначе
					Позиция_ = Найти(ИсходныйАртикул,"_");//делим по "_"
					Если Позиция_ = 0 Тогда
						Позиция_ = Найти(ИсходныйАртикул, ОграничениеАртикула);
					КонецЕсли;
					Если Позиция_ > 0 Тогда
						Если НЕ ЗначениеЗаполнено(ПроизводительСсылка) Тогда
							ПроизводительСтрокой = Сред(ИсходныйАртикул,Позиция_+1);
							НовСтрока.ПроизводительСтрокой = ПроизводительСтрокой;
							НовСтрока.Производитель = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Истина);
						КонецЕсли;
						Артикул = Лев(ИсходныйАртикул,Позиция_-1);
						Если ЗагружатьОчищенныеАртикулы Тогда
							Артикул = ОчиститьАртикул(Артикул);
						Иначе
						КонецЕсли;
					Иначе //бренд в скобках, как у nextavto
						Позиция_ = Найти(Артикул,"(");
						Если Позиция_>0 Тогда
							Если НЕ ЗначениеЗаполнено(ПроизводительСсылка) Тогда
								ПраваяСкобка = Найти(ИсходныйАртикул,")");
								Если ПраваяСкобка > 0 Тогда
									НовСтрока.Наименование = Сред(ИсходныйАртикул,ПраваяСкобка+1);
									ПроизводительСтрокой = Сред(ИсходныйАртикул,Позиция_+1, ПраваяСкобка-Позиция_-1);
									//сообщить(ПроизводительСтрокой);
									НовСтрока.ПроизводительСтрокой = ПроизводительСтрокой;
									НовСтрока.Производитель = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Истина);
								Иначе
									ПроизводительСтрокой = Сред(ИсходныйАртикул,Позиция_+1);
									НовСтрока.ПроизводительСтрокой = ПроизводительСтрокой;
									//НовСтрока.Производитель = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Истина);
								КонецЕсли;
							КонецЕсли;
							Артикул = Лев(ИсходныйАртикул,Позиция_-1);
							Если ЗагружатьОчищенныеАртикулы Тогда
								Артикул = ОчиститьАртикул(Артикул);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НовСтрока.Артикул = Артикул;//СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаАртикул).ТекущаяОбласть.Текст);
			Если КолонкаПроизводитель =  0 Тогда //в УПД нет производителя, сразу ищем по артикулу
				Спр = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Артикул);
				Если ЗначениеЗаполнено(Спр) Тогда
					НовСтрока.Номенклатура = Спр.Ссылка;
					//НовСтрока.ПроизводительСтрокой = СокрЛП(Спр.Производитель);
					НовСтрока.Производитель = Спр.Производитель;
				КонецЕсли;
				ОчищенныйАртикул = ОчиститьАртикул(Артикул);
				Если ОчищенныйАртикул <> Артикул Тогда
					Спр = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", ОчищенныйАртикул);
					Если ЗначениеЗаполнено(Спр) Тогда
						НовСтрока.Номенклатура = Спр.Ссылка;
						//НовСтрока.ПроизводительСтрокой = СокрЛП(Спр.Производитель);
						НовСтрока.Производитель = Спр.Производитель;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти
		Если КолонкаНаименование > 0 Тогда
			НаименованиеНоменклатуры = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаНаименование).ТекущаяОбласть.Текст);
			НовСтрока.Наименование = НаименованиеНоменклатуры;
			Если НовСтрока.Артикул<>"" Тогда
				//НовСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", НовСтрока.Артикул, НовСтрока.Группа);
				//НовСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", НовСтрока.Артикул);
				//НовСтрока.Номенклатура = НайтиНоменклатуруПоАртикулуИБренду(НовСтрока.Артикул, НовСтрока.Бренд)

				Если КолонкаПроизводитель > 0 Тогда
					Если БрендПослеАртикула И ОграничениеАртикула <> "" Тогда
						ПроизводительСтрокой = ВернутьПоследнееСловоДоРазделителя(НаименованиеНоменклатуры);
						НовСтрока.ПроизводительСтрокой = ПроизводительСтрокой;
						Если ПроизводительСтрокой <> "" Тогда
							ПроизводительСсылка = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Истина);
							НовСтрока.Производитель = ПроизводительСсылка;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(НовСтрока.Производитель) Тогда //если артикул с брендом в одной колонке, уже заполнили
						Если СокрЛП(НовСтрока.ПроизводительСтрокой) = "" Тогда
							НовСтрока.ПроизводительСтрокой = СокрЛП(НовСтрока.Производитель);
						КонецЕсли;
					Иначе
						ПроизводительСтрокой = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаПроизводитель).ТекущаяОбласть.Текст);
						НовСтрока.ПроизводительСтрокой = ПроизводительСтрокой;
						Если ПроизводительСтрокой<>"" Тогда
							НовСтрока.Производитель = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//Если НЕ ЗначениеЗаполнено(ПроизводительСтрокой) Тогда
				//	Производитель = Неопределено;
				//Иначе
				//	Производитель = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Ложь);//только ищем, не создаем
				//	НовСтрока.Производитель = Производитель;
				//КонецЕсли;
				//Если ЗначениеЗаполнено(Производитель) Тогда
				//	Номенклатура = НайтиДобавитьНоменклатуруПоАртикулуИзКлиента(СокрЛП(НовСтрока.Артикул), Производитель, ,НовСтрока.Наименование, Истина);//и создаем
				//Иначе
				//	Номенклатура = НайтиДобавитьНоменклатуруПоАртикулуИзКлиента(СокрЛП(НовСтрока.Артикул), Производитель, ,НовСтрока.Наименование, Ложь);//только ищем, не создаем
				//КонецЕсли;
				////сообщить(Номенклатура);
				//НовСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаКоличество > 0 Тогда
			Попытка
				НовСтрока.Количество = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаКоличество).ТекущаяОбласть.Текст);
			Исключение
				сообщить(СокрЛП(НС) + " количество " + СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаКоличество).ТекущаяОбласть.Текст));
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		Если КолонкаНДС > 0 Тогда
			врем = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаНДС).ТекущаяОбласть.Текст);
			Если врем = "" Тогда
				НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			ИначеЕсли Найти(врем, "20") > 0 Тогда
				НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			ИначеЕсли Найти(врем, "18") > 0 Тогда
				Попытка
					НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				Исключение
					НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				КонецПопытки;
			ИначеЕсли Найти(врем, "10") > 0 Тогда
				НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли Найти(врем, "без ндс") > 0 Тогда
				НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			ИначеЕсли Найти(врем, "безндс") > 0 Тогда
				НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;			
		КонецЕсли;
		Если КолонкаЦена > 0 Тогда
			ЦенаЗакупки = СтрЗаменить(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаЦена).ТекущаяОбласть.Текст," ","");
			Попытка
				НовСтрока.ЦенаЗакупки = ЦенаЗакупки;
			Исключение
				сообщить(СокрЛП(НС) + " цена " + ЦенаЗакупки);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			Если НЕ Объект.УТКазахстан Тогда
				Если КолонкаНДС > 0 И НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
					Если Объект.ЦенаБезНДС Тогда
						НовСтрока.ЦенаЗакупки = Окр(НовСтрока.ЦенаЗакупки * 1.2,2,РежимОкругления.Окр15как10);//Если без 318,34, то с НДС будет 382,008 и будет округление неправильное, поэтому надо заменить
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаСумма > 0 Тогда
			Сумма = СтрЗаменить(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаСумма).ТекущаяОбласть.Текст," ","");
			Попытка
				НовСтрока.Сумма = Сумма;
			Исключение
				сообщить(СокрЛП(НС) + " сумма " + Сумма);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			Если КолонкаЦена = 0 И НовСтрока.Количество <> 0 Тогда
				НовСтрока.ЦенаЗакупки = НовСтрока.Сумма / НовСтрока.Количество;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаСуммаНДС > 0 Тогда
			СуммаНДС = СтрЗаменить(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаСуммаНДС).ТекущаяОбласть.Текст," ","");
			Попытка
				НовСтрока.СуммаНДС = СуммаНДС;
			Исключение
				сообщить(СокрЛП(НС) + " сумма " + СуммаНДС);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		КодСтраны = "";
		Если КолонкаКодСтраны > 0 Тогда
			КодСтраны = СтрЗаменить(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаКодСтраны).ТекущаяОбласть.Текст," ","");
			КодСтраны = СокрЛП(СтрЗаменить(КодСтраны,"-",""));
			Попытка
				врем = КодСтраны;
				Если врем = "" Тогда
					врем = 0;
				Иначе
					Попытка
						врем = Число(СтрЗаменить(СтрЗаменить(врем," ",""),",","."));
					Исключение
						врем=  0;
					КонецПопытки;
				КонецЕсли;
				Если врем <> "" И врем <> 0 И врем <> 643 Тогда //Россию тоже не загружаем
					НовСтрока.КодСтраны = врем;
					Страна = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаСтрана).ТекущаяОбласть.Текст);
					НовСтрока.Страна = НайтиДобавитьСтрануИзКлиента(НовСтрока.КодСтраны, Страна);
					Если Не ЗначениеЗаполнено(НовСтрока.Страна) Тогда
						НовСтрока.Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
			Исключение
				сообщить(СокрЛП(НС) + " код страны " + врем);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		
		Если КодСтраны <> "" И КолонкаСтрана > 0 И НЕ ЗначениеЗаполнено(НовСтрока.Страна) Тогда
			врем = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаСтрана).ТекущаяОбласть.Текст);
			Если Найти(врем,"--")>0 Тогда
				врем = "";
			КонецЕсли;
			Если врем <> "" Тогда
				НовСтрока.Страна = Справочники.СтраныМира.НайтиПоНаименованию(врем);
				Если ЗначениеЗаполнено(НовСтрока.Страна) Тогда
					НовСтрока.Ошибка = Ложь;
				Иначе
					//сообщить(СокрЛП(НС) + " добавляем страну (не забудьте добавить код) " + врем);
					Попытка
						Страна = Справочники.СтраныМира.СоздатьЭлемент();
						Если НовСтрока.КодСтраны <> "" Тогда
							Страна.Код = НовСтрока.КодСтраны;
						Иначе
							Страна.Код = "";
						КонецЕсли;
						Страна.Наименование = врем;
						Если СокрЛП(Страна.Код) = "" Или СокрЛП(Страна.Наименование) = "" Тогда
							//сообщить("Не записана страна: "+Страна.Код+", "+Страна.Наименование+", не хватает кода или наименование");
						ИначеЕсли СтрДлина(СокрЛП(Страна.Наименование)) < 4 Тогда
							сообщить("Слишком короткое наименование страны ("+Страна.Наименование+"), проверьте настройки колонок");
						Иначе
							Попытка
								Страна.Записать();
							Исключение
								сообщить("Ошибка записи страны: "+Страна.Код+", "+Страна.Наименование+", "+ОписаниеОшибки());
							КонецПопытки;
							НовСтрока.Страна = Страна.Ссылка;
						КонецЕсли;
					Исключение
						сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаНомерГТД > 0 Тогда
			времГТД = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаНомерГТД).ТекущаяОбласть.Текст);
			Если СтрДлина(времГТД)<19 Тогда//должна быть 23-27 знаков XXXXX/XXXXXX/XXXXXXX/02
				времГТД = "";
			КонецЕсли;
			Если Найти(времГТД,"--")>0 Тогда
				времГТД = "";
			КонецЕсли;
			времГТД = СтрЗаменить(времГТД,Символ(10),"");//перенос строки
			времГТД = СтрЗаменить(времГТД,Символ(13),"");//возврат картеки
			времГТД = СтрЗаменить(времГТД,Символ(11),"");//вертикальная табуляция
			времГТД = СтрЗаменить(времГТД,Символ(7),"");//
			времГТД = СтрЗаменить(времГТД,Символ(9),"");//горизонтальная табуляция
			времГТД = СокрЛП(времГТД);
			Если времГТД<>"" И Лев(времГТД, 2) <> "--" Тогда
				НовСтрока.НомерГТД = НайтиДобавитьГТДИзКлиента(времГТД, НовСтрока.КодСтраны);
				//НовСтрока.НомерГТД = Справочники.НомераГТД.НайтиПоКоду(врем);
				//Если Не ЗначениеЗаполнено(НовСтрока.НомерГТД) Тогда
				//	Об = Справочники.НомераГТД.СоздатьЭлемент();
				//	Об.Код = врем;
				//	Об.СтранаПроисхождения = Об.Наименование;
				//	Об.Записать();
				//	НовСтрока.НомерГТД = Об.Ссылка;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаТНВЭД > 0 Тогда
			ТНВЭДСтрокой = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаТНВЭД).ТекущаяОбласть.Текст);
			ТНВЭДСтрокой = СтрЗаменить(ТНВЭДСтрокой,"-","");
			НовСтрока.ТНВЭДСтрокой = ТНВЭДСтрокой;
			НовСтрока.ТНВЭД = НайтиДобавитьТНВЭД(ТНВЭДСтрокой);
		КонецЕсли;
		Если КолонкаШтрихКод > 0 Тогда
			врем = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаШтрихКод).ТекущаяОбласть.Текст);
			НовСтрока.ШтрихКод = врем;
		КонецЕсли;
		Если КолонкаЯчейка > 0 Тогда
			врем = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаЯчейка).ТекущаяОбласть.Текст);
			НовСтрока.Ячейка = врем;
		КонецЕсли;
		Если КолонкаВес > 0 Тогда
			врем = СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НС, КолонкаВес).ТекущаяОбласть.Текст);
			НовСтрока.Вес = врем;
		КонецЕсли;
		Если КолонкаНаименование > 0 И КолонкаАртикул > 0 Тогда
			Если (НовСтрока.Артикул = "" Или НовСтрока.Наименование = "") Тогда
				сообщить("В строке № "+НС+" нет артикула или наименования");
				Объект.ТаблицаПриход.Удалить(НовСтрока.НомерСтроки-1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВернутьПоследнееСлово(ПодстрокаПоиска) //ищет до пробела
	Если ПодстрокаПоиска = "" Тогда
		Возврат ПодстрокаПоиска;
	КонецЕсли;
	ДП = СтрДлина(ПодстрокаПоиска);
	ПоследнееВхождение = 0;
	Для НС = 1 По ДП-4 Цикл//артикулы длинные обычно
		Если Сред(ПодстрокаПоиска,НС,1) = " " Тогда
			ПоследнееВхождение = НС;
		КонецЕсли;
	КонецЦикла;
	Если ПоследнееВхождение = 0 Тогда
		Возврат ПодстрокаПоиска;
	КонецЕсли;
	ПоследнееСлово = СокрЛП(Сред(ПодстрокаПоиска, ПоследнееВхождение+1));
	ПоследнееСлово = СтрЗаменить(ПоследнееСлово,"(","");
	ПоследнееСлово = СтрЗаменить(ПоследнееСлово,")","");
	Возврат ПоследнееСлово;
КонецФункции

Функция ВернутьПоследнееСловоДоРазделителя(ПодстрокаПоиска)
	Если ПодстрокаПоиска = "" Тогда
		Возврат ПодстрокаПоиска;
	КонецЕсли;
	ОграничениеАртикула = Объект.ОграничениеАртикула;
	Если ОграничениеАртикула = "" Тогда
		ОграничениеАртикула = " ";
	КонецЕсли;
	ДП = СтрДлина(ПодстрокаПоиска);
	ПоследнееВхождение = 0;
	Для НС = 1 По ДП-4 Цикл//бренды артикулы длинные обычно
		Если Сред(ПодстрокаПоиска,НС,1) = ОграничениеАртикула Тогда
			ПоследнееВхождение = НС;
		КонецЕсли;
	КонецЦикла;
	Если ПоследнееВхождение = 0 Тогда
		Возврат ПодстрокаПоиска;
	КонецЕсли;
	ПоследнееСлово = СокрЛП(Сред(ПодстрокаПоиска, ПоследнееВхождение+1));
	ПоследнееСлово = СтрЗаменить(ПоследнееСлово,"(","");
	ПоследнееСлово = СтрЗаменить(ПоследнееСлово,")","");
	Возврат ПоследнееСлово;
КонецФункции

Функция ОтрезатьРазделительВКонцеСтроки(ПодстрокаПоиска)
	Если ПодстрокаПоиска = "" Тогда
		Возврат ПодстрокаПоиска;
	КонецЕсли;
	ОграничениеАртикула = Объект.ОграничениеАртикула;
	Если ОграничениеАртикула = "" Тогда
		ОграничениеАртикула = " ";
	КонецЕсли;
	ДП = СтрДлина(ПодстрокаПоиска);
	ПоследнееВхождение = 0;
	ДлинаОграничения = СтрДлина(ОграничениеАртикула);
	Для НС = 1 По ДП Цикл
		Если Сред(ПодстрокаПоиска,НС,ДлинаОграничения) = ОграничениеАртикула Тогда
			ПоследнееВхождение = НС;
		КонецЕсли;
	КонецЦикла;
	Если ПоследнееВхождение = 0 Тогда
		Возврат ПодстрокаПоиска;
	КонецЕсли;
	СтрокаБезРазделителя = СокрЛП(Лев(ПодстрокаПоиска, ПоследнееВхождение-1));
	Возврат СтрокаБезРазделителя;
КонецФункции

Функция НайтиДобавитьТНВЭД(ТНВЭДСтрокой)
	Ссылка = Справочники.КлассификаторТНВЭД.НайтиПоКоду(ТНВЭДСтрокой);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	Если КлассификаторТНВЭД = Неопределено Тогда
		//КлассификаторТоварнойНоменклатурыВнешнеэкономическойДеятельности
		КлассификаторТНВЭД = Новый ТаблицаЗначений;
		КлассификаторТНВЭД.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12)));
		КлассификаторТНВЭД.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
		КлассификаторТНВЭД.Колонки.Добавить("ЕдиницаИзмеренияКод",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Макет = Справочники.КлассификаторТНВЭД.ПолучитьМакет("КлассификаторТоварнойНоменклатурыВнешнеэкономическойДеятельности");
		// В полученном макете содержатся значения всех списков используемых в отчете, ищем переданный.
		Список = Макет.Области.Найти("Строки");
		Если Список.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Заполнение дерева данными списка.	
			ВерхОбласти = Список.Верх;
			НизОбласти = Список.Низ;
			Для НС = 2 По НизОбласти Цикл
				Код = Макет.Область(НС, 1).Текст;
				Наименование = Макет.Область(НС, 2).Текст;
				ЕдиницаИзмеренияКод = Макет.Область(НС, 3).Текст;
				СтрокаСписка = КлассификаторТНВЭД.Добавить();
				СтрокаСписка.Код = Код;
				СтрокаСписка.Наименование = Наименование;
				СтрокаСписка.ЕдиницаИзмеренияКод = ЕдиницаИзмеренияКод;
			КонецЦикла;
		КонецЕсли;
		КлассификаторТНВЭД.Индексы.Добавить("Код");
	КонецЕсли;
	НСтроки = КлассификаторТНВЭД.НайтиСтроки(Новый Структура("Код", ТНВЭДСтрокой));
	Если НСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВыбраннаяСтрока = НСтроки[0];
	//если не нашли, смотрим в Справочнике КлассификаторТНВЭД
	ЭлементКлассификатора = Справочники.КлассификаторТНВЭД.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ЭлементКлассификатора, ВыбраннаяСтрока);
	ЭлементКлассификатора.НаименованиеПолное = ВыбраннаяСтрока.Наименование;
	
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.ЕдиницаИзмеренияКод) Тогда
		СоответствиеКодов = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(ВыбраннаяСтрока.ЕдиницаИзмеренияКод);
		ЭлементКлассификатора.ЕдиницаИзмерения = СоответствиеКодов[ВыбраннаяСтрока.ЕдиницаИзмеренияКод];
	КонецЕсли;
	ЭлементКлассификатора.Записать();
	Возврат ЭлементКлассификатора.Ссылка;
КонецФункции

Функция СтрокаСМесяцемВДату(ДатаСтрокой)
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой,"  "," ");
	Если СокрЛП(ДатаСтрокой) = "" Тогда
		Возврат '00010101';
	КонецЕсли;
	Массив = СтрРазделить(ДатаСтрокой," "); //СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок
	Если Массив.Количество()<3 Тогда
		сообщить("День, месяц и год должны быть разделены пробелами");
		Возврат '00010101';
	КонецЕсли;
	ДеньСтрокой = Массив[0];
	МесяцСтрокой = Массив[1];
	ГодСтрокой = Массив[2];
	Месяцы = Новый Массив();
	Месяцы.Добавить("января");//0
	Месяцы.Добавить("февраля");//1
	Месяцы.Добавить("марта");//2
	Месяцы.Добавить("апреля");//3
	Месяцы.Добавить("мая");//4
	Месяцы.Добавить("июня");//5
	Месяцы.Добавить("июля");//6
	Месяцы.Добавить("сентября");//7
	Месяцы.Добавить("октября");//8
	Месяцы.Добавить("ноября");//9
	Месяцы.Добавить("декабря");//10
	Элемент = Месяцы.Найти(МесяцСтрокой);
	Если Элемент = Неопределено Тогда
		сообщить("Не найден месяц по строковому представлению: "+МесяцСтрокой);
		Возврат '00010101';
	Иначе
		МесяцЧислом = Элемент+2;
	КонецЕсли;
	Попытка
		ДеньЧислом = Число(ДеньСтрокой);
	Исключение
		сообщить("Не удалось определить день по строковому представлению: "+ДеньСтрокой);
		Возврат '00010101';
	КонецПопытки;
	Если СтрДлина(ГодСтрокой) = 2 Тогда
		ГодСтрокой = "20"+ГодСтрокой;
	ИначеЕсли СтрДлина(ГодСтрокой) <> 4 Тогда
		сообщить("Не удалось определить год по строковому представлению: "+ГодСтрокой);
		Возврат '00010101';
	КонецЕсли;
	Попытка
		ГодЧислом = Число(ГодСтрокой);
	Исключение
		сообщить("Не удалось определить год по строковому представлению: "+ГодСтрокой);
		Возврат '00010101';
	КонецПопытки;
	Попытка
		ПреобразованнаяДата = Дата(ГодЧислом,МесяцЧислом,ДеньЧислом);
	Исключение
		сообщить("Не удалось определить дату по строковому представлению: "+СокрЛП(ДеньЧислом)+"."+СокрЛП(МесяцЧислом)+"."+Формат(ГодЧислом,"ЧГ=0"));
		Возврат '00010101';
	КонецПопытки;
	Возврат ПреобразованнаяДата;
КонецФункции

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервереCOM()
	//"C:\Program Files (x86)\1cv8\8.3.10.2299\bin\conf\conf.cfg" 
	//DisableUnsafeActionProtection=.*;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Excel = Новый COMОбъект("Excel.Application");
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Excel.Visible = Ложь;
	ИмяФайла = Объект.ИмяФайлаПриход;
	WorkBook = Excel.WorkBooks.Open(СокрЛП(ИмяФайла));
	Sheet = WorkBook.WorkSheets(СокрЛП(Объект.ИмяЛиста));
	НачальнаяКолонка = 1;
    НачальнаяСтрока = Объект.НачальнаяСтрока;
    КонечнаяСтрока = Объект.КонечнаяСтрока;
    Если Версия = "8" Тогда
        КонечнаяКолонка = Sheet.Cells.CurrentRegion.Columns.Count;
		Если КонечнаяСтрока = 0 Тогда
        	КонечнаяСтрока = Sheet.Cells.CurrentRegion.Rows.Count;
		Иначе
        	КонечнаяСтрока = Мин(КонечнаяСтрока, Sheet.Cells.CurrentRegion.Rows.Count);
		КонецЕсли;
    Иначе
        КонечнаяКолонка = Sheet.Cells.SpecialCells(11).Column;
		Если КонечнаяСтрока = 0 Тогда
	        КонечнаяСтрока  = Sheet.Cells.SpecialCells(11).Row;
		Иначе
        	КонечнаяСтрока = Мин(КонечнаяСтрока, Sheet.Cells.SpecialCells(11).Row);
		КонецЕсли;
	Конецесли;
	Если КонечнаяСтрока > 65000 Тогда
		КонечнаяСтрока = 500;
	КонецЕсли;
	Если НачальнаяСтрока = 0 Тогда
		НачальнаяСтрока = 1;
	КонецЕсли;
	Объект.КонечнаяСтрока = КонечнаяСтрока;
	Объект.НачальнаяСтрока = НачальнаяСтрока;
	КолонкаАртикул = Объект.КолонкаАртикул;
	КолонкаПроизводитель = Объект.КолонкаПроизводитель;
	КолонкаНаименование = Объект.КолонкаНаименование;
	КолонкаКоличество = Объект.КолонкаКоличество;
	КолонкаЦена = Объект.КолонкаЦена;
	КолонкаНДС = Объект.КолонкаНДС;
	КолонкаСумма = Объект.КолонкаСумма;
	КолонкаКодСтраны = Объект.КолонкаКодСтраны;
	КолонкаСтрана = Объект.КолонкаСтрана;
	КолонкаНомерГТД = Объект.КолонкаНомерГТД;
	КолонкаШтрихКод = Объект.КолонкаШтрихКод;
	КолонкаЯчейка = Объект.КолонкаЯчейка;
	Для НС = НачальнаяСтрока По КонечнаяСтрока Цикл //COM - сейчас не используется
		Если КолонкаАртикул > 0 Тогда
			Артикул = СокрЛП(Sheet.Cells(НС, КолонкаАртикул).Value);
		Иначе
			Артикул = "";
		КонецЕсли;
		Если (Артикул = "") Тогда
			//сообщить("В строке № "+НС+" нет артикула, загрузка прервана");
			//Прервать;
			сообщить("В строке № "+(НС+1)+" нет артикула");
			Продолжить;
		КонецЕсли;
		Если (Найти(НРег(Артикул),"код товара"))>0 Тогда
			Продолжить;
		КонецЕсли;
		Если (Найти(НРег(Артикул),"наименование товара"))>0 Тогда
			Продолжить;
		КонецЕсли;
		Если Артикул="Б" Тогда
			Продолжить;
		КонецЕсли;
		НовСтрока = Объект.ТаблицаПриход.Добавить();
		Если КолонкаАртикул > 0 Тогда
			НовСтрока.Артикул = СокрЛП(Sheet.Cells(НС, КолонкаАртикул).Value);
		КонецЕсли;
		Если КолонкаНаименование > 0 Тогда
			НовСтрока.Наименование = СокрЛП(Sheet.Cells(НС, КолонкаНаименование).Value);
			Если НовСтрока.Артикул<>"" Тогда
				//НовСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", НовСтрока.Артикул, НовСтрока.Группа);
				//НовСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", НовСтрока.Артикул);
				//НовСтрока.Номенклатура = НайтиНоменклатуруПоАртикулуИБренду(НовСтрока.Артикул, НовСтрока.Бренд)
				Если КолонкаПроизводитель > 0 Тогда
					ПроизводительСтрокой = СокрЛП(Sheet.Cells(НС, КолонкаПроизводитель).Value);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПроизводительСтрокой) Тогда
					Производитель = Неопределено;
				Иначе
					Производитель = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Ложь);//только ищем, не создаем
					НовСтрока.Производитель = Производитель;
				КонецЕсли;
				Если ЗначениеЗаполнено(Производитель) Тогда
					Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(СокрЛП(НовСтрока.Артикул), Производитель, ,НовСтрока.Наименование, Истина);//и создаем
				Иначе
					Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(СокрЛП(НовСтрока.Артикул), Производитель, ,НовСтрока.Наименование, Ложь);//только ищем, не создаем
				КонецЕсли;
				//сообщить(Номенклатура);
				НовСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаКоличество > 0 Тогда
			Попытка
				НовСтрока.Количество = Число(СтрЗаменить(Sheet.Cells(НС, КолонкаКоличество).Value," ",""));
			Исключение
				сообщить(СокрЛП(НС) + " количество " + Sheet.Cells(НС, КолонкаКоличество).Value);
				Сообщить(ОписаниеОшибки());
				//Инфо = ИнформацияОбОшибке();
				//Сообщить("Описание='" + Инфо.Описание + "'");
				//Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
				//Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
				//Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
			КонецПопытки;
		КонецЕсли;
		Если КолонкаЦена > 0 Тогда
			Попытка
				НовСтрока.ЦенаЗакупки = Число(СтрЗаменить(Sheet.Cells(НС, КолонкаЦена).Value," ",""));
			Исключение
				сообщить(СокрЛП(НС) + " цена " + Sheet.Cells(НС, КолонкаЦена).Value);
				Сообщить(ОписаниеОшибки());
				//Инфо = ИнформацияОбОшибке();
				//Сообщить("Описание='" + Инфо.Описание + "'");
				//Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
				//Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
				//Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
			КонецПопытки;
		КонецЕсли;
		Если КолонкаСумма > 0 Тогда
			Попытка
				НовСтрока.Сумма = Число(СтрЗаменить(Sheet.Cells(НС, КолонкаСумма).Value," ",""));
			Исключение
				сообщить(СокрЛП(НС) + " цена " + Sheet.Cells(НС, КолонкаСумма).Value);
				Сообщить(ОписаниеОшибки());
				//Инфо = ИнформацияОбОшибке();
				//Сообщить("Описание='" + Инфо.Описание + "'");
				//Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
				//Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
				//Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
			КонецПопытки;
		КонецЕсли;
		Если КолонкаКодСтраны > 0 Тогда
			Попытка
				врем = Sheet.Cells(НС, КолонкаКодСтраны).Value;
				Если врем = "" Тогда
					врем = 0;
				Иначе
					Попытка
						врем = Число(СтрЗаменить(СтрЗаменить(врем," ",""),",","."));
					Исключение
						врем=  0;
					КонецПопытки;
				КонецЕсли;
				Если врем <> 0 И врем <> 643 Тогда //Россию тоже не загружаем
					НовСтрока.КодСтраны = врем;
					НовСтрока.Страна = Справочники.СтраныМира.НайтиПоКоду(НовСтрока.КодСтраны);
					Если Не ЗначениеЗаполнено(НовСтрока.Страна) И КолонкаСтрана > 0 Тогда
						Об = Справочники.СтраныМира.СоздатьЭлемент();
						Об.Код = врем;
						Об.Наименование = Sheet.Cells(НС, КолонкаСтрана).Value;
						Об.НаименованиеПолное = Об.Наименование;
						Об.Записать();
						НовСтрока.Страна = Об.Ссылка;
					Иначе
						НовСтрока.Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
			Исключение
				сообщить(СокрЛП(НС) + " код страны " + Sheet.Cells(НС, КолонкаКодСтраны).Value);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		Если КолонкаНомерГТД > 0 Тогда
			врем = Sheet.Cells(НС, КолонкаНомерГТД).Value;
			Если врем<>"" И Лев(врем, 2) <> "--" Тогда
				НовСтрока.НомерГТД = Справочники.НомераГТД.НайтиПоКоду(врем);
				Если Не ЗначениеЗаполнено(НовСтрока.НомерГТД) Тогда
					Об = Справочники.НомераГТД.СоздатьЭлемент();
					Об.Код = врем;
					Об.СтранаПроисхождения = Об.Наименование;
					Об.Записать();
					НовСтрока.НомерГТД = Об.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если КолонкаШтрихКод > 0 Тогда
			врем = Sheet.Cells(НС, КолонкаШтрихКод).Value;
			НовСтрока.ШтрихКод = врем;
		КонецЕсли;
		Если КолонкаЯчейка > 0 Тогда
			врем = Sheet.Cells(НС, КолонкаЯчейка).Value;
			НовСтрока.КолонкаЯчейка = врем;
		КонецЕсли;
		Если КолонкаНаименование > 0 И КолонкаАртикул > 0 Тогда
			Если (НовСтрока.Артикул = "" Или НовСтрока.Наименование = "") Тогда
				//сообщить("В строке № "+НС+" нет артикула или наименования, загрузка прервана");
				сообщить("В строке № "+НС+" нет артикула или наименования");
				//Прервать;
				Объект.ТаблицаПриход.Удалить(НовСтрока.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	WorkBook.Close();
	Excel.Application.Quit();
	Excel = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	Если ИмяФайла = "" Тогда
		ИмяФайлаПриходНачалоВыбора(Неопределено, Неопределено, Неопределено);
		Возврат;
	КонецЕсли;
	Объект.НомерВходящегоДокумента = "";
	Объект.ДатаВходящегоДокумента = "";
	Если Объект.КолонкаАртикул = 0 Тогда
		сообщить("Не выбрана колонка «Артикул», возможны проблемы при поиске и создании номенклатуры");
	КонецЕсли;
	Объект.ТаблицаПриход.Очистить();
	Объект.ЗаказыДляПодбора.Очистить();
	//ЗагрузитьАсинхронно();
	ЗагрузитьИзФайлаТабличныйДокумент(Истина);
	ПодобратьНоменклатуру();
	ПроверитьГТДуНоменклатуры();
	Если ПодборЗаказов Тогда
		ЗаполнитьДляПодбораЗаказов();
	КонецЕсли;
	
	Возврат;
	
	
	Если Объект.ИмяФайлаПриход = "" Или Объект.ИмяЛиста = "" Тогда
		//ПоказатьОповещениеПользователя(,,"Выберите файл и лист");
		ИмяФайлаПриходНачалоВыбора(ЭтаФорма.Элементы.Поставщик1, Неопределено, Ложь);
		//Возврат;
	КонецЕсли;
	Объект.ТаблицаПриход.Очистить();
	Если Объект.ЗагружатьНаКлиенте Тогда
		//https://infostart.ru/public/398279/
		//ЗагрузитьИзФайлаНаСервереКлиент();
		//https://infostart.ru/public/341855/
		ЗагрузитьИзФайлаТабличныйДокумент();
		//НайтиДобавитьПроизводителейИНоменклатуру();
	Иначе
		Если Объект.ИспользоватьADO Тогда
			ЗагрузитьИзФайлаНаСервереADO();
		Иначе
			ЗагрузитьИзФайлаНаСервереCOM();
		КонецЕсли;
	КонецЕсли;
	ПодобратьНоменклатуру();
КонецПроцедуры

&НаСервере
Процедура ПодобратьНоменклатуру()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из Объект.ТаблицаПриход Цикл
		Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(ТекСтрока.Артикул, ТекСтрока.Производитель, , , Ложь);
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ТекСтрока.Номенклатура = Номенклатура;
		Иначе
			Если Объект.СинхронизироватьТолькоПоАртикулу Тогда
				Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(ТекСтрока.Артикул, , , , Ложь);
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					ТекСтрока.Номенклатура = Номенклатура;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.ТНВЭД) И Не ЗначениеЗаполнено(Номенклатура.КодТНВЭД) Тогда
				Об = Номенклатура.ПолучитьОбъект();
				Об.ОбменДанными.Загрузка = Истина;
				Об.КодТНВЭД = ТекСтрока.ТНВЭД;
				Об.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьГТДуНоменклатуры();
	Если Объект.КолонкаНомерГТД = 0 Тогда
		Возврат;
	КонецЕсли;
	//добавляем галочки ГТД номенклатуре, у которой выбрана гтд
	МассивНоменклатуры = Новый Массив;
	Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаПриход Цикл
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.НомерГТД) И ЗначениеЗаполнено(СтрокаНоменклатуры.Номенклатура)  Тогда
			МассивНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.ВестиУчетПоГТД = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Об.ВестиУчетПоГТД = Истина;
		Об.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

&НаСервере
Процедура НайтиДобавитьПроизводителейИНоменклатуру()
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//               |	Производители.Ссылка
	//               |ИЗ
	//               |	Справочник.Производители КАК Производители
	//               |ГДЕ
	//               |	Производители.Наименование = &Наименование";
	//Запрос.УстановитьПараметр("Наименование", НаименованиеПроизводителя);
	//Результат = Запрос.Выполнить();
	//Если Не Результат.Пустой() Тогда
	//	Выборка = Результат.Выбрать();
	//	Выборка.Следующий();
	//	Возврат Выборка.Ссылка;
	//КонецЕсли;
	//Если НЕ Создавать Тогда
	//	Возврат Справочники.Производители.ПустаяСсылка();
	//КонецЕсли;
	////если Производитель не нашли, то добавляем в справочник
	////УстановитьПривилегированныйРежим(Истина);
	//НовыйПроизводитель = Справочники.Производители.СоздатьЭлемент();
	//НовыйПроизводитель.Наименование = НаименованиеПроизводителя;
	//НовыйПроизводитель.Записать();
	
	//проходим по таблице, заполняем производителя
	//потом делаем через левое соединение, чтобы сразу найти, если это не новые
	
	ТаблицаПриход = Новый ТаблицаЗначений;
	ТаблицаПриход = Объект.ТаблицаПриход.Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаПриход Цикл
		ПроизводительСтрокой = ТекСтрока.ПроизводительСтрокой;
		Если НЕ ЗначениеЗаполнено(ПроизводительСтрокой) Тогда
			Производитель = Неопределено;
		Иначе
			Производитель = НайтиДобавитьПроизводителяИзКлиента(ПроизводительСтрокой, Ложь);
			ТекСтрока.Производитель = Производитель;
		КонецЕсли;
		Если ЗначениеЗаполнено(Производитель) Тогда
			Номенклатура = НайтиДобавитьНоменклатуруПоАртикулуИзКлиента(СокрЛП(ТекСтрока.Артикул), Производитель, ,ТекСтрока.Наименование, Истина);//и создаем
		Иначе
			Номенклатура = НайтиДобавитьНоменклатуруПоАртикулуИзКлиента(СокрЛП(ТекСтрока.Артикул), Производитель, ,ТекСтрока.Наименование, Ложь);//только ищем, не создаем
		КонецЕсли;
		//сообщить(Номенклатура);
		ТекСтрока.Номенклатура = Номенклатура;
	КонецЦикла;
	Объект.ТаблицаПриход.Загрузить(ТаблицаПриход);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступление(Команда)
	Если НЕ ПроверитьЗаполненностьПозиций() Тогда
		Возврат;
	КонецЕсли;
	Объект.ПоступлениеТоваровУслуг = "";//очищаем
	Если ЗначениеЗаполнено(Объект.ПоступлениеТоваровУслуг) Тогда //ПоступлениеУжеЕсть
		//надо при выборе поступления проверять, если есть привязка в документе, то её вносим в таблицу распределения заказов
		//и кнопку другую - изменение статусов - лучше отдельную форму, в которой показывается текущий статус позиций, которые привязались, и галочки, чтобы снять те, которые уже менялись
		сообщить("Пока не реализован подбор заказов и изменение статусов под существующее поступление");
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ОповещениеВопросСоздатьПоступление", ЭтотОбъект);
	Организация = Объект.Организация;
	Если ЗначениеЗаполнено(Объект.ОрганизацияВПоступлении) Тогда
		Организация = Объект.ОрганизацияВПоступлении;
	КонецЕсли;
	//если на закладке "Склады/Поставщики" у этого поставщика стоит другая организация, тогда её
	НСтроки = Объект.ТаблицаСкладов.НайтиСтроки(Новый Структура("Контрагент", Объект.Поставщик));
	Если НСтроки.Количество() > 0 Тогда
		Для Каждого НСтрока Из НСтроки Цикл
			Если ЗначениеЗаполнено(НСтрока.Организация) Тогда
				Организация = НСтрока.Организация;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДополнениеКодСтатуса = "";
	Если ПодборЗаказов Тогда
		Если Объект.СтатусПослеПоступления<>0 Тогда
			КодСтатуса = Формат(Объект.СтатусПослеПоступления, "ЧГ=0");
		Иначе
			КодСтатуса = Формат(Объект.КодСтатусаНаСкладе, "ЧГ=0");
		КонецЕсли;
		ДополнениеКодСтатуса = ", 
		|изменить статусы на сайте на «"+КодСтатуса+"»";
	КонецЕсли;
	СкладДляПоступления = ПолучитьСкладДляПоступления();
	
	ТекстВопроса = "Создать поступление по организации "+Организация+",
	|поставщику: "+Объект.Поставщик+",
	|на склад: "+СкладДляПоступления+",
	|налогообложение: "+Объект.НалогообложениеНДСПоступление+",
	|валюта: "+Объект.Валюта+ДополнениеКодСтатуса+"?";
	//изменить статусы на сайте после создания поступления
	Если Объект.РегистрироватьЦеныНоменклатуры Тогда
		ТекстВопроса = ТекстВопроса + Символ(10)+"Создать установку цен номенклатуры (Вид цены: "+Объект.ВидЦены+")?";
	КонецЕсли;
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры

&НаСервере
Функция ПолучитьСкладДляПоступления()
	СкладПоступления = ?(ЗначениеЗаполнено(Объект.СкладВПоступлении),Объект.СкладВПоступлении,Объект.Склад);
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаПриход Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПоставщику) Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПоставщику.Склад) Тогда
				СкладПоступления = СтрокаТаблицы.ЗаказПоставщику.Склад;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СкладПоступления;
КонецФункции


&НаКлиенте
Процедура ОповещениеВопросСоздатьПоступление(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьПриход();
		ИзменитьДатыПоступленияВЗаказахПоставщикамИзПрихода();
		Если Объект.НеИзменятьСтатусыПриПриходе = Ложь Тогда
			ИзменитьСтатусыПослеСозданияПоступления();
		КонецЕсли;
		//ОткрытьЗначение(Объект.ПоступлениеТоваровУслуг);
		ПоказатьЗначение(,Объект.ПоступлениеТоваровУслуг);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяЛистаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Объект.ЗагружатьНаКлиенте Тогда
		//СписокЛистов = ВернутьСписокЛистовКлиент();
		СписокЛистов = ВернутьСписокЛистовТабличныйДокумент();
	Иначе
		СписокЛистов = ВернутьСписокЛистовСервер();
	КонецЕсли;
	времИмя = "";
	ВыбЛист = СписокЛистов.ВыбратьЭлемент("Выберите лист с данными", времИмя);
	Если ВыбЛист = Неопределено Тогда
		Объект.ИмяЛиста = "Лист1";
	Иначе
		Объект.ИмяЛиста = ВыбЛист;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВернутьСписокЛистовКлиент(ИмяФайла = "", ВозвратМассив = Ложь)
	Если ИмяФайла = "" Тогда
		ИмяФайла = Объект.ИмяФайлаПриход;
	КонецЕсли;
	СписокЛистов = Новый СписокЗначений;
	МассивЛистов = Новый Массив;
	Excel = Новый COMОбъект("Excel.Application");
	Excel.Visible = Ложь;
	WorkBook = Excel.WorkBooks.Open(ИмяФайла);
	КоличествоЛистов = WorkBook.Sheets.Count;
	Для НС = 1 По КоличествоЛистов Цикл
		времИмя = WorkBook.Sheets(НС).Name;
		МассивЛистов.Добавить(времИмя);
		СписокЛистов.Добавить(времИмя);
	КонецЦикла;
	WorkBook.Close();
	WorkBook = "";
	Excel.Quit();
	Excel = Неопределено;
	Если ВозвратМассив Тогда
		Возврат МассивЛистов;
	КонецЕсли;
	Возврат СписокЛистов;
КонецФункции

&НаСервере
Функция ВернутьСписокЛистовТабличныйДокумент(ИмяФайла = "", ВозвратМассив = Ложь)
	СписокЛистов = Новый СписокЗначений;
	МассивЛистов = Новый Массив;
	Если ИмяФайла = "" Тогда
		ИмяФайла = Объект.ИмяФайлаПриход;
	КонецЕсли;
	Если ИмяФайла = "" Тогда
		Возврат СписокЛистов;
	КонецЕсли;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяФайла);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат СписокЛистов;
	КонецПопытки;
	
	Для Каждого Область ИЗ ТабличныйДокумент.Области Цикл
		МассивЛистов.Добавить(Область.Имя);
		СписокЛистов.Добавить(Область.Имя);
	КонецЦикла;
	Если ВозвратМассив Тогда
		Возврат МассивЛистов;
	КонецЕсли;
	Возврат СписокЛистов;
КонецФункции

&НаСервере
Функция ВернутьСписокЛистовСервер(ИмяФайла = "", ВозвратМассив = Ложь)
	СписокЛистов = Новый СписокЗначений;
	МассивЛистов = Новый Массив;
	Если ИмяФайла = "" Тогда
		ИмяФайла = Объект.ИмяФайлаПриход;
	КонецЕсли;
	Если ИмяФайла = "" Тогда
		сообщить("Не выбран файл");
		Если ВозвратМассив Тогда
			Возврат МассивЛистов;
		КонецЕсли;
		Возврат СписокЛистов;
	КонецЕсли;
	Если НЕ Объект.ИспользоватьADO Тогда
		Excel = Новый COMОбъект("Excel.Application");
		Excel.Visible = Ложь;
		WorkBook = Excel.WorkBooks.Open(ИмяФайла);
		КоличествоЛистов = WorkBook.Sheets.Count;
		Для НС = 1 По КоличествоЛистов Цикл
			времИмя = WorkBook.Sheets(НС).Name;
			МассивЛистов.Добавить(времИмя);
			СписокЛистов.Добавить(времИмя);
		КонецЦикла;
		WorkBook.Close();
		WorkBook = "";
		Excel.Quit();
		Excel = Неопределено;
	Иначе
		db = Новый COMОбъект("ADODB.Connection");
		Попытка
			Если Прав(ИмяФайла,3) = "xls" Тогда
				db.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source="+ИмяФайла+";Extended Properties=""Excel 8.0;HDR=NO; IMEX=1;""";
			Иначе
				//db.ConnectionString = "Provider=Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)}; DBQ="+СокрЛП(Объект.ИмяФайла)+"";//2007 office
				//Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)}; DBQ=C:\MyExcel.xls;
				db.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source="+ИмяФайла+";Extended Properties=""Excel 12.0;HDR=NO; IMEX=1;""";//2007 office
			КонецЕсли;
			db.Open();
		Исключение 
			сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		cat = Новый COMОбъект("ADOX.Catalog");
		cat.ActiveConnection = db;
		ВсегоЛистов = cat.Tables.Count;
		МассивЛистов = Новый Массив;
		Для Н = 0 По ВсегоЛистов-1 Цикл
			времИмя = СтрЗаменить(cat.Tables(Н).Name,"'","");
			Если Прав(времИмя, 14) <> "FilterDatabase" Тогда
				времИмя = Лев(времИмя,СтрДлина(времИмя)-1);
				Если Прав(времИмя, 1) <> "$" Тогда
					СписокЛистов.Добавить(времИмя);
					МассивЛистов.Добавить(времИмя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		cat = "";
		db.Close();
		db = "";
	КонецЕсли;
	Если ВозвратМассив Тогда
		Возврат МассивЛистов;
	КонецЕсли;
	Возврат СписокЛистов;
КонецФункции

Процедура ЗаполнитьДанныеУчетнойПолитики(Организация)
	ОрганизацияПлательщикЕНВД = Ложь;
	ОрганизацияУСН = Ложь;
	//ОрганизацияРозницаПлательщикЕНВД = Ложь;
	//ОрганизацияРозницаУСН = Ложь;
	Если Объект.УТ111 Тогда
		Возврат;
	КонецЕсли;
	Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
		ОрганизацияПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Организация, ТекущаяДата());
		ОрганизацияУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, ТекущаяДата());
		//ОрганизацияРозницаПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(ОрганизацияРозница, ТекущаяДата());
		//ОрганизацияРозницаУСН = УчетнаяПолитика.ПрименяетсяУСН(ОрганизацияРозница, ТекущаяДата());
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетнаяПолитикаОрганизацийСрезПоследних.ПлательщикЕНВД КАК ПлательщикЕНВД,
	               |	УчетнаяПолитикаОрганизацийСрезПоследних.УчетнаяПолитика КАК УчетнаяПолитика,
	               |	УчетнаяПолитикаОрганизацийСрезПоследних.ПрименяетсяУСН КАК ПрименяетсяУСН
	               |ИЗ
	               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НаДату, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ОрганизацияПлательщикЕНВД = Выборка.ПлательщикЕНВД;
			ОрганизацияУСН = Выборка.ПрименяетсяУСН;
		КонецЕсли;
	КонецЕсли;
	//Если ЗначениеЗаполнено(ОрганизацияРозница) Тогда
	//	Запрос.УстановитьПараметр("Организация", ОрганизацияРозница);
	//	Результат = Запрос.Выполнить();
	//	Если Не Результат.Пустой() Тогда
	//		Выборка = Результат.Выбрать();
	//		Выборка.Следующий();
	//		ОрганизацияРозницаПлательщикЕНВД = Выборка.ПлательщикЕНВД;
	//		ОрганизацияРозницаУСН = Выборка.ПрименяетсяУСН;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьПриход()
	Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
		СтавкаНДССправочник = ПолучитьСправочникСтавкаНДСПоПеречислению(ОсновнаяСтавкаНДС);
	Иначе
		СтавкаНДССправочник = Неопределено;
	КонецЕсли;
	ЕстьРеквизитПорядокОплаты = ?(Метаданные.Документы.ЗаказПоставщику.Реквизиты.Найти("ПорядокОплаты") = Неопределено, Ложь, Истина);
	ЕстьРеквизитКурс = ?(Метаданные.Документы.ЗаказПоставщику.Реквизиты.Найти("Курс") = Неопределено, Ложь, Истина);
	ЕстьРеквизитКурсЧислитель = ?(Метаданные.Документы.ЗаказПоставщику.Реквизиты.Найти("КурсЧислитель") = Неопределено, Ложь, Истина);
	
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("ЗакупкаПодДеятельность") <> Неопределено Тогда
		ЕстьЗакупкаПодДеятельность = Истина;
	Иначе
		ЕстьЗакупкаПодДеятельность = Ложь;
	КонецЕсли;
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено Тогда
		ЕстьВариантПриемкиТоваров = Ложь;
		ВариантПриемкиТоваров = "";
	Иначе
		ЕстьВариантПриемкиТоваров = Истина;
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	Если Объект.УТ114 Тогда
		Если Метаданные.Документы.ПриобретениеТоваровУслуг.Реквизиты.Найти("ВариантПриемкиТоваров") = Неопределено Тогда
			ЕстьВариантПриемкиТоваров = Ложь;
		КонецЕсли;
	КонецЕсли;
	Структура = Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	НайденныеСтроки = Объект.ТаблицаПриход.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			сообщить("Не заполнена номенклатура в строке № "+НайденнаяСтрока.НомерСтроки);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	//	ДокОбъект.НалогообложениеНДС = НалогообложениеНДСПоступление;
	//КонецЕсли;
	Если Метаданные.Документы.Найти("ПриобретениеТоваровУслуг") = Неопределено Тогда
		ДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	Иначе
		ДокОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		Если Метаданные.Документы.ПриобретениеТоваровУслуг.Реквизиты.Найти("ВариантПриемкиТоваров") <> Неопределено Тогда
			ДокОбъект.ВариантПриемкиТоваров = ВариантПриемкиТоваров;
		КонецЕсли;
	КонецЕсли;
	//ДокОбъект.НомерВходящегоДокумента = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
	//ДокОбъект.ДатаВходящегоДокумента = СтрокаЗаявки.ДатаЗаявки;
	ДокОбъект.Дата = ТекущаяДата();
	Если НЕ Объект.УТ111 Тогда
		Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
		Иначе
			ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.Согласован = Истина;
	//Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда //если делаем поступление без заказов
	//	ДокОбъект.ЗаказПоставщику = ЗаказПоставщику;
	//	ДокОбъект.ПоступлениеПоЗаказам = Истина;
	//КонецЕсли;
	ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	Если Объект.УТ114 И Объект.Подверсия3 < 6 Тогда
		ДокОбъект.ДатаПлатежа = ДокОбъект.Дата + 3600*24;
	КонецЕсли;		
	ДокОбъект.Комментарий = "загружено из Excel "+ТекущаяДата();
	ДокОбъект.Валюта = Объект.Валюта;
	Если ЕстьРеквизитКурс Тогда
		ДокОбъект.Курс = 1;
	КонецЕсли;
	Если ЕстьРеквизитКурсЧислитель Тогда
		ДокОбъект.КурсЧислитель = 1;
		ДокОбъект.КурсЗнаменатель = 1;
	КонецЕсли;
	Если Объект.ЦеныЗакупкиВРублях Тогда
		Рубли = Справочники.Валюты.НайтиПоКоду("643");
		ДокОбъект.Валюта = Рубли;
		Если ЕстьРеквизитКурс Тогда
			ДокОбъект.Курс = 1;
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
	Если ЗначениеЗаполнено(Объект.СкладВПоступлении) Тогда
		ДокОбъект.Склад = Объект.СкладВПоступлении;
	Иначе
		ДокОбъект.Склад = Объект.Склад;
	КонецЕсли;
	СкладДляПоступления = ПолучитьСкладДляПоступления();
	Если ЗначениеЗаполнено(СкладДляПоступления) Тогда
		ДокОбъект.Склад = СкладДляПоступления;
	КонецЕсли;
	ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокОбъект.Контрагент = Объект.Поставщик;
	ДокОбъект.Партнер = ДокОбъект.Контрагент.Партнер;
	//ДокОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная
	ДокОбъект.Согласован = Истина;
	Если ЗначениеЗаполнено(Объект.ОрганизацияВПоступлении) Тогда
		ДокОбъект.Организация = Объект.ОрганизацияВПоступлении;
	Иначе
		ДокОбъект.Организация = Объект.Организация;
		Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ДокОбъект.Организация = Объект.ОрганизацияРозница;
		КонецЕсли;
	КонецЕсли;
	НеМенятьОрганизацию = Ложь;
	НСтроки = Объект.ТаблицаСкладов.НайтиСтроки(Новый Структура("Контрагент", Объект.Поставщик));
	Если НСтроки.Количество() > 0 Тогда
		Для Каждого НСтрока Из НСтроки Цикл
			Если ЗначениеЗаполнено(НСтрока.Организация) Тогда
				ДокОбъект.Организация = НСтрока.Организация;
				НеМенятьОрганизацию = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НалогообложениеНДСПоступление = Объект.НалогообложениеНДСПоступление;
	ЗаполнитьДанныеУчетнойПолитики(ДокОбъект.Организация);
	Если ОрганизацияУСН Тогда
		НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ИначеЕсли ОрганизацияПлательщикЕНВД Тогда
		НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
	КонецЕсли;
	ДокОбъект.ЗакупкаПодДеятельность = НалогообложениеНДСПоступление;
	ДокОбъект.НалогообложениеНДС = НалогообложениеНДСПоступление;
	ДокОбъект.ЦенаВключаетНДС = Объект.ЦенаВключаетНДСПриПокупке;
	ДокОбъект.ЦенаВключаетНДС = Объект.ЦенаВключаетНДСПриПродаже;
	//Док.СтруктурнаяЕдиница = Док.Контрагент.ОсновнойБанковскийСчет;
	Если Объект.УТ114 Тогда
		ДокОбъект.Подразделение = Объект.Подразделение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		ДокОбъект.НомерВходящегоДокумента = Объект.НомерВходящегоДокумента;
		ДокОбъект.ДатаВходящегоДокумента = Объект.ДатаВходящегоДокумента;
		Если Объект.УТ111 Тогда
			ДокОбъект.ПредъявленСчетФактура = Истина;
			ДокОбъект.НомерСчетаФактуры = Объект.НомерВходящегоДокумента;
			ДокОбъект.ДатаСчетаФактуры = Объект.ДатаВходящегоДокумента;
			ДокОбъект.ВалютаСчетаФактуры = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
	КонецЕсли;
	//заполняем соглашение и договор
	Если Объект.УТ111 Тогда
		ИспользоватьСоглашенияСПоставщиками = Ложь;
	Иначе
		ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	КонецЕсли;
	Если ИспользоватьСоглашенияСПоставщиками Тогда
		СтрокиПоставщика = Объект.ТаблицаСкладов.НайтиСтроки(Новый Структура("Контрагент", Объект.Поставщик));
		Если СтрокиПоставщика.Количество() > 0 Тогда
			//Соглашение = Справочники.СоглашенияСПоставщиками.СоздатьЭлемент();
			Соглашение = СтрокиПоставщика[0].Соглашение;
			Соглашение = Соглашение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Соглашение) Тогда //И СоздаватьИндивидуальныеСоглашения Тогда
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			Соглашение = ОбработкаОбъект.ПолучитьСоглашениеСПоставщиком(ДокОбъект.Контрагент,,ДокОбъект.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(Соглашение) Тогда
			ДокОбъект.Соглашение = Соглашение;
			ДокОбъект.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;
			Если ЗначениеЗаполнено(Соглашение.Менеджер) Тогда
				ДокОбъект.Менеджер = Соглашение.Менеджер;
			КонецЕсли;
			Если ЗначениеЗаполнено(Соглашение.ФормаОплаты) Тогда
				ДокОбъект.ФормаОплаты = Соглашение.ФормаОплаты;
			КонецЕсли;
			Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
			Иначе
				Если ЗначениеЗаполнено(Соглашение.ПорядокОплаты) Тогда
					ДокОбъект.ПорядокОплаты = Соглашение.ПорядокОплаты;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Соглашение.НаправлениеДеятельности) Тогда
				ДокОбъект.НаправлениеДеятельности = Соглашение.НаправлениеДеятельности;
			КонецЕсли;
			Если ЗначениеЗаполнено(Соглашение.СтатьяДвиженияДенежныхСредств) Тогда
				ДокОбъект.СтатьяДвиженияДенежныхСредств = Соглашение.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Попытка
				Если ЗначениеЗаполнено(Соглашение.НалогообложениеНДС) Тогда
					ДокОбъект.НалогообложениеНДС = Соглашение.НалогообложениеНДС;
				КонецЕсли;
			Исключение
			КонецПопытки;
			ДокОбъект.РегистрироватьЦеныПоставщика = Соглашение.РегистрироватьЦеныПоставщика;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
		ДокОбъект.Принял = ДокОбъект.Менеджер.ФизическоеЛицо;
	КонецЕсли;
	//договоры нужны или нет?
	Если НЕ НеМенятьОрганизацию Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ОрганизацияВПоступлении) Тогда
			Если Объект.ЗаполнятьОрганизациюПоСоглашению И ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
				Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Организация) Тогда
					ДокОбъект.Организация = ДокОбъект.Соглашение.Организация;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//ВидДеятельностиНДСОрганизации = Справочники.Организации.ЗакупкаПодДеятельность(Объект.Организация, Объект.Склад, ДокОбъект.Дата);
	//ДокОбъект.ЗакупкаПодДеятельность = ВидДеятельностиНДСОрганизации;
	Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;
	//ДокОбъект.ЗакупкаПодДеятельность = Объект.НалогообложениеНДСПоступление;
	
	//Если НЕ Объект.УТ111 И НЕ Объект.УТ112 Тогда
	//	ДокОбъект.Курс = 1;
	//	ДокОбъект.Кратность = 1;
	//КонецЕсли;
	//Если Объект.УТ114 Тогда
	//	ДокОбъект.Курс = 1;
	//	ДокОбъект.Кратность = 1;
	//КонецЕсли;
	ДокОбъект.Согласован = Истина;

	ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	Если ИспользоватьДоговорыСПоставщиками Тогда
		ДокОбъект.Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация);
		Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
			Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
			Иначе
				ДокОбъект.ПорядокОплаты = ДокОбъект.Договор.ПорядокОплаты;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.ПорядокРасчетов = Объект.ПорядокРасчетовЗаказПоставщику;
	Если Метаданные.Документы.ПриобретениеТоваровУслуг.Реквизиты.Найти("ДатаПлатежа")<>Неопределено Тогда
		ДокОбъект.ДатаПлатежа = ТекущаяДата();
	КонецЕсли;
	Если Метаданные.Документы.ПриобретениеТоваровУслуг.Реквизиты.Найти("УдалитьДатаПлатежа")<>Неопределено Тогда
		ДокОбъект.УдалитьДатаПлатежа = ТекущаяДата();
	КонецЕсли;
	Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаПриход Цикл
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.ЗаказПоставщику) Тогда
			//заполняем все нужные нам реквизиты из заказа поставщику, чтобы всё сходилось
			ЗаполнитьЗначенияСвойств(ДокОбъект, СтрокаНоменклатуры.ЗаказПоставщику, "Организация,Склад,Партнер,Контрагент,Соглашение,Договор,ЦенаВключаетНДС,Валюта,ЗакупкаПодДеятельность,ФормаОплаты,НалогообложениеНДС,ПорядокРасчетов,ВариантПриемкиТоваров"+?(ЕстьРеквизитПорядокОплаты,",ПорядокОплаты",""));//СпособДоставки
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтруктураНоменклатура = Новый Структура("Номенклатура");//для заполнения кода строки
	СтруктураНоменклатураЗаказПоставщику = Новый Структура("Номенклатура,ЗаказПоставщику");//для заполнения кода строки
	
	ДокОбъект.Товары.Очистить();
	НС = 0;
	СтруктураПодборЗаказов = Новый Структура("Номенклатура");
	ПодборЗаказов = ЭтотОбъект.ПодборЗаказов;
	ДокОбъект.Согласован = Истина;
	Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаПриход Цикл
		НС = НС + 1;
		СтрокаДокумента = ДокОбъект.Товары.Добавить();
		//СтрокаДокумента.КодСтроки = СтрокаДокумента.НомерСтроки;
		СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.ЗаказПоставщику) Тогда
			СтрокаДокумента.ЗаказПоставщику = СтрокаНоменклатуры.ЗаказПоставщику;
			ДокОбъект.ЗаказПоставщику =  СтрокаНоменклатуры.ЗаказПоставщику;
			ДокОбъект.ПоступлениеПоЗаказам = Истина;
			//если по одной позиции несколько заказов поставщику, то надо предупреждать, иначе криво будет привязываться
			//но оставлять общую сумму
			Если ПодборЗаказов Тогда
				СтруктураПодборЗаказов.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				СтрокиПодборЗаказов = Объект.ЗаказыДляПодбора.НайтиСтроки(СтруктураПодборЗаказов);
				Если СтрокиПодборЗаказов.Количество() > 1 Тогда
					Для Каждого СтрокаПодборЗаказов Из СтрокиПодборЗаказов Цикл
						Если НЕ ЗначениеЗАполнено(СтрокаНоменклатуры.ЗаказПоставщику) И ЗначениеЗАполнено(СтрокаПодборЗаказов.ЗаказПоставщику) Тогда //СтрокаПодборЗаказов.ЗаказПоставщику <> СтрокаНоменклатуры.ЗаказПоставщику Тогда
							сообщить(""+СтрокаНоменклатуры.Номенклатура+", поступление не будет привязано к заказу: "+СтрокаПодборЗаказов.ЗаказПоставщику);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаДокумента.Склад = ДокОбъект.Склад;
		СтрокаДокумента.Количество = СтрокаНоменклатуры.Количество;
		СтрокаДокумента.КоличествоУпаковок = СтрокаНоменклатуры.Количество;
		СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаЗакупки;//могут быть цены без НДС, обратно считаем
		Если СтрокаНоменклатуры.Сумма = 0 Тогда
			СтрокаНоменклатуры.Сумма = СтрокаНоменклатуры.ЦенаЗакупки * СтрокаНоменклатуры.Количество;
		КонецЕсли;
		СтрокаДокумента.Сумма = СтрокаНоменклатуры.Сумма;//ЦенаЗакупки * СтрокаНоменклатуры.Количество;
		СтрокаДокумента.СуммаСНДС = СтрокаНоменклатуры.Сумма;
		СтрокаДокумента.СуммаВзаиморасчетов = СтрокаНоменклатуры.Сумма;
		
		Если Объект.КолонкаНДС>0 И НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			Если СтавкаНДССправочник = Неопределено Тогда
				СтрокаДокумента.СтавкаНДС = ОсновнаяСтавкаНДС;
			Иначе
				СтрокаДокумента.СтавкаНДС = СтавкаНДССправочник;
			КонецЕсли;
			//СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС;//СтрокаДокумента.Сумма/РазмерСтавкиНДС100*РазмерСтавкиНДС;
			Если Объект.УТКазахстан Тогда
				Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					СтрокаДокумента.СтавкаНДС = Справочники["СтавкиНДС"]["БезНДС"];
				Иначе
					СтрокаДокумента.СтавкаНДС = Справочники["СтавкиНДС"]["НДС12"];
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтрокаДокумента.СуммаНДС = 0;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС) И ЗначениеЗаполнено(СтрокаНоменклатуры.СтавкаНДС) Тогда
			СтрокаДокумента.СтавкаНДС = СтрокаНоменклатуры.СтавкаНДС;
			Если Не ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС) Тогда
				СтрокаДокумента.СтавкаНДС = ПолучитьСправочникСтавкаНДСПоПеречислению(СтрокаНоменклатуры.СтавкаНДС);
			КонецЕсли;
		Конецесли;
		СуммаБезНДС = СтрокаДокумента.Количество*СтрокаДокумента.Цена;
		Если Объект.КолонкаНДС > 0 Тогда
			Если Объект.УТКазахстан Тогда
				Если ОсновнаяСтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
					Если СтрокаДокумента.Сумма > 0 Тогда //И Объект.КолонкаСумма>0 Тогда
						СтрокаДокумента.СуммаНДС = СуммаБезНДС/112*12;
					Иначе
						СтрокаДокумента.СуммаНДС = СуммаБезНДС/100*12;
					КонецЕсли;
					СтрокаДокумента.СуммаНДСВзаиморасчетов = СтрокаДокумента.СуммаНДС;
				КонецЕсли;
			Иначе
				Если СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
					Если СтрокаДокумента.Сумма > 0 Тогда //И Объект.КолонкаСумма>0 Тогда
						СтрокаДокумента.СуммаНДС = СуммаБезНДС/120*20;
					Иначе
						СтрокаДокумента.СуммаНДС = СуммаБезНДС/100*20;
					КонецЕсли;
					СтрокаДокумента.СуммаНДСВзаиморасчетов = СтрокаДокумента.СуммаНДС;
					СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Объект.КолонкаСуммаНДС > 0 И СтрокаНоменклатуры.СуммаНДС > 0 Тогда
			СтрокаДокумента.СуммаНДС = СтрокаНоменклатуры.СуммаНДС;
		КонецЕсли;
		Если СтрокаДокумента.Сумма = 0 Тогда
			СтрокаДокумента.Сумма = СуммаБезНДС + СтрокаДокумента.СуммаНДС ;
			СтрокаДокумента.СуммаСНДС = СтрокаДокумента.СуммаСНДС;
		Иначе
			СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
		КонецЕсли;
		СтрокаДокумента.СуммаВзаиморасчетов = СтрокаДокумента.СуммаСНДС;
		//СтрокаДокумента.ИдентификаторСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
		//если заполнять код строки, то не формируется приходный ордер на товары - неверно формируется из-за дат
		Если СтрокаНоменклатуры.КодСтроки = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказПоставщику) Тогда
				СтруктураНоменклатураЗаказПоставщику.Номенклатура = СтрокаДокумента.Номенклатура;
				СтруктураНоменклатураЗаказПоставщику.ЗаказПоставщику = СтрокаДокумента.ЗаказПоставщику;
			КонецЕсли;
			НайденныеСтроки = Объект.ЗаказыДляПодбора.НайтиСтроки(СтруктураНоменклатураЗаказПоставщику);
			Если НайденныеСтроки.Количество() = 0 Тогда
				//СтрокаДокумента.КодСтроки = СтрокаДокумента.НомерСтроки;//если заказ привязан, надо такой-же код строки ставить, иначе цена из заказа не подтянется
				СтрокаДокумента.КодСтроки = 0;//если поступление идёт без заказа, то не надо заполнять, иначе приходный ордер на товары не создастся
				СтруктураНоменклатура.Номенклатура = СтрокаДокумента.Номенклатура;
				НайденныеСтроки = Объект.ЗаказыДляПодбора.НайтиСтроки(СтруктураНоменклатура);
			КонецЕсли;
			Если НайденныеСтроки.Количество() > 0 И НайденныеСтроки[0].КодСтроки > 0 Тогда
				СтрокаДокумента.КодСтроки = НайденныеСтроки[0].КодСтроки;
			КонецЕсли;
		Иначе
			СтрокаДокумента.КодСтроки = СтрокаНоменклатуры.КодСтроки;
		КонецЕсли;
		
		СтрокаДокумента.НомерГТД = СтрокаНоменклатуры.НомерГТД;
		
		//у казахов почему-то не заполняется в документе
		Если Не ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС) Тогда
			СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		Если СтрокаДокумента.СуммаСНДС = 0 Тогда
			СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
		КонецЕсли;
		//Если Объект.ЦенаБезНДС И СтрокаДокумента.Сумма <> 0 И СтрокаДокумента.Количество <> 0 Тогда
		//	СтрокаДокумента.Цена = СтрокаДокумента.Сумма/СтрокаДокумента.Количество;
		//КонецЕсли;
		Если СтрокаДокумента.СуммаВзаиморасчетов = 0 Тогда
			СтрокаДокумента.СуммаВзаиморасчетов = СтрокаДокумента.Сумма;
		КонецЕсли;
		Если Объект.УТ114 Тогда
			СтрокаДокумента.Подразделение = Объект.Подразделение;
		КонецЕсли;
	КонецЦикла;
	ДокОбъект.СуммаВзаиморасчетов = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.СуммаВзаиморасчетовПоЗаказу = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	Если Метаданные.Документы.ПриобретениеТоваровУслуг.Реквизиты.Найти("Согласован") <> Неопределено Тогда
		ДокОбъект.Согласован = Истина;
	КонецЕсли;
	ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	Если Метаданные.Документы.Найти("ПриобретениеТоваровУслуг") <> Неопределено И Метаданные.Документы.ПриобретениеТоваровУслуг.ТабличныеЧасти.Найти("ЭтапыГрафикаОплаты")<>Неопределено Тогда
		Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
			Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
				ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
				Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
					СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
					ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
				КонецЕсли;
			Иначе
				Попытка
					Если Объект.УТ114 И (Объект.Подверсия3 > 5) Тогда
						ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
					ИначеЕсли НЕ Объект.УТ111 Тогда
						ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
							ДокОбъект,
							ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления"),
							ДокОбъект.ЖелаемаяДатаПоступления,
							ДокОбъект.Товары.Итог("Сумма"),
							0);
					КонецЕсли;
				Исключение	
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),6,Истина);
		ДокОбъект.Записать();
	КонецПопытки;
	Объект.ПоступлениеТоваровУслуг = ДокОбъект.Ссылка;
	Если Объект.РегистрироватьСФ И ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
		Попытка
			СоздатьСФПолученную();
		Исключение
		КонецПопытки;
	КонецЕсли;
	Для Каждого СтрокаТовара Из Объект.ТаблицаПриход Цикл
		СтрокаТовара.ПоступлениеТоваровУслуг = ДокОбъект.Ссылка;
	КонецЦикла;
	ТекстСообщения = "Создано поступление "+ДокОбъект.Ссылка;
	ЗаписьВЛог(ТекстСообщения,,Истина);
	Если Объект.РегистрироватьЦеныНоменклатуры Тогда
		//создается установка цен номенклатуры после поступления
		НаДату = ИзменитьВремяСоздания(Объект.ПоступлениеТоваровУслуг.Дата);
		ЦенаЗакупочная = Объект.ВидЦены;//ЦенаЗакупочная;
		//НачатьТранзакцию();
		//Если ЗначениеЗаполнено(Объект.УстановкаЦенНоменклатуры) Тогда
		//	Док = Объект.УстановкаЦенНоменклатуры.ПолучитьОбъект();
		//Иначе
			Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		//КонецЕсли;
		Док.ДокументОснование = ДокОбъект.Ссылка;
		Док.Дата = НаДату;
		Док.Согласован = Истина;
		Док.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
		Док.ВидыЦен.Очистить();
		НовСтрока = Док.ВидыЦен.Добавить();
		НовСтрока.ВидЦены = ЦенаЗакупочная;
		Если Объект.НеРегистрироватьДешевыеЦены Тогда //Если новая цена дешевле текущей, то не регистрировать её
			//получаем текущие цены Объект.ТаблицаПриход
		КонецЕсли;
		Док.Товары.Очистить();
		Массив = Новый Массив;
		Для Каждого ТекСтрока Из Объект.ТаблицаПриход Цикл
			Если ТекСтрока.ЦенаЗакупки < 0.02 Тогда
				Продолжить;
			КонецЕсли;
			Если Массив.Найти(ТекСтрока.Номенклатура) = Неопределено Тогда
				Массив.Добавить(ТекСтрока.Номенклатура);
				НовСтрока = Док.Товары.Добавить();
				НовСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НовСтрока.ВидЦены = ЦенаЗакупочная;
				НовСтрока.Цена = ТекСтрока.ЦенаЗакупки;
			КонецЕсли;
		КонецЦикла;
		Док.Комментарий = "авт. создано из закладки «Приход» или «Загрузка прихода» модуля обмена с УТ 11 "+ТекущаяДата();
		Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			ЗаписьВЛог("Создана и проведена установка цен номенклатуры по виду цены ("+ЦенаЗакупочная+")"+Док.Ссылка,1,Истина);
		Исключение
			ЗаписьВЛог("Создана установка цен номенклатуры по виду цены ("+ЦенаЗакупочная+")"+Док.Ссылка,1,Истина);
			Док.Записать();
		КонецПопытки;
		//Объект.УстановкаЦенНоменклатуры = Док.Ссылка;
		//ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	//!!! какую-нибудь печатную форм можно сделать с отчетом

КонецПроцедуры //СоздатьПриход

Процедура ИзменитьДатыПоступленияВЗаказахПоставщикамИзПрихода()
	//проверяем в заказе поставщику колонку ДатаПоступления, и поступление одной датой, и ставим текущую дату, иначе не создаётся приходный ордер на товары
	СтруктураДатаПоступления = Новый Структура("КодСтроки", 0);	
	Для Каждого СтрокаТаблицы Из Объект.ЗаказыДляПодбора Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПоставщику) И СтрокаТаблицы.ВПриход>0 Тогда
			//Если СтрокаТаблицы.ДатаПоступления > ТекущаяДата() Тогда
				НадоЗАписывать = Ложь;
				Об = СтрокаТаблицы.ЗаказПоставщику.ПолучитьОбъект();
				СтруктураДатаПоступления.КодСтроки = СтрокаТаблицы.КодСтроки;
				Если СтруктураДатаПоступления.КодСтроки = 0 Тогда
					СтруктураДатаПоступления.КодСтроки = СтрокаТаблицы.КодСтроки;
				КонецЕсли;
				НСтроки = Об.Товары.НайтиСтроки(СтруктураДатаПоступления);
				Для Каждого НСтрока Из НСтроки Цикл
					СтрокаТаблицы.ДатаПоступления = НСтрока.ДатаПоступления;
					Если НСтрока.ДатаПоступления > ТекущаяДата() Тогда
						НСтрока.ДатаПоступления = ТекущаяДата();
						НадоЗАписывать = Истина;
					КонецЕсли;
				КонецЦикла;
				Если Об.ПоступлениеОднойДатой Тогда
					СтрокаТаблицы.ДатаПоступления = НСтрока.ДатаПоступления;
					Если Об.ДатаПоступления > ТекущаяДата() Тогда
						Об.ДатаПоступления = ТекущаяДата();
						НадоЗАписывать = Истина;
					КонецЕсли;
				КонецЕсли;
				//Об.ЖелаемаяДатаПоступления = НачалоТекущегоДня;//возможно, нет необходимости
				Если НадоЗАписывать Тогда
					Попытка
						Если Об.Проведен Тогда
							Об.Записать(РежимЗаписиДокумента.Проведение);
						Иначе
							Об.Записать();
						КонецЕсли;
					Исключение
						сообщить(СокрЛП(СтрокаТаблицы.ЗаказПоставщику)+" не удалось поменять дату поступления ("+СтрокаТаблицы.ДатаПоступления+") на текущую, могут быть проблемы с созданием приходного ордера на товары");
						сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьСФПолученную()
	//создаём с/ф полученную
	Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		ПараметрыРегистрации = Документы.ПриобретениеТоваровУслуг.ПараметрыРегистрацииСчетовФактурПолученных(Объект.ПоступлениеТоваровУслуг);
		Если НЕ Объект.УТКазахстан Тогда
			Результат = Неопределено;
			Попытка
				ОбщийМодуль = Вычислить("УчетНДСУП");//в Казахстане вообще таких функций нет
				Результат = ОбщийМодуль.СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрации);
			Исключение
			КонецПопытки;
			Если Результат = Неопределено Тогда
				Попытка
					ОбщийМодуль = Вычислить("УчетНДСУПСлужебный");//в Казахстане вообще таких функций нет
					Результат = ОбщийМодуль.СчетаФактурыПолученныеПоДокументуЗакупки(ПараметрыРегистрации);
				Исключение
				КонецПопытки;
			КонецЕсли;			
			Если НЕ Результат = Неопределено Тогда
				Если Результат.СчетаФактуры.Количество() > 0 Тогда
					Попытка
						Объект.СФ = Результат.СчетаФактуры[0];
					Исключение
					КонецПопытки;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//СчетФактураДокумента = ЗакупкиВызовСервера.СчетФактураДокумента(Объект.ПоступлениеТоваровУслуг, Объект.ПоступлениеТоваровУслуг.Организация, Ложь);
		//Если ЗначениеЗаполнено(СчетФактураДокумента) Тогда
		//	//сообщить("Уже есть");
		//	Объект.СФ = СчетФактураДокумента;
		//	Возврат;
		//КонецЕсли;
		СФ = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДанныеЗаполнения = Новый Структура("ДокументОснование", Объект.ПоступлениеТоваровУслуг);
		СФ.Заполнить(ДанныеЗаполнения);	
		СФ.Дата = Объект.ПоступлениеТоваровУслуг.Дата+1;
		Если Объект.НомерВходящегоДокумента = "" Тогда
			СФ.Номер = Объект.ПоступлениеТоваровУслуг.НомерВходящегоДокумента;
		Иначе
			СФ.Номер = Объект.НомерВходящегоДокумента;
		КонецЕсли;
		СФ.ДатаСоставления = Объект.ДатаВходящегоДокумента;
		Попытка
			СФ.Записать();
			Объект.СчетФактураПолученный = СФ.Ссылка;
			сообщить(СФ.Ссылка);
		Исключение
		КонецПопытки;
		Попытка
			СФ.Записать(РежимЗаписиДокумента.Проведение);
			Объект.СчетФактураПолученный = СФ.Ссылка;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьПоставщиковВЗаявкахНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого СтрокаСтатуса Из Объект.ТаблицаСтатусов Цикл
		Если НЕ СтрокаСтатуса.Загружать Тогда
			Продолжить;
		КонецЕсли;
		ОбработкаОбъект.ЗаполнитьТаблицуЗаявокССайта(,СтрокаСтатуса.КодСтатуса, Объект.ФильтрПоЗаявке, , СтрокаСтатуса, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоставщиковВЗаявках(Команда)
	ПроверитьПоставщиковВЗаявкахНаСервере();
КонецПроцедуры
Функция ПолучитьПереченьНастроекПоставщика() Экспорт
	ПереченьНастроек = "Поставщик,ИмяФайлаПриход,КолонкаАртикул,КолонкаПроизводитель,КолонкаНаименование,КолонкаКоличество"+
	",КолонкаЦена,КолонкаНДС,КолонкаСумма,КолонкаСуммаНДС,КолонкаЗаказ,КолонкаКодСтраны"+
	",КолонкаСтрана,КолонкаНомерГТД,КолонкаШтрихКод,КолонкаЯчейка,КолонкаСуммаНДС,КолонкаВес,КолонкаТНВЭД"+
	",ОграничениеАртикула,БрендСАртикулом,БрендПередАртикулом,БрендПослеАртикула,НачальнаяСтрока,КонечнаяСтрока"+
	",СтрокаНомераУПД,КолонкаНомераУПД,КолонкаДатыУПД,РегистрироватьСФ,АртикулПослеСимвола,КолонкаВсегоКОплате"+
	",АртикулВКонце";
	Возврат ПереченьНастроек;
КонецФункции

&НаСервере
Процедура СохранитьНастройкиИмпортаПоКонтрагентуНаСервере(ИмяПользователя = "")
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КлючОбъекта = "ABCP_1C";
	КлючНастроек = "НастройкиИмпортаНакладных"+СокрЛП(Объект.Поставщик);//у справочника "Контрагенты" нет кода
	Если ИмяПользователя = "" Тогда
	    ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	Если ИмяПользователя = "" Тогда
		ИмяПользователя = "Администратор";
	КонецЕсли;
	ПереченьНастроек = ПолучитьПереченьНастроекПоставщика();
	НазванияНастроек = СтрРазделить(ПереченьНастроек,",");
	Настройки = Новый Структура();
	Для Каждого ИмяНастройки Из НазванияНастроек Цикл
		Настройки.Вставить(ИмяНастройки, Объект[ИмяНастройки]);
	КонецЦикла;
	
	//Настройки.Вставить("Поставщик", Объект.Поставщик);
	//Настройки.Вставить("ИмяФайлаПриход", Объект.ИмяФайлаПриход);
	//Настройки.Вставить("КолонкаАртикул", Объект.КолонкаАртикул);
	//Настройки.Вставить("КолонкаПроизводитель", Объект.КолонкаПроизводитель);
	//Настройки.Вставить("КолонкаНаименование", Объект.КолонкаНаименование);
	//Настройки.Вставить("КолонкаКоличество", Объект.КолонкаКоличество);
	//Настройки.Вставить("КолонкаЦена", Объект.КолонкаЦена);
	//Настройки.Вставить("КолонкаНДС", Объект.КолонкаНДС);
	//Настройки.Вставить("КолонкаСумма", Объект.КолонкаСумма);
	//Настройки.Вставить("КолонкаСуммаНДС", Объект.КолонкаСуммаНДС);
	//Настройки.Вставить("КолонкаЗаказ", Объект.КолонкаЗаказ);
	//Настройки.Вставить("КолонкаКодСтраны", Объект.КолонкаКодСтраны);
	//Настройки.Вставить("КолонкаСтрана", Объект.КолонкаСтрана);
	//Настройки.Вставить("КолонкаНомерГТД", Объект.КолонкаНомерГТД);
	//Настройки.Вставить("КолонкаШтрихКод", Объект.КолонкаШтрихКод);
	//Настройки.Вставить("КолонкаЯчейка", Объект.КолонкаЯчейка);
	//Настройки.Вставить("КолонкаСуммаНДС", Объект.КолонкаСуммаНДС);
	//Настройки.Вставить("КолонкаВес", Объект.КолонкаВес);
	//Настройки.Вставить("КолонкаТНВЭД", Объект.КолонкаТНВЭД);
	//Настройки.Вставить("ОграничениеАртикула", Объект.ОграничениеАртикула);
	//Настройки.Вставить("БрендСАртикулом", Объект.БрендСАртикулом);
	//Настройки.Вставить("БрендПередАртикулом", Объект.БрендПередАртикулом);
	//Настройки.Вставить("НачальнаяСтрока", Объект.НачальнаяСтрока);
	//Настройки.Вставить("КонечнаяСтрока", Объект.КонечнаяСтрока);
	//Настройки.Вставить("СтрокаНомераУПД", Объект.СтрокаНомераУПД);
	//Настройки.Вставить("КолонкаНомераУПД", Объект.КолонкаНомераУПД);
	//Настройки.Вставить("КолонкаДатыУПД", Объект.КолонкаДатыУПД);
	//Настройки.Вставить("РегистрироватьСФ", Объект.РегистрироватьСФ);
	//Настройки.Вставить("АртикулПослеСимвола", Объект.АртикулПослеСимвола);//В начале артикула могут быть xbig-, xdt-, xpm-. Поэтому ставим знак "-", после которого идёт нормальный артикул
	//Настройки.Вставить("КолонкаВсегоКОплате", Объект.КолонкаВсегоКОплате);
	//Настройки.Вставить("АртикулВКонце", Объект.АртикулВКонце);
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройки, , ИмяПользователя);
	Если Объект.Отладка Тогда
		сообщить("Сохранены настройки "+Объект.Поставщик+" "+ИмяПользователя+"	"+КлючНастроек);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЕстьПолныеПраваПользователя()
    ИмяПользователя = ИмяПользователя();
	ПользовательСсылка = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
	Если ПользовательСсылка.Роли.Содержит(РольПолныеПрава) Тогда
		Возврат Истина;
	КонецЕсли;
КонецФункции
			
&НаКлиенте
Процедура СохранитьНастройкиИмпортаПоКонтрагенту(Команда)
	//надо меню выводить сохранить себе, сохранить пользователям, или получить настройки пользователей
	Если ЕстьПолныеПраваПользователя() = Ложь Тогда
		СохранитьНастройкиИмпортаПоКонтрагентуНаСервере();
		ПоказатьОповещениеПользователя(,,"Сохранены настройки для импорта приходов от контрагента "+Объект.Поставщик);
		Возврат;
	КонецЕсли;
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСохранитьНастройкиИмпортаПоКонтрагентуВсемПользователям", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Сохранить настройки только текущему пользователю?", Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСохранитьНастройкиИмпортаПоКонтрагентуВсемПользователям(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьНастройкиИмпортаПоКонтрагентуНаСервере();
		ПоказатьОповещениеПользователя(,,"Сохранены настройки для импорта приходов от контрагента "+Объект.Поставщик);
	Иначе
		СписокПользователей = ПолучитьПереченьПользователей();
		ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораПользователяНастройкиПоставщика", ЭтотОбъект);
		СписокПользователей.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, "Отметьте пользователей для сохранения настроек поставщика");	
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПользователяНастройкиПоставщика(СписокЭлементов, Параметры) Экспорт
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СохранятьВсем = Ложь;
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если Элемент.Значение = "(Всем пользователям)" И Элемент.Пометка Тогда
			СохранятьВсем = Истина;
		КонецЕсли;
    КонецЦикла;
	
	ПользователиТекстом = "Сохранены настройки для импорта приходов от контрагента пользователям: ";
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если Элемент.Значение = "(Всем пользователям)" Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.Пометка Или СохранятьВсем Тогда
			//ПользователиТекстом = ПользователиТекстом+" "+Элемент.Значение;
			СохранитьНастройкиИмпортаПоКонтрагентуНаСервере(Элемент.Значение);
			ПользователиТекстом = ПользователиТекстом + " " + Элемент.Значение
		КонецЕсли;
	КонецЦикла;
	ПоказатьОповещениеПользователя(,,ПользователиТекстом);
КонецПроцедуры

&НаКлиенте
Процедура Поставщик1ПриИзменении(Элемент)
	Поставщик1ПриИзмененииНаСервере();
	Если СокрЛП(Объект.ИмяФайлаПриход)<>"" Тогда
		ЗаполнитьСписокЛистовExcel();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Поставщик1ПриИзмененииНаСервере()
	ПоступлениеУжеЕсть = Ложь;
	Объект.ТаблицаПриход.Очистить();
	Объект.ЗаказыДляПодбора.Очистить();
	Объект.ПоступлениеТоваровУслуг = "";
	Объект.ИмяЛиста = "";
	Объект.ИмяФайлаПриход = "";
	Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Возврат;
	КонецЕсли;
	ВремПоставщик = Объект.Поставщик;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КлючОбъекта = "ABCP_1C";
	КлючНастроек = "НастройкиИмпортаНакладных"+СокрЛП(Объект.Поставщик);//у справочника "Контрагенты" нет кода
    ИмяПользователя = ИмяПользователя();
	ПользовательСсылка = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
	Если ИмяПользователя = "" Тогда
		ИмяПользователя = "Администратор";//фоновое задание запускается под пользователем из настроек в справочнике дополнительных отчетов и обработок
	КонецЕсли;
    Попытка
        Настройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователя);
	Исключение
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ПриСозданииНаСервере", "Не найдены настройки обмена с ABCP для текущего пользователи. Нажмите ""Сохранить настройки"" в окне формы");
        Возврат;
	КонецПопытки;
	Если Объект.Отладка Тогда
		сообщить("Восстанавливаем настройки поставщика "+Объект.Поставщик+" "+ИмяПользователя+"	"+КлючНастроек);
	КонецЕсли;
	Если Настройки = Неопределено Тогда
		Если ПользовательСсылка.Роли.Содержит(РольПолныеПрава) И НЕ Объект.ИспользоватьИндивидуальныеНастройкиПользователей Тогда
			ИмяПользователя = "Администратор";//фоновое задание запускается под пользователем из настроек в справочнике дополнительных отчетов и обработок
		Иначе
			Если Объект.Отладка Тогда
				сообщить("Не нашли настройки");
			КонецЕсли;
			Возврат;
		КонецЕсли;
        Настройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователя);
		Если Настройки = Неопределено Тогда
			Если Объект.Отладка Тогда
				сообщить("Не нашли настройки");
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Для Каждого ИмяНастройки Из Настройки Цикл
		Если ИмяНастройки.Ключ = "Поставщик" Или ИмяНастройки.Ключ = "ИдентификаторПоставщика" Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Объект[ИмяНастройки.Ключ] = Настройки[ИмяНастройки.Ключ];
		Исключение
		КонецПопытки;
	КонецЦикла;
	Объект.ИмяФайлаПриход = "";
	Объект.Поставщик = ВремПоставщик;
КонецПроцедуры

&НаСервере
Процедура ПодобратьЗаказыКлиентовНаСервере()
	//сообщить("Подбираем по номенклатуры заказы клиентов, которых еще нет на остатках");
	//Объект.ТаблицаРеализаций.Очистить();
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗаказыКлиентовОстатки.ЗаказКлиента,
	//               |	ЗаказыКлиентовОстатки.Номенклатура,
	//               |	ЗаказыКлиентовОстатки.ЗаказаноОстаток КАК Количество,
	//               |	ЗаказыКлиентовОстатки.КОформлениюОстаток,
	//               |	ВЫБОР
	//               |		КОГДА ЗаказыКлиентовОстатки.ЗаказаноОстаток = 0
	//               |			ТОГДА 0
	//               |		ИНАЧЕ ЗаказыКлиентовОстатки.СуммаОстаток / ЗаказыКлиентовОстатки.ЗаказаноОстаток
	//               |	КОНЕЦ КАК ЦенаПродажи,
	//               |	ЗаказыКлиентовОстатки.СуммаОстаток,
	//               |	ЗаказыКлиентовОстатки.ЗаказКлиента.НомерПоДаннымКлиента КАК НомерЗаявки
	//               |ИЗ
	//               |	РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
	//               |ГДЕ
	//               |	ЗаказыКлиентовОстатки.Номенклатура В(&Номенклатура)";
	//			   //|ГДЕ
	//			   //|	ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент = &Контрагент";
	//Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыКлиентовОстатки.ЗаказКлиента,
	               |	ЗаказыКлиентовОстатки.Номенклатура,
	               |	ЗаказыКлиентовОстатки.ЗаказаноОстаток КАК Количество,
	               |	ЗаказыКлиентовОстатки.КОформлениюОстаток,
	               |	ВЫБОР
	               |		КОГДА ЗаказыКлиентовОстатки.ЗаказаноОстаток = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ ЗаказыКлиентовОстатки.СуммаОстаток / ЗаказыКлиентовОстатки.ЗаказаноОстаток
	               |	КОНЕЦ КАК ЦенаПродажи,
	               |	ЗаказыКлиентовОстатки.СуммаОстаток,
	               |	ЗаказыКлиентовОстатки.ЗаказКлиента.НомерПоДаннымКлиента КАК НомерЗаявки,
	               |	ЗаказПоставщикуТовары.Ссылка КАК ЗаказПоставщику,
	               |	РеализацияТоваровУслугТовары.Ссылка КАК РеализацияТоваровУслуг
	               |ИЗ
	               |	РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	               |		ПО ЗаказыКлиентовОстатки.ЗаказКлиента = ЗаказПоставщикуТовары.Ссылка.ДокументОснование
	               |			И ЗаказыКлиентовОстатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ПО ЗаказыКлиентовОстатки.ЗаказКлиента = РеализацияТоваровУслугТовары.ЗаказКлиента
	               |			И ЗаказыКлиентовОстатки.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
	               |ГДЕ
	               |	ЗаказыКлиентовОстатки.Номенклатура В(&Номенклатура)";
	Запрос.УстановитьПараметр("Номенклатура", Объект.ТаблицаПриход.Выгрузить(,"Номенклатура"));
	//Запрос.УстановитьПараметр("Контрагент", Объект.Клиент);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		сообщить("Нет незакрытых заказов клиента");
		Возврат;
	КонецЕсли;
	//Результат.Выгрузить()
	Выборка = Результат.Выбрать();
	Структура = Новый Структура("Номенклатура");
	Пока Выборка.Следующий() Цикл
		Структура.Номенклатура = Выборка.Номенклатура;
		НайденныеСтроки = Объект.ТаблицаПриход.НайтиСтроки(Структура);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Количество = Выборка.Количество Тогда
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, "НомерЗаявки,ЗаказКлиента,ЗаказПоставщику");
				//НайденнаяСтрока.НомерЗаявки = Выборка.НомерЗаявки;
				//НайденнаяСтрока.ЗаказКлиента = Выборка.ЗаказКлиента;
			Иначе
				сообщить(""+Выборка.Номенклатура+", заявка № "+Выборка.НомерЗаявки+", не совпадает количество, в заявке "+Выборка.Количество+", в приходной накладной "+НайденнаяСтрока.Количество);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЗаказыКлиентов(Команда)
	ПодобратьЗаказыКлиентовНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьПереченьМенеджеровABCP()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СписокМенеджеров = Новый СписокЗначений;
	ТекстЗапроса = "/cp/managers?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль+"&state=1";//только зарегистрированные
	HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Объект.ТаблицаКлиентов.Очистить();
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат СписокМенеджеров;
	КонецЕсли;
	//СтрокаОтвет = ПривестиКСтуктуре1С(СтрокаОтвет);//1С не может сделать структуру, где ключ является числом, поэтому добавляем deliveryAddress id перед числами
	СписокЭлементов = СтруктураИзJSON(СтрокаОтвет);
	НС = СписокЭлементов.Количество();
	Если НС = 0 Тогда
		Возврат СписокМенеджеров;
	КонецЕсли;
	
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если НЕ Элемент.allowLogin Тогда
			Продолжить;
		КонецЕсли;
		Ид = Число(Элемент.contractorId);//email phone, может быть тоже вносить?
		Найденный = ОбработкаОбъект.НайтиКонтрагентаПоИдентификатору(Ид);
		Если ЗначениеЗаполнено(Найденный) Тогда
			Продолжить;
		КонецЕсли;
		СписокМенеджеров.Добавить(Ид, Элемент.lastName+" "+Элемент.firstName);// + " ("+Ид+")");
	КонецЦикла;
	Возврат СписокМенеджеров;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьМенеджеровВКонтрагентов(Команда)
	Оповещение = Новый ОписаниеОповещения("ОповещениеВопросЗагрузитьМенеджеровВКонтрагентов", ЭтотОбъект);
	ТекстВопроса = "Если менеджер заказывает товар от себя, то он, не являсь контрагентом, не попадает в заказ покупателя.
	|Выбрать менеджера для загрузки в справочник контрагентов?";
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры

&НаКлиенте 
Процедура ОповещениеВопросЗагрузитьМенеджеровВКонтрагентов(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		СписокМенеджеров = ОбработкаОбъект.ПолучитьПереченьМенеджеровABCP();
		//СписокМенеджеров = ПолучитьПереченьМенеджеровABCP();
		//в 8.3 работает, но ругается Элемент = СписокПоставщиков.ВыбратьЭлемент();
		ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораМенеджераABCP", ЭтотОбъект);
		СписокМенеджеров.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите менеджера для загрузки");	
		//ЗагрузитьМенеджеровВКонтрагентовНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ПослеВыбораМенеджераABCP(Результат, ДополнительныеПараметры) Экспорт 
	Если Не Результат = Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		Результат = ОбработкаОбъект.ДобавитьМенеджераВСправочникКонтрагентов(Результат.Представление, Результат.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугаДоставкиПриИзменении(Элемент)
	УслугаДоставкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УслугаДоставкиПриИзмененииНаСервере()
	ИспользоватьУправлениеДоставкой = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	Если НЕ ИспользоватьУправлениеДоставкой Тогда
		ТекстСообщения = "Для отображения вкладки «Доставка» в заказе клиента рекомендуется включить «Управление доставкой» «НСИ и Администрирование» - «Склад и доставка» - «Доставка»";
		ЗаписьВЛог(ТекстСообщения,,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоЗаявкеОткрытие(Элемент, СтандартнаяОбработка)
	НомерЗаявки = Элемент.ТекстРедактирования;
	ЗапуститьПриложение("http://cp.abcp.ru/?page=orders&id_order="+Формат(Число(НомерЗаявки), "ЧГ=0"));
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТЗЗаявкиКонтрагентПриИзменении(Элемент)
	Контрагент = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Контрагент;
	ИдентификаторКонтрагента = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ИдентификаторКонтрагента;
	ДобавитьИзменитьuserId(Контрагент, ИдентификаторКонтрагента);
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзменитьuserId(Контрагент, ИдентификаторКонтрагента)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьИзменитьuserId(Контрагент, ИдентификаторКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ТЗЗаявкиДатаОбновленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Парам = Новый Структура; 
    Отбор = Новый Структура; 
    Отбор.Вставить("Объект", Элементы.ТаблицаЗаявок.ТекущиеДанные.ЗаказКлиента); // то, по чему нужно искать
    Парам.Вставить("Отбор", Отбор); 
    ОткрытьФорму("РегистрСведений.ДополнительныеСведения.ФормаСписка", Парам);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрДополнительныхСведений(Команда)
    //ОткрытьФорму("РегистрСведений.ДополнительныеСведения.ФормаСписка");
	СписокМеню = Новый СписокЗначений();
	СписокМеню.Добавить("Весь", "Весь регистр сведений");
	СписокМеню.Добавить("userId", "Отбор по userId, ид.клиента");
	СписокМеню.Добавить("distributorId", "Отбор по distributorId, ид. поставщика");
	СписокМеню.Добавить("managerId", "Отбор по managerId, ид. менеджера");
	СписокМеню.Добавить("НомерПлатежногоДокумента", "Отбор по номеру платежного документа");
	//в 8.3 работает, но ругается Элемент = СписокПоставщиков.ВыбратьЭлемент();
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораМенюРС", ЭтотОбъект);
	СписокМеню.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите отбор регистра сведений");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораМенюРС(Элемент, Параметры) Экспорт
	Если Элемент <> Неопределено Тогда
		Значение = Элемент.Значение;
		Если Значение = "Весь" Тогда
			ОткрытьФорму("РегистрСведений.ДополнительныеСведения.ФормаСписка");
			Возврат;
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Если Значение = "userId" Тогда
			Отбор = Новый Структура("Свойство", НайтиСвойствоПВХ("userId (Контрагенты)"));
		ИначеЕсли Значение = "distributorId" Тогда
			Отбор = Новый Структура("Свойство", НайтиСвойствоПВХ("distributorId (Контрагенты)"));
		ИначеЕсли Значение = "managerId" Тогда
			Отбор = Новый Структура("Свойство", НайтиСвойствоПВХ("managerId (Пользователи)"));
		ИначеЕсли Значение = "НомерПлатежногоДокумента" Тогда
			Отбор = Новый Структура("Свойство", НайтиСвойствоПВХ("НомерПлатежногоДокумента (Документы)"));
		КонецЕсли;
		ОткрытьФорму("РегистрСведений.ДополнительныеСведения.ФормаСписка", Новый Структура("Отбор", Отбор));
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОпции(Команда)
	СтрокаОтвета = ПроверитьНастройкиФункциональныхОпций();
	Если СтрокаОтвета = "" Тогда
		ПоказатьОповещениеПользователя("Все хорошо",,"Функциональные опции настроены корректно");
	Иначе
		сообщить(СтрокаОтвета);
		ПоказатьОповещениеПользователя("Требуется донастройка",,СтрокаОтвета);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяВерсияОбработки(Команда)
	//ВерсияНаСайте = ПолучитьВерсиюОбработки("УТ 11.3.3");
	//ПоказатьОповещениеПользователя(,,"Текущая версия обработки: "+Символы.ПС+ВерсияНаСайте);
	//УдалитьНоменклатуруНаСервере();
	//УдалитьДокументыНаСервере();
	//УдалитьКонтрагентовНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьНоменклатуруНаСервере()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Описание Подобно &Описание
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Наименование,
		|	Номенклатура.Ссылка";
	
	Запрос.УстановитьПараметр("Описание", "%на сайте%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Об.УстановитьПометкуУдаления(Истина);
		Об2 = Об.Родитель.ПолучитьОбъект();
		Об2.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаСервере
Процедура УдалитьКонтрагентовНаСервере()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "userId (Контрагенты)");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Об = ВыборкаДетальныеЗаписи.Объект.ПолучитьОбъект();
		Об.УстановитьПометкуУдаления(Истина);
		Об2 = Об.Партнер.ПолучитьОбъект();
		Об2.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаСервере
Процедура УдалитьДокументыНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.НомерПоДаннымКлиента <> &НомерПоДаннымКлиента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.НомерПоДаннымПоставщика <> &НомерПоДаннымКлиента";
	
	Запрос.УстановитьПараметр("НомерПоДаннымКлиента", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Об.УстановитьПометкуУдаления(Истина);
		Кон = Об.Контрагент.ПолучитьОбъект();
		Кон.УстановитьПометкуУдаления(Истина);
		Пар = Кон.Партнер.ПолучитьОбъект();
		Пар.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВерсиюОбработки(НаименованиеКонфигурации = "")
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ВерсияНаСайте = ОбработкаОбъект.ПолучитьВерсиюОбработки();
	//не работает в Web-клиенте
	//ВерсияНаСайте = "";
	//  АдресСайта = "1c-abcp.ru";
	//ПутьНаСайте = "info/version.txt";
	//ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	//HTTPСервис = Новый HTTPСоединение(АдресСайта,,,,,Ложь);
	//ПравильностьВыполнения = Истина;

	//Попытка
	//    HTTPСервис.Получить(ПутьНаСайте, ИмяВременногоФайла);
	//Исключение
	//	Возврат("Не удалось получить № версии!");
	//КонецПопытки;	
	//
	//Чтение = Новый ЧтениеТекста;
	//Чтение.Открыть(ИмяВременногоФайла, КодировкаТекста.ANSI);
	//ВерсияНаСайте = Чтение.Прочитать();
	//КС = СтрЧислоСтрок(ВерсияНаСайте);
	//Если КС < 2 Тогда
	//	Возврат ВерсияНаСайте;	
	//КонецЕсли; 
	//Если НаименованиеКонфигурации <> "" Тогда
	//	Для НС = 1 По КС Цикл 
	//		Стр = СтрПолучитьСтроку(ВерсияНаСайте, НС);
	//		сд = СтрДлина(НаименованиеКонфигурации);
	//		Если НРег(Лев(Стр, сд)) = НРег(НаименованиеКонфигурации) Тогда
	//			Возврат СокрЛП(Сред(Стр,сд+1));
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	Возврат ВерсияНаСайте;
	
	//можно кнопочку "Послать версию и описание проблемы автору, со ссылкой на снимок экрана"
КонецФункции // ПолучитьВерисюОбработки()

&НаСервере
Процедура УстановитьЗначение(Наименование, Значение)
	Константы[Наименование].Установить(Значение);
	сообщить("Константа: " + Наименование + " -> " + Значение);	
КонецПроцедуры

&НаСервере
Процедура УстановитьРекомендуемыеПараметрыНаСервере(Уст = Истина)
	Если Найти(Метаданные.Имя, "Базовая") = 0 Тогда
		БазоваяКонфигурация = Ложь;
	Иначе
		БазоваяКонфигурация = Истина;
	КонецЕсли;
	НачатьТранзакцию();
	УстановитьЗначение("ИспользоватьДополнительныеОтчетыИОбработки", Истина);
	УстановитьЗначение("ИспользоватьДополнительныеРеквизитыИСведения", Истина);
	УстановитьЗначение("ИспользоватьЗаказыКлиентов", Истина);
	УстановитьЗначение("ИспользоватьЗаказыПоставщикам", Истина);
	УстановитьЗначение("ИспользоватьНесколькоВидовЦен", Истина);
	УстановитьЗначение("ИспользоватьНесколькоКасс", Истина);
	Если НЕ Объект.УТ111 Тогда
		УстановитьЗначение("ИспользоватьНесколькоКассККМ", Истина);
		УстановитьЗначение("ИспользоватьОтчетДвиженияЗаказов", Истина);
		УстановитьЗначение("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента", Истина);
		УстановитьЗначение("ИспользоватьРасширенныеВозможностиЗаказаКлиента", Истина);
	КонецЕсли;
	Если НЕ БазоваяКонфигурация Тогда
		УстановитьЗначение("ИспользоватьНесколькоОрганизаций", Истина);
	КонецЕсли;
	УстановитьЗначение("ИспользоватьНесколькоРасчетныхСчетов", Истина);
	УстановитьЗначение("ИспользоватьНесколькоРасчетныхСчетовКасс", Истина);
	УстановитьЗначение("ИспользоватьНесколькоСкладов", Истина);
	УстановитьЗначение("ИспользоватьОрдерныеСклады", Истина);
	УстановитьЗначение("ИспользоватьПоступлениеПоНесколькимЗаказам", Истина);
	УстановитьЗначение("ИспользоватьРеализациюПоНесколькимЗаказам", Истина);
	УстановитьЗначение("КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик", Ложь);
	УстановитьЗначение("НеИспользоватьНесколькоОрганизаций", Ложь);
	УстановитьЗначение("НеИспользоватьНесколькоСкладов", Ложь);
	УстановитьЗначение("ДополнительнаяКолонкаПечатныхФормДокументов", Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул);//Дополнительная колонка печатных форм документов
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаУстановитьРекомендуемыеПараметры(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	УстановитьРекомендуемыеПараметрыНаСервере(Ложь);
	//СтрокаОтвета = ПроверитьНастройкиФункциональныхОпций(Истина);
	//Если СтрокаОтвета = "" Тогда
	//	СтрокаОтвета = "Рекомендуемые параметры уже установлены";
	//КонецЕсли;
	//ПоказатьОповещениеПользователя(,,СтрокаОтвета);
	//сообщить(СтрокаОтвета);
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьРекомендуемыеПараметры(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаУстановитьРекомендуемыеПараметры", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Установить рекомендуемые функциональные опции для первоначальной настройки модуля?", РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВБазе(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаЗарегистрироватьВБазе", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Зарегистрировать обработку в информационной базе "+Символы.ПС+"(настройка доступа по разделам производится самостоятельно)?", РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗарегистрироватьВБазе(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	//ПоместитьФайл(АдресВоВременномХранилище, ИмяФайлаОбработки, ИмяФайлаОбработки, Ложь, ЭтаФорма.УникальныйИдентификатор);
	
	//ОчиститьСообщения();
	//Зарегистрируем обработку в справочнике "Дополнительные отчеты и обработки".
	//ДополнительнаяОбработкаСсылка = Неопределено;
	//Результат = ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере("Поиск", ДополнительнаяОбработкаСсылка, АдресВоВременномХранилище, ,ИмяФайлаОбработки);
	//Если ТипЗнч(Результат) = Тип("Строка") Тогда
	//	ТекстВопроса = НСтр("ru = 'В информационной базе зарегистрирована обработка под именем - ""%1"".
	//				|Обновить существующую?'");
	//	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Результат);
	//	ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда 
	//		ОчиститьСообщения();
	//		Результат = ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере("Обновить", ДополнительнаяОбработкаСсылка, АдресВоВременномХранилище,,ИмяФайлаОбработки);
	//	КонецЕсли; 
	//КонецЕсли; 
	//
	//ОчиститьСообщения();
	//Если ТипЗнч(Результат) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
	//	Предупреждение(НСтр("ru = 'Обработка """ + Строка(Результат) + """ успешно зарегистрирована в справочнике ""Дополнительные отчеты и обработки"".
	//					|При необходимости укажите объекты назначения для обработки.'"));
	//КонецЕсли;

	//ДополнительнаяОбработкаСсылка = Неопределено;
	//Результат = ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере("Поиск", ДополнительнаяОбработкаСсылка, АдресВоВременномХранилище, Истина, ИмяФайлаОбработки);
	//Если ТипЗнч(Результат) = Тип("Строка") Тогда
	//	ТекстВопроса = НСтр("ru = 'В информационной базе зарегистрирована обработка под именем - ""%1"".
	//				|Обновить существующую?'");
	//	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Результат);
	//	ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда 
	//		ОчиститьСообщения();
	//		Результат = ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере("Обновить", ДополнительнаяОбработкаСсылка, АдресВоВременномХранилище, Истина, ИмяФайлаОбработки);
	//	КонецЕсли; 
	//КонецЕсли; 
	//
	//ОчиститьСообщения();
	//Если ТипЗнч(Результат) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
	//	//ОткрытьЗначение(Результат);
	//	Предупреждение(НСтр("ru = 'Обработка """ + Строка(Результат) + """ успешно зарегистрирована в справочнике ""Дополнительные отчеты и обработки"".
	//					|При необходимости укажите разделы размещения для обработки.'"));
	//КонецЕсли;
КонецПроцедуры 

&НаСервереБезКонтекста
//Универсальная функция для регистрации обработки в информационной базе
//
Функция ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере(РежимИспользования = "", СсылкаНаЭлемент = Неопределено, АдресДвоичныхДанных = Неопределено, ВторойВариантРегистрации = Ложь, ИмяФайлаОбработки)

	//Перем ВидОбработки;
	//
	////Регистрируем обработку в информационной базе
	//
	//Если НЕ ПравоДоступа("Изменение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда 
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//РегистрационныеДанные = ПолучитьСведенияОВнешнейОбработке(ВторойВариантРегистрации);
	//ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
	//
	//Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	ДополнительныеОтчетыИОбработки.Версия,
	//		|	ДополнительныеОтчетыИОбработки.Ссылка
	//		|ИЗ
	//		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	//		|ГДЕ
	//		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование
	//		|	И ДополнительныеОтчетыИОбработки.Вид = &Вид
	//		|";

	//	Запрос.УстановитьПараметр("Наименование", РегистрационныеДанные.Наименование);
	//	Запрос.УстановитьПараметр("Вид", ВидОбработки);
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();

	//	Если Выборка.Следующий() Тогда
	//		СсылкаНаЭлемент = Выборка.Ссылка; 
	//	Иначе
	//		СсылкаНаЭлемент = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка(); 
	//	КонецЕсли;
	//КонецЕсли; 
	//
	//Если РежимИспользования = "Поиск" Тогда
	//	Если СсылкаНаЭлемент = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда 
	//		РежимИспользования = "Обновить"; 
	//	Иначе
	//		//Если СсылкаНаЭлемент.Версия <> РегистрационныеДанные.Версия Тогда
	//		Возврат РегистрационныеДанные.Наименование; 
	//	//Иначе
	//	//	Возврат Ложь; 
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если РежимИспользования = "Обновить" Тогда
	//	Если СсылкаНаЭлемент = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
	//		ЭлементОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
	//	Иначе
	//		ЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект(); 
	//	КонецЕсли; 
	//КонецЕсли;
	//
	//ПолноеИмяИмяФайла = ИмяФайлаОбработки;
	//МассивПодстрок = мРазложитьСтрокуВМассивПодстрок(ПолноеИмяИмяФайла, "\");
	//ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
	//
	//Если ЭлементОбъект.ИмяФайла = ИмяФайла
	//	И ЭлементОбъект.Вид = ВидОбработки Тогда
	//	// если это перерегистрация этой же обработи - не очищаем назначение
	//Иначе
	//	ЭлементОбъект.Назначение.Очистить();
	//КонецЕсли;
	//
	//// Инициализация сведений об обработке
	//Если Не ЗначениеЗаполнено(ЭлементОбъект.Публикация) Тогда
	//	ЭлементОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	//КонецЕсли; 
	//ЭлементОбъект.Вид = ВидОбработки;
	//ЭлементОбъект.Наименование		= РегистрационныеДанные.Наименование;
	//ЭлементОбъект.Версия			= РегистрационныеДанные.Версия;
	//ЭлементОбъект.БезопасныйРежим	= РегистрационныеДанные.БезопасныйРежим;
	//ЭлементОбъект.Информация		= РегистрационныеДанные.Информация;
	//Если ЭлементОбъект.Метаданные().Реквизиты.Найти("ИмяОбъекта") <> Неопределено Тогда
	//	ЭлементОбъект.ИмяОбъекта		= РегистрационныеДанные.Наименование;
	//КонецЕсли; 
	//
	//// Устанавливаем имя файла обработки
	//ЭлементОбъект.ИмяФайла = РегистрационныеДанные.Наименование;
	//
	//Если ЭтоАдресВременногоХранилища(АдресДвоичныхДанных) Тогда
	//	ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресДвоичныхДанных);
	//Иначе
	//	ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ПолноеИмяИмяФайла);
	//КонецЕсли; 
	//ЭлементОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки, Новый СжатиеДанных(9));
	//
	//// Если новая обработка или не заполнено назначение - устанавливаем назначение из обработки
	//Если (ЭлементОбъект.Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка()
	//	 ИЛИ ЭлементОбъект.Назначение.Количество() = 0)
	//	И (ЭлементОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта
	//		ИЛИ ЭлементОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма
	//		ИЛИ ЭлементОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов)
	//	 ТОГДА
	//	
	//	ЭлементОбъект.ИспользоватьДляФормыОбъекта = Истина;
	//	ЭлементОбъект.ИспользоватьДляФормыСписка = Истина;
	//	
	//	Если РегистрационныеДанные.Свойство("Назначение") Тогда
	//		ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	//		Если ВыполнитьСравнениеВерсий(ВерсияБСП, "2.1.3") Тогда
	//			
	//			НазначаемыеОбъектыМетаданных = Вычислить("ДополнительныеОтчетыИОбработки.НазначаемыеОбъектыМетаданныхПоВидуВнешнегоОбъекта(ВидОбработки)");
	//			Для Каждого ПолноеИмяОбъектаМетаданных Из РегистрационныеДанные.Назначение Цикл
	//				ПозицияТочки = Найти(ПолноеИмяОбъектаМетаданных, ".");
	//				Если Сред(ПолноеИмяОбъектаМетаданных, ПозицияТочки + 1) = "*" Тогда
	//					Поиск = Новый Структура("ВидОбъектаМетаданных", Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1));
	//				Иначе
	//					Поиск = Новый Структура("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
	//				КонецЕсли;
	//				
	//				Найденные = НазначаемыеОбъектыМетаданных.НайтиСтроки(Поиск);
	//				Для Каждого СтрокаТаблицы Из Найденные Цикл
	//					СтрокаНазначение = ЭлементОбъект.Назначение.Добавить();
	//					СтрокаНазначение.ОбъектНазначения = СтрокаТаблицы.ОбъектНазначения;
	//				КонецЦикла;
	//			КонецЦикла;
	//			ЭлементОбъект.Назначение.Свернуть("ОбъектНазначения", "");
	//			
	//		Иначе
	//			
	//			НазначаемыеОбъектыМетаданных = Вычислить("ДополнительныеОтчетыИОбработки.ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(ВидОбработки)");
	//			Для Каждого ПолноеИмяОбъектаМетаданных Из РегистрационныеДанные.Назначение Цикл
	//				ПозицияТочки = Найти(ПолноеИмяОбъектаМетаданных, ".");
	//				Если Сред(ПолноеИмяОбъектаМетаданных, ПозицияТочки + 1) = "*" Тогда
	//					Поиск = Новый Структура("Класс", Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1));
	//				Иначе
	//					Поиск = Новый Структура("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
	//				КонецЕсли;
	//				
	//				Найденные = НазначаемыеОбъектыМетаданных.НайтиСтроки(Поиск);
	//				Для Каждого СтрокаТаблицы Из Найденные Цикл
	//					СтрокаНазначение = ЭлементОбъект.Назначение.Добавить();
	//					СтрокаНазначение.ПолноеИмяОбъектаМетаданных = СтрокаТаблицы.ПолноеИмяОбъектаМетаданных;
	//				КонецЦикла;
	//			КонецЦикла;
	//			ЭлементОбъект.Назначение.Свернуть("ПолноеИмяОбъектаМетаданных", "");	
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//КомандыСохраненные = ЭлементОбъект.Команды.Выгрузить();
	//
	//ЭлементОбъект.Команды.Очистить();
	//
	//// Инициализация команд
	//
	//Для Каждого ЭлементОписаниеКоманды Из РегистрационныеДанные.Команды Цикл
	//	
	//	НоваяСтрока = ЭлементОбъект.Команды.Добавить();
	//	НоваяСтрока.Идентификатор	= ЭлементОписаниеКоманды.Идентификатор;
	//	НоваяСтрока.Представление	= ЭлементОписаниеКоманды.Представление;
	//	НоваяСтрока.Модификатор		= ЭлементОписаниеКоманды.Модификатор;
	//	НоваяСтрока.ПоказыватьОповещение = ЭлементОписаниеКоманды.ПоказыватьОповещение;
	//	
	//	Если ЭлементОписаниеКоманды.Использование = "ОткрытиеФормы" Тогда
	//		НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
	//	ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовКлиентскогоМетода" Тогда
	//		НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода;
	//	ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовСерверногоМетода" Тогда
	//		НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода;
	//	Иначе
	//		ТекстСообщения = НСтр("ru = 'Для команды %1 не определен способ запуска.'");
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементОписаниеКоманды.Представление);
	//		ВызватьИсключение ТекстСообщения;
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//УстановитьПривилегированныйРежим(Истина);
	//ЭлементОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//
	//Попытка
	//	ЭлементОбъект.Записать();
	//	СсылкаНаЭлемент = ЭлементОбъект.Ссылка;
	//Исключение
	//	НСтрока = НСтр("ru = 'Произошла ошибка при записи обработки.
	//						|Подробное описание ошибки: %1'");
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока,
	//							КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	ВызватьИсключение ТекстСообщения;
	//	Возврат Ложь;
	//КонецПопытки;
	//
	//Возврат СсылкаНаЭлемент;
	
КонецФункции

&НаСервере
Функция ПолучитьСведенияОВнешнейОбработке(ВторойВариантРегистрации = Ложь, ПараметрыРегистрации = Неопределено) Экспорт
	
	Выполнить("ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.1.3.1"")");	
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыРегистрации.Версия = ОбработкаОбъект.ПолучитьВерсиюОбработки();
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Информация = "";
	
	//Если ВторойВариантРегистрации Тогда	
	//	Выполнить("ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка()");
	//	ПараметрыРегистрации.Наименование = "Загрузка данных из табличного документа";
	//	
	//	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	//	НоваяКоманда.Представление = "Загрузка данных из табличного документа";
	//	НоваяКоманда.Идентификатор = "ЗаполнитьДанныхИзТабличногоДокумента";
	//	Выполнить("НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы()");
	//	НоваяКоманда.ПоказыватьОповещение = Истина;	
	//Иначе	
	//	Выполнить("ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта()");
	//	ПараметрыРегистрации.Наименование = "Заполнение табличной части из табличного документа";
	//			
	//	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	//	НоваяКоманда.Представление = "Заполнение табличной части из табличного документа";
	//	НоваяКоманда.Идентификатор = "ЗаполнитьДокументИзТабличногоДокумента";
	//	Выполнить("НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы()");
	//	НоваяКоманда.ПоказыватьОповещение = Истина;
	//КонецЕсли;

	Возврат ПараметрыРегистрации;
	
КонецФункции

&НаСервере
Процедура АдресСервисаПриИзмененииНаСервере()
	Объект.Пользователь = "api@" + СтрЗаменить(СокрЛП(Объект.АдресСервиса),".public.api.abcp.ru","");
	Объект.Пароль = "";
	Объект.ТаблицаСтатусов.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура АдресСервисаПриИзменении(Элемент)
	АдресСервисаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатИдентификаторКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	НомерКонтрагента = Формат(Число(Элемент.ТекстРедактирования),"ЧГ=0");
	//ЗапуститьПриложение("http://cp.abcp.ru/?page=customers&customerId="+НомерКонтрагента+"&action=editCustomer");
	ЗапуститьПриложение("https://cp.abcp.ru/customers/clients/"+НомерКонтрагента+"/edit");
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура НайтиУдаленныеНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если Объект.ГлубинаПросмотраДляПроведения = 0 Тогда
		сообщить("Используем глубину просмотра заявок: "+Объект.ГлубинаПросмотраЗаявок);
		ОбработкаОбъект.НайтиУдаленные(Объект.ГлубинаПросмотраЗаявок);
	Иначе
		сообщить("Заполнена глубина просмотра для проведения, используем: "+Объект.ГлубинаПросмотраДляПроведения);
		ОбработкаОбъект.НайтиУдаленные(Объект.ГлубинаПросмотраДляПроведения);
	КонецЕсли;
	//Объект.ТаблицаЗаявок.Загрузить(ОбработкаОбъект.НайтиУдаленныеМодуль().Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура НайтиУдаленные(Команда)
	НайтиУдаленныеНаСервере();
КонецПроцедуры

//в заказах клиентов изменяем статус на "К отгрузке"
&НаСервере
Процедура ИзменитьСостоянияВЗаказахНаСервере()
	//НачатьТранзакцию();
	//если статус возвращается, значит не настроено вариант обеспечения на закладке "Отгрузить"
	ВариантОбеспечения = Объект.ВариантОбеспечения;
	Структура = Новый Структура("Номенклатура,КодСтроки");
	ЗаписьВЛог("Изменяем вариант обеспечения в заказах после создания поступления "+СокрЛП(Объект.ПоступлениеТоваровУслуг));
	Для Каждого ТекСтрока Из Объект.ТаблицаПоступленийОтбор Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
			ЗаписьВЛог("Изменяем вариант обеспечения в заказе "+СокрЛП(ТекСтрока.ЗаказКлиента));
			Об = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
			Если НЕ ТекСтрока.ИзменилиСтатус Тогда
				Структура.Номенклатура = ТекСтрока.Номенклатура;
				Структура.КодСтроки = ТекСтрока.КодСтроки;
				НСтроки = Об.Товары.НайтиСтроки(Структура);
				НадоЗаписать = Ложь;
				Если Об.Контрагент = Объект.КонтрагентНаНаличие Тогда
					Для Каждого НСтрока Из НСтроки Цикл
						Если НСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется Тогда
							НСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
							НадоЗаписать = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Каждого НСтрока Из НСтроки Цикл
						Если (НЕ НСтрока.Отменено) И НСтрока.ВариантОбеспечения <> ВариантОбеспечения Тогда
							НСтрока.ВариантОбеспечения = ВариантОбеспечения;
							ЗаписьВЛог(СокрЛП(ТекСтрока.ЗаказКлиента)+", позиция "+Формат(НСтрока.КодСтроки, "ЧГ=0")+", "+НСтрока.Номенклатура.Артикул+", меняем вариант обеспечения на "+ВариантОбеспечения, Объект.Отладка);
							НадоЗаписать = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				ЗаписьВЛог("Позиция разделена, пропускаем изменение варианта обеспечения в заказе после создания поступления "+СокрЛП(ТекСтрока.ЗаказКлиента));
			КонецЕсли;
			ДокументПроведен = Ложь;
			Если НадоЗаписать = Истина Тогда
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение); 
					ДокументПроведен = Истина;
				Исключение
					ЗаписьВЛог(ОписаниеОшибки(), Объект.Отладка);
					Об.Записать();//неоптимально, вдруг 
					сообщить("Не удалось провести "+СокрЛП(Об));
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//надо закрыть заказы поставщику, по которым пришли все товары, но, если он неоплачен, то тогда он не закроется
Процедура ЗакрытьЗаказыПоставщикамПослеСозданияПоступления()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
	               |	ЗаказыПоставщикамОстатки.Номенклатура,
	               |	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК Количество,
	               |	ЗаказыПоставщикамОстатки.КОформлениюОстаток
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, ) КАК ЗаказыПоставщикамОстатки
	               |ГДЕ
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику В(&ЗаказПоставщику)";	
	МассивЗаказов = Объект.ТаблицаПоступленийОтбор.Выгрузить(,"ЗаказПоставщику").ВыгрузитьКолонку("ЗаказПоставщику");
	Запрос.УстановитьПараметр("ЗаказПоставщику", МассивЗаказов);
	Запрос.УстановитьПараметр("НаДату", ТекущаяДатаСеанса());
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Для Каждого ЗаказСсылка Из МассивЗаказов Цикл
			ЗакрытьЗаказПоставщику(ЗаказСсылка);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	ТЗЗ = Результат.Выгрузить();
	ТЗЗ.Свернуть("ЗаказПоставщику",);//сворачиваем остатки, чтобы остались только незакрытые
	Структура = Новый Структура("ЗаказПоставщику");
	Для Каждого ЗаказСсылка Из МассивЗаказов Цикл
		Если НЕ ЗначениеЗаполнено(ЗаказСсылка) Тогда
			Продолжить;
		КонецЕсли;
		Структура.ЗаказПоставщику = ЗаказСсылка;
		НайденныеСтроки = ТЗЗ.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() = 0 Тогда //не нашли заказ поставщика из нашего списка в незакрытых (по ним есть остатки)
			ЗакрытьЗаказПоставщику(ЗаказСсылка);
		КонецЕсли;	
	КонецЦикла;
	//ЗафиксироватьТранзакцию();
КонецПроцедуры

//меняем статус заказа на "Закрыт"
Процедура ЗакрытьЗаказПоставщику(ЗаказСсылка)
	Если НЕ ЗначениеЗаполнено(ЗаказСсылка) Тогда
		Возврат;
	КонецЕсли;
	//возможно, надо проверять есть оплата или нет
	ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
	ДокОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = "Закрыт "+ДокОбъект.Ссылка;
		ЗаписьВЛог(ТекстСообщения,,Истина);
	Исключение
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),6,Истина);
		//ДокОбъект.Записать();
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостоянияВЗаказах(Команда)
	ИзменитьСостоянияВЗаказахНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоступленийНомерЗаявкиОткрытие(Элемент, СтандартнаяОбработка)
	НомерЗаявки = Элемент.ТекстРедактирования;
	ЗапуститьПриложение("http://cp.abcp.ru/?page=orders&id_order="+Формат(Число(НомерЗаявки), "ЧГ=0"));
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура АртикулПоступлениеПриИзменении(Элемент)
	//ЭтаФорма.ТекущийЭлемент = Элементы.АртикулПоступление;
	ПодключитьОбработчикОжидания("ПослеВводаАртикулПоступление",0.2,Истина);
	НайтиАртикулВПоступлении();
КонецПроцедуры

&НаСервере
Процедура НайтиАртикулВПоступлении(ПоОдному = Ложь)
	Структура = Новый Структура("Артикул", Объект.АртикулПоступление);
	НайденныеСтроки = Объект.ТаблицаПоступлений.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
		Иначе
			Если НайденнаяСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Требуется Тогда
				//сообщить(""+Объект.АртикулПоступление+" пропускаем позицию № "+Формат(НайденнаяСтрока.КодСтроки,"ЧГ=0")+" с вариантом обеспечения: "+НайденнаяСтрока.ВариантОбеспечения);
				сообщить(""+Объект.АртикулПоступление+" у позиции № "+Формат(НайденнаяСтрока.КодСтроки,"ЧГ=0")+" с вариантом обеспечения: "+НайденнаяСтрока.ВариантОбеспечения);
				//Продолжить;
			КонецЕсли;
		КонецЕсли;
		//Если ПоОдному Тогда //!!! переделать, ищет
		//	СтруктураКодСтроки = Новый Структура("КодСтроки", НайденнаяСтрока.КодСтроки);
		//	СтрокиКодСтроки = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(СтруктураКодСтроки);
		//	Если СтрокиКодСтроки.Количество() = 0 Тогда
		//		НовСтрока = Объект.ТаблицаПоступленийОтбор.Добавить();
		//		ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
		//		Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
		//			НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
		//		КонецЕсли;
		//		НовСтрока.ИсходноеКоличество = 1;//для разделения заказов
		//		НовСтрока.КоличествоНаПечать = 1;//gorod_alex
		//	Иначе
		//		НовСтрока = СтрокиКодСтроки[0];
		//		ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
		//		Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
		//			НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
		//		КонецЕсли;
		//		НовСтрока.ИсходноеКоличество = 1;//для разделения заказов
		//		НовСтрока.КоличествоНаПечать = 1;//gorod_alex
		//	КонецЕсли;
		//Иначе
			НайденнаяСтрока.ВДокумент = Истина;
			НовСтрока = Объект.ТаблицаПоступленийОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
			Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
				НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
			КонецЕсли;
			НовСтрока.ИсходноеКоличество = НовСтрока.Количество;//для разделения заказов
			НовСтрока.КоличествоНаПечать = НовСтрока.Количество;//gorod_alex
		//КонецЕсли;
		НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
		НовСтрока.ИсходнаяЦенаЗакупки = НовСтрока.ЦенаЗакупки;
		НовСтрока.ИсходнаяЦенаПродажи = НовСтрока.ЦенаПродажи;
		НовСтрока.ВДокумент = Истина;
		//Если ПоОдному Тогда
		//	Если НайденнаяСтрока.Количество>1 Тогда
		//		НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - 1;
		//	Иначе
		//		Объект.ТаблицаПоступлений.Удалить(НайденнаяСтрока);
		//	КонецЕсли;
		//Иначе
			Объект.ТаблицаПоступлений.Удалить(НайденнаяСтрока);
		//КонецЕсли;
	КонецЦикла;
	//Объект.АртикулПоступление = "";
КонецПроцедуры

&НаСервере
Процедура АртикулРеализацияПриИзмененииНаСервере()
	Структура = Новый Структура("Артикул", Объект.АртикулРеализация);
	НайденныеСтроки = Объект.ТаблицаРеализаций.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Количество <= НайденнаяСтрока.КОтгрузке Тогда
			НайденнаяСтрока.ВДокумент = Истина;
			НайденнаяСтрока.Некорректная = Ложь;
		Иначе
			сообщить(Объект.АртикулРеализация+" в заявке № "+НайденнаяСтрока.НомерЗаявки+" количество "+НайденнаяСтрока.Количество+" больше, чем в наличии "+НайденнаяСтрока.КОтгрузке);
		КонецЕсли;
	КонецЦикла;
	//Объект.АртикулРеализация = "";
КонецПроцедуры

&НаКлиенте
Процедура АртикулРеализацияПриИзменении(Элемент)
	//ЭтаФорма.ТекущийЭлемент = Элементы.АртикулРеализация;
	ПодключитьОбработчикОжидания("ПослеВводаАртикулРеализация",0.2,Истина);
	//АртикулРеализацияПриИзмененииНаСервере();
	НайтиАртикулВРеализации();
КонецПроцедуры

&НаСервере
Процедура НайтиАртикулВРеализации(ПоОдному = Ложь)
	Структура = Новый Структура("Артикул", Объект.АртикулРеализация);
	НайденныеСтроки = Объект.ТаблицаРеализаций.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ВДокумент = Истина;
		НовСтрока = Объект.ТаблицаРеализацийОтбор.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
		Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
			НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
		КонецЕсли;
		НовСтрока.ИсходноеКоличество = НовСтрока.Количество;//для разделения заказов
		НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаПродажи;
		НовСтрока.ВДокумент = Истина;
		Объект.ТаблицаРеализаций.Удалить(НайденнаяСтрока);
	КонецЦикла;
	//Объект.АртикулПоступление = "";
КонецПроцедуры

&НаСервере
Процедура СоздатьКлиентовССайтаНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ТаблицаКлиентов.Очистить();
	//Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ВернутьТаблицуКлиентовССайта(Истина).Выгрузить());
	ОбработкаОбъект.ЗаполнитьТаблицуКлиентовССайта(Истина);
	Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ТаблицаКлиентов.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентовССайта(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСоздатьКлиентовССайта", ЭтаФорма, Параметры);
	ДатаНачала = НачалоДня(ТекущаяДата())-Объект.ГлубинаПросмотраКлиентов*24*3600;
	ПоказатьВопрос(Оповещение, "Создать всех клиентов из ABCP в 1С, зарегистрированных с "+Формат(ДатаНачала,"ДЛФ=D")+" ?", Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСоздатьКлиентовССайта(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	СоздатьКлиентовССайтаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоступленийПослеУдаления(Элемент)
	Массив = НезакрытыеЗаказыПоставщикуНаСервере(Истина);
	Элементы.АртикулПоступление.СписокВыбора.ЗагрузитьЗначения(Массив);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеализацийПослеУдаления(Элемент)
	Массив = НезакрытыеЗаказыКлиентаНаСервере(Истина);
	Элементы.АртикулРеализация.СписокВыбора.ЗагрузитьЗначения(Массив);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеализацийВДокументПриИзменении(Элемент)
	//ТД = ЭтаФорма.Элементы.ТаблицаРеализаций.ТекущиеДанные;
	//Если ТД.Количество <= ТД.КОтгрузке Тогда
	//	ТД.Некорректная = Ложь;
	//Иначе
	//	ТД.ВДокумент = Ложь;
	//	сообщить(ТД.Артикул+" в заявке № "+ТД.НомерЗаявки+" количество "+ТД.Количество+" больше, чем в наличии "+ТД.КОтгрузке);
	//КонецЕсли;
	НайденнаяСтрока = Элементы.ТаблицаРеализаций.ТекущиеДанные;
	НовСтрока = Объект.ТаблицаРеализацийОтбор.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
	НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаПродажи;
	НовСтрока.ИсходноеКоличество = НовСтрока.Количество;//для разделения заказов
	//НовСтрока.ИсходнаяЦенаЗакупки = НовСтрока.ЦенаЗакупки;
	НовСтрока.ИсходнаяЦенаПродажи = НовСтрока.ЦенаПродажи;
	НовСтрока.ВДокумент = Истина;
	Объект.ТаблицаРеализаций.Удалить(НайденнаяСтрока);
	//Элементы.ТаблицаРеализацийОтборСумма.ТекстПодвала = Объект.ТаблицаРеализаций.Итог("Сумма");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеализацийОтборВДокументПриИзменении(Элемент)
	НайденнаяСтрока = Элементы.ТаблицаРеализацийОтбор.ТекущиеДанные;
	НайденнаяСтрока.ВДокумент = Ложь;
	НовСтрока = Объект.ТаблицаРеализаций.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
	НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
	Объект.ТаблицаРеализацийОтбор.Удалить(НайденнаяСтрока);
	//Элементы.ТаблицаРеализацийОтборСумма.ТекстПодвала = Объект.ТаблицаРеализаций.Итог("Сумма");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеализацийКоличествоПриИзменении(Элемент)
	ТД = ЭтаФорма.Элементы.ТаблицаРеализаций.ТекущиеДанные;
	Если ТД.Количество <= ТД.КОтгрузке Тогда
		ТД.Некорректная = Ложь;
	Иначе
		ТД.Некорректная = Истина;
		ТД.ВДокумент = Ложь;
		сообщить(ТД.Артикул+" в заявке № "+ТД.НомерЗаявки+" количество "+ТД.Количество+" больше, чем в наличии "+ТД.КОтгрузке);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗаказов(Команда)
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаСпискаABCP",,,ЭтаФорма.УникальныйИдентификатор);//не забыть про уникальность формы
	//надо определить, подключено расширение или нет, если нет, то лучше кнопку убрать
	//https://infostart.ru/public/236382/
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеИзменениеСтатусовНаСайтеПриПоступленииИРеализацииПриИзменении(Элемент)
	Если Объект.АвтоматическоеИзменениеСтатусовНаСайтеПриПоступленииИРеализации Тогда
		Элементы.ИзменитьСостоянияВЗаказах.Видимость = Ложь;
		Элементы.ИзменитьСтатусыПослеПоступления.Видимость = Ложь;
	Иначе
		Элементы.ИзменитьСостоянияВЗаказах.Видимость = Истина;
		Элементы.ИзменитьСтатусыПослеПоступления.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЕстьФормаСвязанныеДокументы()
	Если Метаданные.ОбщиеФормы.Найти("СвязанныеДокументы") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Процедура СвязанныеДокументы(Команда)
	Если ЭтаФорма.Элементы.ТаблицаЗаявок.ВыделенныеСтроки.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	ТД = ЭтаФорма.Элементы.ТаблицаЗаявок.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТД.ЗаказКлиента) Тогда
		НСтроки = Объект.ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НомерЗаявки", ТД.НомерЗаявки));
		Если НСтроки.Количество()>0 Тогда
			Если ЗначениеЗаполнено(НСтроки[0].РеализацияТоваровУслуг) Тогда
				Если ЕстьФормаСвязанныеДокументы() Тогда
					ОткрытьФорму("ОбщаяФорма.СвязанныеДокументы",Новый Структура("ОбъектОтбора", НСтроки[0].РеализацияТоваровУслуг));
				Иначе	
					ОткрытьФорму("ОбщаяФорма.СтруктураПодчиненности",Новый Структура("ОбъектОтбора", НСтроки[0].РеализацияТоваровУслуг));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если ЕстьФормаСвязанныеДокументы() Тогда
		ОткрытьФорму("ОбщаяФорма.СвязанныеДокументы",Новый Структура("ОбъектОтбора", ТД.ЗаказКлиента));
	Иначе	
		ОткрытьФорму("ОбщаяФорма.СтруктураПодчиненности",Новый Структура("ОбъектОтбора", ТД.ЗаказКлиента));
	КонецЕсли;
	//ОткрытьФорму("ОбщаяФорма.СтруктураПодчиненности",Новый Структура("ОбъектОтбора", ПараметрКоманды),
	//		ПараметрыВыполненияКоманды.Источник,
	//		ПараметрыВыполненияКоманды.Источник.КлючУникальности,
	//		ПараметрыВыполненияКоманды.Окно);
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Объект.ФинансовыйМодульВключен Тогда
		Если ТекущаяСтраница.Имя = "СтраницаЗаявки" Тогда
			ЭтаФорма.Элементы.ТЗЗаявкиОбновитьБалансКлиентов.Доступность = Ложь;
			ЭтаФорма.Элементы.ТЗЗаявкиОбновитьБалансКлиентовЗаТекущийДень.Доступность = Ложь;
		ИначеЕсли ТекущаяСтраница.Имя = "СтраницаКлиенты" Тогда
			//ЭтаФорма.Элементы.ТЗКлиентыИзменитьЛимитКредита.Доступность = Ложь;
			//ЭтаФорма.Элементы.ТЗКлиентыОбновитьБалансКлиентов.Доступность = Ложь;
		КонецЕсли;
	Иначе
		//можно электронные платежи всё равно загружать
		//Если ТекущаяСтраница.Имя = "СтраницаФинансы" Тогда
		//	ЭтаФорма.Элементы.ТаблицаОплатПолучитьОплаты.Доступность = Ложь;
		//	ЭтаФорма.Элементы.ТаблицаОплатСоздатьДокументыОплаты.Доступность = Ложь;
		//КонецЕсли;
	КонецЕсли;
	Если ТекущаяСтраница.Имя = "СтраницаКлиенты" Тогда
		ЭтаФорма.Элементы.ГруппаКлиентыПоКорзине.Видимость = Объект.КлиентПоКорзине;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоступленийВДокументПриИзменении(Элемент)
	СтрокаТаблицыПоступлений = Элементы.ТаблицаПоступлений.ТекущиеДанные;
	Если СтрокаТаблицыПоступлений.Количество = 0 Тогда //это закрытый заказ
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицыПоступлений.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется") Тогда
		СтрокаТаблицыПоступлений.ВДокумент = Ложь;
		//ПоказатьОповещениеПользователя(,,""+СтрокаТаблицыПоступлений.Номенклатура+" пропускаем позицию № "+Формат(СтрокаТаблицыПоступлений.КодСтроки,"ЧГ=0")+" с вариантом обеспечения: "+СтрокаТаблицыПоступлений.ВариантОбеспечения);
		ПоказатьОповещениеПользователя(,,""+СтрокаТаблицыПоступлений.Номенклатура+" у позиции № "+Формат(СтрокаТаблицыПоступлений.КодСтроки,"ЧГ=0")+" вариант обеспечения: "+СтрокаТаблицыПоступлений.ВариантОбеспечения);
		//Возврат;
	КонецЕсли;
	НовСтрока = Объект.ТаблицаПоступленийОтбор.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаблицыПоступлений);
	Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
		НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
	КонецЕсли;
	НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
	НовСтрока.ИсходноеКоличество = НовСтрока.Количество;//для разделения заказов
	НовСтрока.КоличествоНаПечать = НовСтрока.Количество;//gorod_alex
	НовСтрока.ИсходнаяЦенаЗакупки = НовСтрока.ЦенаЗакупки;
	НовСтрока.ИсходнаяЦенаПродажи = НовСтрока.ЦенаПродажи;
	НовСтрока.ВДокумент = Истина;
	Объект.ТаблицаПоступлений.Удалить(СтрокаТаблицыПоступлений);
	
		//Если ПоОдному Тогда //!!! переделать, ищет
		//	СтруктураКодСтроки = Новый Структура("КодСтроки", НайденнаяСтрока.КодСтроки);
		//	СтрокиКодСтроки = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(СтруктураКодСтроки);
		//	Если СтрокиКодСтроки.Количество() = 0 Тогда
		//		НовСтрока = Объект.ТаблицаПоступленийОтбор.Добавить();
		//		ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
		//		Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
		//			НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
		//		КонецЕсли;
		//		НовСтрока.ИсходноеКоличество = 1;//для разделения заказов
		//		НовСтрока.КоличествоНаПечать = 1;//gorod_alex
		//	Иначе
		//		НовСтрока = СтрокиКодСтроки[0];
		//		ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
		//		Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
		//			НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
		//		КонецЕсли;
		//		НовСтрока.ИсходноеКоличество = 1;//для разделения заказов
		//		НовСтрока.КоличествоНаПечать = 1;//gorod_alex
		//	КонецЕсли;
		//Иначе
		//	НайденнаяСтрока.ВДокумент = Истина;
		//	НовСтрока = Объект.ТаблицаПоступленийОтбор.Добавить();
		//	ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
		//	Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
		//		НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
		//	КонецЕсли;
		//	НовСтрока.ИсходноеКоличество = НовСтрока.Количество;//для разделения заказов
		//	НовСтрока.КоличествоНаПечать = НовСтрока.Количество;//gorod_alex
		//КонецЕсли;
		//НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
		//НовСтрока.ИсходнаяЦенаЗакупки = НовСтрока.ЦенаЗакупки;
		//НовСтрока.ИсходнаяЦенаПродажи = НовСтрока.ЦенаПродажи;
		//НовСтрока.ВДокумент = Истина;
		//Если ПоОдному Тогда
		//	Если НайденнаяСтрока.Количество>1 Тогда
		//		НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - 1;
		//	Иначе
		//		Объект.ТаблицаПоступлений.Удалить(НайденнаяСтрока);
		//	КонецЕсли;
		//Иначе
		//	Объект.ТаблицаПоступлений.Удалить(НайденнаяСтрока);
		//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоступленийОтборВДокументПриИзменении(Элемент)
	НайденнаяСтрока = Элементы.ТаблицаПоступленийОтбор.ТекущиеДанные;
	НайденнаяСтрока.ВДокумент = Ложь;
	НовСтрока = Объект.ТаблицаПоступлений.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
	НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
	Объект.ТаблицаПоступленийОтбор.Удалить(НайденнаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСумму(Элемент)
	Строка = Элементы.ТаблицаПоступленийОтбор.ТекущиеДанные;
	Если ЗначениеЗаполнено(Строка.PaymentId) Тогда
		Строка.Количество = Строка.ИсходноеКоличество;
		//Строка.ЦенаЗакупки = Строка.ИсходнаяЦенаЗакупки;
		//ПоказатьОповещениеПользователя(,,"Нельзя менять заказ, он привязан к платежу № "+Строка.paymentNumber);
		ПоказатьОповещениеПользователя(,,"заказ в ABCP привязан к платежу № "+Строка.paymentNumber);
	КонецЕсли;
	Строка.Сумма = Строка.Количество * Строка.ЦенаЗакупки;
	Если Строка.Количество > Строка.ИсходноеКоличество Тогда
		сообщить("При создании заказа лишнее количество будет привязано к автоматически созданному заказу");
	КонецЕсли;
КонецПроцедуры

//устарело, теперь используется "Загрузить свежие заявки"
&НаКлиенте
Процедура ИспользоватьВремяПредыдущейЗагрузкиПриИзменении(Элемент)
	ИспользоватьВремяПредыдущейЗагрузкиПриИзмененииСервер();
КонецПроцедуры

//устарело, теперь используется "Загрузить свежие заявки"
&НаСервере
Процедура ИспользоватьВремяПредыдущейЗагрузкиПриИзмененииСервер()
	Если Не Объект.ИспользоватьВремяПредыдущейЗагрузки Тогда
		Объект.ВремяПредыдущейЗагрузки="";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьПриходныйОрдерНаТоварыНаСервере()
	Если Не ЗначениеЗаполнено(Объект.ПоступлениеТоваровУслуг) Тогда
		сообщить("Не создано поступление товаров и услуг");
		Возврат;
	КонецЕсли;
	ПриходныйОрдерНаТовары = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	ДанныеЗаполнения = Новый Структура("Склад, Помещение, Распоряжение, ЗонаПриемки, СкладскаяОперация, Отправитель, ЗакрыватьГрафикПоступления, ДатаВходящегоДокумента, НомерВходящегоДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Объект.ПоступлениеТоваровУслуг);
	ДанныеЗаполнения.Распоряжение = Объект.ПоступлениеТоваровУслуг; 
	//ДанныеЗаполнения.ДатаПоступления = Объект.ПоступлениеТоваровУслуг.Дата;
	ПриходныйОрдерНаТовары.Заполнить(ДанныеЗаполнения);//Объект.ПоступлениеТоваровУслуг);
	ПриходныйОрдерНаТовары.ЗакрыватьГрафикПоступления = Истина;
	ПриходныйОрдерНаТовары.НомерВходящегоДокумента = Объект.ПоступлениеТоваровУслуг.Номер;
	ПриходныйОрдерНаТовары.ДатаВходящегоДокумента = Объект.ПоступлениеТоваровУслуг.Дата;
	ПриходныйОрдерНаТовары.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	ПриходныйОрдерНаТовары.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
	АдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ПриходныйОрдерНаТовары.Склад, ПриходныйОрдерНаТовары.Помещение, ПриходныйОрдерНаТовары.Дата);
	Если АдресноеХранение Тогда
		ПриходныйОрдерНаТовары.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(ПриходныйОрдерНаТовары.Склад, ПриходныйОрдерНаТовары.Помещение, ПриходныйОрдерНаТовары.ЗонаПриемки);
	КонецЕсли;
	Если Метаданные.Документы.ПриходныйОрдерНаТовары.Реквизиты.Найти("ХозяйственнаяОперация")<>Неопределено Тогда
		ПриходныйОрдерНаТовары.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	//РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(ТекущаяСтрока.Номенклатура, Характеристика, Упаковка);
	Если ЗначениеЗаполнено(Объект.НаборУпаковок) Тогда
		ИндивидуальныеУпаковки = Ложь;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		                |	УпаковкиЕдиницыИзмерения.Ссылка
		                |ИЗ
		                |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		                |ГДЕ
		                |	УпаковкиЕдиницыИзмерения.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Объект.НаборУпаковок);//СтрокаДокумента.Номенклатура.НаборУпаковок);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ЕдИзм = Выборка.Ссылка;
		КонецЕсли;
	Иначе
		ИндивидуальныеУпаковки = Истина;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		                |	УпаковкиЕдиницыИзмерения.Ссылка
		                |ИЗ
		                |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		                |ГДЕ
		                |	УпаковкиЕдиницыИзмерения.Владелец = &Владелец";
	КонецЕсли;
	НС = 0;
	ПриходныйОрдерНаТовары.Товары.Очистить();//при первоначальном заполнении уже есть табличная часть, перезаполняем заново
	ЗаписьВЛог("Строки приходного ордера на	номенклатуру	исп.упаковки	набор упаковок	количество	штрих-код",3);
	Для Каждого СтрокаДокумента Из Объект.ПоступлениеТоваровУслуг.Товары Цикл
		//СтрокаОрдера = ПриходныйОрдерНаТовары.Товары[НС];
		СтрокаОрдера = ПриходныйОрдерНаТовары.Товары.Добавить();
		//ЗаполнитьЗначенияСвойств(СтрокаОрдера, СтрокаДокумента, "КоличествоУпаковок,Количество");
		ЗаполнитьЗначенияСвойств(СтрокаОрдера, СтрокаДокумента, "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,Количество");
		//Если Не ЗначениеЗаполнено(СтрокаОрдера.Упаковка) Тогда
		//надо привязываться не к настройкам модуля, а к настройкам Номенклатуры
		Если СтрокаДокумента.Номенклатура.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		//Если ИндивидуальныеУпаковки Тогда
			//заполняем инд.упаковкой
			Запрос.УстановитьПараметр("Владелец", СтрокаДокумента.Номенклатура);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				СтрокаОрдера.Упаковка = Выборка.Ссылка;
				//ЕдИзм = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			СтрокаОрдера.Упаковка = ЕдИзм;
		КонецЕсли;
		//КонецЕсли;
		НС = НС + 1;
		ТекстСообщения = ""+НС+	"	"+СтрокаОрдера.Номенклатура+"	"+СтрокаОрдера.Номенклатура.ИспользоватьУпаковки+"	"+СтрокаОрдера.Номенклатура.НаборУпаковок+"	"+СтрокаОрдера.Количество+"	"+СтрокаОрдера.Штрихкод;
		ЗаписьВЛог(ТекстСообщения,3);
	КонецЦикла;
	ПриходныйОрдерНаТовары.ВсегоМест = Объект.ПоступлениеТоваровУслуг.Товары.Итог("Количество");
	ТекстСообщения = "Всего мест "+ПриходныйОрдерНаТовары.ВсегоМест;
	ЗаписьВЛог(ТекстСообщения,,Истина);
	//РасходныйОрдерНаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	Если ПриходныйОрдерНаТовары.Склад.ИспользоватьСкладскиеПомещения Тогда
		ПриходныйОрдерНаТовары.Помещение = Объект.Помещение;
	КонецЕсли;
	ПриходныйОрдерНаТовары.Отправитель = Объект.ПоступлениеТоваровУслуг.Контрагент.Партнер;//ПриходныйОрдерНаТовары.Склад;
	ПриходныйОрдерНаТовары.Дата = Объект.ПоступлениеТоваровУслуг.Дата;
	ПриходныйОрдерНаТовары.НомерВходящегоДокумента = Объект.ПоступлениеТоваровУслуг.Номер;//ВходящегоДокумента;
	ПриходныйОрдерНаТовары.ДатаВходящегоДокумента = Объект.ПоступлениеТоваровУслуг.Дата;//ВходящегоДокумента;
	ПриходныйОрдерНаТовары.Комментарий = "авт. создан "+ТекущаяДата()+", по документу "+СокрЛП(Объект.ПоступлениеТоваровУслуг);
	//ДатаПоступления - пустая
	Попытка
		ПриходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		сообщить(ОписаниеОшибки());
		ПриходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	ТекстСообщения = "Проведен документ "+ПриходныйОрдерНаТовары.Ссылка;
	ЗаписьВЛог(ТекстСообщения,,Истина);
	Объект.ПриходныйОрдерНаТовары = ПриходныйОрдерНаТовары.Ссылка;
	//ВидЗаполнения = "НоменклатураКоличество"
	//ТекОбъект.ЗаполнитьТоварыПоТоварамКПоступлению(ВидЗаполнения,ДатаПоступления);
	//!!! только потом можно в заказе клиента поменять статус на отгружено
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриходныйОрдерНаТовары(Команда)
	СоздатьПриходныйОрдерНаТоварыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьОтборНаСервере()
	Если Не ЗначениеЗаполнено(Объект.ПриходныйОрдерНаТовары) Тогда
		сообщить("Не создан приходный ордер на товары");
		Возврат;
	КонецЕсли;
	ПриходныйОрдерНаТовары = Объект.ПриходныйОрдерНаТовары;
	ПустойРезультат = Истина;
	Если Лев(Объект.АдресСервиса, 5) = "zap82" Тогда
		//ищем, если сегодня есть документ со статусом "Подготовлено" тогда записываем в него, иначе создаем новый
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОтборРазмещениеТоваров.Ссылка,
		               |	ОтборРазмещениеТоваров.ВидОперации
		               |ИЗ
		               |	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		               |ГДЕ
		               |	ОтборРазмещениеТоваров.Дата МЕЖДУ &НачДата И &КонДата
		               |	И ОтборРазмещениеТоваров.Статус = &Статус
		               |	И ОтборРазмещениеТоваров.ПометкаУдаления = ЛОЖЬ
		               |	И ОтборРазмещениеТоваров.ВидОперации = &ВидОперации";
		               //|	И ОтборРазмещениеТоваров.Проведен = Истина";//делаем их непроведенными
		//Запрос.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата()));
		//Запрос.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата()));
		ДатаПриходногоОрдера = ПриходныйОрдерНаТовары.Дата;
		Запрос.УстановитьПараметр("НачДата", НачалоДня(ДатаПриходногоОрдера));
		Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаПриходногоОрдера));
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение);
		Результат = Запрос.Выполнить();
		ПустойРезультат = Результат.Пустой();
	КонецЕсли;
	Если НЕ ПустойРезультат Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОтборРазмещениеТоваров = Выборка.Ссылка.ПолучитьОбъект();
		КонецЦикла;
		ТекстСообщения = "Найден отбор по приходному ордеру "+Объект.ПриходныйОрдерНаТовары+" "+Выборка.Ссылка+" Вид операции: "+Выборка.Ссылка;
		ЗаписьВЛог(ТекстСообщения,,Истина);
	Иначе
		ОтборРазмещениеТоваров = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
		ДанныеЗаполнения = Новый Структура("Склад, Помещение, ЗонаПриемки, СкладскаяОперация, Отправитель, ЗакрыватьГрафикПоступления, Исполнитель, Ответственный");
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Объект.ПоступлениеТоваровУслуг);
		//ОтборРазмещениеТоваров.Заполнить(ДанныеЗаполнения);
		//ЗаполнитьЗначенияСвойств(ОтборРазмещениеТоваров, ПриходныйОрдерНаТовары);
		ОтборРазмещениеТоваров.Заполнить(ДанныеЗаполнения);
		ОтборРазмещениеТоваров.Дата = ТекущаяДата();
		ОтборРазмещениеТоваров.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
		ОтборРазмещениеТоваров.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
		Если ЗначениеЗаполнено(Объект.СтатусОтборовРазмещенийТоваров) Тогда
			ОтборРазмещениеТоваров.Статус = Объект.СтатусОтборовРазмещенийТоваров;
		КонецЕсли;
		АдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ПриходныйОрдерНаТовары.Склад, ПриходныйОрдерНаТовары.Помещение, ПриходныйОрдерНаТовары.Дата);
		Если АдресноеХранение Тогда
			ОтборРазмещениеТоваров.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(ПриходныйОрдерНаТовары.Склад, ПриходныйОрдерНаТовары.Помещение, ПриходныйОрдерНаТовары.ЗонаПриемки);
		КонецЕсли;
		ТекстСообщения = "Создан отбор по приходному ордеру "+Объект.ПриходныйОрдерНаТовары;
		ЗаписьВЛог(ТекстСообщения,,Истина);
	КонецЕсли;
	НС = 0;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(Объект.НаборУпаковок) Тогда
		ИндивидуальныеУпаковки = Ложь;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		                |	УпаковкиЕдиницыИзмерения.Ссылка
		                |ИЗ
		                |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		                |ГДЕ
		                |	УпаковкиЕдиницыИзмерения.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Объект.НаборУпаковок);//СтрокаДокумента.Номенклатура.НаборУпаковок);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ЕдИзм = Выборка.Ссылка;
		КонецЕсли;
	Иначе
		ИндивидуальныеУпаковки = Истина;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		                |	УпаковкиЕдиницыИзмерения.Ссылка
		                |ИЗ
		                |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		                |ГДЕ
		                |	УпаковкиЕдиницыИзмерения.Владелец = &Владелец";
	КонецЕсли;
	//ОтборРазмещениеТоваров.ТоварыОтбор.Очистить();
	//ОтборРазмещениеТоваров.ТоварыРазмещение.Очистить();
	ЯчейкаДляОтбора = Объект.ЯчейкаДляОтбора;
	ЗаписьВЛог("Новые строки отбора	номенклатуру	исп.упаковки	набор упаковок	количество	штрих-код",3);
	Для Каждого СтрокаДокумента Из ПриходныйОрдерНаТовары.Товары Цикл
		СтрокаОтбора = ОтборРазмещениеТоваров.ТоварыРазмещение.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтбора, СтрокаДокумента, "Номенклатура,Упаковка,КоличествоУпаковок,Количество");
		Если Не ЗначениеЗаполнено(СтрокаОтбора.Упаковка) Тогда
			Если СтрокаДокумента.Номенклатура.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
			//Если ИндивидуальныеУпаковки Тогда
				//заполняем инд.упаковкой
				Запрос.УстановитьПараметр("Владелец", СтрокаДокумента.Номенклатура);
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда
					//ЕдИзм = Выборка.Ссылка;
					СтрокаОтбора.Упаковка = Выборка.Ссылка;
					ТекстСообщения = ""+СтрокаДокумента.Номенклатура+", упаковка "+Выборка.Ссылка;
					ЗаписьВЛог(ТекстСообщения,,Истина);
				Иначе
					ТекстСообщения = ""+СтрокаДокумента.Номенклатура+", не найдена упаковка";
					ЗаписьВЛог(ТекстСообщения,,Истина);
				КонецЕсли;
			Иначе
				СтрокаОтбора.Упаковка = ЕдИзм;
				ТекстСообщения = ""+СтрокаДокумента.Номенклатура+", общая упаковка "+ЕдИзм;
				ЗаписьВЛог(ТекстСообщения,,Истина);
			КонецЕсли;
			//СтрокаОтбора.Упаковка = ЕдИзм;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЯчейкаДляОтбора) Тогда
			СтрокаОтбора.Ячейка  = ЯчейкаДляОтбора;
		Иначе
			СтрокаОтбора.Ячейка  = ОтборРазмещениеТоваров.ЗонаПриемки;
		КонецЕсли;
		НС = НС + 1;
		ТекстСообщения = ""+НС+	"	"+СтрокаОтбора.Номенклатура+"	"+СтрокаОтбора.Номенклатура.ИспользоватьУпаковки+"	"+СтрокаОтбора.Номенклатура.НаборУпаковок+"	"+СтрокаОтбора.Количество;//+"	"+СтрокаОтбора.Штрихкод;
		ЗаписьВЛог(ТекстСообщения,3);
	КонецЦикла;
	Если ОтборРазмещениеТоваров.Склад.ИспользоватьСкладскиеПомещения Тогда
		ОтборРазмещениеТоваров.Помещение = Объект.Помещение;
	КонецЕсли;
	ОтборРазмещениеТоваров.Комментарий = "авт. создан "+ТекущаяДата()+", по документу "+СокрЛП(ПриходныйОрдерНаТовары);
	ДокументПроведен = Ложь;
	Попытка
		ОтборРазмещениеТоваров.Записать(РежимЗаписиДокумента.Проведение);
		//ОтборРазмещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
		ДокументПроведен = Истина;
	Исключение
		сообщить(ОписаниеОшибки());
		ОтборРазмещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
		сообщить("Не удалось провести "+ОтборРазмещениеТоваров);
	КонецПопытки;
	Если ДокументПроведен Тогда
		ОтборРазмещениеТоваров.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		ТекстСообщения = "Меняем статус на «Выполнено без ошибок»";
		ЗаписьВЛог(ТекстСообщения,,Истина);
		Попытка
			ОтборРазмещениеТоваров.Записать(РежимЗаписиДокумента.Проведение);
			//ОтборРазмещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			ДокументПроведен = Истина;
		Исключение
			сообщить(ОписаниеОшибки());
			ОтборРазмещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			сообщить("Не удалось провести "+ОтборРазмещениеТоваров);
		КонецПопытки;
	КонецЕсли;
	ТекстСообщения = "Записан отбор "+ОтборРазмещениеТоваров+", товаров "+ПриходныйОрдерНаТовары.Товары.Количество();
	ЗаписьВЛог(ТекстСообщения,,Истина);
	Объект.ОтборРазмещениеТоваров = ОтборРазмещениеТоваров.Ссылка;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтбор(Команда)
	СоздатьОтборНаСервере();
КонецПроцедуры

&НаСервере
Процедура СопоставитьПоставщиковПоИНННаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из Объект.ТаблицаСкладов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Или ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.ИНН) Тогда
			Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ТекСтрока.ИНН);
			Если ЗначениеЗаполнено(Контрагент) Тогда
				//добавляем найденному поставщику distributorId
				ТекСтрока.Контрагент = Контрагент; 
				ИдПоставщика = ТекСтрока.ИдентификаторПоставщика;
				ОбработкаОбъект.ДобавитьИзменитьdistributorId(Контрагент, ИдПоставщика);
				Продолжить;
			КонецЕсли;
			//дозаполняем по ид.
		КонецЕсли;
		ТекСтрока.Контрагент = ОбработкаОбъект.НайтиКонтрагентаПоИдентификатору(ТекСтрока.ИдентификаторПоставщика, "distributorId (Контрагенты)", ТекСтрока.НаименованиеПоставщика, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПоставщиковПоИНН(Команда)
	СопоставитьПоставщиковПоИНННаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуВРеализации(Элемент)
	Строка = Элементы.ТаблицаРеализацийОтбор.ТекущиеДанные;
	Строка.Сумма = Строка.Количество * Строка.ЦенаПродажи;
КонецПроцедуры

//Поиск по артикулу в поступлении по части строки
//Событие АвтоПодбор реквизита АртикулПоступление
&НаКлиенте
Процедура АртикулПоступлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание<>0 И НЕ ПустаяСтрока(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		СписокОтбор=Новый СписокЗначений;
		Для Каждого Элемент Из Элементы.АртикулПоступление.СписокВыбора Цикл
			Поиск=Текст;
			ФорматированныеСтроки = Новый Массив;
			ЗначениеПоля=ВРег(Элемент.Значение);
			Формат = СтрЗаменить(ЗначениеПоля," ","");
			Формат = СтрЗаменить(Формат,".","");
			Формат = СтрЗаменить(Формат,",","");
			Формат = СтрЗаменить(Формат,":","");
			Формат = СтрЗаменить(Формат,";","");
			Формат = СтрЗаменить(Формат,"/","");
			Формат = СтрЗаменить(Формат,"\","");
			Формат = СтрЗаменить(Формат,"-","");
			Формат = СтрЗаменить(Формат,"+","");
			Формат = СтрЗаменить(Формат,"=","");
			Формат = СтрЗаменить(Формат,"_","");
			Формат = СтрЗаменить(Формат,"(","");
			Формат = СтрЗаменить(Формат,")","");
			Ф=Истина;
			НачалоВхождения = Найти(ЗначениеПоля,ВРег(Поиск));
			Если НачалоВхождения > 0 Тогда
				Ф=Ложь;
			Иначе
				НачалоВхождения = Найти(Формат,ВРег(Поиск));
				Если НачалоВхождения > 0 Тогда 
					ЗначениеПоля=Формат; 
					Ф=Ложь; 
				КонецЕсли;
			КонецЕсли;
			
			Если Ф Тогда
				ТекстФормат = СтрЗаменить(Поиск," ","");
				ТекстФормат = СтрЗаменить(ТекстФормат,".","");
				ТекстФормат = СтрЗаменить(ТекстФормат,",","");
				ТекстФормат = СтрЗаменить(ТекстФормат,":","");
				ТекстФормат = СтрЗаменить(ТекстФормат,";","");
				ТекстФормат = СтрЗаменить(ТекстФормат,"/","");
				ТекстФормат = СтрЗаменить(ТекстФормат,"\","");
				ТекстФормат = СтрЗаменить(ТекстФормат,"-","");
				ТекстФормат = СтрЗаменить(ТекстФормат,"+","");
				ТекстФормат = СтрЗаменить(ТекстФормат,"=","");
				ТекстФормат = СтрЗаменить(ТекстФормат,"_","");
				ТекстФормат = СтрЗаменить(ТекстФормат,"(","");
				ТекстФормат = СтрЗаменить(ТекстФормат,")","");
				НачалоВхождения = Найти(Формат,ВРег(ТекстФормат));
				Если НачалоВхождения > 0 Тогда 
					ЗначениеПоля=Формат;
					Поиск=ТекстФормат;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если НЕ Объект.УТ111 Тогда
				Если НачалоВхождения > 1 Тогда
					ФорматированныеСтроки.Добавить(Лев(ЗначениеПоля,НачалоВхождения-1));
					ЗначениеПоля=Прав(ЗначениеПоля,СтрДлина(ЗначениеПоля)-НачалоВхождения+1);
				КонецЕсли;
				ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ЗначениеПоля,СтрДлина(ВРег(Поиск))),Новый Шрифт(,,Истина), Новый Цвет(206,44,28)));
				ЗначениеПоля=Прав(ЗначениеПоля,СтрДлина(ЗначениеПоля)-СтрДлина(ВРег(Поиск)));
				Если СтрДлина(ЗначениеПоля)>0 Тогда
					ФорматированныеСтроки.Добавить(ЗначениеПоля);
				КонецЕсли;
				ТекстПредставление=Новый ФорматированнаяСтрока(ФорматированныеСтроки);
			Иначе
				ТекстПредставление=ЗначениеПоля;
			КонецЕсли;
			СписокОтбор.Добавить(Элемент.Значение,ТекстПредставление); 
		КонецЦикла;
		ДанныеВыбора=СписокОтбор;
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура АртикулРеализацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание<>0 И НЕ ПустаяСтрока(Текст) Тогда    
		СтандартнаяОбработка = Ложь;
		СписокОтбор=Новый СписокЗначений;
		Для Каждого Элемент Из Элементы.АртикулРеализация.СписокВыбора Цикл
			ФорматированныеСтроки = Новый Массив;
			ЗначениеПоля=Элемент.Значение;
			НачалоВхождения = Найти(ЗначениеПоля,ВРег(Текст));
			Если НачалоВхождения = 0 Тогда Продолжить; КонецЕсли;
			Если НЕ Объект.УТ111 Тогда
				Если НачалоВхождения > 1 Тогда
					ФорматированныеСтроки.Добавить(Лев(ЗначениеПоля,НачалоВхождения-1));
					ЗначениеПоля=Прав(ЗначениеПоля,СтрДлина(ЗначениеПоля)-НачалоВхождения+1);
				КонецЕсли;
				ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ЗначениеПоля,СтрДлина(ВРег(Текст))),Новый Шрифт(,,Истина), Новый Цвет(206,44,28)));
				ЗначениеПоля=Прав(ЗначениеПоля,СтрДлина(ЗначениеПоля)-СтрДлина(ВРег(Текст)));
				Если СтрДлина(ЗначениеПоля)>0 Тогда
					ФорматированныеСтроки.Добавить(ЗначениеПоля);
				КонецЕсли;
				ТекстПредставление=Новый ФорматированнаяСтрока(ФорматированныеСтроки);
			Иначе
				ТекстПредставление=ЗначениеПоля;
			КонецЕсли;
			СписокОтбор.Добавить(Элемент.Значение,ТекстПредставление); 
		КонецЦикла;
		ДанныеВыбора=СписокОтбор;
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Функция ПечатьЭтикеткиНаСервере() //gorod_alex
	Об=РеквизитФормыВЗначение("Объект");
	Макет=Об.ПолучитьМакет("Этикетка");
	Обл=Макет.ПолучитьОбласть("Этикетка");
	Таб = Новый ТабличныйДокумент;
	Для Каждого тСтр ИЗ Об.ТаблицаПоступленийОтбор Цикл
		Для Инд=1 По тСтр.КоличествоНаПечать Цикл
			Обл.Параметры.НомерЗаказа = тСтр.НомерЗаявки;
			Обл.Параметры.Клиент      = тСтр.ЗаказКлиента.Контрагент;
			Обл.Параметры.Бренд       = тСтр.Производитель;
			Обл.Параметры.Артикул     = тСтр.Артикул;
			СтрКоментарий = тСтр.ЗаказКлиента.Комментарий;
			СтрКоментарий = СтрЗаменить(СтрКоментарий,"(","");
			СтрКоментарий = СтрЗаменить(СтрКоментарий,")","");
			Обл.Параметры.Комментарий = СтрКоментарий;
			Обл.Параметры.Дата        = ТекущаяДата(); 	
			Обл.Параметры.Количество  = тСтр.Количество;
			Таб.Вывести(Обл);
			Таб.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;	
	КонецЦикла;
	Таб.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Таб.АвтоМасштаб = Истина;
	Таб.ПолеСверху = 0;
	Таб.ПолеСнизу = 0;
	Таб.ПолеСправа = 0;
	Таб.ПолеСлева = 0;
	Возврат Таб;
КонецФункции

&НаСервере
Функция ПечатьЭтикеткиШтрихкодыНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	НаименованиеМакета = "";
	//для печати на принтерах этикеток
	Если Лев(Объект.АдресСервиса, 5) = "id133" Тогда
		НаименованиеМакета ="ЭтикеткаШК_Milparts";
	ИначеЕсли Лев(Объект.АдресСервиса, 7) = "id13994" Тогда
		НаименованиеМакета = "ЭтикеткаШК_eparts";
	ИначеЕсли Лев(Объект.АдресСервиса, 6) = "id8704" Тогда
		НаименованиеМакета = "ЭтикеткаШК_8704";
	ИначеЕсли Лев(Объект.АдресСервиса, 7) = "id18406" Тогда
		НаименованиеМакета = "ЭтикеткаШК_18406";
	Иначе
		НаименованиеМакета = "ЭтикеткаШК";
	КонецЕсли;
	//сообщить(НаименованиеМакета);
	Макет = ОбработкаОбъект.ПолучитьМакет(НаименованиеМакета);
	Область = Макет.ПолучитьОбласть("Область");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	ШтрихкодыНоменклатуры.Штрихкод
	                |ИЗ
	                |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	                |ГДЕ
	                |	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
	Для Каждого ТекСтрока ИЗ Объект.ТаблицаПоступленийОтбор Цикл
		Для НС = 1 По ТекСтрока.КоличествоНаПечать Цикл
			НомерЗаказаABCP = ТекСтрока.НомерЗаявки;
			ДатаДокумента = ТекСтрока.ЗаказКлиента.Дата;
			НомерДокумента = ТекСтрока.ЗаказКлиента.Номер;
		    Бренд = ТекСтрока.Производитель;
			Артикул = ТекСтрока.Артикул;
			Наименование = ТекСтрока.Номенклатура.Наименование;	
			Контрагент = ТекСтрока.ЗаказКлиента.Контрагент;
			КодКонтрагента = Контрагент.Код;
			Номенклатура = ТекСтрока.Номенклатура;
			//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			//Результат = Запрос.Выполнить();
			//Если Результат.Пустой() Тогда
			//	Штрихкод = "";
			//Иначе
			//	Выборка = Результат.Выбрать();
			//	Выборка.Следующий();
			//	Штрихкод = Выборка.Штрихкод;
			//КонецЕсли;
			//https://helpf.pro/faq/view/1237.htm
			//http://forums.kuban.ru/f1040/ne_vyvoditsya_shtrih-kod-7804637.html
			//https://infostart.ru/public/198755/
			//http://programna1c.narod.ru/docs/Articles/BarcodeUprApp/BarcodeUprApp.html

			Если НаименованиеМакета <> "ЭтикеткаШК_8704" И НаименованиеМакета <> "ЭтикеткаШК_18406" И НаименованиеМакета <> "ЭтикеткаШК" Тогда
				Ширина = Окр(Область.Рисунки.ШК_НомерЗаказаABCP.Ширина * 5);
				Высота = Окр(Область.Рисунки.ШК_НомерЗаказаABCP.Высота * 5);
				
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина", Ширина);
				ПараметрыШтрихкода.Вставить("Высота", Высота);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
				ПараметрыШтрихкода.Вставить("РазмерШрифта", 12);
				
				ПараметрыШтрихкода.Вставить("Штрихкод", НомерЗаказаABCP);
				ПараметрыШтрихкода.Вставить("ТипКода", 1);
				Область.Рисунки.ШК_НомерЗаказаABCP.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				
				ПараметрыШтрихкода.Вставить("Штрихкод", НомерДокумента);
				ПараметрыШтрихкода.Вставить("ТипКода", 3);
				Область.Рисунки.ШК_НомерДокумента.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				
				ПараметрыШтрихкода.Вставить("Штрихкод", КодКонтрагента);
				ПараметрыШтрихкода.Вставить("ТипКода", 3);
				Область.Рисунки.ШК_НомерКонтрагента.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				
				ПараметрыШтрихкода.Вставить("Штрихкод", ""+НомерЗаказаABCP+"*"+НомерДокумента+"*"+КодКонтрагента);
				ПараметрыШтрихкода.Вставить("ТипКода", 4);

				Область.Рисунки.ШК_Общий.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				//Область.Рисунки.ШК_НомерЗаказаABCP.Объект.ТипКода = 1;//EAN 13
				//Область.Рисунки.ШК_НомерЗаказаABCP.Объект.ТекстКода = НомерЗаказаABCP;
				//Область.Рисунки.ШК_НомерДокумента.Объект.ТипКода = 3;//Code 39 - вдруг буквы попадутся
				//Область.Рисунки.ШК_НомерДокумента.Объект.ТекстКода = НомерДокумента;
				//Область.Рисунки.ШК_НомерКонтрагента.Объект.ТипКода = 3;//Code 39 - вдруг буквы попадутся
				//Область.Рисунки.ШК_НомерКонтрагента.Объект.ТекстКода = КодКонтрагента;
				//Область.Рисунки.ШК_Общий.Объект.ТипКода = 4;//Code 128
				//Область.Рисунки.ШК_Общий.Объект.ТекстКода = ""+НомерЗаказаABCP+"*"+НомерДокумента+"*"+КодКонтрагента;
			Иначе
				//Запрос.УстановитьПараметр("Номенклатура", ТекСтрока.Номенклатура);
				//Результат = Запрос.Выполнить();
				//Если Результат.Пустой() Тогда
				//	Штрихкод = "";
				//Иначе
				//	Выборка = Результат.Выбрать();
				//	Выборка.Следующий();
				//	Штрихкод = Выборка.Штрихкод;
				//КонецЕсли;
				Штрихкод = ТекСтрока.Штрихкод;
				Ширина = Окр(Область.Рисунки.ШК_Общий.Ширина * 5);
				Высота = Окр(Область.Рисунки.ШК_Общий.Высота * 5);
				
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина", Ширина);
				ПараметрыШтрихкода.Вставить("Высота", Высота);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
				ПараметрыШтрихкода.Вставить("РазмерШрифта", 12);
				ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихКод);
				ПараметрыШтрихкода.Вставить("ТипКода", 1);

				Область.Рисунки.ШК_Общий.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				
			КонецЕсли;
			ИдентификаторКонтрагента = ОбработкаОбъект.ПолучитьИдентификаторКонтрагента(Контрагент);
			//сообщить(ИдентификаторКонтрагента);
			Если НаименованиеМакета <> "ЭтикеткаШК_eparts" Тогда
				Область.Параметры.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
				Область.Параметры.Количество = ТекСтрока.Количество;
				Область.Параметры.Поставщик = ТекСтрока.Поставщик;
				Область.Параметры.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			Область.Параметры.ДатаДокумента = ДатаДокумента;
			Область.Параметры.НомерДокумента = НомерДокумента;
			Область.Параметры.Бренд = Бренд;
			Область.Параметры.Артикул = Артикул;
			Область.Параметры.Наименование = Наименование;
			Область.Параметры.Контрагент = Контрагент;
			

			ТабличныйДокумент.Вывести(Область);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;	
	КонецЦикла;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	ТабличныйДокумент.ПолеСлева = 0;
	Возврат ТабличныйДокумент;
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьПозиций()
	Структура = Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	НайденныеСтроки = Объект.ТаблицаПриход.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		сообщить(""+НайденнаяСтрока.НомерСтроки+" не заполнена номенклатура "+НайденнаяСтрока.Артикул+" "+НайденнаяСтрока.Производитель);
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПечатьЭтикеткиШтрихкодыНаСервере_до_Milparts()
	//для печати на принтерах этикеток
	Об = РеквизитФормыВЗначение("Объект");
	Макет = Об.ПолучитьМакет("ЭтикеткаШК");
	Область = Макет.ПолучитьОбласть("Область");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	ШтрихкодыНоменклатуры.Штрихкод
	                |ИЗ
	                |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	                |ГДЕ
	                |	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
	Для Каждого ТекСтрока ИЗ Об.ТаблицаПоступленийОтбор Цикл
		Для НС = 1 По ТекСтрока.КоличествоНаПечать Цикл
			НомерЗаказаABCP = ТекСтрока.НомерЗаявки;
			ДатаДокумента = ТекСтрока.ЗаказКлиента.Дата;
			НомерДокумента = ТекСтрока.ЗаказКлиента.Номер;
		    Бренд = ТекСтрока.Производитель;
			Артикул = ТекСтрока.Артикул;
			Наименование = ТекСтрока.Номенклатура.Наименование;	
			Контрагент = ТекСтрока.ЗаказКлиента.Контрагент;
			КодКонтрагента = Контрагент.Код;
			Номенклатура = ТекСтрока.Номенклатура;
			//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			//Результат = Запрос.Выполнить();
			//Если Результат.Пустой() Тогда
			//	Штрихкод = "";
			//Иначе
			//	Выборка = Результат.Выбрать();
			//	Выборка.Следующий();
			//	Штрихкод = Выборка.Штрихкод;
			//КонецЕсли;
			//https://helpf.pro/faq/view/1237.htm
			//http://forums.kuban.ru/f1040/ne_vyvoditsya_shtrih-kod-7804637.html
			//https://infostart.ru/public/198755/
			//http://programna1c.narod.ru/docs/Articles/BarcodeUprApp/BarcodeUprApp.html
			
			Ширина = Окр(Область.Рисунки.ШК_НомерЗаказаABCP.Ширина * 5);
			Высота = Окр(Область.Рисунки.ШК_НомерЗаказаABCP.Высота * 5);
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("Ширина", Ширина);
			ПараметрыШтрихкода.Вставить("Высота", Высота);
			ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
			ПараметрыШтрихкода.Вставить("РазмерШрифта", 12);
			
			ПараметрыШтрихкода.Вставить("Штрихкод", НомерЗаказаABCP);
			ПараметрыШтрихкода.Вставить("ТипКода", 1);
			Область.Рисунки.ШК_НомерЗаказаABCP.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);

			ПараметрыШтрихкода.Вставить("Штрихкод", НомерДокумента);
			ПараметрыШтрихкода.Вставить("ТипКода", 3);
			Область.Рисунки.ШК_НомерДокумента.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			
			ПараметрыШтрихкода.Вставить("Штрихкод", КодКонтрагента);
			ПараметрыШтрихкода.Вставить("ТипКода", 3);
			Область.Рисунки.ШК_НомерКонтрагента.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			
			ПараметрыШтрихкода.Вставить("Штрихкод", ""+НомерЗаказаABCP+"*"+НомерДокумента+"*"+КодКонтрагента);
			ПараметрыШтрихкода.Вставить("ТипКода", 4);
			Область.Рисунки.ШК_Общий.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			//Область.Рисунки.ШК_НомерЗаказаABCP.Объект.ТипКода = 1;//EAN 13
			//Область.Рисунки.ШК_НомерЗаказаABCP.Объект.ТекстКода = НомерЗаказаABCP;
			//Область.Рисунки.ШК_НомерДокумента.Объект.ТипКода = 3;//Code 39 - вдруг буквы попадутся
			//Область.Рисунки.ШК_НомерДокумента.Объект.ТекстКода = НомерДокумента;
			//Область.Рисунки.ШК_НомерКонтрагента.Объект.ТипКода = 3;//Code 39 - вдруг буквы попадутся
			//Область.Рисунки.ШК_НомерКонтрагента.Объект.ТекстКода = КодКонтрагента;
			//Область.Рисунки.ШК_Общий.Объект.ТипКода = 4;//Code 128
			//Область.Рисунки.ШК_Общий.Объект.ТекстКода = ""+НомерЗаказаABCP+"*"+НомерДокумента+"*"+КодКонтрагента;
			Область.Параметры.НомерЗаказаABCP = НомерЗаказаABCP;
			Область.Параметры.ДатаДокумента = ДатаДокумента;
			Область.Параметры.НомерДокумента = НомерДокумента;
			Область.Параметры.Бренд = Бренд;
			Область.Параметры.Артикул = Артикул;
			Область.Параметры.Наименование = Наименование;
			Область.Параметры.Контрагент = Контрагент;
			ТабличныйДокумент.Вывести(Область);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;	
	КонецЦикла;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	ТабличныйДокумент.ПолеСлева = 0;
	Возврат ТабличныйДокумент;
КонецФункции

&НаКлиенте
Процедура ПечатьЭтикетки(Команда) //gorod_alex
	Таб=ПечатьЭтикеткиШтрихкодыНаСервере();
	//Таб=ПечатьЭтикеткиШтрихкодыНаСервере();
	//Таб=ПечатьЭтикеткиНаСервере();
	Таб.Показать();
КонецПроцедуры

//++ Serg
&НаКлиенте  
Процедура ПечатьЭтикеткиМеста(Команда)
	Таб=ПечатьЭтикеткиМестаНаСервере();
	//Таб=ПечатьЭтикеткиНаСервере();
	Таб.Показать();
КонецПроцедуры

&НаСервере
Функция ПечатьЭтикеткиМестаНаСервере()
	//для печати на принтерах этикеток
	Об = РеквизитФормыВЗначение("Объект");
	Если Лев(Объект.АдресСервиса, 5) = "id133" Тогда
		Макет = Об.ПолучитьМакет("ЭтикеткаМеста_Milparts");
	Иначе
		Макет = Об.ПолучитьМакет("ЭтикеткаМеста");
	КонецЕсли;
	Область = Макет.ПолучитьОбласть("Область");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ВсегоМест = Об.КоличествоМест;
	Контрагент = Об.Клиент;
	
	ДанныеКонтрагента = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Контрагент,  ТекущаяДата()); 	
	ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеКонтрагента,"ЮридическийАдрес");
	
	а = 1;
	Пока а <= ВсегоМест Цикл
			
			Область.Параметры.Контрагент = Контрагент;
			Область.Параметры.ГородКлиента = 	ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеКонтрагента,"ЮридическийАдрес");
			Область.Параметры.Контакт = 	ФормированиеПечатныхФорм.ОписаниеОрганизации(ДанныеКонтрагента,"Телефоны");
			Область.Параметры.Место = а;
			Область.Параметры.ВсегоМест = ВсегоМест;
			Область.Параметры.ДатаДока = ТекущаяДата();

			ТабличныйДокумент.Вывести(Область);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		а = а+1;	
	КонецЦикла;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	ТабличныйДокумент.ПолеСлева = 0;
	Возврат ТабличныйДокумент;
КонецФункции
//-- Serg

&НаКлиенте
Процедура ТаблицаПоступленийОтборpaymentNumberОткрытие(Элемент, СтандартнаяОбработка)
	НомерПлатежа = Элемент.ТекстРедактирования;
	ЗапуститьПриложение("https://cp.abcp.ru/?page=financeModule&payments=&filterPaymentNumber="+НомерПлатежа);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Функция НайтиДобавитьБизнесРегион(БизнесРегион);
	Если БизнесРегион = "" Тогда
		Возврат Справочники.БизнесРегионы.ПустаяСсылка();
	КонецЕсли;
	Спр = Справочники.БизнесРегионы.НайтиПоНаименованию(СокрЛП(БизнесРегион));
	Если Спр = Справочники.БизнесРегионы.ПустаяСсылка() Тогда
		Спр = Справочники.БизнесРегионы.СоздатьЭлемент();
		Спр.Наименование = БизнесРегион;
		Спр.Записать();
		Возврат Спр.Ссылка;
	Иначе
		Возврат Спр.Ссылка;
	КонецЕсли;
КонецФункции //НайтиДобавитьБизнесРегион

&НаСервере
Процедура ОбновитьДанныеКлиентовНаСервере()
	//по выделенным галочкам загружаем клиентов и обновляем по ним данные
	//СписокИдентификаторов = Новый СписокЗначений;
	Структура = Новый Структура("Обновить", Истина);
	НайденныеСтроки = Объект.ТаблицаКлиентов.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() = 0 Тогда
		сообщить("Никто не отмечен");
		Возврат;
	КонецЕсли;
	Если НайденныеСтроки.Количество() > 50 Тогда
		сообщить("Нельзя обновлять больше 50 клиентов сразу");
		Возврат;
	КонецЕсли;
	ПереченьИдентификаторов = "";
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ПереченьИдентификаторов = ПереченьИдентификаторов + "&customersIds[]=" + Формат(НайденнаяСтрока.ИдентификаторКонтрагента, "ЧГ=0");
	КонецЦикла;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ТаблицаКлиентов.Очистить();
	//Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ВернутьТаблицуКлиентовССайта(Ложь, ПереченьИдентификаторов).Выгрузить());
	ОбработкаОбъект.ЗаполнитьТаблицуКлиентовССайта(Ложь, ПереченьИдентификаторов);
	Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ТаблицаКлиентов.Выгрузить());
	
	//проходим по всем и обновляем наименование, ИНН, КПП, РегистрационныйНомер, контактную информацию
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из Объект.ТаблицаКлиентов Цикл
		Контрагент = ОбработкаОбъект.НайтиКонтрагентаПоИдентификатору(ТекСтрока.ИдентификаторКонтрагента);
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию();
		Партнер = Контрагент.Партнер.ПолучитьОбъект();
		Контрагент = Контрагент.ПолучитьОбъект();
		ЗаписьВЛог("Обновление данных контрагента "+ТекСтрока.ИдентификаторКонтрагента,,Истина);
		Контрагент.Наименование = ТекСтрока.НаименованиеОрганизации;
		Контрагент.НаименованиеПолное = ТекСтрока.НаименованиеОрганизации;
		Если ТекСтрока.ИНН<>"" Тогда
			Контрагент.ИНН = ТекСтрока.ИНН;
		КонецЕсли;
		Если ТекСтрока.КПП<>"" Тогда
			Контрагент.КПП = ТекСтрока.КПП;
		КонецЕсли;
		Если ТекСтрока.ОГРН<>"" Тогда
			Контрагент.РегистрационныйНомер = ТекСтрока.ОГРН;
		КонецЕсли;
		organizationAccount = ТекСтрока.organizationAccount;
		Если organizationAccount<>"" Тогда
			bankName = ТекСтрока.bankName;//Наименование банка
			bik = ТекСтрока.bik;//БИК банка
			correspondentAccount = ТекСтрока.correspondentAccount;//Корреспондентский счет банка
			БанковскийСчетКонтрагента = ОбработкаОбъект.НайтиДобавитьБанковскийСчет(Контрагент.Ссылка, bik, bankName, correspondentAccount, organizationAccount);
		КонецЕсли;
		//Контрагент.КонтактнаяИнформация.Очистить();
		//Партнер.КонтактнаяИнформация.Очистить();
		
		
		
		лАдрес = СокрЛП(ТекСтрока.АдресДоставки);
		Если лАдрес <> "" Тогда
			Представление = лАдрес;
			
			ФактАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ФактАдресКонтрагента);
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, ФактАдресКонтрагента, ФактАдресКонтрагента.Тип);
			
		КонецЕсли;
		
		ЮридическийАдрес = ТекСтрока.ЮридическийАдрес;
		Если ЮридическийАдрес <> "" Тогда
			Представление = ЮридическийАдрес;
			
			ЮрАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ЮрАдресКонтрагента);
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, ЮрАдресКонтрагента, ЮрАдресКонтрагента.Тип);
			
			АдресПартнера = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, АдресПартнера);
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, АдресПартнера, АдресПартнера.Тип);
			
			Партнер.БизнесРегион = НайтиДобавитьБизнесРегион(ТекСтрока.Город);//если не сайта, то не добавляет
		КонецЕсли;
		
		МобильныйТелефон = ТекСтрока.МобильныйТелефон;
		Если МобильныйТелефон <> "" Тогда
			Представление = МобильныйТелефон;//"+7 ("+Сред(МобильныйТелефон,2,3)+") "+Сред(МобильныйТелефон,5,3)+"-"+Сред(МобильныйТелефон,8,2)+"-"+Сред(МобильныйТелефон,10,2);
			ТелефонКонтрагента = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;

			ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ТелефонКонтрагента);
			ОбъектXDTOКИ.Комментарий = МобильныйТелефон;
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, ТелефонКонтрагента, ТелефонКонтрагента.Тип);
			
			ТелефонПартнера = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ТелефонПартнера);
			ОбъектXDTOКИ.Комментарий = МобильныйТелефон;
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, ТелефонПартнера, ТелефонПартнера.Тип);
		КонецЕсли;
		
		Email = ТекСтрока.Email;//главное, чтобы у партнера было заполнено
		Если Email <> "" Тогда
			Представление = Email;
			
			EmailКонтрагента = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, EmailКонтрагента);
			ОбъектXDTOКИ.Комментарий = Email;
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, EmailКонтрагента, EmailКонтрагента.Тип);
			
			EmailПартнера = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, EmailПартнера);
			ОбъектXDTOКИ.Комментарий = Email;
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, EmailПартнера, EmailПартнера.Тип);
		КонецЕсли;
		
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("employeeId (Контрагенты)");
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Контрагент.Ссылка;
		МенеджерЗаписи.Свойство = Свойство;
		МенеджерЗаписи.Значение = ТекСтрока.ИдентификаторМенеджера;
		МенеджерЗаписи.Записать();
		
		//СтрокиДополнительныеРеквизиты = НовСтрока.Контрагент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство.Ссылка));
		СтрокаДополнительныеРеквизиты = Контрагент.ДополнительныеРеквизиты.Добавить();
		СтрокаДополнительныеРеквизиты.Свойство = Свойство;
		СтрокаДополнительныеРеквизиты.Значение = ТекСтрока.ИдентификаторМенеджера;
		СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = Формат(ТекСтрока.ИдентификаторМенеджера,"ЧГ=0");
		
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор склада контрагента (Контрагенты)");
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Контрагент.Ссылка;
		МенеджерЗаписи.Свойство = Свойство;
		МенеджерЗаписи.Значение = ТекСтрока.office;
		МенеджерЗаписи.Записать();
		
		СтрокаДополнительныеРеквизиты = Контрагент.ДополнительныеРеквизиты.Добавить();
		СтрокаДополнительныеРеквизиты.Свойство = Свойство;
		СтрокаДополнительныеРеквизиты.Значение = ТекСтрока.office;
		СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = Формат(ТекСтрока.office,"ЧГ=0");
		
		Контрагент.Записать();
		Партнер.Записать();
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	//
	//
	//
	//Партнер.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКлиентов(Команда)
	ОбновитьДанныеКлиентовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	ОбработатьШтрихкоды(ДанныхШтрихкода);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	//ДанныеШтрихкодов.Штрихкод
	//сообщить();
	//сообщить("Не реализовано "+ДанныеШтрихкодов);
	Если ЭтаФорма.ТекущийЭлемент.Имя = "ПоискПоШтрихкодуПоступление" Тогда
		ЭтоПоступление = Истина;
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "ПоискПоШтрихкодуРеализация" Тогда
		ЭтоПоступление = Ложь;
		ЭтоРеализация = Истина;
	Иначе
		сообщить("Нет обработчика для "+ЭтаФорма.ТекущийЭлемент.Имя);
		Возврат;
	КонецЕсли;
	СтруктураШК = Новый Структура("Штрихкод", ДанныеШтрихкодов.Штрихкод);
	Если ЭтоПоступление Тогда
		СтрокиВнизу = Объект.ТаблицаПоступлений.НайтиСтроки(СтруктураШК);
	Иначе
		СтрокиВнизу = Объект.ТаблицаРеализаций.НайтиСтроки(СтруктураШК);
	КонецЕсли;
	Если СтрокиВнизу.Количество() = 0 Тогда
		Возврат;//не нашли ш/к
	КонецЕсли;
	СтрокаВнизу = СтрокиВнизу[0];
	СтруктураКодСтроки = Новый Структура("КодСтроки", СтрокаВнизу.КодСтроки);
	Если ЭтоПоступление Тогда
		СтрокиКодСтроки = Объект.ТаблицаПоступленийОтбор.НайтиСтроки(СтруктураКодСтроки);
	Иначе
		СтрокиКодСтроки = Объект.ТаблицаРеализацийОтбор.НайтиСтроки(СтруктураКодСтроки);
	КонецЕсли;
	Если СтрокиКодСтроки.Количество() = 0 Тогда
		Если ЭтоПоступление Тогда
			НовСтрока = Объект.ТаблицаПоступленийОтбор.Добавить();
		Иначе
			НовСтрока = Объект.ТаблицаРеализацийОтбор.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаВнизу);
		//Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
		//	НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
		//КонецЕсли;
		НовСтрока.Количество = 1;
		НовСтрока.ИсходноеКоличество = 1;//для разделения заказов
		НовСтрока.КоличествоНаПечать = 1;//gorod_alex
	Иначе
		НовСтрока = СтрокиКодСтроки[0];
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаВнизу);
		Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
			НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
		КонецЕсли;
		НовСтрока.Количество = НовСтрока.Количество + 1;//для разделения заказов
		НовСтрока.ИсходноеКоличество = НовСтрока.ИсходноеКоличество + 1;//для разделения заказов
		НовСтрока.КоличествоНаПечать = 1;//gorod_alex
	КонецЕсли;
	НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
	НовСтрока.ИсходнаяЦенаЗакупки = НовСтрока.ЦенаЗакупки;
	НовСтрока.ИсходнаяЦенаПродажи = НовСтрока.ЦенаПродажи;
	НовСтрока.ВДокумент = Истина;
	Если СтрокаВнизу.Количество>1 Тогда
		СтрокаВнизу.Количество = СтрокаВнизу.Количество - 1;
	Иначе
		Объект.ТаблицаПоступлений.Удалить(СтрокаВнизу);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовИдентификаторОсновногоПоставщикаПриИзменении(Элемент)
	Режим = РежимДиалогаВопрос.ДаНет;
	ТД = ЭтаФорма.Элементы.ТаблицаСкладов.ТекущиеДанные;
	Если ТД.ИдентификаторПоставщика = ТД.ИдентификаторОсновногоПоставщика Тогда
		ТД.ИдентификаторОсновногоПоставщика = 0;
		ПоказатьОповещениеПользователя(,,"Нельзя выбирать одинаковые идентификаторы");
		Возврат;
	КонецЕсли;
	//Параметры.Вставить("maindistributorId", ТД.ИдентификаторОсновногоПоставщика);
	//Параметры.Вставить("distributorId", ТД.ИдентификаторПоставщика);
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаИдентификаторОсновногоПоставщика", ЭтаФорма, Параметры);
	Если ТД.ИдентификаторОсновногоПоставщика = 0 Или НЕ ЗначениеЗаполнено(ТД.ОсновнойКонтрагент) Тогда
		ТД = ЭтаФорма.Элементы.ТаблицаСкладов.ТекущиеДанные;
		ТД.ОсновнойКонтрагент = УстановитьОсновногоПоставщика(ТД.Контрагент, ТД.ИдентификаторПоставщика, ТД.ОсновнойКонтрагент, ТД.ИдентификаторОсновногоПоставщика);
	Иначе
		ПоказатьВопрос(Оповещение, "Для этого поставщика будет установлен основной поставщик с ид. """ +Формат(ТД.ИдентификаторОсновногоПоставщика,"ЧГ=0")+""", продолжить?", Режим, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаИдентификаторОсновногоПоставщика(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	Н = ЭтаФорма.Элементы.ТаблицаСкладов.ВыделенныеСтроки.Количество();
	Если Н = 0 Тогда
		//сообщить("Ничего не выделено");
		Возврат;
	КонецЕсли;
	Если Н = 1 Тогда
		ТД = ЭтаФорма.Элементы.ТаблицаСкладов.ТекущиеДанные;
		ТД.ОсновнойКонтрагент = УстановитьОсновногоПоставщика(ТД.Контрагент, ТД.ИдентификаторПоставщика, ТД.ОсновнойКонтрагент, ТД.ИдентификаторОсновногоПоставщика);
		СохранитьНастройкиДляРегламентногоЗаданияНаСервере();
		//сообщить("Ничего не выделено");
		Возврат;
	КонецЕсли;
	
	ТД = 0;
	Для Каждого НС Из ЭтаФорма.Элементы.ТаблицаСкладов.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.ТаблицаСкладов.НайтиПоИдентификатору(НС);
		Если ТД = 0 Тогда
			Если СтрокаТаблицы.ИдентификаторОсновногоПоставщика = 0 Тогда
				сообщить("не заполнен ид.осн.поставщика в строке "+СтрокаТаблицы.ИдентификаторПоставщика);
				Прервать;
			КонецЕсли;
			ТД = СтрокаТаблицы;
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.ИдентификаторОсновногоПоставщика = ТД.ИдентификаторОсновногоПоставщика;
		ТД.ОсновнойКонтрагент = УстановитьОсновногоПоставщика(ТД.Контрагент, ТД.ИдентификаторПоставщика, ТД.ОсновнойКонтрагент, ТД.ИдентификаторОсновногоПоставщика);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция УстановитьОсновногоПоставщика(Контрагент, ИдПоставщика, ОсновнойКонтрагент, ИдентификаторОсновногоПоставщика)
	Если ЗначениеЗаполнено(ИдентификаторОсновногоПоставщика) Тогда
		//ищем Контрагента с этим ид
		Структура = Новый Структура("ИдентификаторПоставщика", ИдентификаторОсновногоПоставщика);
		СтрокиТаблицы = Объект.ТаблицаСкладов.НайтиСтроки(Структура);
		Кол = СтрокиТаблицы.Количество();
		Если Кол = 0 Тогда
			ЗаписьВЛог("В колонке «Идентификатор поставщика» нет такого идентификатора, связь будет некорректной",,Истина);
		Иначе
			Если Кол > 1 Тогда
				ЗаписьВЛог("В колонке «Идентификатор поставщика» дублируется идентификатор "+ИдентификаторОсновногоПоставщика+", в количестве "+Кол+"шт., связь будет некорректной",,Истина);
			КонецЕсли;
			ОсновнойКонтрагент = СтрокиТаблицы[0].Контрагент;
			Если НЕ ЗначениеЗаполнено(ОсновнойКонтрагент) Тогда
				ЗаписьВЛог("У идентификатора "+ИдПоставщика+" нет контрагента, связь будет некорректной",,Истина);
			Иначе
				Структура = Новый Структура("ИдентификаторОсновногоПоставщика", ИдентификаторОсновногоПоставщика);
				СтрокиТаблицы = Объект.ТаблицаСкладов.НайтиСтроки(Структура);
				Для Каждого СтрокаТаблицы Из СтрокиТаблицы  Цикл
					СтрокаТаблицы.ОсновнойКонтрагент = ОсновнойКонтрагент;
				КонецЦикла;
			КонецЕсли;
			Возврат ОсновнойКонтрагент;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Контрагенты.ПустаяСсылка();
КонецФункции

&НаКлиенте
Процедура ТаблицаСкладовОсновнойКонтрагентПриИзменении(Элемент)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОсновнойКонтрагент", ЭтаФорма, Параметры);
	ТД = ЭтаФорма.Элементы.ТаблицаСкладов.ТекущиеДанные;
	Если ТД.ИдентификаторОсновногоПоставщика = 0 Или НЕ ЗначениеЗаполнено(ТД.ОсновнойКонтрагент) Тогда
		ТД.ИдентификаторОсновногоПоставщика = УстановитьИдентификаторОсновногоПоставщика(ТД.Контрагент, ТД.ОсновнойКонтрагент);
		СохранитьНастройкиДляРегламентногоЗаданияНаСервере();
	Иначе
		ПоказатьВопрос(Оповещение, "Для этого поставщика будет установлен основной поставщик «" +СокрЛП(ТД.ОсновнойКонтрагент)+"», продолжить?", Режим, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОсновнойКонтрагент(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	ТД = ЭтаФорма.Элементы.ТаблицаСкладов.ТекущиеДанные;
	ТД.ИдентификаторОсновногоПоставщика = УстановитьИдентификаторОсновногоПоставщика(ТД.Контрагент, ТД.ОсновнойКонтрагент);//, ТД.ИдентификаторПоставщика, ТД.ИдентификаторОсновногоПоставщика);
	СохранитьНастройкиДляРегламентногоЗаданияНаСервере();
КонецПроцедуры 

&НаСервере
Функция УстановитьИдентификаторОсновногоПоставщика(Контрагент, ОсновнойКонтрагент)
	//в таблице ищем строки, где есть основной контрагент, но не заполнен ид.основного контрагента
	//чтобы при загрузке данных сразу подменять на основного поставщика
	Если ЗначениеЗаполнено(ОсновнойКонтрагент) Тогда
		//ищем ИдентификаторПоставщика
		Структура = Новый Структура("Контрагент", ОсновнойКонтрагент);
		СтрокиТаблицы = Объект.ТаблицаСкладов.НайтиСтроки(Структура);
		Кол = СтрокиТаблицы.Количество();
		Если Кол = 0 Тогда
			ЗаписьВЛог("В колонке «Контрагент» нет контрагента "+ОсновнойКонтрагент+", связь будет некорректной",,Истина);
		Иначе
			Если Кол > 1 Тогда
				ЗаписьВЛог("В колонке «Контрагент» дублируется контрагент "+ОсновнойКонтрагент+", в количестве "+Кол+"шт., связь будет некорректной",,Истина);
			КонецЕсли;
			ИдПоставщика = СтрокиТаблицы[0].ИдентификаторПоставщика;
			Если ИдПоставщика = 0 Тогда
				ЗаписьВЛог("У контрагента :"+ОсновнойКонтрагент+", нет идентификатора, связь будет некорректной",,Истина);
			Иначе
				Структура = Новый Структура("ОсновнойКонтрагент", ОсновнойКонтрагент);
				СтрокиТаблицы = Объект.ТаблицаСкладов.НайтиСтроки(Структура);
				Для Каждого СтрокаТаблицы Из СтрокиТаблицы  Цикл
					СтрокаТаблицы.ИдентификаторОсновногоПоставщика = ИдПоставщика;
				КонецЦикла;
			КонецЕсли;
			Возврат ИдПоставщика;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

&НаСервере
Процедура СоздатьНоменклатуруДляПоступленияНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	               |ГДЕ
	               |	УпаковкиЕдиницыИзмерения.Владелец = &Владелец";
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	НеСоздаватьПапкиНоменклатуры = Объект.НеСоздаватьПапкиНоменклатуры;
	ИспользоватьОрдерныеСклады = Объект.ИспользоватьОрдерныеСклады;
	НаборУпаковок = Объект.НаборУпаковок;
	
	НачатьТранзакцию();
	НС = 0;
	МассивЯчеек = Новый Массив;
	Для Каждого СтрокаНоменклатуры Из Объект.ТаблицаПриход Цикл
		НС = НС + 1;
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры.Номенклатура) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры.Производитель) Тогда
				Если СтрокаНоменклатуры.ПроизводительСтрокой = "" Тогда
					//в УПД нет производителя, поэтому ищем его по артикулу
					Ном = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", СтрокаНоменклатуры.Артикул);
					Если ЗначениеЗаполнено(Ном) Тогда
						СтрокаНоменклатуры.Производитель = Ном.Производитель;
					КонецЕсли;
				Иначе
					СтрокаНоменклатуры.Производитель = НайтиДобавитьПроизводителяИзКлиента(СтрокаНоменклатуры.ПроизводительСтрокой);
				КонецЕсли;
			КонецЕсли;
			Ном = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(СтрокаНоменклатуры.Артикул, СтрокаНоменклатуры.Производитель,, СтрокаНоменклатуры.Наименование,,,,СтрокаНоменклатуры.Вес);
			Если Не ЗначениеЗаполнено(СтрокаНоменклатуры.Производитель) Тогда
				СтрокаНоменклатуры.Производитель = СтрокаНоменклатуры.Номенклатура.Производитель;
			КонецЕсли;
			СтрокаНоменклатуры.Номенклатура = Ном;
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.НомерГТД) Тогда
				Если НЕ Ном.ВестиУчетПоГТД Тогда
					Об = Ном.ПолучитьОбъект();
					Об.ВестиУчетПоГТД = Истина;
					Об.Записать();
				КонецЕсли;
			Конецесли;
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.Номенклатура) Тогда
				Если ЗначениеЗаполнено(СтрокаНоменклатуры.ТНВЭД) И Не ЗначениеЗаполнено(СтрокаНоменклатуры.Номенклатура.КодТНВЭД) Тогда
					Об = СтрокаНоменклатуры.Номенклатура.ПолучитьОбъект();
					Об.ОбменДанными.Загрузка = Истина;
					Об.КодТНВЭД = СтрокаНоменклатуры.ТНВЭД;
					Об.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.ШтрихКод) Тогда
			МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.Номенклатура = СтрокаНоменклатуры.Номенклатура; 
			//Если НЕ ЗначениеЗаполнено(НаборУпаковок) Тогда
			//	Запрос.УстановитьПараметр("Владелец", Ном.Ссылка);
			//	Результат = Запрос.Выполнить();
			//	Если Не Результат.Пустой() Тогда
			//		Выборка = Результат.Выбрать();
			//		Выборка.Следующий();
			//		Спр = Выборка.Ссылка;
			//	КонецЕсли;
			//	Если ИспользоватьОрдерныеСклады И Спр<>Неопределено Тогда
			//		МенеджерЗаписи.Упаковка = Спр.Ссылка;//Номенклатура.ЕдиницаИзмерения;
			//	КонецЕсли;
			//КонецЕсли;
			МенеджерЗаписи.Штрихкод = СтрокаНоменклатуры.ШтрихКод; 
			МенеджерЗаписи.Записать(); 
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.Ячейка) Тогда
			Если МассивЯчеек.Найти(СтрокаНоменклатуры.Ячейка) = Неопределено Тогда
				МассивЯчеек.Добавить(СтрокаНоменклатуры.Ячейка);
			КонецЕсли;
		КонецЕсли;
		Если НС % 500 = 0 Тогда
			ЗаписьВЛог("Создано позиций: "+НС+", последняя созданная "+СтрокаНоменклатуры.Артикул+", "+СтрокаНоменклатуры.ПроизводительСтрокой);
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	//если хранение по ячейкам, то создаем ячейки у подчиненного склада.
	НачатьТранзакцию();
	Структура = Новый Структура("Ячейка");
	Если МассивЯчеек.Количество() > 0 Тогда
		Для Каждого Элемент Из МассивЯчеек Цикл
			НайденнаяЯчейка = Справочники.СкладскиеЯчейки.НайтиПоНаименованию(Элемент, Истина, ,Объект.Склад);
			Если Не ЗначениеЗаполнено(НайденнаяЯчейка) Тогда
				Об = Справочники.СкладскиеЯчейки.СоздатьЭлемент();
				Об.Владелец = Объект.Склад;
				Об.Код = Элемент;
				Об.Наименование = Элемент;
				Об.ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Хранение;
				Об.УровеньДоступности = 1;
				Об.МаксимальныйКоэффициентНаполненностиПоВесу = 100;
				Об.МаксимальныйКоэффициентНаполненностиПоОбъему = 100;
				//делим через :
				Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элемент, ":");
				Значений = Массив.Количество();
				Если Значений>0 Тогда
					Об.Линия = Массив[0];
				КонецЕсли;
				Если Значений>1 Тогда
					Об.Стеллаж = Массив[1];
				КонецЕсли;
				Если Значений>2 Тогда
					Об.Ярус = Массив[2];
				КонецЕсли;
				Если Значений>3 Тогда
					Об.Позиция = Массив[3];
				КонецЕсли;
				Об.Записать();
				НайденнаяЯчейка = Об.Ссылка;
			КонецЕсли;
			Если НайденнаяЯчейка.Линия = "" Тогда
				Об = НайденнаяЯчейка.ПолучитьОбъект();
				//делим через :
				Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элемент, ":");
				Значений = Массив.Количество();
				Если Значений>0 Тогда
					Об.Линия = Массив[0];
				КонецЕсли;
				Если Значений>1 Тогда
					Об.Стеллаж = Массив[1];
				КонецЕсли;
				Если Значений>2 Тогда
					Об.Ярус = Массив[2];
				КонецЕсли;
				Если Значений>3 Тогда
					Об.Позиция = Массив[3];
				КонецЕсли;
				Об.Записать();
			КонецЕсли;
			Структура.Ячейка = Элемент;
			НайденныеСтроки = Объект.ТаблицаПриход.НайтиСтроки(Структура);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ЯчейкаСсылка = НайденнаяЯчейка.Ссылка;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	ПроверитьГТДуНоменклатуры();//а то не всегда добавляет
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруДляПоступления(Команда)
	//надо проверить, если нет бренда, надо будет дозаполнить его
	СоздатьНоменклатуруДляПоступленияНаСервере();
	Если Объект.КолонкаЯчейка>0 Тогда
		ЗаполнитьРазмещениеНоменклатурыПоСкладскимЯчейкам();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазмещениеНоменклатурыПоСкладскимЯчейкам() //Размещение номенклатуры по ячейкам (справочно)
	//НачатьТранзакцию();
	НС = 0;
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаПриход Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И ЗначениеЗаполнено(СтрокаТаблицы.ЯчейкаСсылка) Тогда
			МенеджерЗаписи = РегистрыСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Номенклатура = СтрокаТаблицы.Номенклатура;
			МенеджерЗаписи.Склад = Объект.Склад;
			МенеджерЗаписи.Помещение = Объект.Помещение;
			МенеджерЗаписи.Ячейка = СтрокаТаблицы.ЯчейкаСсылка;
			МенеджерЗаписи.ОсновнаяЯчейка = Истина;
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				МенеджерЗаписи.ОсновнаяЯчейка = Ложь;
				МенеджерЗаписи.Записать();
			КонецПопытки;
			НС = НС + 1;
			//Если НС % 100 = 0 Тогда
			//	ЗафиксироватьТранзакцию();
			//	НачатьТранзакцию();
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаСервере
Функция ЗаказыПоставщикуПоСтатусуНаСервере()
	//Если Объект.СтатусПередЗаказомПоставщику = 0 Тогда
	//	сообщить("Выберите статус для отбора");
	//	Возврат;
	//КонецЕсли;
	Массив = Новый Массив;
	Если Объект.СтатусПослеЗаказаПоставщику = 0 Тогда
		сообщить("Выберите новый статус для заказа поставщику");
		Возврат Массив;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ИдПоставщика = ОбработкаОбъект.НайтиСвойствоКонтрагента(Объект.Поставщик, "distributorId (Контрагенты)");
	Если Не ЗначениеЗаполнено(ИдПоставщика) Тогда
		сообщить("Не найден идентификатор поставщика: "+Объект.Поставщик);
		Возврат Массив;
	КонецЕсли;
	Объект.ТаблицаЗаказовПоставщикамОтбор.Очистить();
	Объект.ТаблицаЗаказовПоставщикам.Очистить();
	//отбираем за период заказы в статусе
	ДатаНачала = НачалоДня(ТекущаяДата())-Объект.ГлубинаПросмотраДляЗаказовПоставщику*24*3600;
	ДатаОкончания = ТекущаяДата();
	Структура = Новый Структура("ОтборЗаказовПоставщику", Истина);
	СтрокиСНужнымСтатусом = Объект.ТаблицаСтатусов.НайтиСтроки(Структура);
	Если СтрокиСНужнымСтатусом.Количество() = 0 Тогда
		сообщить("Не найдены отборы реализации в таблице статусов");
		Возврат Массив;
	КонецЕсли;
	Дубликаты = Новый Массив;
	Для Каждого СтрокаСНужнымСтатусом Из СтрокиСНужнымСтатусом Цикл 
		СтатусПередЗаказомПоставщику = СтрокаСНужнымСтатусом.КодСтатуса;
		ТекстЗапроса = "/cp/orders?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль+"&dateUpdatedStart="+Формат(ДатаНачала, "ДФ='yyyy-MM-dd HH:mm:ss'")+"&statusCode="+Формат(СтатусПередЗаказомПоставщику,"ЧГ=0");
		ЗаписьВЛог("Заполнение для заказа поствщику заявок по статусу "+СокрЛП(СтатусПередЗаказомПоставщику)+", период "+СокрЛП(ДатаНачала)+"-"+СокрЛП(ДатаОкончания));
		HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат Массив;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Если СписокЭлементов.Количество() = 0 Тогда
			сообщить("За этот период нет заявок по статусу "+СтатусПередЗаказомПоставщику);
			Продолжить;
		КонецЕсли;
		Для Каждого Элемент Из СписокЭлементов Цикл
			ЗаказКлиента = ОбработкаОбъект.НайтиЗаявку(Элемент.number);
			Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
				//сообщить("В 1С нет заказа № "+Элемент.number);//без заказов покупателей тоже грузим
				//Продолжить;
			КонецЕсли;
			Для Каждого Позиция Из Элемент.positions Цикл
				Если Дубликаты.Найти(Позиция.id) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Дубликаты.Добавить(Позиция.id);
				Если Число(Позиция.distributorId) <> ИдПоставщика Тогда
					Продолжить;
				КонецЕсли;
				Если СтатусПередЗаказомПоставщику <> Число(Позиция.statusCode) Тогда
					Продолжить;
				КонецЕсли;
				НовСтрока = Объект.ТаблицаЗаказовПоставщикам.Добавить();
				НовСтрока.КодСтатуса = Позиция.statusCode;
				НовСтрока.НомерЗаявки = Элемент.number;
				Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
					НовСтрока.ЗаказКлиента = ЗаказКлиента;
					НовСтрока.Контрагент = ЗаказКлиента.Контрагент;
				КонецЕсли;
				//НовСтрока.ИдентификаторКонтрагента = Число(Элемент.userId);
				//НовСтрока.ДатаЗаявки = ПреобразоватьИзСтрокиВДату(Элемент.date);
				//Если ЗагружатьОчищенныеАртикулы Тогда
				//	НовСтрока.НомерДетали = Позиция.numberFix;//чтобы лишнее не попадало number;
				//Иначе
				//	НовСтрока.НомерДетали = Позиция.number;
				//КонецЕсли;
				ЗаполнитьЗначенияСвойств(НовСтрока, Позиция);
				НовСтрока.Артикул = Позиция.numberFix;
				НовСтрока.Производитель = Позиция.brand; 
				//НовСтрока.Количество = Позиция.quantity;
				НовСтрока.Количество = Позиция.quantityFinal;//если менялось 
				Производитель = ОбработкаОбъект.НайтиДобавитьПроизводитель(СокрЛП(Позиция.brand));
				НовСтрока.Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(СокрЛП(Позиция.numberFix), Производитель, Позиция);
				//НовСтрока.Описание = Позиция.description;
				НовСтрока.ИдентификаторНоменклатуры = Позиция.id;
				НовСтрока.КодСтроки = Позиция.id;
				НовСтрока.ЦенаЗакупки = Позиция.priceIn;
				НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
				НовСтрока.ЦенаПродажи = Позиция.priceInSiteCurrency;//priceOut;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Объект.ТаблицаЗаказовПоставщикам.Сортировать("НомерЗаявки,ИдентификаторНоменклатуры");
	ЗаполнитьШтрихКодыПоступлениеРеализация(,Истина);
	//Массив = Объект.ТаблицаРеализаций.Выгрузить().Свернуть("Артикул").ВыгрузитьКолонку("Артикул");
	ТЗ = Объект.ТаблицаЗаказовПоставщикам.Выгрузить();
	ТЗ.Свернуть("Артикул");
	Массив = ТЗ.ВыгрузитьКолонку("Артикул");
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ЗаказыПоставщикуПоСтатусу(Команда)
	Массив = ЗаказыПоставщикуПоСтатусуНаСервере();
	Элементы.АртикулЗаказПоставщику.СписокВыбора.ЗагрузитьЗначения(Массив);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовПоставщикамВДокументПриИзменении(Элемент)
	СтрокаТаблицаЗаказовПоставщикам = Элементы.ТаблицаЗаказовПоставщикам.ТекущиеДанные;
	Если СтрокаТаблицаЗаказовПоставщикам.Количество = 0 Тогда //это закрытый заказ
		Возврат;
	КонецЕсли;
	//Если СтрокаТаблицыПоступлений.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется") Тогда
	//	СтрокаТаблицыПоступлений.ВДокумент = Ложь;
	//	//ПоказатьОповещениеПользователя(,,""+СтрокаТаблицыПоступлений.Номенклатура+" пропускаем позицию № "+Формат(СтрокаТаблицыПоступлений.КодСтроки,"ЧГ=0")+" с вариантом обеспечения: "+СтрокаТаблицыПоступлений.ВариантОбеспечения);
	//	ПоказатьОповещениеПользователя(,,""+СтрокаТаблицыПоступлений.Номенклатура+" у позиции № "+Формат(СтрокаТаблицыПоступлений.КодСтроки,"ЧГ=0")+" вариант обеспечения: "+СтрокаТаблицыПоступлений.ВариантОбеспечения);
	//	//Возврат;
	//КонецЕсли;
	НовСтрока = Объект.ТаблицаЗаказовПоставщикамОтбор.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаблицаЗаказовПоставщикам);
	Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
		НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
	КонецЕсли;
	НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
	НовСтрока.ИсходноеКоличество = НовСтрока.Количество;//для разделения заказов
	НовСтрока.КоличествоНаПечать = НовСтрока.Количество;//gorod_alex
	Если Лев(Объект.АдресСервиса, 7) = "id13994" Тогда
		НовСтрока.КоличествоНаПечать = 1;
	КонецЕсли;
	НовСтрока.ИсходнаяЦенаЗакупки = НовСтрока.ЦенаЗакупки;
	НовСтрока.ИсходнаяЦенаПродажи = НовСтрока.ЦенаПродажи;
	НовСтрока.ВДокумент = Истина;
	Объект.ТаблицаЗаказовПоставщикам.Удалить(СтрокаТаблицаЗаказовПоставщикам);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовПоставщикамОтборВДокументПриИзменении(Элемент)
	НайденнаяСтрока = Элементы.ТаблицаЗаказовПоставщикамОтбор.ТекущиеДанные;
	НайденнаяСтрока.ВДокумент = Ложь;
	НовСтрока = Объект.ТаблицаЗаказовПоставщикам.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
	НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
	Объект.ТаблицаЗаказовПоставщикамОтбор.Удалить(НайденнаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеДобавитьВТотЖеЗаказ(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ЗаказПоставщику = "";
	КонецЕсли;
	СоздатьЗаказПоставщикуНаСервере();
	ИзменитьСтатусыПослеЗаказаПоставщикуНаСервере();
	//Попытка
	//	ОткрытьЗначение(Объект.РеализацияТоваровУслуг);
	//Исключение
	//КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказПоставщикуПоСтатусу(Команда)
	Если Объект.СтатусПослеЗаказаПоставщику = 0 Тогда
		сообщить("Выберите статус, на который изменятся позиции");
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтрока Из Объект.ТаблицаЗаказовПоставщикамОтбор Цикл
		Если ТекСтрока.ИдентификаторНоменклатуры = 0 Тогда
			сообщить(""+ТекСтрока.Номенклатура+" - не заполнен идентификатор");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	//надо проверку, если контрагент заполнен, то тогда несколько создаем
	Если ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
		Оповещение = Новый ОписаниеОповещения("ОповещениеДобавитьВТотЖеЗаказ", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Добавить в тот же заказ?", РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		СоздатьЗаказПоставщикуНаСервере();
	КонецЕсли;
	//Если Объект.АвтоматическоеИзменениеСтатусовНаСайтеПриПоступленииИРеализации Тогда
		ИзменитьСтатусыПослеЗаказаПоставщикуНаСервере();
	//Иначе
	//	Оповещение = Новый ОписаниеОповещения("ОповещениеИзменитьСтатусыПослеРеализации", ЭтаФорма, Параметры);
	//	ПоказатьВопрос(Оповещение, "Изменить статусы в заказах ABCP?", РежимДиалогаВопрос.ДаНет, 0);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаказПоставщикуНаСервере()
	ОсновнаяСтавкаНДС = Объект.ОсновнаяСтавкаНДС;
	Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		РазмерСтавкиНДС = 0;
		РазмерСтавкиНДС100 = 100;
	Иначе
		РазмерСтавкиНДС = 20;//?(ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС20, 20, 18);
		РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
	КонецЕсли;
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено Тогда
		ЕстьВариантПриемкиТоваров = Ложь;
		ВариантПриемкиТоваров = "";
	Иначе
		ЕстьВариантПриемкиТоваров = Истина;
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	Если Объект.ТаблицаЗаказовПоставщикамОтбор.Количество() = 0 Тогда
		сообщить("Нет позиций для создания заказа поставщику");
	КонецЕсли;
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	Если ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
		ДокОбъект = Объект.ЗаказПоставщику.ПолучитьОбъект();
	Иначе	
		ДокОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
	КонецЕсли;
	ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	//Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
	Если НЕ Объект.УТ111 Тогда
		ДокОбъект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");//СтрокаЗаявки.ЗаказКлиента.Приоритет;
	КонецЕсли;
	ДокОбъект.РегистрироватьЦеныПоставщика = Объект.РегистрироватьЦеныПоставщика;
	//КонецЕсли;
	//ДокОбъект.ДнейПросрочкиПоставки = 0;
	ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
	Если Объект.УТ111 Тогда
		ДокОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;//иначе реквизит КОформлению не заполнится
	КонецЕсли;
	Если Объект.УТ112 Тогда
		ДокОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;//иначе не будет видно на закладке "К поступлению"
	КонецЕсли;
	
	ДокОбъект.ДатаСогласования = ТекущаяДата();//СтрокаЗаявки.ДатаЗаявки;
	//ДокОбъект.ДокументОснование = СтрокаЗаявки.ЗаказКлиента;
	ДокОбъект.БанковскийСчет = Объект.БанковскийСчет;
	ДокОбъект.Валюта = Объект.Валюта;
	Если НЕ Объект.УТ111 Тогда
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
		//ДокОбъект.НомерПоДаннымПоставщика = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
		//ДокОбъект.ДатаПоДаннымПоставщика = СтрокаЗаявки.ДатаЗаявки;
		Если НЕ Объект.УТ112 Тогда
			Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
			Иначе
				ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Объект.УТ114 Тогда
		Если ЕстьВариантПриемкиТоваров Тогда
			ДокОбъект.ВариантПриемкиТоваров = ВариантПриемкиТоваров;
		КонецЕсли;
	КонецЕсли;
	//ДокОбъект.ЗакупкаПодДеятельность = Объект.НалогообложениеНДСПоступление;//иначе не видно
	ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
	Если ЗначениеЗаполнено(Объект.СкладВПоступлении) Тогда
		ДокОбъект.Склад = Объект.СкладВПоступлении;
	Иначе
		ДокОбъект.Склад = Объект.Склад;
	КонецЕсли;
	//ДокОбъект.Магазин = Магазин;
	ДокОбъект.Дата = ТекущаяДата();//СтрокаЗаявки.ДатаЗаявки;
	ДокОбъект.Организация = Объект.Организация;//ОрганизацияДляПоставщика;
	Если Объект.Поставщик.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ДокОбъект.Организация = Объект.ОрганизацияРозница;
	КонецЕсли;
	ДокОбъект.НалогообложениеНДС = Объект.НалогообложениеНДСПоступление;
	Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;
	ДокОбъект.ЦенаВключаетНДС = Объект.ЦенаВключаетНДСПриПокупке;
	ДокОбъект.Контрагент = Объект.Поставщик;
	ДокОбъект.Партнер = ДокОбъект.Контрагент.Партнер;
	Если ИспользоватьСоглашенияСКлиентами Тогда
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокОбъект.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
		Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
			ДокОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
		КонецЕсли;
		//Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		//	ДокОбъект.Соглашение = Объект.СоглашениеРозница;
		//Иначе
		//	ДокОбъект.Соглашение = Объект.СоглашениеОпт;
		//КонецЕсли;
	КонецЕсли;
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	Если ИспользоватьДоговорыСКлиентами Тогда
		ДокОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация, ДокОбъект.Валюта);
		Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
			Договор = ДокОбъект.Договор;
			Если НЕ Объект.УТ111 И НЕ Объект.УТ112 И НЕ Объект.УТ113 И НЕ (Объект.УТ114 И (Объект.Подверсия3=3 Или Объект.Подверсия3=1)) Тогда //в 11.4.3 этого реквизита нет
				Если Договор.НалогообложениеНДСОпределяетсяВДокументе = Ложь Тогда
					ДокОбъект.НалогообложениеНДС = Договор.НалогообложениеНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДокОбъект.РегистрироватьЦеныПоставщика = Объект.РегистрироватьЦеныПоставщика;
	Если Объект.УТ111 Тогда
		ДокОбъект.Подразделение = Объект.Подразделение;
	КонецЕсли;
	МаксимальныйКодСтроки = 0;
	ДополнительнаяИнформация = "";
	Для Каждого СтрокаТовара Из Объект.ТаблицаЗаказовПоставщикамОтбор Цикл
		ДокОбъект.ДатаПервогоПоступления = Мин(ДокОбъект.ДатаПервогоПоступления, ДокОбъект.Дата+СтрокаТовара.deadline*3600);
		//ДокОбъект.ДатаПоступления = Макс(ДокОбъект.ДатаПоступления, ДокОбъект.Дата+СтрокаТовара.deadlineMax*3600);
		ДокОбъект.ДатаПоступления = Макс(ДокОбъект.ДатаПоступления, ДокОбъект.Дата+СтрокаТовара.deadline*3600);
		СтрокаДокумента = ДокОбъект.Товары.Добавить();
		СтрокаДокумента.Номенклатура = СтрокаТовара.Номенклатура;
		//СтрокаДокумента.КодСтроки = СтрокаТовара.ИдентификаторНоменклатуры;//лучше не надо, лучше пользоваться стандартными
		//механизмами "Заполнить обеспечение"
		//СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
		//СтрокаДокумента.ДатаОтгрузки = ДокОбъект.Дата;
		СтрокаДокумента.Количество = СтрокаТовара.Количество;
		СтрокаДокумента.КоличествоУпаковок = СтрокаТовара.Количество;
		//СтрокаДокумента.ВидЦены = ВидЦены;
		СтрокаДокумента.Цена = СтрокаТовара.ЦенаЗакупки;
		СтрокаДокумента.Сумма = СтрокаТовара.ЦенаЗакупки * СтрокаТовара.Количество;
		ДокОбъект.Сделка = СтрокаТовара.ЗаказКлиента;
		СтрокаДокумента.Склад = ДокОбъект.Склад;
		//СтрокаДокумента.ДатаПоступления = ТекущаяДата()+3600*24;
		//СтрокаДокумента.ДатаПоступления = ДокОбъект.Дата;
		//СтрокаДокумента.КодСтроки = НС;
		Если Объект.НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			СтрокаДокумента.СтавкаНДС = ОсновнаяСтавкаНДС;
			СтрокаДокумента.СуммаНДС = СтрокаДокумента.Сумма/РазмерСтавкиНДС100*РазмерСтавкиНДС;
		Иначе
			СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтрокаДокумента.СуммаНДС = 0;
		КонецЕсли;
		СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
		СтрокаДокумента.КодСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
		Если СтрокаТовара.ИдентификаторНоменклатуры > МаксимальныйКодСтроки Тогда
			МаксимальныйКодСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
		КонецЕсли;
		ДополнительнаяИнформация = ДополнительнаяИнформация + СтрокаТовара.НомерЗаявки + " / "+СтрокаТовара.ИдентификаторНоменклатуры + ", ";
		СтрокаДокумента.ДатаПоступления = ТекущаяДата();//СтрокаЗаявки.ДатаОбновления;
	КонецЦикла;
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	Если Объект.УТ111 Тогда
		ДокОбъект.МаксимальныйКодСтроки = МаксимальныйКодСтроки;
	Иначе
		Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
			Если (Объект.КА И Объект.Подверсия1 = 2 И Объект.Подверсия2 = 5) Или Объект.УТ115 Тогда
				ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
				Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
					СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
					ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
				КонецЕсли;
			КонецЕсли;
			//Попытка
			//	Если Объект.УТ114 И (Объект.Подверсия3 > 5) Тогда
			//		ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
			//	ИначеЕсли НЕ Объект.УТ111 Тогда
			//		ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
			//			ДокОбъект,
			//			ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления"),
			//			ДокОбъект.ЖелаемаяДатаПоступления,
			//			ДокОбъект.Товары.Итог("Сумма"),
			//			0);
			//	КонецЕсли;
			//Исключение	
			//КонецПопытки;
		КонецЕсли;
	Конецесли;
	ДокОбъект.ДополнительнаяИнформация = СтрЗаменить(ДополнительнаяИнформация, Символ(160), "");
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.Комментарий = "Авт. создано "+ТекущаяДата()+" по статусу "+Объект.СтатусПослеЗаказаПоставщику;
	ДокументПроведен = Ложь;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ДокументПроведен = Истина;
		ТекстСообщения = "Поставщик: "+Объект.Поставщик+", проведен " +СокрЛП(ДокОбъект);
		ЗаписьВЛог(ТекстСообщения,3);
	Исключение
		ТекстСообщения = "Не удалось провести "+СокрЛП(ДокОбъект)+" "+ОписаниеОшибки();
		ЗаписьВЛог(ТекстСообщения,5,Истина);
		ДокОбъект.Записать();
	КонецПопытки;
	Объект.ЗаказПоставщику = ДокОбъект.Ссылка;
	Если Объект.РегистрироватьЦеныНоменклатуры Тогда
		СоздатьУстановкуЦенНоменклатуры(Истина, ДокОбъект.Ссылка);//создаем документ "Установка цен номенклатуры", чтобы руками не делать
	КонецЕсли;
КонецПроцедуры//СоздатьЗаказПоставщикуНаСервере

&НаСервере
Процедура ИзменитьСтатусыПослеЗаказаПоставщикуНаСервере()
	КодСтатуса = Формат(Объект.СтатусПослеЗаказаПоставщику, "ЧГ=0");
	ТЗ = Объект.ТаблицаЗаказовПоставщикамОтбор.Выгрузить(, "НомерЗаявки");
	ТЗ.Свернуть("НомерЗаявки",);
	Структура = Новый Структура("НомерЗаявки");
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если ТекСтрока.НомерЗаявки = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПереченьПозиций = "";
		Структура.НомерЗаявки = ТекСтрока.НомерЗаявки;
		НайденныеСтроки = Объект.ТаблицаЗаказовПоставщикамОтбор.НайтиСтроки(Структура);
		НС = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ИдентификаторНоменклатуры = 0 Тогда
				Продолжить;
			КонецЕсли;
			НС = НС + 1;
			ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(НайденнаяСтрока.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатуса;
		КонецЦикла;
		ОбработкаОбъект.ОбновитьСтатусЗаявки(ТекСтрока.НомерЗаявки, ПереченьПозиций, КодСтатуса,,Истина);
		УИ = ОбработкаОбъект.ВременныйИдентификатор;
		Если ЗначениеЗАполнено(НайденнаяСтрока.ЗаказКлиента) Тогда //из последней закладки "ЗАказы поставщикам" могут быть переданы данные без заказа клиента
			ИзменитьДатуОбновленияЗаказаКлиента(УИ, НайденнаяСтрока.ЗаказКлиента);
		КонецЕсли;
	КонецЦикла;
	Объект.ТаблицаЗаказовПоставщикамОтбор.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаАртикулЗаказПоставщику()
	ЭтаФорма.ТекущийЭлемент = Элементы.АртикулЗаказПоставщику;
	ОтключитьОбработчикОжидания("ПослеВводаАртикулЗаказПоставщику");
КонецПроцедуры

&НаКлиенте
Процедура АртикулЗаказПоставщикуПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ПослеВводаАртикулЗаказПоставщику",0.2,Истина);
	НайтиАртикулВЗаказПоставщику();
КонецПроцедуры

&НаСервере
Процедура НайтиАртикулВЗаказПоставщику(ПоОдному = Ложь)
	Структура = Новый Структура("Артикул", Объект.АртикулЗаказПоставщику);
	НайденныеСтроки = Объект.ТаблицаЗаказовПоставщикам.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ВДокумент = Истина;
		НовСтрока = Объект.ТаблицаЗаказовПоставщикамОтбор.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока);
		Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
			НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
		КонецЕсли;
		НовСтрока.ИсходноеКоличество = НовСтрока.Количество;//для разделения заказов
		НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаПродажи;
		НовСтрока.ВДокумент = Истина;
		Объект.ТаблицаЗаказовПоставщикам.Удалить(НайденнаяСтрока);
	КонецЦикла;
	//Объект.АртикулПоступление = "";
КонецПроцедуры

&НаКлиенте
Процедура АртикулЗаказПоставщикуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Нормальный = СтрЗаменить(Текст," ","");
	Нормальный = СтрЗаменить(Нормальный,".","");
	Нормальный = СтрЗаменить(Нормальный,",","");
	Нормальный = СтрЗаменить(Нормальный,":","");
	Нормальный = СтрЗаменить(Нормальный,";","");
	Нормальный = СтрЗаменить(Нормальный,"/","");
	Нормальный = СтрЗаменить(Нормальный,"\","");
	Нормальный = СтрЗаменить(Нормальный,"-","");
	Нормальный = СтрЗаменить(Нормальный,"+","");
	Нормальный = СтрЗаменить(Нормальный,"=","");
	Нормальный = СтрЗаменить(Нормальный,"_","");
	АртикулЗаказПоставщикуОкончаниеВводаТекстаНаСервере(Нормальный);
	ПодключитьОбработчикОжидания("ПослеВводаАртикулЗаказПоставщику",0.2,Истина);
КонецПроцедуры

&НаКлиенте
Процедура АртикулЗаказПоставщикуАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание<>0 И НЕ ПустаяСтрока(Текст) Тогда    
		СтандартнаяОбработка = Ложь;
		СписокОтбор=Новый СписокЗначений;
		Для Каждого Элемент Из Элементы.АртикулЗаказПоставщику.СписокВыбора Цикл
			ФорматированныеСтроки = Новый Массив;
			ЗначениеПоля=Элемент.Значение;
			НачалоВхождения = Найти(ЗначениеПоля,ВРег(Текст));
			Если НачалоВхождения = 0 Тогда Продолжить; КонецЕсли;
			Если НЕ Объект.УТ111 Тогда
				Если НачалоВхождения > 1 Тогда
					ФорматированныеСтроки.Добавить(Лев(ЗначениеПоля,НачалоВхождения-1));
					ЗначениеПоля=Прав(ЗначениеПоля,СтрДлина(ЗначениеПоля)-НачалоВхождения+1);
				КонецЕсли;
				ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ЗначениеПоля,СтрДлина(ВРег(Текст))),Новый Шрифт(,,Истина), Новый Цвет(206,44,28)));
				ЗначениеПоля=Прав(ЗначениеПоля,СтрДлина(ЗначениеПоля)-СтрДлина(ВРег(Текст)));
				Если СтрДлина(ЗначениеПоля)>0 Тогда
					ФорматированныеСтроки.Добавить(ЗначениеПоля);
				КонецЕсли;
				ТекстПредставление=Новый ФорматированнаяСтрока(ФорматированныеСтроки);
			Иначе
				ТекстПредставление = ЗначениеПоля;
			КонецЕсли;
			СписокОтбор.Добавить(Элемент.Значение,ТекстПредставление); 
		КонецЦикла;
		ДанныеВыбора=СписокОтбор;
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Процедура АртикулЗаказПоставщикуОкончаниеВводаТекстаНаСервере(Текст)
	Нормальный = СтрЗаменить(Текст," ","");
	Нормальный = СтрЗаменить(Нормальный,".","");
	Нормальный = СтрЗаменить(Нормальный,",","");
	Нормальный = СтрЗаменить(Нормальный,":","");
	Нормальный = СтрЗаменить(Нормальный,";","");
	Нормальный = СтрЗаменить(Нормальный,"/","");
	Нормальный = СтрЗаменить(Нормальный,"\","");
	Нормальный = СтрЗаменить(Нормальный,"-","");
	Нормальный = СтрЗаменить(Нормальный,"+","");
	Нормальный = СтрЗаменить(Нормальный,"=","");
	Нормальный = СтрЗаменить(Нормальный,"_","");
	Структура = Новый Структура("Артикул", ВРег(Нормальный));
	НайденныеСтроки = Объект.ТаблицаЗаказовПоставщикам.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ВДокумент = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовПоставщикамОтборКоличествоПриИзменении(Элемент)
	Строка = Элементы.м.ТекущиеДанные;
	//Если ЗначениеЗаполнено(Строка.PaymentId) Тогда
	//	Строка.Количество = Строка.ИсходноеКоличество;
	//	Строка.ЦенаЗакупки = Строка.ИсходнаяЦенаЗакупки;
	//	ПоказатьОповещениеПользователя(,,"Нельзя менять заказ, он привязан к платежу № "+Строка.paymentNumber);
	//КонецЕсли;
	Строка.Сумма = Строка.Количество * Строка.ЦенаЗакупки;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОплатПриАктивизацииСтроки(Элемент)
	Если НЕ Объект.РасширеннаяПривязкаОплат Или НЕ Элементы.paymentOrderLinks.Видимость Тогда
		Возврат;
	КонецЕсли;
	Если ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяТекущегоЭлемента = ЭтаФорма.ТекущийЭлемент.Имя;
	Если (ИмяТекущегоЭлемента <> "ТаблицаОплат") Тогда
		Возврат;
	КонецЕсли;
	Если Не (Элемент.ТекущиеДанные = Неопределено) Тогда
		Если Объект.ТаблицаОплат.Количество()>0 Тогда
			Если (ИмяТекущегоЭлемента = "ТаблицаОплат") Тогда
				//ЭтаФорма.Элементы.paymentOrderLinks.ОтборСтрок = Новый ФиксированнаяСтруктура("paymentNumber", Элемент.ТекущиеДанные.paymentNumber);//paymentNumber могут дублироваться
				ЭтаФорма.Элементы.paymentOrderLinks.ОтборСтрок = Новый ФиксированнаяСтруктура("paymentId", Элемент.ТекущиеДанные.paymentId);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	//Если ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//ИмяТекущегоЭлемента = ЭтаФорма.ТекущийЭлемент.Имя;
	//Если (ИмяТекущегоЭлемента <> "ТаблицаЗаявок") И (ИмяТекущегоЭлемента <> "ТЗЗаявкиКлиента") Тогда
	//	Возврат;
	//КонецЕсли;
	//Если Не (Элемент.ТекущиеДанные = Неопределено) Тогда
	//	Если Объект.ТаблицаЗаявок.Количество()>0 Тогда
	//		Если (ИмяТекущегоЭлемента = "ТаблицаЗаявок") Тогда
	//			ЭтаФорма.Элементы.ТЗНоменклатура.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерЗаявки", ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки);
	//			//ЭлементОтбора = ЭтотОбъект.ТЗНоменклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//			//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерЗаявки");
	//			//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//			//ЭлементОтбора.Использование = Истина;
	//			//ЭлементОтбора.ПравоеЗначение = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки;;
	//		ИначеЕсли (ИмяТекущегоЭлемента = "ТЗЗаявкиКлиента") Тогда
	//			ЭтаФорма.Элементы.ТЗНоменклатураКлиента.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерЗаявки", ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки);
	//		Иначе
	//			сообщить("Нет обработчика для элемента: "+ИмяТекущегоЭлемента);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоНомеру(Команда)
	//НАЛ00555
	//загрузка по № заказов в буфере обмена
	Буфер = Новый COMОбъект("htmlfile");
    ДанныеБуфера = Буфер.ParentWindow.ClipboardData.Getdata("Text");
	Если СтрДлина(ДанныеБуфера) < 6 Или СтрДлина(ДанныеБуфера) > 20 Тогда
		НомерПлатежа = "";
		//Возврат;
	Иначе
		Если Найти(ДанныеБуфера,"0") = 0 Тогда //все документы вида ***00***
			НомерПлатежа = "";
		Иначе
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(ДанныеБуфера);
			//КС = Текст.КоличествоСтрок();
			НомерПлатежа = Текст.ПолучитьСтроку(1);
		КонецЕсли;
	КонецЕсли;

	Если НомерПлатежа = "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВводНомераПлатежа", ЭтаФорма);
		ПоказатьВводСтроки(ОписаниеОповещения, НомерПлатежа, "Введите № платежа");
	Иначе
		ЗагрузитьПоНомеруСервер(НомерПлатежа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводНомераПлатежа(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если СтрДлина(ПолученноеЗначение) < 6 Или СтрДлина(ПолученноеЗначение) > 20 Тогда
	Иначе
		ЗагрузитьПоНомеруСервер(ПолученноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоНомеруСервер(НомерПлатежа)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ВернутьТаблицуОплат(НомерПлатежа).Выгрузить());
	Если Элементы.paymentOrderLinks.Видимость Тогда
		Объект.paymentOrderLinks.Загрузить(ОбработкаОбъект.paymentOrderLinks.Выгрузить());
	КонецЕсли;
	//ПолучитьОплатыСервер(, НомерПлатежа);
	//ЗаполнитьКонтрагентовВТаблице();
	//ЗаполнитьМенеджеровВТаблице();
	//ПолучитьИнформациюОПривязкахПлатежей();
	//Для Каждого ТекСтрока Из paymentOrderLinks Цикл
	//	Если ТекСтрока.Возврат Тогда
	//		ТаблицаОплат[0].Возврат = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//НайтиОплатыВ1С();
КонецПроцедуры

&НаКлиенте
Процедура ТЗКлиентыКонтрагентПриИзменении(Элемент)
	Контрагент = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Контрагент;
	ИдентификаторКонтрагента = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ИдентификаторКонтрагента;
	Если ИдентификаторКонтрагента <> 0 Тогда
		сообщить("Контрагенту "+Контрагент+" установлен userId "+ИдентификаторКонтрагента);
		ДобавитьИзменитьuserId(Контрагент, ИдентификаторКонтрагента);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусыДляРеализацииНаСервере()
	Если Объект.ТаблицаРеализацийОтбор.Количество() = 0 Тогда
		//сообщить("Ничего не отобрано");
		ЗаполнитьСтатусыССайта();
		Возврат;
	КонецЕсли;
	//чтобы с уже выданными не накосячить
	ПолучитьСтатусыABCPДляРеализации();
	Структура = Новый Структура("КодСтатуса", Объект.СтатусПослеРеализации);
	НайденныеСтроки = Объект.ТаблицаРеализацийОтбор.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		сообщить("По заказу "+Формат(НайденнаяСтрока.НомерЗаявки,"ЧГ=0")+" уже выдана позиция "+НайденнаяСтрока.Артикул+" "+НайденнаяСтрока.Производитель+" "+НайденнаяСтрока.Номенклатура);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСтатусыССайта() //для удобства пользователя, чтобы не продавал уже выданные
	СоответствиеИмениКодуСтатуса = Новый Соответствие;
	Для Каждого ТекСтрока Из объект.ТаблицаСтатусов Цикл
		СоответствиеИмениКодуСтатуса.Вставить(ТекСтрока.КодСтатуса, ТекСтрока.НаименованиеСтатуса);
	КонецЦикла;
	ТекстЗапроса = "/cp/orders?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль+"&format=status_only";
	ТЗ = Объект.ТаблицаРеализаций.Выгрузить(,"НомерЗаявки");
	ТЗ.Свернуть("НомерЗаявки",);
	НомераСтрокой = "";
	Для Каждого Элемент Из ТЗ Цикл
		НомераСтрокой = НомераСтрокой + "&numbers[]="+Формат(Элемент.НомерЗаявки, "ЧГ=0");
	КонецЦикла;
	//сообщить(ТекстЗапроса+НомераСтрокой);//&format=status_only - нет имени статуса
	HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса+НомераСтрокой);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = HTTPОтвет.КодСостояния;
	СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Структура = Новый Структура("ИдентификаторНоменклатуры");
	Для Каждого Заявка Из СписокЭлементов Цикл
		//Структура.НомерЗаявки = Число(Элемент.number);
		Для Каждого Позиция Из Заявка.positions Цикл
			Структура.ИдентификаторНоменклатуры = Число(Позиция.id);
			//сообщить(""+Позиция.id+"	"+Позиция.statusCode);
			НайденныеСтроки = Объект.ТаблицаРеализаций.НайтиСтроки(Структура);
			Для Каждого СтрокаОтбора Из НайденныеСтроки Цикл
				СтрокаОтбора.КодСтатуса = Позиция.statusCode;
				СтрокаОтбора.НаименованиеСтатуса = СоответствиеИмениКодуСтатуса.Получить(Число(Позиция.statusCode));//Позиция.status;
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусыДляРеализации(Команда)
	ПроверитьСтатусыДляРеализацииНаСервере();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДляРеализацииПоСтатусуНаСервере(СДаты)
	//Если Объект.СтатусПередЗаказомПоставщику = 0 Тогда
	//	сообщить("Выберите статус для отбора");
	//	Возврат;
	//КонецЕсли;
	Массив = Новый Массив;
	Если Объект.СтатусПослеРеализации = 0 Тогда
		сообщить("Выберите новый статус для реализации");
		Возврат Массив;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ИдКонтрагента = ОбработкаОбъект.НайтиСвойствоКонтрагента(Объект.Клиент, "userId (Контрагенты)");
	Если Не ЗначениеЗаполнено(ИдКонтрагента) Тогда
		сообщить("Не найден идентификатор userId контрагента: "+Объект.Клиент);
		Возврат Массив;
	КонецЕсли;
	Объект.ТаблицаРеализацийОтбор.Очистить();
	Объект.ТаблицаРеализаций.Очистить();
	//отбираем за период в статусе
	ДатаНачала = НачалоДня(СДаты);//НачалоДня(ТекущаяДата())-Объект.ГлубинаПросмотраЗаявок*24*3600;
	ДатаОкончания = ТекущаяДата();
	Структура = Новый Структура("ОтборРеализаций", Истина);
	СтрокиСНужнымСтатусом = Объект.ТаблицаСтатусов.НайтиСтроки(Структура);
	Если СтрокиСНужнымСтатусом.Количество() = 0 Тогда
		сообщить("Не найдены отборы реализаций в таблице статусов");
		Возврат Массив;
	КонецЕсли;
	Дубликаты = Новый Массив;
	Для Каждого СтрокаСНужнымСтатусом Из СтрокиСНужнымСтатусом Цикл 
		ОтборПоСтатусу = СтрокаСНужнымСтатусом.КодСтатуса;
		ТекстЗапроса = "/cp/orders?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль+"&dateUpdatedStart="+Формат(ДатаНачала, "ДФ='yyyy-MM-dd HH:mm:ss'")+"&statusCode="+Формат(ОтборПоСтатусу,"ЧГ=0");
		ЗаписьВЛог("Заполнение для реализаций заявок по статусу "+СокрЛП(ОтборПоСтатусу)+", период "+СокрЛП(ДатаНачала)+"-"+СокрЛП(ДатаОкончания));
		HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат Массив;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Если СписокЭлементов.Количество() = 0 Тогда
			сообщить("За этот период нет заявок по статусу "+ОтборПоСтатусу);
			Продолжить;
		КонецЕсли;
		Для Каждого Элемент Из СписокЭлементов Цикл
			Если Элемент.userId<>ИдКонтрагента Тогда
				Продолжить;
			КонецЕсли;
			ЗаказКлиента = ОбработкаОбъект.НайтиЗаявку(Элемент.number);
			Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
				//сообщить("В 1С нет заказа № "+Элемент.number);//без заказов покупателей тоже грузим
				//Продолжить;
			КонецЕсли;
			Для Каждого Позиция Из Элемент.positions Цикл
				Если Дубликаты.Найти(Позиция.id) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Дубликаты.Добавить(Позиция.id);
				//Если Число(Позиция.distributorId) <> ИдПоставщика Тогда
				//	Продолжить;
				//КонецЕсли;
				Если ОтборПоСтатусу <> Число(Позиция.statusCode) Тогда
					Продолжить;
				КонецЕсли;
				НовСтрока = Объект.ТаблицаРеализацийОтбор.Добавить();
				НовСтрока.КодСтатуса = Позиция.statusCode;
				НовСтрока.НомерЗаявки = Элемент.number;
				Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
					НовСтрока.ЗаказКлиента = ЗаказКлиента;
					НовСтрока.Контрагент = ЗаказКлиента.Контрагент;
				КонецЕсли;
				//НовСтрока.ИдентификаторКонтрагента = Число(Элемент.userId);
				//НовСтрока.ДатаЗаявки = ПреобразоватьИзСтрокиВДату(Элемент.date);
				//Если ЗагружатьОчищенныеАртикулы Тогда
				//	НовСтрока.НомерДетали = Позиция.numberFix;//чтобы лишнее не попадало number;
				//Иначе
				//	НовСтрока.НомерДетали = Позиция.number;
				//КонецЕсли;
				ЗаполнитьЗначенияСвойств(НовСтрока, Позиция);
				НовСтрока.Артикул = Позиция.numberFix;
				НовСтрока.Производитель = Позиция.brand; 
				//НовСтрока.Количество = Позиция.quantity;
				НовСтрока.Количество = Позиция.quantityFinal;//если менялось 
				Производитель = ОбработкаОбъект.НайтиДобавитьПроизводитель(СокрЛП(Позиция.brand));
				НовСтрока.Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(СокрЛП(Позиция.numberFix), Производитель, Позиция);
				//НовСтрока.Описание = Позиция.description;
				НовСтрока.ИдентификаторНоменклатуры = Позиция.id;
				НовСтрока.КодСтроки = Позиция.id;
				НовСтрока.ЦенаЗакупки = Позиция.priceIn;
				НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
				НовСтрока.ВДокумент = Истина;
				НовСтрока.ЦенаПродажи = Позиция.priceInSiteCurrency;//priceOut;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Объект.ТаблицаРеализацийОтбор.Сортировать("НомерЗаявки,ИдентификаторНоменклатуры");
	ЗаполнитьШтрихКодыПоступлениеРеализация(,Истина);
	//Массив = Объект.ТаблицаРеализаций.Выгрузить().Свернуть("Артикул").ВыгрузитьКолонку("Артикул");
	ТЗ = Объект.ТаблицаРеализацийОтбор.Выгрузить();
	ТЗ.Свернуть("Артикул");
	Массив = ТЗ.ВыгрузитьКолонку("Артикул");
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДляРеализацииПоСтатусу(Команда)
	Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
		сообщить("Не выбран клиент");
		Возврат;
	КонецЕсли;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	СДаты = ТекущаяДата();
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТиповД = Новый ОписаниеТипов(Массив, , , КД);
	Если ВвестиЗначение(СДаты, "С какой даты смотреть", ОписаниеТиповД) Тогда
	Иначе
		Возврат;
	КонецЕсли;
	ЗаполнитьДляРеализацииПоСтатусуНаСервере(СДаты);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусыДляРеализацииНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусыДляРеализации(Команда)
	Если Объект.СтатусПослеРеализации = 0 Тогда
		сообщить("Выберите новый статус для реализации");
		Возврат;
	КонецЕсли;
	ИзменитьСтатусыДляРеализацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПослеРеализации2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокСтатусов = ПолучитьСписокСтатусов(Истина);
	Если Не ЗначениеЗаполнено(СписокСтатусов) Тогда
		Возврат;
	КонецЕсли;
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораСтатуса", ЭтотОбъект, Элемент.Имя);
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ВыбранныйЭлемент = СписокСтатусов.НайтиПоЗначению(Число(Элемент.ТекстРедактирования));
	Иначе
		ВыбранныйЭлемент = Неопределено;
	КонецЕсли;
	СписокСтатусов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите соответствующий статус", ВыбранныйЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализациюПоСтатусам(Команда)
	СоздатьРеализацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЗКлиентыpayDelayПриИзменении(Элемент)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаpayDelayПриИзменении", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Изменить отсрочку платежа?", РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаpayDelayПриИзменении(Результат, Параметры) Экспорт
	ТД = ЭтаФорма.Элементы.ТЗКлиенты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
    Если Результат = КодВозвратаДиалога.Нет Тогда
		ТД.payDelay = 0;
    КонецЕсли;
	КлиентИзменитьОтсрочкуПлатежаНаСервере(ТД.ИдентификаторКонтрагента, ТД.payDelay);
	//ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.payDelay = payDelay;
КонецПроцедуры

&НаКлиенте
Процедура ТЗКлиентыДопустимаяСуммаЗадолженностиПриИзменении(Элемент)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДопустимаяСуммаЗадолженностиПриИзменении", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Изменить допустимую сумму задолженности?", РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДопустимаяСуммаЗадолженностиПриИзменении(Результат, Параметры) Экспорт
	ТД = ЭтаФорма.Элементы.ТЗКлиенты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
    Если Результат = КодВозвратаДиалога.Нет Тогда
		ТД.payDelay = 0;
    КонецЕсли;
	КлиентИзменитьДопустимаяСуммаЗадолженности(ТД.ИдентификаторКонтрагента, ТД.creditLimit);
	//ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.payDelay = payDelay;
КонецПроцедуры

&НаСервере
//выгружаем отсрочку платежа в ABCP
Процедура КлиентИзменитьДопустимаяСуммаЗадолженности(ИдентификаторКлиента, ДопустимаяСуммаЗадолженности)
	//ИдентификаторКлиента = СтрокаКлиента.ИдентификаторКонтрагента;
	//Контрагент = СтрокаКлиента.Контрагент;
	//Если Объект.ФинансовыйМодульВключен Тогда
	//	ТекстСообщения = "включен финансовый модуль, ручной баланс не выгружается";
	//	ЗаписьВЛог(ТекстСообщения,3);
	//	Возврат;
	//КонецЕсли;
	АдресСервиса = Объект.АдресСервиса;
	Пользователь = Объект.Пользователь;
	Пароль = Объект.Пароль;
	ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль+"&userId="+Формат(ИдентификаторКлиента,"ЧГ=0")+"&creditLimit="+Формат(ДопустимаяСуммаЗадолженности,"ЧГ=0");
	ИмяФайлаСТекстомЗапроса = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСТекстомЗапроса, КодировкаТекста.UTF8);//КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(ФрагментЗапроса);
	ЗаписьТекста.Закрыть();
	
	//отправим файл на сервер для обработки
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
	ФайлОтправки = Новый Файл(ИмяФайлаСТекстомЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/finance/userInfo?userlogin="+Пользователь+"&userpsw="+Пароль, , Пользователь, Пароль);
	//так тоже работает
	//HTTPЗапрос = Новый HTTPЗапрос("/cp/finance/userBalance");
	//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаСТекстомЗапроса);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//HTTPЗапрос.Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);	
	
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/finance/userInfo", ИмяВыходногоФайла, Заголовки);	
	КодСостояния = HTTPОтвет.КодСостояния;
	Если НЕ КодСостояния200(КодСостояния, , ИмяВыходногоФайла) Тогда
		ЕстьОшибка = Истина;
	Иначе
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла);
		ТекстИзФайла = ТекстовыйДокумент.ПолучитьТекст();
		ТекстСообщения = "Фрагмент ответа с сайта по контрагенту № "+ИдентификаторКлиента+": "+Лев(ТекстИзФайла,200)+" ... "+Прав(ТекстИзФайла,200);
		ЗаписьВЛог(ТекстСообщения,3,Истина);
		//ЧтениеJSON = Новый ЧтениеJSON;
		//ЧтениеJSON.ОткрытьФайл(ИмяВыходногоФайла);	
		//СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		//ЧтениеJSON.Закрыть();
		//ТекстСообщения =СокрЛП(Контрагент)+" идентификатор: " + СписокЭлементов.userId+", баланс на сайте = "+СписокЭлементов.balance;
		//ЗаписьВЛог(ТекстСообщения,3);
	КонецЕсли;
	Попытка
	    УдалитьФайлы(ИмяФайлаСТекстомЗапроса);
	Исключение
	КонецПопытки;
	Попытка
	    УдалитьФайлы(ИмяВыходногоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

//&НаСервереБезКонтекста - тогда не будет стираться поле ввода
&НаСервере
Процедура ЗаполнитьПоступленияПоСтатусуНаСервере(СтатусЗаявок = 0)
	Массив = ЗаполнитьПозицииЗаказовПоСтатусу(СтатусЗаявок, Истина);
	Элементы.АртикулПоступление.СписокВыбора.ЗагрузитьЗначения(Массив);
КонецПроцедуры

Функция ЗаполнитьПозицииЗаказовПоСтатусу(СтатусЗаявок = 0, ЭтоПоступление = Истина)
	Массив = Новый Массив;
	Объект.ТаблицаНоменклатуры.Очистить();
	Объект.ТаблицаПоступлений.Очистить();
	Объект.ТаблицаПоступленийОтбор.Очистить();
	Объект.ТаблицаРеализаций.Очистить();
	Объект.ТаблицаРеализацийОтбор.Очистить();
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если ЭтоПоступление Тогда
		ИдентификаторПоставщика = ОбработкаОбъект.ПолучитьИдентификаторКонтрагента(Объект.Поставщик, Истина);
		Если ИдентификаторПоставщика = 0 Тогда
			сообщить("У этого поставщика нет идентификатора");
			Возврат Массив;
		КонецЕсли;
	Иначе
		//Если Объект.EmailКлиента="" Тогда
		//	Если Объект.ИдКлиента = 0 Тогда
				ИдентификаторКонтрагента = ОбработкаОбъект.ПолучитьИдентификаторКонтрагента(Объект.Клиент);
		//	ИначеЕсли Объект.ИдКлиента = "" Тогда
		//	Иначе
		//		ИдентификаторКонтрагента = Число(Объект.ИдКлиента);
		//	КонецЕсли;
		//	Если ИдентификаторКонтрагента = 0 Тогда
		//		сообщить("У этого клиента нет идентификатора");
		//		Возврат Массив;
		//	КонецЕсли;
		//КонецЕсли;
	Конецесли;
	Если СтатусЗаявок = 0 Тогда
		сообщить("Не заполнен статус для отбора заявок");
		Возврат Массив;
	КонецЕсли;
	ЗагружатьОчищенныеАртикулы = Истина;
	skip = 0;
	ВсегоЗагружаемыхЗаказов = 0;
	ЛимитВозвращаемыхЗаписей = 100;
	АдресСервиса = Объект.АдресСервиса;
	Пользователь = Объект.Пользователь;
	Пароль = Объект.Пароль;
	ДатаНачала = ТекущаяДата()-Объект.ГлубинаПросмотраЗаявок*24*3600;
	ДатаОкончания = ТекущаяДата();
	ИдентификаторКонтрагентаСтрокой = Формат(ИдентификаторКонтрагента,"ЧГ=0");
	МассивИдентификаторов = Новый Массив;
	
	Пока skip <= ВсегоЗагружаемыхЗаказов Цикл
		//ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+"&dateCreatedStart="+Формат(ДатаНачала, "ДФ=yyyy-MM-dd")+" 00:00:00&dateCreatedEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59";//&statusCode=56233";
		//лучше так: При указании фильтра по дате обновления, будут выбраны как новые заказы, так и обновленные, попадающие под действие фильтра.
		//для уменьшения объема, если ИдентификаторГостя = 0 Тогда не нужна доп информация
		ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+"&dateUpdatedStart="+Формат(ДатаНачала, "ДФ='yyyy-MM-dd HH:mm:ss'")+"&dateUpdatedEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59&desc=true";//&statusCode=56233";
		ТекстЗапроса = ТекстЗапроса + "&statusCode="+Формат(СтатусЗаявок,"ЧГ=0");//надо передавать в виде строки, чтобы не было разделителя тысяч
		ТекстЗапроса = ТекстЗапроса + "&format=p&safeMode=1&skip="+Формат(skip,"ЧН=0; ЧГ=0")+"&limit="+Формат(ЛимитВозвращаемыхЗаписей,"ЧГ=0");
		//Если ЗначениеЗаполнено(ОфисСамовывоза) Тогда
		//	ТекстЗапроса = ТекстЗапроса+"&officeId="+Формат(ОфисСамовывоза, "ЧГ=0");
		//КонецЕсли;
		Если Объект.Отладка Тогда
			сообщить(АдресСервиса+ТекстЗапроса);
		КонецЕсли;
		Если ЭтоПоступление Тогда
			ИдентификаторПоставщикаСтрокой = Формат(ИдентификаторПоставщика, "ЧГ=0");
			ТекстЗапроса = ТекстЗапроса+"&distributorId="+ИдентификаторПоставщикаСтрокой;
		КонецЕсли;
		//Если Объект.Отладка Тогда
		//	сообщить(АдресСервиса+ТекстЗапроса);
		//	//ЗаписьВЛог(СтрЗаменить(АдресСервиса+ТекстЗапроса,Пароль,"***"));
		//КонецЕсли;
		
		//сообщить("Заполнение заявок по статусу "+СокрЛП(СтатусЗаявок)+", период "+СокрЛП(ДатаНачала)+"-"+СокрЛП(ДатаОкончания));
		//сообщить(ТекстЗапроса);
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		Попытка
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
			КодСостояния = HTTPОтвет.КодСостояния;
		Исключение
			ТекстСообщения = АдресСервиса+ТекстЗапроса;
			ЗаписьВЛог(ТекстСообщения,6,Истина);
			ТекстСообщения = "Код ошибки"+КодСостояния+"ошибка получения заказов:"+ОписаниеОшибки();
			ЗаписьВЛог(ТекстСообщения,6,Истина);
			ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			Возврат Массив;
		КонецПопытки;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат Массив;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Если skip > 0 Тогда
			//WshShell.Run(СтрокаПаузы, 0, -1);
			//ОбщегоНазначенияБТС.Пауза(1);
		КонецЕсли;
		skip = skip + ЛимитВозвращаемыхЗаписей;
		Попытка
			СписокЭлементов = ОтветJSON["items"];
		Исключение
			сообщить(СтрокаОтвет);
			Возврат Массив;
		КонецПопытки;
		Если ВсегоЗагружаемыхЗаказов = 0 Тогда
			ВсегоЗагружаемыхЗаказов = Число(ОтветJSON["count"]);
			ЗаписьВЛог("Всего заявок для запроса порциями: "+ОтветJSON["count"]+", "+ВсегоЗагружаемыхЗаказов);
			Если ВсегоЗагружаемыхЗаказов = 0 Тогда
				Прервать;
			КонецЕсли;
		Иначе
			//сообщить(ВсегоЗагружаемыхЗаказов);
		КонецЕсли;
		Для Каждого Элемент Из СписокЭлементов Цикл
			Если НЕ ЭтоПоступление Тогда
				//Если Элемент.userId<>ИдентификаторКонтрагентаСтрокой Тогда
				//Если Элемент.userCode<>ИдентификаторКонтрагентаСтрокой Тогда
				Если Объект.EmailКлиента<>"" Тогда
					Если Элемент.userEmail<>Объект.EmailКлиента Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					Если Элемент.userId<>ИдентификаторКонтрагентаСтрокой Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//проверяем статус
			Для Каждого Позиция Из Элемент.positions Цикл			
				Если ЭтоПоступление Тогда
					Если Позиция.distributorId<>ИдентификаторПоставщикаСтрокой Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				//Если ОтбиратьПоПоставщику И Позиция.distributorId <> ОтборПоПоставщикуСтрокой Тогда
				//	Продолжить;
				//КонецЕсли;
				statusCode = Число(Позиция.statusCode);
				Если (statusCode <> СтатусЗаявок) Тогда
					Продолжить;
				КонецЕсли;
				//Если МассивНеЗагружаемыхпоставщиков.Найти(Число(Позиция.distributorId)) <> Неопределено Тогда
				//	Продолжить;
				//КонецЕсли;
				Если МассивИдентификаторов.Найти(Позиция.id) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивИдентификаторов.Добавить(Позиция.id);
				Если ЗагружатьОчищенныеАртикулы Тогда
					НомерДетали = ВРег(Позиция.numberFix);
				Иначе
					НомерДетали = Позиция.number;
				КонецЕсли;
				НовСтрока = Объект.ТаблицаНоменклатуры.Добавить();
				НовСтрока.НомерДетали = НомерДетали;
				НаименованиеБренда = СокрЛП(Позиция.brand);
				Производитель = ОбработкаОбъект.НайтиДобавитьПроизводитель(НаименованиеБренда);
				НовСтрока.Производитель = Производитель;
				Номенклатура = ОбработкаОбъект.НайтиДобавитьНоменклатуруПоАртикулу(СокрЛП(НомерДетали), Производитель, , Позиция.description);
				НовСтрока.Номенклатура = Номенклатура;
				//НовСтрока = Объект.ТаблицаНоменклатуры.Добавить();
				НовСтрока.НомерЗаявки = Элемент.number;
				//НовСтрока.Производитель = Производитель;
				НовСтрока.numberFix = Позиция.numberFix;
				НовСтрока.Артикул = Позиция.numberFix;//там колонка от номенклатуры пляшет
				НовСтрока.НомерДетали = Позиция.number;
				НовСтрока.Описание = Позиция.description;
				//НовСтрока.Количество = Позиция.quantity;
				НовСтрока.Количество = Позиция.quantityFinal;//если менялось 
				//НовСтрока.Номенклатура = Номенклатура;
				НовСтрока.ИдентификаторНоменклатуры = Позиция.id;
				НовСтрока.ЦенаЗакупки = Позиция.priceIn;
				НовСтрока.ЦенаПродажи = Позиция.priceInSiteCurrency;//priceOut;
				НовСтрока.ЦенаПродажи = Позиция.priceOut;
				Если НовСтрока.ЦенаПродажи = 0 Тогда
					НовСтрока.ЦенаПродажи = Позиция.oldPriceOut;
				КонецЕсли;
				Если Позиция.priceRate > 1 и Позиция.priceIn > 0 Тогда
					НовСтрока.ЦенаЗакупки = Позиция.priceIn * Позиция.priceRate;
				КонецЕсли;
				Если Позиция.priceInSiteCurrency > 0 Тогда
					НовСтрока.ЦенаПродажи = Позиция.priceInSiteCurrency; 
				КонецЕсли;
				НовСтрока.Сумма = НовСтрока.ЦенаПродажи * НовСтрока.Количество;//Позиция.priceInSiteCurrency;
				//НовСтрока.Статус = Позиция.status;
				НовСтрока.КодСтатуса = Позиция.statusCode;
				НовСтрока.КодСтатусаСайт = Позиция.statusCode;//зачем, забыл, потом разберусь
				ЗаполнитьЗначенияСвойств(НовСтрока, Позиция, "priceRate,priceInSiteCurrency,currencyInId,currencyOutId");
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;//цикл по skip
	Если ЭтоПоступление Тогда
		Объект.ТаблицаПоступлений.Загрузить(Объект.ТаблицаНоменклатуры.Выгрузить());
	Иначе
		Объект.ТаблицаРеализаций.Загрузить(Объект.ТаблицаНоменклатуры.Выгрузить());
	КонецЕсли;
	Массив = Объект.ТаблицаНоменклатуры.Выгрузить(,"numberFix").ВыгрузитьКолонку("numberFix");
	Объект.ТаблицаНоменклатуры.Очистить();
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоступленияПоСтатусу(Команда)
	СписокСтатусов = ПолучитьСписокСтатусов(Истина);
	Если Не ЗначениеЗаполнено(СписокСтатусов) Тогда
		сообщить("Не заполнены статусы");
		Возврат;
	КонецЕсли;
	ВыбранныйЭлемент = Неопределено;
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораСтатусаЗагрузки", ЭтотОбъект, "ЗаполнитьПоступленияПоСтатусу");
	СписокСтатусов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите соответствующий статус", ВыбранныйЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтатусаЗагрузки(Элемент, Параметры) Экспорт
	Если Элемент <> Неопределено Тогда
		Если Параметры = "ЗаполнитьПоступленияПоСтатусу" Тогда
			СтатусЗаявок = Число(Элемент.Значение);
			ЗаполнитьПоступленияПоСтатусуНаСервере(СтатусЗаявок);
		ИначеЕсли Параметры = "ЗаполнитьРеализацииПоСтатусу" Тогда			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыПлатежей()
	Если Объект.ТипПлатежаНаличный <> 0 И Объект.ТипПлатежаЭлектронный <> 0 Тогда
		//уже заполняли типы платежей
		Возврат;
	КонецЕсли;
	ТипыПлатежей = Новый СписокЗначений;
	АдресСервиса = Объект.АдресСервиса;
	Пользователь = Объект.Пользователь;
	Пароль = Объект.Пароль;
	ТекстЗапроса = "/basket/paymentMethods?userlogin="+Пользователь+"&userpsw="+Пароль;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЗаписьВЛог("типы платежей: "+СтрокаОтвет);
	Если СтрокаОтвет = "[]" Тогда
		ЗаписьВЛог("Не заполнены идентификаторы способа оплаты, необходим при отправке заказа (при включенной опции «Корзина: показывать способ оплаты»)",, Истина);
	КонецЕсли;
	
	//ЭтотОбъект.UnicodeEncode(СтрокаОтветUTF8);
	//только на сервере РеквизитФормыВЗначение("Объект").UnicodeEncode(СтрокаОтвет);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	Иначе
		//СписокЭлементов = СтруктураИзJSON();
		//Сообщить(СтрокаОтвет);
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Для Каждого Элемент Из СписокЭлементов Цикл
			ТипыПлатежей.Добавить(Элемент.id, Элемент.name);
			Если Объект.ТипПлатежаЭлектронный = 0 Тогда
				Если Лев(НРег(Элемент.name),3) = "эле" Тогда
					Объект.ТипПлатежаЭлектронный = Число(Элемент.id);
				КонецЕсли;
			КонецЕсли;
			Если Объект.ТипПлатежаНаличный = 0 Тогда
				Если Лев(НРег(Элемент.name),3) = "нал" Тогда
					Объект.ТипПлатежаНаличный = Число(Элемент.id);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаписьВЛог("ТипПлатежаНаличный = "+Объект.ТипПлатежаНаличный+", ТипПлатежаЭлектронный="+Объект.ТипПлатежаЭлектронный);
	//Возврат СписокПоставщиков;
КонецПроцедуры

&НаСервере
Процедура ПолучитьОплатыИз1СНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ВернутьТаблицуОплат1С().Выгрузить());
	Если Объект.ТипПлатежаНаличный = 0 Тогда
		Объект.ТипПлатежаНаличный = ОбработкаОбъект.ТипПлатежаНаличный;
	КонецЕсли;
	Если Объект.ТипПлатежаЭлектронный = 0 Тогда
		Объект.ТипПлатежаЭлектронный = ОбработкаОбъект.ТипПлатежаЭлектронный;
	КонецЕсли;
	Если Объект.ТипПлатежаНаличный = 0 И Объект.ТипПлатежаЭлектронный Тогда
		сообщить("Не заполнены идентификаторы способов оплаты, необходимо включить опцию «Корзина: показывать способ оплаты» (потом можно отключить)");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОплатыИз1С(Команда)
	ПолучитьОплатыИз1СНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьОплатыВABCPНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыгрузитьОплатыИз1СВABCP();
	Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ТаблицаОплат.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОплатыВABCP(Команда)
	ВыгрузитьОплатыВABCPНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗакрытьСводныйЗаказСоздатьРеализациюНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Структура = ОбработкаОбъект.ЗакрытиеЗаказовСозданиеРеализацииДляФормы();
	АдресТаблицаРеализацийОтбор = Структура.АдресТаблицаРеализацийОтбор;
	Объект.ТаблицаРеализацийОтбор.Загрузить(ПолучитьИзВременногоХранилища(АдресТаблицаРеализацийОтбор));
	УдалитьИзВременногоХранилища(АдресТаблицаРеализацийОтбор);
	Объект.РеализацияТоваровУслуг = Структура.РеализацияТоваровУслуг;
	Объект.РасходныйОрдерНаТовары = Структура.РасходныйОрдерНаТовары;
	Объект.ОтборРазмещениеТоваров = Структура.ОтборРазмещениеТоваров;
	//АдресТЗЗаявки = Структура.АдресТЗЗаявки;
	//АдресТЗНоменклатура = Структура.АдресТЗНоменклатура;
	//Объект.ТЗЗаявки.Загрузить(ПолучитьИзВременногоХранилища(АдресТЗЗаявки));
	//Объект.ТЗНоменклатура.Загрузить(ПолучитьИзВременногоХранилища(АдресТЗНоменклатура));
	//УдалитьИзВременногоХранилища(АдресТЗЗаявки);
	//УдалитьИзВременногоХранилища(АдресТЗНоменклатура);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСводныйЗаказСоздатьРеализацию(Команда)
	ЗакрытьСводныйЗаказСоздатьРеализациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьРазмещениеНаСервере()
	ДокОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.ДатаНачалаВыполнения = ДокОбъект.Дата;
	ДокОбъект.ДатаОкончанияВыполнения = ДокОбъект.Дата;
	ДокОбъект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.НайтиПоКоду("Отгрузка");
	ДокОбъект.Комментарий = "Создан автоматически "+ДокОбъект.Дата;;
	ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
	ДокОбъект.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.Распоряжение = Объект.РасходныйОрдерНаТовары;
	ДокОбъект.Склад = Объект.Склад;
	ДокОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокОбъект.ТоварыОтбор.Очистить();
	
	Помещение=Справочники.СкладскиеПомещения.ПустаяСсылка();
	Распоряжение=Объект.РасходныйОрдерНаТовары;
	Склад=Объект.Склад;
	Менеджер = Новый МенеджерВременныхТаблиц;	
	СкладыСервер.ОстаткиТоваровКОтбору(Менеджер, Распоряжение, Склад, Помещение);	
	СтруктураВозврата = СкладыСервер.ОтобратьТоварИзЯчеек(Менеджер,Склад,Помещение);	
	Менеджер.Закрыть();	
	ДокОбъект.ТоварыОтбор.Очистить();
	Для Каждого СтрокаТаблицыОшибок Из СтруктураВозврата.ТаблицаОшибок Цикл
		Если СтрокаТаблицыОшибок.Количество > 0 Тогда	
			НоваяСтрока = ДокОбъект.ТоварыОтбор.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыОшибок);		
			Если НоваяСтрока.КоличествоУпаковок = 0 Тогда
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			КонецЕсли;		
		КонецЕсли;	
	КонецЦикла;
	Для Каждого СтрокаТаблицыРезультатов из СтруктураВозврата.ТаблицаРезультатов Цикл	
		Если СтрокаТаблицыРезультатов.Количество > 0 Тогда		
			НоваяСтрока = ДокОбъект.ТоварыОтбор.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРезультатов);		
		КонецЕсли;	
	КонецЦикла;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
	КонецПопытки;
	Объект.ОтборРазмещениеТоваров = ДокОбъект.Ссылка;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРазмещение(Команда)
	СоздатьРазмещениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПользователюНаСервере(ИмяПользователя)
	СохранитьНастройкиДляРегламентногоЗаданияНаСервере(ИмяПользователя);
	//сообщить("Для пользователя """+ИмяПользователя+""" сохранены настройки обработки в хранилище общих настроек");
КонецПроцедуры

&НаСервере
Функция ПолучитьПереченьПользователей()
	СписокПользователей =ПользователиИнформационнойБазы.ПолучитьПользователей();
	Список = Новый СписокЗначений;
	Список.Добавить("(Всем пользователям)");
	Для Каждого Пользователь Из СписокПольЗователей Цикл
		Список.Добавить(Пользователь.Имя);
	КонецЦикла;
	Если Список.НайтиПоЗначению("Администратор") = Неопределено Тогда//чтобы регламентные задания работали, если такого пользователя нет
		Список.Добавить("Администратор");
	КонецЕсли;
	Возврат Список;
КонецФункции

&НаКлиенте
Процедура СохранитьНастройкиПользователю(Команда)
	СписокПользователей = ПолучитьПереченьПользователей();
	//в 8.3 работает, но ругается Элемент = СписокПоставщиков.ВыбратьЭлемент();
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораПользователя", ЭтотОбъект);
	//СписокПользователей.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите пользователя для сохранения настроек");	
	СписокПользователей.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, "Отметьте пользователей для сохранения настроек");	
 //   ИмяПользователя = ИмяПользователя();
 //   Оповещение = Новый ОписаниеОповещения("ПослеВводаИмениПользователя",ЭтотОбъект);	
 //
 //   ПоказатьВводЗначения(Оповещение,,"Введите значение","Строка");	
 //   СохранитьНастройкиПользователюНаСервере(ИмяПользователя);
 //   ПоказатьОповещениеПользователя(,,"Для пользователя «"+ИмяПользователя+"» сохранены настройки обработки в хранилище общих настроек");
КонецПроцедуры

&НаКлиенте
//Процедура ПослеВыбораПользователя(Элемент, Параметры) Экспорт
Процедура ПослеВыбораПользователя(СписокЭлементов, Параметры) Экспорт
    //Если Элемент <> Неопределено Тогда
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СохранятьВсем = Ложь;
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если Элемент.Значение = "(Всем пользователям)" И Элемент.Пометка Тогда
			СохранятьВсем = Истина;
		КонецЕсли;
    КонецЦикла;
	
	ПользователиТекстом = "Сохраняем настройки пользователю: ";
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если Элемент.Значение = "(Всем пользователям)" Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.Пометка Или СохранятьВсем Тогда
			ПользователиТекстом = ПользователиТекстом+" "+Элемент.Значение;
			СохранитьНастройкиДляРегламентногоЗаданияНаСервере(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	сообщить(ПользователиТекстом);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПереченьОфисов(ПоПредставлению = Ложь)
	//https://cp.abcp.ru/?page=allsettings&systemsettings&options
	//необходимо включить несколько опций https://www.abcp.ru/wiki/Офисы
	//1. Для работы функционала Офисы необходимо подключить несколько опций. После активации опций необходимо ОБЯЗАТЕЛЬНО ПОДКЛЮЧИТЬ ГОСТЯ к главному офису.
	//-Офисы: включить привязку к клиентам
	//Включает механизм связи офис-клиент, т.е. становится возможным привязывать клиента к офису.
	//-Офисы: использовать привязку складов к офисам
	//Позволяет отключить/подключить склады к определенному офису. Настройка осуществляется на карточке редактирования офиса (ПУ --> Персонал --> Офисы --> Офис такой-то --> Редактировать).	
	СписокОфисов = Новый СписокЗначений;
	//Если НЕ ПараметрыЗаполнены(Истина, Истина, Истина) Тогда
	//	сообщить("Не все параметры заполнены");
	//	Возврат СписокПоставщиков;
	//КонецЕсли;
	ТекстЗапроса = "/basket/shipmentOffices?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль;
	HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат СписокОфисов;
	КонецЕсли;
	СписокЭлементов = СтруктураИзJSON(СтрокаОтвет);
	Для Каждого Элемент Из СписокЭлементов Цикл
		//Если Элемент.isEnabled = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		//Если Найти(Элемент.description, "Необходимо связаться с менеджером для предоставления прав  для работы с веб сервисом.") > 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		Если ПоПредставлению Тогда
			СписокОфисов.Добавить(Элемент.name, Элемент.id);//+" ("+Элемент.id+")");
		Иначе
			СписокОфисов.Добавить(Элемент.id, Элемент.name);//+" ("+Элемент.id+")");
		КонецЕсли;
	КонецЦикла;
	Если СписокОфисов.Количество() = 0 Тогда
		сообщить("Опция «Заказы: показывать офисы при выборе самовывоза» отключена, надо включить");
	КонецЕсли;
	Возврат СписокОфисов;
КонецФункции

&НаКлиенте
Процедура ОфисСамовывозаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокОфисов = ПолучитьПереченьОфисов();
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораОфиса", ЭтотОбъект);
	СписокОфисов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите офис самовывоза");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОфиса(Элемент, Параметры) Экспорт
	Если Элемент <> Неопределено Тогда
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОфисСамовывозаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ПоказатьЗначение(,"https://cp.abcp.ru/?page=staff&offices");
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПоставщикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокПоставщиков = ПолучитьПереченьПоставщиков();
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораПоставщикаДляОтбора", ЭтотОбъект);
	СписокПоставщиков.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите поставщика для отбора заказов");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПоставщикаДляОтбора(Элемент, Параметры) Экспорт
    Если Элемент <> Неопределено Тогда
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПоставщикуОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ПоказатьЗначение(,"https://cp.abcp.ru/distributor/"+Формат(Объект.ОтборПоПоставщику, "ЧГ=0"));
КонецПроцедуры

#Область РегистрацияОбработки
&НаКлиенте
Процедура ЗарегистрироватьОбработкуВСправочнике(Команда)
	АдресХранилища = "";
    Результат = ПоместитьФайл(АдресХранилища, ПолучитьИспользуемоеИмяФайла(), , Ложь);
	ЗарегистрироватьОбработкуВСправочникеНаСервере(АдресХранилища);
КонецПроцедуры

&НаСервере
Функция ПолучитьИспользуемоеИмяФайла()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ИспользуемоеИмяФайла;
КонецФункции

&НаСервере
Процедура ЗарегистрироватьОбработкуВСправочникеНаСервере(АдресХранилища)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыРегистрации = ОбработкаОбъект.СведенияОВнешнейОбработке();
	//ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(ОбъектСправочника, ПараметрыРегистрации);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                |	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	                |ГДЕ
	                |	ДополнительныеОтчетыИОбработки.Наименование ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Наименование", "Обмен между «1С:Управление торговлей 11.*» и платформой ABCP.ru%");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Запрос.УстановитьПараметр("Наименование", "Обмен между «1С:Управление торговлей 11.3» и платформой ABCP.ru%");
		Результат = Запрос.Выполнить();
	КонецЕсли;
	Если Результат.Пустой() Тогда
		СправочникОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		//СправочникОбъект.ИспользоватьДляФормыОбъекта = Истина;
		//СправочникОбъект.ИспользоватьДляФормыСписка  = Истина;
		СправочникОбъект.Ответственный = Пользователи.ТекущийПользователь();
		СправочникОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
		СправочникОбъект.ИмяОбъекта = Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ПараметрыРегистрации.Вставить("АдресДанныхОбработки", АдресХранилища);
	ПараметрыРегистрации.Вставить("ЭтоОтчет", Ложь);
	ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Ложь);
	ПараметрыРегистрации.Вставить("ИмяФайла", ОбработкаОбъект.ИспользуемоеИмяФайла);
	ПараметрыРегистрации.Вставить("ОтключатьПубликацию", Ложь);
	//ЭтотОбъект.УникальныйИдентификатор
	
	Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
	Если Не Результат.Успех И Результат.ИмяОбъектаЗанято Тогда
		ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Истина);
		ПараметрыРегистрации.Вставить("Конфликтующие", Результат.Конфликтующие);
		Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
	КонецЕсли;
	Если Не Результат.Успех Тогда
		Если Результат.ИмяОбъектаЗанято Тогда
			сообщить("Конфликт обработок: "+Результат.Конфликтующие);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СправочникОбъект,ПараметрыРегистрации); 
	СправочникОбъект.Вид = ДополнительныеОтчетыИОбработки.ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(ПараметрыРегистрации.Вид);
	СправочникОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(АдресХранилища);
	СправочникОбъект.ИмяОбъекта = ОбработкаОбъект.Метаданные().Имя;
	СправочникОбъект.ИмяФайла = ОбработкаОбъект.ИспользуемоеИмяФайла;
	СправочникОбъект.Записать();
КонецПроцедуры
#КонецОбласти

#Область ВыполнениеДлительнойОперацииСПрогрессом
//идея https://infostart.ru/public/936608/
&НаКлиенте
Процедура ВыполнитьКомандуВФоне(Знач ИдентификаторКоманды, Знач ПараметрыКоманды, Знач Обработчик) Экспорт
	
	ИмяПроцедуры = "ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне";
	//ИмяПроцедуры = "ДополнительныеОтчетыИОбработкиСервер.ВернутьТаблицуЗаявокССайта";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяПроцедуры,
		"ИдентификаторКоманды",
		ИдентификаторКоманды,
		Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяПроцедуры,
		"ПараметрыКоманды",
		ПараметрыКоманды,
		Тип("Структура"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяПроцедуры,
		"ПараметрыКоманды.ДополнительнаяОбработкаСсылка",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыКоманды, "ДополнительнаяОбработкаСсылка"),
		Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяПроцедуры,
		"Обработчик",
		Обработчик,
		Новый ОписаниеТипов("ОписаниеОповещения, УправляемаяФорма"));
	
	ПараметрыКоманды.Вставить("ИдентификаторКоманды", "ИмпортЗаявок");//ИдентификаторКоманды);
	ПолучатьРезультат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыКоманды, "ПолучатьРезультат", Ложь);
	
	Форма = Неопределено;
	Если ПараметрыКоманды.Свойство("ФормаВладелец", Форма) Тогда
		ПараметрыКоманды.ФормаВладелец = Неопределено;
	КонецЕсли;
	Если ТипЗнч(Обработчик) = Тип("ОписаниеОповещения") Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Обработчик.Модуль",
			Обработчик.Модуль,
			Тип("УправляемаяФорма"));
		Форма = ?(Форма <> Неопределено, Форма, Обработчик.Модуль);
	Иначе
		Форма = Обработчик;
		Обработчик = Неопределено;
		ПолучатьРезультат = Истина; // для обратной совместимости
	КонецЕсли;
	
	Задание = ДополнительныеОтчетыИОбработкиВызовСервера.ЗапуститьДлительнуюОперацию(Форма.УникальныйИдентификатор, ПараметрыКоманды);
	
	СопровождающийТекст = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыКоманды, "СопровождающийТекст", "");
	ЗаголовокРеквизита = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыКоманды, "Заголовок");
	Если ЗначениеЗаполнено(ЗаголовокРеквизита) Тогда
		СопровождающийТекст = СокрЛП(ЗаголовокРеквизита + Символы.ПС + СопровождающийТекст);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СопровождающийТекст) Тогда
		СопровождающийТекст = НСтр("ru = 'Команда выполняется.'");
	КонецЕсли;
	
	ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения",ЭтотОбъект); 
	
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	НастройкиОжидания.ТекстСообщения       = СопровождающийТекст;
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	НастройкиОжидания.ПолучатьРезультат    = ПолучатьРезультат; // для обратной совместимости
	НастройкиОжидания.ВыводитьСообщения    = Истина;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения ;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина ;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессВыполнения (Результат,ДополнительныеПараметры) Экспорт
	
// Вставить код обработки прогресса выполнения например:
	
//	Если Результат.Статус = "Выполняется" Тогда
//     
//      Прогресс = Результат.Прогресс;
//      
//          Если Прогресс <> Неопределено Тогда  
//             Состояние (Прогресс.Текст, Прогресс.Процент,,);    
//         КонецЕсли;
    
//   КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаОбработку()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                |	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	                |ГДЕ
	                |	ДополнительныеОтчетыИОбработки.ИмяОбъекта = &Имя";
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Запрос.УстановитьПараметр("Имя", ОбработкаОбъект.Метаданные().Имя);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		сообщить("нет в справочнике");//надо делать по-старому
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции

&НаКлиенте
Процедура ЗапускДлительнойОперации(Команда)
	ПараметрыКоманды = ДополнительныеОтчетыИОбработкиКлиент.ПараметрыВыполненияКомандыВФоне(ПолучитьСсылкуНаОбработку());
	//ПараметрыКоманды = ДополнительныеОтчетыИОбработкиКлиент.ПараметрыВыполненияКомандыВФоне(Параметры.ДополнительнаяОбработкаСсылка);
	
	ПараметрыКоманды.СопровождающийТекст = НСтр("ru = 'Подождите идет загрузка данных'");
	
	ПараметрыКоманды.ФормаВладелец = ЭтаФорма;
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации", ЭтотОбъект, ПараметрыКоманды.СопровождающийТекст);
				
	//ВыполнитьКомандуВФоне(Параметры.ИдентификаторКоманды, ПараметрыКоманды, Обработчик);
	ВыполнитьКомандуВФоне(ИдентификаторКоманды, ПараметрыКоманды, Обработчик);

	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияДлительнойОперации(Операция, СопровождающийТекст) Экспорт
	
	// написать обработку после завершения длительной операции 
	
КонецПРоцедуры
#КонецОбласти

#Область ДобавлениеШтрихКодаПриПоступлении
&НаКлиенте
Процедура ТаблицаПоступленийОтборШтрихкодПриИзменении(Элемент)
	Если СокрЛП(Элемент.ТекстРедактирования) = "" Тогда
		Возврат;
	КонецЕсли;
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДобавитьШтрихКод", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Добавить номенклатуре штрих-код: "+Элемент.ТекстРедактирования, Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДобавитьШтрихКод(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
    КонецЕсли;
	Номенклатура = Элементы.ТаблицаПоступленийОтбор.ТекущиеДанные.Номенклатура;
	Штрихкод = Элементы.ТаблицаПоступленийОтбор.ТекущиеДанные.Штрихкод;
	ДобавитьШтрихкодНоменклатуре(Номенклатура, Штрихкод);
КонецПроцедуры

&НаСервере
Процедура ДобавитьШтрихкодНоменклатуре(Номенклатура, Штрихкод)
	МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи(); 
	МенеджерЗаписи.Номенклатура = Номенклатура.Ссылка; 
	//Если НЕ ЗначениеЗаполнено(НаборУпаковок) Тогда
	//	Если ИспользоватьОрдерныеСклады И Спр<>Неопределено Тогда
	//		МенеджерЗаписи.Упаковка = Спр.Ссылка;//Номенклатура.ЕдиницаИзмерения;
	//	КонецЕсли;
	//КонецЕсли;
	МенеджерЗаписи.Штрихкод = Штрихкод; 
	МенеджерЗаписи.Записать(); 
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ""+Номенклатура+" добавлен штрих-код:"+Штрихкод;
	Сообщение.Сообщить();
КонецПроцедуры

&НаСервере
Процедура ПеренестиБрендВПроизводителяНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПеренестиБрендВПроизводителя();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиБрендВПроизводителя(Команда)
	ПеренестиБрендВПроизводителяНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИзБуфераФранчайзи(Команда)
	Буфер = Новый COMОбъект("htmlfile");
    ДанныеБуфера = Буфер.ParentWindow.ClipboardData.Getdata("Text");
	Если СтрДлина(ДанныеБуфера) < 40 Тогда
		сообщить("В буфере обмена ничего нет или слишком мало данных, или в настройках зоны IE надо разрешить программный доступ к буферу обмена: "+ДанныеБуфера);
		Возврат;
	КонецЕсли;
	//Элемент.ТекущиеДанные
	Структура = НастройкиИзБуфераФранчайзиСервер(ДанныеБуфера);
	НовСтрока = Объект.ТаблицаДоступов.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, Структура);
	НовСтрока.Использовать = Истина;
	ЗаполнитьЗначенияСвойств(НовСтрока, Объект, "Организация, ОрганизацияРозница, Склад, СкладВПоступлении, ВидЦены, ТолькоСвоиСклады, ОтборПоПоставщику, Подразделение");
КонецПроцедуры

&НаСервере
Функция НастройкиИзБуфераФранчайзиСервер(ДанныеБуфера)
	Структура = Новый Структура("АдресСервиса,Пользователь,Пароль");
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ДанныеБуфера);
	Если Текст.КоличествоСтрок()<>3 Тогда
		сообщить("Должно быть 3 строки");
		Возврат Структура;
	КонецЕсли;
	Хост = СокрЛП(Текст.ПолучитьСтроку(1));
	Если Лев(Хост, 6) = "Хост: " Тогда
		Хост = СокрЛП(Сред(Хост, 7));
	КонецЕсли;	
	Логин = СокрЛП(Текст.ПолучитьСтроку(2));
	Если Лев(Логин, 7) = "Логин: " Тогда
		Логин = СокрЛП(Сред(Логин, 8));
	КонецЕсли;	
	MD5пароль = СокрЛП(Текст.ПолучитьСтроку(3));
	Если Лев(MD5пароль, 12) = "MD5-пароль: " Тогда
		MD5пароль = СокрЛП(Сред(MD5пароль, 13));
	КонецЕсли;
	Если СтрДлина(MD5пароль)<>32 Тогда
		сообщить("Некорректная длина пароля:"+MD5пароль);
		Возврат Структура;
	КонецЕсли;
	Структура.АдресСервиса = Хост;
	Структура.Пользователь = Логин;
	Структура.Пароль = MD5пароль;
	Возврат Структура;
КонецФункции

&НаСервере
Процедура КлиентВнестиВСтопЛистНаСервере(ИдентификаторКлиента, ВСтопЛист = Истина)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.КлиентВСтопЛист(ИдентификаторКлиента, ВСтопЛист);
КонецПроцедуры

&НаСервере
Процедура КлиентВнестиВСтопЛистСервер()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВнестиСегментВСтопЛист();
	Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ТаблицаКлиентов.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура КлиентВнестиВСтопЛист(Команда)
	Если ЗначениеЗаполнено(Объект.СегментСтопЛист) Тогда
		КлиентВнестиВСтопЛистСервер();
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ТЗКлиенты.ТекущиеДанные;
	Если ТекСтрока.inStopList Тогда
		сообщить("Уже в стоп-листе");
		Возврат;
	КонецЕсли;
	ИдентификаторКонтрагента = ТекСтрока.ИдентификаторКонтрагента;
	Если ТекСтрока.ИдентификаторКонтрагента = 0 Тогда
		сообщить("Нет идентификатора клиента");
		Возврат;
	КонецЕсли;
	КлиентВнестиВСтопЛистНаСервере(ИдентификаторКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура КлиентУбратьИзСтопЛиста(Команда)
	ТекСтрока = Элементы.ТЗКлиенты.ТекущиеДанные;
	Если НЕ ТекСтрока.inStopList Тогда
		сообщить("Не в стоп-листе");
		Возврат;
	КонецЕсли;
	ИдентификаторКонтрагента = ТекСтрока.ИдентификаторКонтрагента;
	Если ТекСтрока.ИдентификаторКонтрагента = 0 Тогда
		сообщить("Нет идентификатора клиента");
		Возврат;
	КонецЕсли;
	КлиентВнестиВСтопЛистНаСервере(ИдентификаторКонтрагента, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСвоиСкладыПриИзменении(Элемент)
	Если Объект.ТолькоСвоиСклады И Объект.ОтборПоПоставщику = 0 Тогда
		сообщить("Сначала заполните поле «Отбор по поставщику»");
		Объект.ТолькоСвоиСклады = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КлиентВыгрузитьВзаиморасчетыНаСервере()
	сообщить("Выгрузка в закладку info реализована отдельной обработкой");
	//curl -o %num%post.json -X POST "%host%/cp/user?userlogin=%login%&userpsw=%md5%&userId=%id%&info=\u0442\u0435\u043a\u0441\u0442"
КонецПроцедуры

&НаКлиенте
Процедура КлиентВыгрузитьВзаиморасчеты(Команда)
	КлиентВыгрузитьВзаиморасчетыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступовОтборПоПоставщикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокПоставщиков = ПолучитьПереченьПоставщиков();
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораТаблицаДоступовОтборПоПоставщикуНачалоВыбора", ЭтотОбъект);
	СписокПоставщиков.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите поставщика для отбора заказов");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораТаблицаДоступовОтборПоПоставщикуНачалоВыбора(Элемент, Параметры) Экспорт
    Если Элемент <> Неопределено Тогда
        ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ОтборПоПоставщику = Элемент.Значение;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФранчайзиПриИзменении(Элемент)
	Элементы.СтраницаФранчайзи.Видимость = Объект.Франчайзи;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокЗаявокИзБуфераСервер(ДанныеБуфера)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ДанныеБуфера);
	КС = Текст.КоличествоСтрок();
	Для НС = 1 По КС Цикл
		Попытка
			ФильтрПоЗаявке = Число(Текст.ПолучитьСтроку(НС));
		Исключение
			сообщить("Операция прервана, не удалось преобразовать в число: "+Текст.ПолучитьСтроку(НС));
			Прервать;
		КонецПопытки;
		ЗаписьВЛог("Загружаем из  буфера заявку "+НС+" из "+КС+" № "+Формат(ФильтрПоЗаявке,"ЧГ=0"), ,Истина);
		//НайденныйДокумент = НайтиЗаказКлиента(ФильтрПоЗаявке);//Формат(ФильтрПоЗаявке, "ЧГ=0"),);
		//Если Не ЗначениеЗаполнено(НайденныйДокумент) Тогда
			//сообщить("Не найден заказ в 1С (возможно, отказ, возврат или не загружен) № "+Формат(ФильтрПоЗаявке, "ЧГ=0"));
			//Продолжить;
			//сообщить(""+Формат(ФильтрПоЗаявке,"ЧГ=0")+" "+СокрЛП(КС-НС)+" / "+СокрЛП(КС));
			Если ФильтрПоЗаявке <> 0 Тогда
				//ТаблицаНаличия.Очистить();
				Объект.ФильтрПоЗаявке = ФильтрПоЗаявке;
				ОбработкаОбъект.ФильтрПоЗаявке = ФильтрПоЗаявке;
				ОбработкаОбъект.ВернутьТаблицуЗаявокССайта();//,Истина)
				//Объект.ТаблицаЗаявок.Загрузить(ОбработкаОбъект.ВернутьТаблицуЗаявокССайта(,Истина).Выгрузить());
				УИ = ОбработкаОбъект.ПолучитьТаблицуНоменклатуры();
				Если УИ <> Неопределено Тогда
					Объект.ТаблицаНоменклатуры.Загрузить(ПолучитьИзВременногоХранилища(УИ));
					УдалитьИзВременногоХранилища(УИ);
				КонецЕсли;
				//ВернутьТаблицуЗаявокССайта();
				Продолжить;
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//в буфере обмена находится список заявок, загружаем их последовательно
&НаКлиенте
Процедура ЗагрузитьСписокЗаявокИзБуфера(Команда)
	//Вставить содержимое обработчика.
	//если в буфере обмена ничего нет, то в настройках зоны IE надо разрешить программный доступ к буферу обмена
	Буфер = Новый COMОбъект("htmlfile");
    ДанныеБуфера = Буфер.ParentWindow.ClipboardData.Getdata("Text");
	Если СтрДлина(ДанныеБуфера) < 6 Тогда
		сообщить("В буфере обмена ничего нет или слишком мало данных, или в настройках зоны IE надо разрешить программный доступ к буферу обмена");
		сообщить(ДанныеБуфера);
		НомераЗаказов = "";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВводПеречняЗаказов", ЭтаФорма);
		ПоказатьВводСтроки(ОписаниеОповещения, НомераЗаказов, "В буфере ничего нет, введите № заказов через запятую");
	Иначе
		ЗагрузитьСписокЗаявокИзБуфераСервер(ДанныеБуфера);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводПеречняЗаказов(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если СтрДлина(ПолученноеЗначение) < 6 Тогда
	Иначе
		ДанныеБуфера = СтрЗаменить(ПолученноеЗначение,",",Символы.ПС);
		ЗагрузитьСписокЗаявокИзБуфераСервер(ДанныеБуфера);
	КонецЕсли;
КонецПроцедуры

//выгрузка настроек ABCP в файл
#Область НастройкиВФайлИзФайла

&НаСервере
Процедура НастройкиВФайлНаСервере(ИмяФайла)
	КлючОбъекта = "ABCP_1C";
	КлючНастроек = "НастройкиДоступа";
    ИмяПользователя = ИмяПользователя();
	ПользовательДляВосстановления = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
	Если (ИмяПользователя = "" Или ПользовательДляВосстановления.Роли.Содержит(РольПолныеПрава)) И НЕ Объект.ИспользоватьИндивидуальныеНастройкиПользователей Тогда
		ИмяПользователя = "Администратор";//фоновое задание запускается под пользователем из настроек в справочнике дополнительных отчетов и обработок
	КонецЕсли;
	Настройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователя);
	ЗначениеВФайл(ИмяФайла, Настройки);
	сообщить(ИмяФайла);
	ФайлНаДиске = Новый Файл(ИмяФайла);
    Если НЕ ФайлНаДиске.Существует() Тогда
        сообщить("Не удалось выгрузить");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НастройкиСериализовать()
	КлючОбъекта = "ABCP_1C";
	КлючНастроек = "НастройкиДоступа";
    ИмяПользователя = ИмяПользователя();
	ПользовательДляВосстановления = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
	Если (ИмяПользователя = "") Тогда //Или ПользовательДляВосстановления.Роли.Содержит(РольПолныеПрава)) И НЕ Объект.ИспользоватьИндивидуальныеНастройкиПользователей Тогда
		ИмяПользователя = "Администратор";//фоновое задание запускается под пользователем из настроек в справочнике дополнительных отчетов и обработок
	КонецЕсли;
	Настройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователя);
	Если Настройки = Неопределено Тогда
		Если ПользовательДляВосстановления.Роли.Содержит(РольПолныеПрава) Тогда //И НЕ Объект.ИспользоватьИндивидуальныеНастройкиПользователей Тогда
			ИмяПользователя = "Администратор";//фоновое задание запускается под пользователем из настроек в справочнике дополнительных отчетов и обработок
		КонецЕсли;
	КонецЕсли;
	Результат = ЗначениеВСтрокуВнутр(Настройки);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура НастройкиВФайл(Команда)
	ИмяФайла = "";
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение); 
    Диалог.ПолноеИмяФайла     = ИмяФайла; 
    Диалог.МножественныйВыбор = Ложь; 
	Диалог.Фильтр = "*.txt|*.txt";
    Диалог.Заголовок = "Выберите файл для настроек"; 
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ИмяСервера = НСтр(СтрокаСоединения, "Srvr");
	Если ИмяСервера = "" Тогда//файловая база
		Если Диалог.Выбрать()Тогда 
			ИмяФайла = Диалог.ПолноеИмяФайла; 
	    	НастройкиВФайлНаСервере(ИмяФайла);
		КонецЕсли;
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаСохраненияНастроек",ЭтаФорма);
    	Диалог.Показать(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаСохраненияНастроек(ВыбранныеФайлы, Параметры) Экспорт
	Если Не ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	НастройкиСтрокой = НастройкиСериализовать();
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(НастройкиСтрокой);
	ТекстДок.НачатьЗапись(,ВыбранныеФайлы[0]);
	сообщить(ВыбранныеФайлы[0]);
КонецПроцедуры

//загрузка настроек ABCP из файла
&НаСервере
Процедура НастройкиИзФайлаНаСервере(ИмяФайла)
	Настройки = ЗначениеИзФайла(ИмяФайла);
	ВосстановитьНастройки();
	//КлючОбъекта = "ABCP_1C";
	//КлючНастроек = "НастройкиДоступа";
	//ИмяПользователя = ИмяПользователя();
	//ИмяПользователя = "Администратор";//фоновое задание запускается без пользователя
	//ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, Настройки, , ИмяПользователя);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИзФайла(Команда)
	ИмяФайла = "";
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.ПолноеИмяФайла     = ИмяФайла; 
	Диалог.МножественныйВыбор = Ложь; 
	Диалог.Фильтр = "*.txt|*.txt";
	Диалог.Заголовок = "Выберите файл для настроек"; 
	КаталогИБ = НСтр(СтрокаСоединенияИнформационнойБазы(),"File");
	Если КаталогИБ <> "" Тогда
		Если Диалог.Выбрать()Тогда 
			ИмяФайла = Диалог.ПолноеИмяФайла; 
			НастройкиИзФайлаНаСервере(ИмяФайла);
		КонецЕсли;
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаВосстановленияНастроек",ЭтаФорма);
		Диалог.Показать(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаВосстановленияНастроек(ВыбранныеФайлы, Параметры) Экспорт
	Если Не ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстДок = Новый ТекстовыйДокумент;
	ПараметрыЧтения = Новый Структура("ТекстДок",ТекстДок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЧтенияФайлаСНастройками",ЭтаФорма,ПараметрыЧтения);
	ТекстДок.НачатьЧтение(ОписаниеОповещения,ВыбранныеФайлы[0]);
						   
	//НастройкиСтрокой = НастройкиСериализовать();
	//ТекстДок = Новый ТекстовыйДокумент;
	//ТекстДок.УстановитьТекст(НастройкиСтрокой);
	//ТекстДок.НачатьЗапись(,ВыбранныеФайлы[0]);
	//сообщить(ВыбранныеФайлы[0]);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияФайлаСНастройками(Параметры) Экспорт
	НастройкиСтрокой = Параметры.ТекстДок.ПолучитьТекст();
	ВосстановитьНастройки(НастройкиСтрокой);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПровестиНепроведенныеДокументыНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПровестиНепроведенныеДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ПровестиНепроведенныеДокументы(Команда)
	ПровестиНепроведенныеДокументыНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьИсториюСтатуса(ИдентификаторНоменклатуры)
	СписокИстории = Новый СписокЗначений;
	АдресСервиса = Объект.АдресСервиса;
	Пользователь = Объект.Пользователь;
	Пароль = Объект.Пароль;
	ТекстЗапроса = "/cp/order/statusHistory?userlogin="+Пользователь+"&userpsw="+Пароль+"&positionId="+Формат(ИдентификаторНоменклатуры, "ЧГ=0");
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	//ЭтотОбъект.UnicodeEncode(СтрокаОтветUTF8);
	//только на сервере РеквизитФормыВЗначение("Объект").UnicodeEncode(СтрокаОтвет);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат СписокИстории;
	Иначе
		//СписокЭлементов = СтруктураИзJSON();
		//Сообщить(СтрокаОтвет);
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Для Каждого Элемент Из СписокЭлементов Цикл
			СписокИстории.Добавить(Элемент.statusCode, Элемент.status+" ("+Элемент.datetime+")	"+Элемент.managerName);
		КонецЦикла;
	КонецЕсли;
	Возврат СписокИстории;
КонецФункции

&НаКлиенте
Процедура ИсторияСтатуса(Команда)
	Если ЭтаФорма.Элементы.ТЗНоменклатура.ВыделенныеСтроки.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	ТД = ЭтаФорма.Элементы.ТЗНоменклатура.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТД.ИдентификаторНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	СписокИстории = ПолучитьИсториюСтатуса(ТД.ИдентификаторНоменклатуры);
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораИстории", ЭтотОбъект);
	СписокИстории.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "История позиции: "+Формат(ТД.ИдентификаторНоменклатуры,"ЧГ=0"));
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИстории(Элемент, Параметры) Экспорт
    Если Элемент <> Неопределено Тогда
        //сообщить(Элемент.Значение);
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьУдаленныеНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если Объект.ГлубинаПросмотраДляПроведения = 0 Тогда
		сообщить("Используем глубину просмотра заявок: "+Объект.ГлубинаПросмотраЗаявок);
		ОбработкаОбъект.УдалитьУдаленные(Объект.ГлубинаПросмотраЗаявок);
	Иначе
		сообщить("Заполнена глубина просмотра для проведения, используем: "+Объект.ГлубинаПросмотраДляПроведения);
		ОбработкаОбъект.УдалитьУдаленные(Объект.ГлубинаПросмотраДляПроведения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУдаленные(Команда)
	УдалитьУдаленныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОфисыНаСервере(ВСписок = Ложь)
	ОчищатьТаблицу = Ложь;
	ВремТаблицаОфисов = Объект.ТаблицаОфисов.Выгрузить();
	Объект.ТаблицаОфисов.Очистить();
	Если Объект.Франчайзи Тогда
		Структура = Новый Структура("Использовать", Истина);
		НайденныеСтроки = Объект.ТаблицаДоступов.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				//ЗаполнитьЗначенияСвойств(Объект,ТекСтрока);
				ЗаполнитьОфисыНаСервереПоДоступу(ВСписок, Ложь, ТекСтрока.АдресСервиса, ТекСтрока.Пользователь, ТекСтрока.Пароль);
			КонецЦикла;
		Иначе
			ЗаполнитьОфисыНаСервереПоДоступу(ВСписок, Ложь);
		КонецЕсли;
	Иначе
		ЗаполнитьОфисыНаСервереПоДоступу(ВСписок, Ложь);
	КонецЕсли;
	Структура = Новый Структура("id");
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаОфисов Цикл
		Структура.id = СтрокаТаблицы.id;
		НСтроки = ВремТаблицаОфисов.НайтиСтроки(Структура);
		Для Каждого НСтрока Из НСтроки Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НСтрока, , "id,name");
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	
	
Процедура ЗаполнитьОфисыНаСервереПоДоступу(ВСписок, ОчищатьТаблицу = Истина, АдресСервиса = "", Пользователь = "", Пароль = "")
	Если АдресСервиса = "" Тогда
		АдресСервиса = Объект.АдресСервиса;
	КонецЕсли;
	Если Пользователь = "" Тогда
		Пользователь = Объект.Пользователь;
	КонецЕсли;
	Если Пароль = "" Тогда
		Пароль = Объект.Пароль;
	КонецЕсли;
	//https://cp.abcp.ru/?page=allsettings&systemsettings&options
	//необходимо включить несколько опций https://www.abcp.ru/wiki/Офисы
	//1. Для работы функционала Офисы необходимо подключить несколько опций. После активации опций необходимо ОБЯЗАТЕЛЬНО ПОДКЛЮЧИТЬ ГОСТЯ к главному офису.
	//-Офисы: включить привязку к клиентам
	//Включает механизм связи офис-клиент, т.е. становится возможным привязывать клиента к офису.
	//-Офисы: использовать привязку складов к офисам
	//Позволяет отключить/подключить склады к определенному офису. Настройка осуществляется на карточке редактирования офиса (ПУ --> Персонал --> Офисы --> Офис такой-то --> Редактировать).	
	Если ВСписок Тогда
		СписокОфисов = Новый СписокЗначений;
	КонецЕсли;
	ТекстЗапроса = "/basket/shipmentOffices?userlogin="+Пользователь+"&userpsw="+Пароль;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	КонецЕсли;
	СписокЭлементов = СтруктураИзJSON(СтрокаОтвет);
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если ВСписок Тогда
			СписокОфисов.Добавить(Элемент.id, Элемент.name);//+" ("+Элемент.id+")");
		КонецЕсли;
		СтрокаОфиса = Объект.ТаблицаОфисов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОфиса, Элемент);
		СтрокаОфиса.Склад = Справочники.Склады.НайтиПоНаименованию(Элемент.name);
		Если СтрокаОфиса.Склад.ЭтоГруппа Тогда
			СтрокаОфиса.Склад = "";
		КонецЕсли;
		СтрокаОфиса.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(Элемент.name);
		СтрокаОфиса.АдресСервиса = АдресСервиса;
		СтрокаОфиса.Пользователь = Пользователь;
	КонецЦикла;
	Если Объект.ТаблицаОфисов.Количество() = 0 Тогда
		сообщить("Опция «Заказы: показывать офисы при выборе самовывоза» отключена, надо включить");
	КонецЕсли;
	//Возврат СписокОфисов;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОфисы(Команда)
	ЗаполнитьОфисыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваКонтрагента(Команда)
	ТД = Элементы.ТаблицаЗаявок.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		сообщить("Выберите контрагента");
		Возврат;
	КонецЕсли;
	//Форма = РегистрыСведений.ДополнительныеСведения.ПолучитьФормуСписка();
	//ОтборПоСписку = Форма.РегистрСведенийСписок.Отбор;
	//ОтборПоКонтрагенту = ОтборПоСписку.Объект;
	//ОтборПоКонтрагенту.Использование = Истина;
	//ОтборПоКонтрагенту.Значение = ТД.Контрагент;
	//ОтборПоКонтрагенту.ВидСравнения = ВидСравнения.Равно;
	//Форма.Открыть();
	
	//Форма = ОткрытьФорму("РегистрСведений.ДополнительныеСведения.ФормаСписка", ,ЭтаФорма);
	//Форма.Список.Отбор .Объект.Отбор.Установить(ТД.Контрагент, Ложь);
	//Форма.Отбор.Объект.Использование = Истина;
	////Форма.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Контрагент.Доступность = Ложь;
	//Форма.Открыть();
	
	Отбор = Новый Структура("Объект", ТД.Контрагент);
	//Форма.ПараметрОтборПоИзмерению = Отбор;
	//Форма.Открыть()

	//ЗначениеОтбора = Новый Структура("ГосударственныйНомер", ТекущиеДанные.ГосударственныйНомер);
	//ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	//ОткрытьФорму("РегистрСведений.юи_ЗакрепленныеТС.ФормаСписка",ПараметрыВыбора);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ДополнительныеСведения.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСотрудниковНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицаМенеджеров = ОбработкаОбъект.ПолучитьПереченьМенеджеровABCP(Истина, Истина);
	Объект.ТаблицаКлиентов.Загрузить(ТаблицаМенеджеров);
	Соответствие = Новый Соответствие;
	Для Каждого СтрокаОфиса Из Объект.ТаблицаОфисов Цикл
		Соответствие.Вставить(СтрокаОфиса.id, СтрокаОфиса.Склад);
	КонецЦикла;
	Для Каждого СтрокаКлиента Из Объект.ТаблицаКлиентов Цикл
		СтрокаКлиента.organizationForm = Соответствие.Получить(СтрокаКлиента.office);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСотрудников(Команда)
	ОбновитьДанныеСотрудниковНаСервере();
КонецПроцедуры
#КонецОбласти

#Область ПереводИнтерфейса

&НаСервере
Функция ПолучитьСписокПереводов()
	СписокПереводов = Новый СписокЗначений;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТабДокумент = Новый ТабличныйДокумент;
	Попытка
    	Макет = ОбработкаОбъект.ПолучитьМакет("Перевод");
	Исключение
		Возврат СписокПереводов;
	КонецПопытки;
	КоличествоСлов = Макет.ВысотаТаблицы-1;
	КоличествоПереводов = Макет.ШиринаТаблицы;
	Для НС = 2 По КоличествоПереводов Цикл
		СписокПереводов.Добавить(НС, Макет.Область(1,НС).Текст);
	КонецЦикла;
	Возврат СписокПереводов;
КонецФункции

&НаКлиенте
Процедура ЯзыкИнтерфейсаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СписокПереводов = ПолучитьСписокПереводов();
	Если СписокПереводов.Количество() = 0 Тогда
		//пока нет перевода, выводим начальные значения
		ПервоначальноеЗаполнениеТаблицы();
	КонецЕсли;
	//в 8.3 работает, но ругается Элемент = СписокПоставщиков.ВыбратьЭлемент();
	//ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораЯзыка", ЭтаФорма);
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораЯзыка", ЭтотОбъект);
	СписокПереводов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Select language");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЯзыка(Элемент, Параметры) Экспорт
	Если Элемент <> Неопределено Тогда
		Объект.ЯзыкИнтерфейса = Элемент.Представление;
        ПеревестиИнтерфейсНаСервере(Элемент.Значение);
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеревестиИнтерфейсНаСервере(НомерЯзыка=0, НаименованиеЯзыка = "")
	Если НаименованиеЯзыка <> "" Тогда
		СписокПереводов = ПолучитьСписокПереводов();
		НС = 0;
		Для Каждого Элемент Из СписокПереводов Цикл
			НС = НС + 1;
			Если Элемент.Представление = НаименованиеЯзыка Тогда
				НомерЯзыка = Число(Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НомерЯзыка = 0 Тогда
		ЗаписьВЛог("Неверно выбран языка");
		Возврат;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТабДокумент = Новый ТабличныйДокумент;
    Макет = ОбработкаОбъект.ПолучитьМакет("Перевод");
	КоличествоСлов = Макет.ВысотаТаблицы;
	КоличествоПереводов = Макет.ШиринаТаблицы-1;
	Для НС = 2 По КоличествоСлов Цикл
		НаименованиеРеквизита = Макет.Область(НС,1).Текст;
		ЗаголовокРеквизита = Макет.Область(НС,НомерЯзыка).Текст;
		Попытка
			Элементы[НаименованиеРеквизита].Заголовок = ЗаголовокРеквизита;
		Исключение
			//сообщить(НаименованиеРеквизита);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальноеЗаполнениеТаблицы()
	ТабДок = ПервоначальноеЗаполнениеТаблицыНаСервере();
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция ПервоначальноеЗаполнениеТаблицыНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТабДокумент = Новый ТабличныйДокумент;
	ТипДекорацияФормы = Тип("ДекорацияФормы");
	ТипДополнениеЭлементаФормы = Тип("ДополнениеЭлементаФормы");
	ТипГруппаФормы = Тип("ГруппаФормы");
	ТипТаблицаФормы = Тип("ТаблицаФормы");
	НС = 2;
	ТабДокумент.Область(1,1).Текст = "Наименование";
	ТабДокумент.Область(1,2).Текст = "ru";
	Для каждого Элемент из Элементы Цикл
		Имя = Элемент.Имя;
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = ТипДекорацияФормы Или ТипЭлемента = ТипДополнениеЭлементаФормы Или ТипЭлемента = ТипГруппаФормы Или ТипЭлемента = ТипТаблицаФормы Тогда
		//Если ТипЭлемента <> ТипГруппаФормы Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Имя, "НомерСтроки") Или Найти(Имя, "КонтекстноеМеню") Или Найти(Имя, "РасширеннаяПодсказка") Или
			Найти(Имя, "КоманднаяПанель") Или Найти(Имя, "СтрокаПоиска") Или Найти(Имя, "УправлениеПоиском") Или
			Найти(Имя, "Добавить") Или Найти(Имя, "Скопировать") Или Найти(Имя, "Изменить") Или
			Найти(Имя, "Удалить") Или Найти(Имя, "ЗакончитьРедактирование") Или Найти(Имя, "Найти") Или
			Найти(Имя, "ОтменитьПоиск") Или Найти(Имя, "ПереместитьВверх") Или Найти(Имя, "ПереместитьВниз") Или
			Найти(Имя, "СортироватьСписокПоВозрастанию") Или Найти(Имя, "СортироватьСписокПоУбыванию") Или Найти(Имя, "ВывестиСписок") Тогда
			Продолжить;
		КонецЕсли;
		//сообщить(Элемент.Имя+"-"+Элемент.Заголовок+"-"+ТипЗнч(Элемент));
		ТабДокумент.Область(НС,1).Текст = Элемент.Имя;
		ЗаголовокРеквизита = Элемент.Заголовок;
		Если ЗаголовокРеквизита = "" Тогда
			//ЗаголовокРеквизита = ИзСтрокиБезПробеловВСтрокуСПробелами(Элемент.Имя);
		КонецЕсли;
		ТабДокумент.Область(НС,2).Текст = ЗаголовокРеквизита;
		//ТабДокумент.Область(НС,3).Текст = СокрЛП(ТипЭлемента);
		НС = НС + 1;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ИзСтрокиБезПробеловВСтрокуСПробелами(Исходная)
	Конечная=Лев(Исходная,1);
	Для Индекс=2 по СтрДлина(Исходная) цикл
	    Символ=Сред(Исходная,Индекс,1);
	    Конечная=Конечная+?(ВРег(Символ)=Символ," "+НРег(Символ),Символ);
	КонецЦикла;
	Конечная = СтрЗаменить(Конечная, "s m t p", "SMTP");
	Конечная = СтрЗаменить(Конечная, "a b c p", "ABCP");
	Конечная = СтрЗаменить(Конечная, "к к м", "ККМ");
	Конечная = СтрЗаменить(Конечная, "н д с", "НДС");
	Конечная = СтрЗаменить(Конечная, " 1 с", " 1С");
	Конечная = СтрЗаменить(Конечная, "email", "E-mail");
	Возврат Конечная;
КонецФункции
#КонецОбласти

#Область СинонимыБрендов
&НаСервере
Процедура ЗаполнитьБрендыНаСервере()
	СвойствоБренд = Объект.СвойствоБренд;
	АдресСервиса = Объект.АдресСервиса;
	Если Лев(АдресСервиса, 6) = "id9652" И ЗначениеЗаполнено(СвойствоБренд) Тогда
		id9652 = Истина;
	Иначе
		id9652 = Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "/articles/brands?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль;
	HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	КонецЕсли;
	СписокЭлементов = СтруктураИзJSON(СтрокаОтвет);
	ВсегоЭлементов = СписокЭлементов.Количество();
	ЗаписьВЛог("Загрузка брендов:  "+ВсегоЭлементов);
	ВТЗ = Объект.СинонимыБрендов.Выгрузить();
	ВТЗ.Индексы.Добавить("Наименование");
	ВТЗ.Индексы.Добавить("Синоним");
	Структура = Новый Структура("Наименование");//,Синоним");
	Структура2 = Новый Структура("Наименование");
	Объект.СинонимыБрендов.Очистить();
	СинонимыБрендов = Новый ТаблицаЗначений;
	СинонимыБрендов = Объект.СинонимыБрендов.Выгрузить();
	Для Каждого Элемент Из СписокЭлементов Цикл
		ВсегоЭлементов = ВсегоЭлементов - 1;
		Если ВсегоЭлементов % 500 = 0 Тогда
			//состояние(ВсегоЭлементов);
		КонецЕсли;
		name = Элемент.name;
		//Если Элемент.aliases.Количество() = 0 Тогда
			НовСтрока = СинонимыБрендов.Добавить();
			НовСтрока.Наименование = name;
			НовСтрока.Синоним = name;
			БрендНоменклатуры = Справочники.Производители.НайтиПоНаименованию(name);
			Если ЗначениеЗаполнено(БрендНоменклатуры) Тогда
				НовСтрока.Бренд = БрендНоменклатуры;
			КонецЕсли;
		//Иначе
		//	Для Каждого Синоним Из Элемент.aliases Цикл
		//		НовСтрока = СинонимыБрендов.Добавить();
		//		НовСтрока.Наименование = name;
		//		НовСтрока.Синоним = Синоним;
		//		Если НовСтрока.Синоним <> "" Тогда
		//			БрендНоменклатуры = Справочники.Производители.НайтиПоНаименованию(Синоним);
		//			Если ЗначениеЗаполнено(БрендНоменклатуры) Тогда
		//				НовСтрока.Бренд = БрендНоменклатуры;
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
	КонецЦикла;
	//заполняем сохраненными значениями
	Для Каждого НовСтрока Из СинонимыБрендов Цикл
		Структура.Наименование = НовСтрока.Наименование;
		//Структура.Синоним = НовСтрока.Синоним;
		СтрокиБрендов = ВТЗ.НайтиСтроки(Структура);
		Для Каждого СтрокаБрендов Из СтрокиБрендов Цикл
			Если ЗначениеЗаполнено(СтрокаБрендов.Бренд) Тогда
				НовСтрока.Бренд = СтрокаБрендов.Бренд;
				НовСтрока.СвойствоБренд = СтрокаБрендов.СвойствоБренд;
				НовСтрока.Префикс = СтрокаБрендов.Префикс;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если id9652 Тогда
		Для Каждого НовСтрока Из СинонимыБрендов Цикл
			Структура.Наименование = НовСтрока.Наименование;
			//Структура.Синоним = НовСтрока.Синоним;
			НовСтрока.СвойствоБренд = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Структура.Наименование,,,СвойствоБренд);
			//Если ЗначениеЗаполнено(НовСтрока.СвойствоБренд) Тогда
			//	Структура2.Наименование = name;
			//	СтрокиБрендов = ВТЗ.НайтиСтроки(Структура);
			//	Для Каждого СтрокаБрендов Из СтрокиБрендов Цикл
			//		Если ЗначениеЗаполнено(СтрокаБрендов.Бренд) Тогда
			//			НовСтрока.Бренд = СтрокаБрендов.Бренд;
			//			НовСтрока.Префикс = СтрокаБрендов.Префикс;
			//		КонецЕсли;
			//	КонецЦикла;
			//	Если НовСтрока.Префикс = "" Тогда
			//		НовСтрока.Префикс = Лев(Синоним, 3);
			//	КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Объект.СинонимыБрендов.Загрузить(СинонимыБрендов);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБренды(Команда)
	ЗаполнитьБрендыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтрокиБезБрендовНаСервере()
	СвойствоБренд = Объект.СвойствоБренд;
	Если Лев(Объект.АдресСервиса, 6) = "id9652" И ЗначениеЗаполнено(СвойствоБренд) Тогда
		id9652 = Истина;
		Структура = Новый Структура("СвойствоБренд", Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка());
	Иначе
		id9652 = Ложь;
		Структура = Новый Структура("Бренд", Справочники.Производители.ПустаяСсылка());
	КонецЕсли;
	ТЗ = Объект.СинонимыБрендов.Выгрузить();
	НайденныеСтроки = ТЗ.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТЗ.Удалить(НайденнаяСтрока);
	КонецЦикла;
	СноваОчистить = Ложь;
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если Лев(СокрЛП(ТекСтрока.Бренд),1) = "<" Тогда //<Объект не найден
			ТекСтрока.Бренд = "";
			СноваОчистить = Истина;
		КонецЕсли;
	КонецЦикла;
	Если СноваОчистить Тогда
		НайденныеСтроки = ТЗ.НайтиСтроки(Структура);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТЗ.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	Объект.СинонимыБрендов.Загрузить(ТЗ);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрокиБезБрендов(Команда)
	ОчиститьСтрокиБезБрендовНаСервере();
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура ДобавитьПроизводительНоменклатуре(Ссылка, НаименованиеПроизводителя, НомерСтрокиПрихода = Неопределено)
	Если ЗначениеЗаполнено(Ссылка.Производитель) Тогда
		сообщить("Уже заполнено производитель");
		Возврат;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Производитель = ОбработкаОбъект.НайтиДобавитьПроизводитель(НаименованиеПроизводителя);
	Если НомерСтрокиПрихода <> Неопределено Тогда
		Объект.ТаблицаПриход[НомерСтрокиПрихода].Производитель = Производитель;
	КонецЕсли;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Об = Ссылка.ПолучитьОбъект();
		Об.Производитель = Производитель;
		Об.Записать();
	КонецЕсли;
	//если уже заполнено, то не меняем
	//и ещё сделать, чтобы по выбранным заполнялось производителем, и в форме, и сразу в карточке номенклатуры, но не более 100 позиций подряд
КонецПроцедуры

&НаКлиенте
Процедура ТЗОстаткиПроизводительПриИзменении(Элемент)
	ТД = Элементы.ТЗОстатки.ТекущиеДанные;
	Если СтрДлина(ТД.Производитель) > 2 Тогда
		ДобавитьПроизводительНоменклатуре(ТД.Ссылка, ТД.Производитель)
	КонецЕсли;
КонецПроцедуры

#Область СинонимыБрендов
&НаСервере
Функция ЗаполнитьТаблицуНастроек()
	//ЗначениеПоУмолчанию = Новый УникальныйИдентификатор;
	//СтруктураСвойств = Новый Структура("ИспользоватьСинонимыБрендов", ЗначениеПоУмолчанию);
	//ЗаполнитьЗначенияСвойств(СтруктураСвойств, ЭтаФорма);

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ПереченьНастроек = ОбработкаОбъект.ПолучитьПереченьНастроек();
	НазванияНастроек = СтрРазделить(ПереченьНастроек, ",");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.Область(1,1).Текст = "Наименование";
	ТабДокумент.Область(1,1).ШиринаКолонки = 35;
	ТабДокумент.Область(1,2).Текст = "Описание";
	ТабДокумент.Область(1,2).ШиринаКолонки = 65;
	НС = 2;
	
	Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
	Для каждого Элемент из Элементы Цикл
		Имя = Элемент.Имя;
		Если НазванияНастроек.Найти(Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаголовокРеквизита = Элемент.Заголовок;
		Если ЗаголовокРеквизита = "" Тогда
			ЗаголовокРеквизита = ИзСтрокиБезПробеловВСтрокуСПробелами(Имя);
		КонецЕсли;
		Подсказка = Элемент.Подсказка;
		Если Подсказка = "" Тогда
			//Продолжить;
		КонецЕсли;
		ТабДокумент.Область(НС,1).Текст = ЗаголовокРеквизита;
		ТабДокумент.Область(НС,1).Обвести(Линия,Линия,Линия,Линия);
		ТабДокумент.Область(НС,2).Текст = Подсказка;
		ТабДокумент.Область(НС,2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ТабДокумент.Область(НС,2).Обвести(Линия,Линия,Линия,Линия);
		НС = НС + 1;
	КонецЦикла;
	
	Возврат ТабДокумент;
КонецФункции

&НаКлиенте
Процедура ВывестиОписаниеНастроек(Команда)
	ТабДок = ЗаполнитьТаблицуНастроек();
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКассыНаСервере()
	Объект.ТаблицаКасс.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Кассы.Ссылка КАК Касса,
	               |	0 КАК ЭквайринговыйТерминал,
	               |	Кассы.Владелец КАК Организация,
	               |	Кассы.Подразделение КАК Подразделение
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	ЭквайринговыеТерминалы.Ссылка,
	               |	ЭквайринговыеТерминалы.БанковскийСчет.Владелец,
	               |	НЕОПРЕДЕЛЕНО
	               |ИЗ
	               |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы";
	Результат = Запрос.Выполнить();
	Объект.ТаблицаКасс.Загрузить(Результат.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКассы(Команда)
	ЗаполнитьКассыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьЗаказыБезСайтаПриИзменении(Элемент)
	ПодборЗаказовПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовПриИзменении(Элемент)
	//не забыть про то, что когда разбивается на несколько строк, то надо итоговую сумму подогнать всё равно
	Если Объект.КодСтатусаНаСкладе = 0 Тогда
		сообщить("Не заполнен статус товара «На складе», подбор заказов отключен");
		ПодборЗаказов = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВариантОбеспечения) Тогда
		сообщить("Не заполнен реквизит «Вариант обеспечения» на закладке «Поступление», подбор заказов отключен");
		ПодборЗаказов = Ложь;
	КонецЕсли;
	Если Объект.ТаблицаПриход.Количество() = 0 Тогда
		сообщить("Не заполнена таблица");
		ПодборЗаказов = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Поставщик) И ПодборЗаказов Тогда
		сообщить("Не заполнен поставщик");
		ПодборЗаказов = Ложь;
	КонецЕсли;
	Если ПодборЗаказов Тогда
		ПоказатьОповещениеПользователя(,,"заполняем незакрытыми заказами поставщиков, привязанными к заказам клиентов");
		Элементы.ТаблицаПриходОсталось.Видимость = Истина;
		Элементы.ЗаказыДляПодбора.Видимость = Истина;
		//Элементы.ПодобратьЗаказыВПриходе.Видимость = Истина;
		ЗаполнитьДляПодбораЗаказов();
	Иначе
		Элементы.ТаблицаПриходОсталось.Видимость = Ложь;
		Элементы.ЗаказыДляПодбора.Видимость = Ложь;
		//Элементы.ПодобратьЗаказыВПриходе.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДляПодбораЗаказов();
	Если Объект.ТаблицаПриход.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СписокНоменклатуры = Объект.ТаблицаПриход.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
	Если Объект.Отладка Тогда
		Для Каждого Элемент Из СписокНоменклатуры Цикл
			сообщить(""+Элемент.Код+"	"+Элемент);
		КонецЦикла;
	КонецЕсли;
	Если СписокНоменклатуры.Количество() = 0 Тогда
		сообщить("Нет номенклатуры в приходе");
		Возврат;
	КонецЕсли;
	Объект.ЗаказыДляПодбора.Очистить();
	Запрос = Новый Запрос;
	Если Объект.УчитыватьЗаказыБезСайта Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		               |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
		               |	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК Количество,
		               |	ЗаказыПоставщикамОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
		               |	ЗаказыПоставщикамОстатки.Номенклатура.Артикул КАК Артикул,
		               |	ЗаказыПоставщикамОстатки.Номенклатура.Производитель КАК Производитель,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование КАК ЗаказКлиента,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.НомерПоДаннымКлиента КАК НомерЗаявки,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата КАК ДатаЗаказаПоставщику,
		               |	ЗаказыПоставщикамОстатки.КодСтроки КАК КодСтроки,
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент КАК Поставщик,
		               |	ВЫБОР
		               |		КОГДА ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		               |			ТОГДА &Дата
		               |		ИНАЧЕ ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.Дата
		               |	КОНЕЦ КАК ДатаЗаказа,
		               |	ВЫБОР
		               |		КОГДА ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		               |			ТОГДА """"
		               |		ИНАЧЕ ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.Контрагент
		               |	КОНЕЦ КАК Контрагент
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, ) КАК ЗаказыПоставщикамОстатки
		               |ГДЕ
		               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент = &Контрагент
		               |	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		               |	И ЗаказыПоставщикамОстатки.Номенклатура В(&Номенклатура)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Номенклатура,
		               |	ДатаЗаказаПоставщику";
		//перестаёт работать
					   //|	И (ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.Дата >= &Дата
					   //|			ИЛИ ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка))
		//               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.Дата КАК ДатаЗаказа
		//				 |	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.Дата >= &Дата - если заказ поставщику без основания, то не будет работать
	Иначе
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	               |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК Количество,
	               |	ЗаказыПоставщикамОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
	               |	ЗаказыПоставщикамОстатки.Номенклатура.Артикул КАК Артикул,
	               |	ЗаказыПоставщикамОстатки.Номенклатура.Производитель КАК Производитель,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование КАК ЗаказКлиента,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.НомерПоДаннымКлиента КАК НомерЗаявки,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата КАК ДатаЗаказаПоставщику,
	               |	ЗаказыПоставщикамОстатки.КодСтроки КАК КодСтроки,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент КАК Поставщик,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.Дата КАК ДатаЗаказа,
	               |	ВЫБОР
	               |		КОГДА ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	               |			ТОГДА """"
	               |		ИНАЧЕ ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.Контрагент
	               |	КОНЕЦ КАК Контрагент,
	               |	ЗаказыПоставщикамОстатки.Склад КАК Склад
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, ) КАК ЗаказыПоставщикамОстатки
	               |ГДЕ
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент = &Контрагент
	               |	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	               |	И ЗаказыПоставщикамОстатки.Номенклатура В(&Номенклатура)
	               |	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДокументОснование.Дата >= &Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	ДатаЗаказа";
		Если Объект.Отладка Тогда
			сообщить("Учитывать только заказы с сайта");
		КонецЕсли;
	КонецЕсли;
	Если НЕ Объект.НеУчитыватьЗакрытыеЗаказыПоставщикам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент", Объект.Поставщик);
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	Запрос.УстановитьПараметр("НаДату", ТекущаяДатаСеанса());
	ДатаМинусМесяц = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
	Запрос.УстановитьПараметр("Дата", ДатаМинусМесяц);
	Если Объект.УТ111 Тогда
		//если статус не будет Закрыт, тогда в движениях по регистру "Заказы поставщикам" не заполнится реквизит "К оформлению" (текст запроса в процедуре ТекстЗапросаТаблицаЗаказыПоставщикам())
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)", "");
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если Объект.НеУчитыватьЗакрытыеЗаказыПоставщикам Тогда
			сообщить("Нет незакрытых заказов (учитывается флажок «Не учитывать закрытые заказы поставщикам») для подбора с даты: "+ДатаМинусМесяц+", или задвоенные контрагенты и партнеры");
		Иначе
			сообщить("Нет заказов для подбора с даты: "+ДатаМинусМесяц+", или задвоенные контрагенты и партнеры");
		КонецЕсли;
		Если Объект.Отладка Тогда
			сообщить(Запрос.Текст);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Объект.ЗаказыДляПодбора.Загрузить(Результат.Выгрузить());
	УдалитьОтмененныеПозицииИзПодбора();
	ПодобратьЗаказыВПриходеНаСервере();
	РазделитьПозицииПриходаПоЗаказам();
КонецПроцедуры

Процедура РазделитьПозицииПриходаПоЗаказам()
	//если 3 заказа с 1 позицией, поставщик привёз 3 штуки, то каждую надо привязать к своему заказу покупателя
	Если НЕ Объект.РазделятьПозицииПоЗаказам Тогда
		Возврат;
	КонецЕсли;
	ТекущийНомерСтроки = Объект.ТаблицаПриход.Количество();//с нуля нумерация
	СтруктураНоменклатура = Новый Структура("Номенклатура");
	Пока ТекущийНомерСтроки > 0 Цикл
		ТекущийНомерСтроки = ТекущийНомерСтроки - 1;
		СтрокаТаблицы = Объект.ТаблицаПриход[ТекущийНомерСтроки];
		Если СтрокаТаблицы.Количество = 1 Тогда //не надо распределять
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.Количество = СтрокаТаблицы.Осталось Тогда //если ничего не распределили по заказам, то тоже нечего разделять
			Продолжить;
		КонецЕсли;
		//ищем связанные
		СтруктураНоменклатура.Номенклатура = СтрокаТаблицы.Номенклатура;
		НСтроки = Объект.ЗаказыДляПодбора.НайтиСтроки(СтруктураНоменклатура);
		Если НСтроки.Количество() = 0 Тогда //что-то не так пошло, ничего не нашли
			Продолжить;
		КонецЕсли;
		КоличествоДляРаспределения = СтрокаТаблицы.Количество;
		ИсходноеКоличество = СтрокаТаблицы.Количество;
		//при создании поступления рассчитывается
		//Если СтрокаТаблицы.ЦенаЗакупки = 0 Тогда
		//	ЦенаПозиции = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
		//Иначе
		//	ЦенаПозиции = СтрокаТаблицы.ЦенаЗакупки;
		//КонецЕсли;
		Для Каждого НСтрока Из НСтроки Цикл
			Если ТекущийНомерСтроки < (Объект.ТаблицаПриход.Количество()-1) Тогда //добавляем или вставляем строки
				НовСтрока = Объект.ТаблицаПриход.Вставить(ТекущийНомерСтроки+1);//за начальной строкой вставляем
			Иначе
				НовСтрока = Объект.ТаблицаПриход.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаблицы);
			НовСтрока.ЗаказКлиента = НСтрока.ЗаказКлиента;
			НовСтрока.ЗаказПоставщику = НСтрока.ЗаказПоставщику;
			НовСтрока.Количество = НСтрока.ВПриход;
			НовСтрока.КодСтроки = НСтрока.КодСтроки;
			//Если НовСтрока.Количество <> ИсходноеКоличество Тогда
			//	НовСтрока.Сумма = НовСтрока.Количество * ЦенаПозиции;
			//	сообщить(""+НовСтрока.Артикул+"	"+НовСтрока.Количество+"	"+ЦенаПозиции);
			//	Если СтрокаТаблицы.СуммаНДС <> 0 Тогда
			//		СтрокаТаблицы.СуммаНДС = НовСтрока.Сумма / 120 * 20;
			//	КонецЕсли;
			//КонецЕсли;
			КоличествоДляРаспределения = КоличествоДляРаспределения - НСтрока.ВПриход;
			Если НовСтрока.Сумма <> 0 Тогда
				НовСтрока.Сумма = 0;
				НовСтрока.СуммаНДС = 0;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоДляРаспределения>0 Тогда
			СтрокаТаблицы.Количество = КоличествоДляРаспределения;
			//это количество ни на кого не распределилось, очищаем документы основания
			СтрокаТаблицы.ЗаказКлиента = "";
			СтрокаТаблицы.ЗаказПоставщику = "";
			//Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПоставщику) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказКлиента) Тогда
			//	СтрокаТаблицы.ЗаказКлиента = СтрокаТаблицы.ЗаказПоставщику.ДокументОснование;
			//КонецЕсли;
			НовСтрока.Сумма = 0;
			НовСтрока.СуммаНДС = 0;
		Иначе
			//вся строка распределена, удаляем загруженную
			Объект.ТаблицаПриход.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьОтмененныеПозицииИзПодбора()
	Структура = Новый Структура("Отменено,Номенклатура,КодСтроки",Истина);
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого ТекСтрока Из Объект.ЗаказыДляПодбора Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
			Структура.Номенклатура = ТекСтрока.Номенклатура;
			Структура.КодСтроки = ТекСтрока.КодСтроки;
			НайденныеСтроки = ТекСтрока.ЗаказКлиента.Товары.НайтиСтроки(Структура);
			Если НайденныеСтроки.Количество()>0 Тогда
				МассивСтрокДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из МассивСтрокДляУдаления Цикл
		Объект.ЗаказыДляПодбора.Удалить(Элемент);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриходПриАктивизацииСтроки(Элемент)
	Если НЕ ПодборЗаказов Тогда
		Возврат;
	КонецЕсли;
	//делаем отбор в таблице ЗаказыДляПодбора
	Если ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ТаблицаПриход.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.Элементы.ЗаказыДляПодбора.ОтборСтрок = Новый ФиксированнаяСтруктура("Номенклатура", Элементы.ТаблицаПриход.ТекущиеДанные.Номенклатура);
	//ИмяТекущегоЭлемента = ЭтаФорма.ТекущийЭлемент.Имя;
	//Если (ИмяТекущегоЭлемента <> "ТаблицаЗаявок") И (ИмяТекущегоЭлемента <> "ТЗЗаявкиКлиента") Тогда
	//	Возврат;
	//КонецЕсли;
	//Если Не (Элемент.ТекущиеДанные = Неопределено) Тогда
	//	Если Объект.ТаблицаЗаявок.Количество()>0 Тогда
	//		Если (ИмяТекущегоЭлемента = "ТаблицаЗаявок") Тогда
	//			ЭтаФорма.Элементы.ТЗНоменклатура.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерЗаявки", ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки);
	//			//ЭлементОтбора = ЭтотОбъект.ТЗНоменклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//			//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерЗаявки");
	//			//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//			//ЭлементОтбора.Использование = Истина;
	//			//ЭлементОтбора.ПравоеЗначение = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки;;
	//		ИначеЕсли (ИмяТекущегоЭлемента = "ТЗЗаявкиКлиента") Тогда
	//			ЭтаФорма.Элементы.ТЗНоменклатураКлиента.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерЗаявки", ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерЗаявки);
	//		Иначе
	//			сообщить("Нет обработчика для элемента: "+ИмяТекущегоЭлемента);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаказыДляПодбораВПоступлениеПриИзмененииНаСервере(Номенклатура, КоличествоВПриходе)
	Структура = Новый Структура("Номенклатура", Номенклатура);
	СтрокиЗаказов = Объект.ЗаказыДляПодбора.НайтиСтроки(Структура);
	КоличествоПодобранных = 0;
	Для Каждого СтрокаЗаказов Из СтрокиЗаказов Цикл
		КоличествоПодобранных = КоличествоПодобранных + СтрокаЗаказов.ВПриход;
	КонецЦикла;
	Если КоличествоВПриходе < КоличествоПодобранных Тогда
		сообщить("Подобрано больше, чем в приходе");
	КонецЕсли;
	//пересчитываем колонку ТаблицаПриходОсталось
	//с учетом количества
	Возврат КоличествоПодобранных;
КонецФункции

&НаКлиенте
Процедура ЗаказыДляПодбораВПоступлениеПриИзменении(Элемент)
	ТД = Элементы.ЗаказыДляПодбора.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если ТД.ВПриход > ТД.Количество Тогда
		ТД.ВПриход = ТД.Количество;
	КонецЕсли;
	ТД = Элементы.ТаблицаПриход.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	КоличествоПодобранных = ЗаказыДляПодбораВПоступлениеПриИзмененииНаСервере(ТД.Номенклатура, ТД.Количество);
	ТД.Осталось = ТД.Количество - КоличествоПодобранных;
КонецПроцедуры

&НаСервере
Процедура СопоставитьКлиентовПоНомеруТелефонаНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	userId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("userId");
	Для Каждого ТекСтрока Из Объект.ТаблицаКлиентов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.ИдентификаторКонтрагента = 0 И ТекСтрока.МобильныйТелефон <> "" Тогда
			ИдКлиента = ОбработкаОбъект.НайтиИдКлиентаПоНомеруТелефонаВABCP(ТекСтрока.МобильныйТелефон);
			Если ИдКлиента <> 0 Тогда
				МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = ТекСтрока.Контрагент;
				МенеджерЗаписи.Свойство = userId;
				МенеджерЗаписи.Значение = Число(ИдКлиента);
				МенеджерЗаписи.Записать();
				ТекСтрока.ИдентификаторКонтрагента = ИдКлиента;
				ТекСтрока.Обновить = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьКлиентовПоНомеруТелефона(Команда)
	СопоставитьКлиентовПоНомеруТелефонаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтключитьРекламуНаСервере()
   ПользователиБазы = ПользователиИнформационнойБазы.ПолучитьПользователей();
   
   Если ПользователиБазы.Количество() > 0 тогда
       Для Каждого ПользовательБазы Из ПользователиБазы Цикл
           ХранилищеОбщихНастроек.Сохранить("ИнформацияПриЗапуске", "Показывать", Ложь, , ПользовательБазы.Имя);
           ХранилищеОбщихНастроек.Сохранить("ИнформацияПриЗапуске", "ДатаБлижайшегоПоказа", '20990101', , ПользовательБазы.Имя);
		   ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Реклама отключена для "+ПользовательБазы.Имя);
       КонецЦикла;
   Иначе
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИнформацияПриЗапуске", "Показывать", Ложь);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИнформацияПриЗапуске", "ДатаБлижайшегоПоказа", '20990101');
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Реклама отключена");
   КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьРекламу(Команда)
	ОтключитьРекламуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтключитьWebИТСНаСервере()
	ВыбПользователи   = ПользователиИнформационнойБазы.ПолучитьПользователей();

	Если ВыбПользователи.Количество()>0 тогда
		Для Каждого Пользователь Из ВыбПользователи Цикл
			ХранилищеОбщихНастроек.Сохранить("ИнтернетПоддержкаПользователей","ПовторитьПопыткуПодключенияПриСтартеПрограммы", Ложь,, Пользователь.Имя);
			ХранилищеОбщихНастроек.Сохранить("ИнтернетПоддержкаПользователей", "ВсегдаПоказыватьПриСтартеПрограммы", Ложь, Пользователь.Имя);
			Сообщить("Для пользователя " + Пользователь.Имя + " интернет-поддержка отключена");
		КонецЦикла;
	Иначе
		ХранилищеОбщихНастроек.Сохранить("ИнтернетПоддержкаПользователей", "ПовторитьПопыткуПодключенияПриСтартеПрограммы", Ложь);
		ХранилищеОбщихНастроек.Сохранить("ИнтернетПоддержкаПользователей", "ВсегдаПоказыватьПриСтартеПрограммы", Ложь);
		Сообщить("Интернет-поддержка отключена");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьWebИТС(Команда)
	ОтключитьWebИТСНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяПривязкаОплатПриИзменении(Элемент)
	Элементы.paymentOrderLinks.Видимость = Объект.РасширеннаяПривязкаОплат;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтатусовСоздаватьПоступлениеПриИзменении(Элемент)
	ТД = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	Если ТД.СоздаватьЗаявкуПокупателя = Истина И ТД.СоздаватьПоступление = Истина Тогда
		ТД.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
		ТД.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению");//КОтгрузке
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтатусовСоздаватьРеализациюПриИзменении(Элемент)
	ТД = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	Если ТД.СоздаватьЗаявкуПокупателя = Истина И ТД.СоздаватьРеализацию = Истина Тогда
		ТД.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
		ТД.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению");//КОтгрузке
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииНаСервере()
	//проверить, чтобы у кассы была другая контора
	Если Объект.Касса.Владелец <> Объект.Организация Тогда
		сообщить("У выбранной кассы другая организация, кассовые документы будут создаваться на "+СокрЛП(Объект.Касса.Владелец));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	КассаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаказВJSONНаСервере()
	ФильтрПоЗаявке = Объект.ФильтрПоЗаявке;
	Если Объект.Франчайзи Тогда
		Для Каждого СтрокаТаблицы Из Объект.ТаблицаДоступов Цикл
			АдресСервиса = СтрокаТаблицы.АдресСервиса;
			Пользователь = СтрокаТаблицы.Пользователь;
			Пароль = СтрокаТаблицы.Пароль;
			//ТекстЗапроса = "/cp/order?userlogin="+Пользователь+"&userpsw="+Пароль+"&number="+Формат(ФильтрПоЗаявке, "ЧГ=0")+"&format=additional";//чтобы при гостевом заказе данные возвращал, в том числе адрес
			ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+"&withDeleted=1&numbers[]="+Формат(ФильтрПоЗаявке, "ЧГ=0")+"&format=additional";
			Если Объект.Отладка Тогда
				сообщить(АдресСервиса+ТекстЗапроса);
			КонецЕсли;
			HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
			HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
			КодСостояния = HTTPОтвет.КодСостояния;
			СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
			Если СтрокаОтвет = "{""errorCode"":301,""errorMessage"":""Order with such online number not found""}" Тогда
				Продолжить;
			КонецЕсли; 
			Текст = Новый ТекстовыйДокумент;
			Текст.ДобавитьСтроку(СтрокаОтвет);
			Возврат Текст;
		КонецЦикла; 
	Иначе
		АдресСервиса = Объект.АдресСервиса;
		Пользователь = Объект.Пользователь;
		Пароль = Объект.Пароль;
		//ТекстЗапроса = "/cp/order?userlogin="+Пользователь+"&userpsw="+Пароль+"&number="+Формат(ФильтрПоЗаявке, "ЧГ=0")+"&format=additional";//чтобы при гостевом заказе данные возвращал, в том числе адрес
		ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+"&withDeleted=1&numbers[]="+Формат(ФильтрПоЗаявке, "ЧГ=0")+"&format=additional";
		Если Объект.Отладка Тогда
			сообщить(АдресСервиса+ТекстЗапроса);
		КонецЕсли;
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если СтрокаОтвет = "{""errorCode"":301,""errorMessage"":""Order with such online number not found""}" Тогда
			сообщить("Нет заявки № "+ФильтрПоЗаявке);
		КонецЕсли; 
		//Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		//	Возврат ""+КодСостояния+" "+СтрокаОтвет;
		//КонецЕсли;
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(СтрокаОтвет);
		Если Найти(СтрокаОтвет, "isDelete"":""1""")>0 Тогда
			Текст.ДобавитьСтроку("Внимание! Заказ удалён, его не будет в данных для загрузки с сайта");
		КонецЕсли;
		Возврат Текст;
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура ПолучитьЗаказВJSON(Команда)
	Если Объект.ФильтрПоЗаявке = 0 Тогда
		сообщить("Заполните фильтр по заявке");
		Возврат;
	КонецЕсли;
	Текст = ПолучитьЗаказВJSONНаСервере();
	Текст.Показать();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Объект.ОрганизацияРозница = Объект.Организация;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры
#КонецОбласти

#Область Доставка
&НаСервере
Процедура ЗаполнитьВариантыДоставкиНаСервере()
	//https://cp.abcp.ru/?page=allsettings&systemsettings&options
	//Возвращает список доступных способов доставки. Идентификатор способа доставки необходим при отправке заказа
	ТекстЗапроса = "/basket/shipmentMethods?userlogin="+Объект.Пользователь+"&userpsw="+Объект.Пароль;
	HTTPСоединение = Новый HTTPСоединение(Объект.АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	КонецЕсли;
	Объект.СпособыДоставки.Очистить();
	СписокЭлементов = СтруктураИзJSON(СтрокаОтвет);
	Для Каждого Элемент Из СписокЭлементов Цикл
		СтрокаТаблицы = Объект.СпособыДоставки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент);
		СтрокаТаблицы.Услуга = Справочники.Номенклатура.НайтиПоНаименованию(Элемент.name);
		Если СтрокаТаблицы.Услуга.ЭтоГруппа Тогда
			СтрокаТаблицы.Услуга = "";
		КонецЕсли;
	КонецЦикла;
	Если СписокЭлементов.Количество() = 0 Тогда
		сообщить("Опция «Корзина: показывать типы доставки» отключена, надо включить, или не добавлены типы доставки в настройках");
		//https://cp.abcp.ru/?page=allsettings&ordersettings&delivery
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантыДоставки(Команда)
	ЗаполнитьВариантыДоставкиНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСправочникСтатусовВ1СНаСервере()
	Для Каждого ТекСтрока Из Объект.ТаблицаСтатусов Цикл
		НайденнаяСсылка  = Справочники.СтатусыABCP.НайтиПоКоду(ТекСтрока.КодСтатуса);
		Если НайденнаяСсылка = Справочники.СтатусыABCP.ПустаяСсылка() Тогда
			Об = Справочники.СтатусыABCP.СоздатьЭлемент();
			Об.Код = ТекСтрока.КодСтатуса;
			Об.Наименование = ТекСтрока.НаименованиеСтатуса;
			Об.ЦветСтатуса = ТекСтрока.ЦветСтатуса;
			Об.Записать();
		Иначе
			Об = НайденнаяСсылка.ПолучитьОбъект();
			Об.Наименование = ТекСтрока.НаименованиеСтатуса;
			Об.ЦветСтатуса = ТекСтрока.ЦветСтатуса;
			Об.Записать();
    	КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область СправочникСтатусыABCP
&НаКлиенте
Процедура ЗаполнитьСправочникСтатусовВ1С(Команда)
	ЗаполнитьСправочникСтатусовВ1СНаСервере();
	ОткрытьФорму("Справочник.СтатусыABCP.ФормаСписка");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьСвойстваКлиента(Команда)
	ТД = Элементы.ТЗКлиенты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		сообщить("Выберите контрагента");
		Возврат;
	КонецЕсли;
	Отбор = Новый Структура("Объект", ТД.Контрагент);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ДополнительныеСведения.ФормаСписка", ПараметрыФормы);
КонецПроцедуры

&НаСервере
Процедура ПодобратьЗаказыВПриходеНаСервере()
	//из УПД подбираем заказы под приходы
	//и надо, наверное статусы изменять в заказах
	//и неизвестно - делать поступление с разбивкой по заказам или нет, или просто статусы менять
	Структура = Новый Структура("Номенклатура");
	Для Каждого СтрокаПрихода Из Объект.ТаблицаПриход Цикл
		Структура.Номенклатура = СтрокаПрихода.Номенклатура;
		СтрокаПрихода.ЗаказПоставщику = "";
		СтрокиПодбора = Объект.ЗаказыДляПодбора.НайтиСтроки(Структура);
		КоличествоВДокументе = СтрокаПрихода.Количество;
		ОсталосьРаспределить = КоличествоВДокументе;
		Для Каждого СтрокаПодбора Из СтрокиПодбора Цикл
			//привязывается только один
			Если НЕ ЗначениеЗаполнено(СтрокаПрихода.ЗаказПоставщику) И ЗначениеЗаполнено(СтрокаПодбора.ЗаказПоставщику) Тогда
				СтрокаПрихода.ЗаказПоставщику = СтрокаПодбора.ЗаказПоставщику;
			КонецЕсли;
			Если ОсталосьРаспределить > СтрокаПодбора.Количество Тогда
				СтрокаПодбора.ВПриход = СтрокаПодбора.Количество;
				ОсталосьРаспределить = ОсталосьРаспределить - СтрокаПодбора.Количество;
			Иначе
				СтрокаПодбора.ВПриход = ОсталосьРаспределить;
				ОсталосьРаспределить = 0;
			КонецЕсли;
		КонецЦикла;
		СтрокаПрихода.Осталось = ОсталосьРаспределить;
	КонецЦикла;
КонецПроцедуры

Процедура ИзменитьСтатусыПослеСозданияПоступления()
	Если Объект.КодСтатусаНаСкладе = 0 Тогда
		сообщить("Не заполнен статус товара «На складе»");
		Возврат;
	КонецЕсли;
	Если Объект.СтатусПослеПоступления<>0 Тогда
		КодСтатуса = Формат(Объект.СтатусПослеПоступления, "ЧГ=0");
	Иначе
		КодСтатуса = Формат(Объект.КодСтатусаНаСкладе, "ЧГ=0");
	КонецЕсли;
	
	Структура = Новый Структура("НомерЗаявки");
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТЗаказы = Объект.ЗаказыДляПодбора.Выгрузить(,"НомерЗаявки");
	ТЗаказы.Свернуть("НомерЗаявки",);
	Для Каждого СтрокаЗаявки Из ТЗаказы Цикл
		Если СтрокаЗаявки.НомерЗаявки = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПереченьПозиций = "";
		Структура.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		НайденныеСтроки = Объект.ЗаказыДляПодбора.НайтиСтроки(Структура);
		НС = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.КодСтроки = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если НайденнаяСтрока.КодСтроки = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если НайденнаяСтрока.ВПриход = 0 Тогда//было ВПоступление
				//на сайте очень большие номера строк сообщить(Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0") + " позиция в 1С была добавлена вручную "+НайденнаяСтрока.Номенклатура);
				Продолжить;
			КонецЕсли;
			НС = НС + 1;
			ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(НайденнаяСтрока.КодСтроки,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатуса;
		КонецЦикла;
		ОбработкаОбъект.ОбновитьСтатусЗаявки(СтрокаЗаявки.НомерЗаявки, ПереченьПозиций, КодСтатуса,,Истина);
		УИ = ОбработкаОбъект.ВременныйИдентификатор;
		ИзменитьДатуОбновленияЗаказаКлиента(УИ, НайденнаяСтрока.ЗаказКлиента);
		ИзменитьВариантОбеспеченияВЗаказахКлиента();
	КонецЦикла;
	ИзменитьНаСтатусКВыдаче(Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьВариантОбеспеченияВЗаказахКлиента() //после создания поступления из закладки "Приход"
	Если Не ЗначениеЗаполнено(Объект.ВариантОбеспечения) Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ЗаказыДляПодбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ВариантОбеспечения = Объект.ВариантОбеспечения;
	Структура = Новый Структура("Номенклатура,КодСтроки");
	ЗаписьВЛог("Изменяем вариант обеспечения из закладки «Приход» "+СокрЛП(Объект.ПоступлениеТоваровУслуг));
	Для Каждого ТекСтрока Из Объект.ЗаказыДляПодбора Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
			Об = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
			Структура.Номенклатура = ТекСтрока.Номенклатура;
			Структура.КодСтроки = ТекСтрока.КодСтроки;
			НСтроки = Об.Товары.НайтиСтроки(Структура);
			НадоЗаписать = Ложь;
			Если Об.Контрагент = Объект.КонтрагентНаНаличие Тогда
				Для Каждого НСтрока Из НСтроки Цикл
					Если НСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется Тогда
						НСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
						НадоЗаписать = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого НСтрока Из НСтроки Цикл
					Если (НЕ НСтрока.Отменено) И НСтрока.ВариантОбеспечения <> ВариантОбеспечения Тогда
						НСтрока.ВариантОбеспечения = ВариантОбеспечения;
						ЗаписьВЛог(СокрЛП(ТекСтрока.ЗаказКлиента)+", позиция "+НСтрока.КодСтроки+", "+НСтрока.Номенклатура+", "+ВариантОбеспечения, Объект.Отладка);
						НадоЗаписать = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НадоЗаписать Тогда
				ДокументПроведен = Ложь;
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение); 
					ДокументПроведен = Истина;
				Исключение
					ЗаписьВЛог(ОписаниеОшибки(), Объект.Отладка);
					Об.Записать();//неоптимально, в документе одни данные, а в регистрах другие будут
					сообщить("Не удалось провести "+СокрЛП(Об));
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЗаказыВПриходе(Команда)
	ПодобратьЗаказыВПриходеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАртикул(Команда)
	ОповещениеПослеВводаСтроки = Новый ОписаниеОповещения("ПослеВводаАртикула", ЭтотОбъект);
	ПоказатьВводСтроки(ОповещениеПослеВводаСтроки, "", "Введите артикул", 20, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаАртикула(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПроверитьАртикулПоДоступностиИЦене(Результат);
КонецПроцедуры

&НаСервере
Процедура ПроверитьАртикулПоДоступностиИЦене(Артикул)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Артикул КАК Артикул,
	               |	Номенклатура.Производитель КАК Производитель,
	               |	Номенклатура.Описание КАК Описание,
	               |	Номенклатура.Наименование КАК Наименование,
	               |	Номенклатура.Код КАК Код,
	               |	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Артикул = &Артикул";
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		сообщить("Не найдена номенклатура по артикулу: "+Артикул);
		Возврат;
	КонецЕсли;
	Объект.ТаблицаОстатков.Загрузить(Результат.Выгрузить());
	Для Каждого ТекСтрока Из Объект.ТаблицаОстатков Цикл
		Остаток = ПолучитьОстатокНаСкладе(ТекСтрока);
		сообщить("На складе: "+Объект.Склад+", свободный остаток: "+Остаток);
		КОтгрузке = ПолучитьКОтгрузкеНаСкладе(ТекСтрока);
		сообщить("На складе: "+Объект.Склад+", к отгрузке: "+КОтгрузке);
		Цена = ПолучитьЦенуНоменклатуры(ТекСтрока);
		сообщить("Вид цены: "+Объект.ВидЦены+", цена: "+Цена);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьОстатокНаСкладе(ТекСтрока)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвободныеОстаткиОстатки.ВНаличииОстаток КАК ВНаличииОстаток,
		|	СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток КАК ВРезервеСоСкладаОстаток,
		|	СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток КАК ВРезервеПодЗаказОстаток,
		|	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток КАК Наличие
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки КАК СвободныеОстаткиОстатки
		|ГДЕ
		|	СвободныеОстаткиОстатки.Номенклатура = &Номенклатура
		|	И СвободныеОстаткиОстатки.Склад = &Склад";
	#Область Ут115
	Если Метаданные.РегистрыСведений.Найти("СвободныеОстатки") = Неопределено Тогда
		Запрос.Текст = 		"ВЫБРАТЬ
		               		|	РаспределениеЗапасов.Номенклатура КАК Ссылка,
		               		|	РаспределениеЗапасов.Номенклатура.Наименование КАК ОписаниеНаименование,
		               		|	РаспределениеЗапасов.Номенклатура.НаименованиеПолное КАК Описание,
		               		|	РаспределениеЗапасов.Номенклатура.Артикул КАК Артикул,
		               		|	РаспределениеЗапасов.Номенклатура.Производитель.Наименование КАК Производитель,
		               		|	1 КАК Кратность,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               		|	РаспределениеЗапасов.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               		|	РаспределениеЗапасов.Номенклатура.НаборУпаковок КАК НаборУпаковок,
		               		|	РаспределениеЗапасов.Номенклатура.Код КАК КодНоменклатуры,
		               		|	РаспределениеЗапасов.Номенклатура.Родитель КАК Группа,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               		|	РаспределениеЗапасов.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
		               		|	СУММА(РаспределениеЗапасов.ВНаличии) - СУММА(РаспределениеЗапасов.Резерв) КАК Наличие,
		               		|	СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
		               		|	СУММА(РаспределениеЗапасов.Свободно) КАК Свободно,
		               		|	СУММА(РаспределениеЗапасов.Резерв) КАК Резерв
		               		|ИЗ
		               		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		               		|ГДЕ
		               		|	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		               		|	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		               		|	И РаспределениеЗапасов.Склад = &Склад
		               		|	И РаспределениеЗапасов.Номенклатура.ЭтоГруппа = ЛОЖЬ
		               		|	И РаспределениеЗапасов.Номенклатура.Артикул <> """"
		               		|	И РаспределениеЗапасов.Номенклатура = &Номенклатура
		               		|
		               		|СГРУППИРОВАТЬ ПО
		               		|	РаспределениеЗапасов.Номенклатура,
		               		|	РаспределениеЗапасов.Номенклатура.Наименование,
		               		|	РаспределениеЗапасов.Номенклатура.НаименованиеПолное,
		               		|	РаспределениеЗапасов.Номенклатура.Артикул,
		               		|	РаспределениеЗапасов.Номенклатура.Производитель.Наименование,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаИзмерения,
		               		|	РаспределениеЗапасов.Номенклатура.ИспользоватьУпаковки,
		               		|	РаспределениеЗапасов.Номенклатура.НаборУпаковок,
		               		|	РаспределениеЗапасов.Номенклатура.Код,
		               		|	РаспределениеЗапасов.Номенклатура.Родитель,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаДляОтчетов,
		               		|	РаспределениеЗапасов.Номенклатура.КоэффициентЕдиницыДляОтчетов
		               		|
		               		|УПОРЯДОЧИТЬ ПО
		               		|	Производитель,
		               		|	Артикул";
	КонецЕсли;
	#КонецОбласти
	Запрос.УстановитьПараметр("Номенклатура", ТекСтрока.Ссылка);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если Метаданные.РегистрыСведений.Найти("СвободныеОстатки") = Неопределено Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			сообщить("В наличии - резерв: "+ВыборкаДетальныеЗаписи.Наличие);
			сообщить("В наличии без учета резервов: "+ВыборкаДетальныеЗаписи.ВНаличии);
			сообщить("В резерве: "+ВыборкаДетальныеЗаписи.Резерв);
			сообщить("В свободно: "+ВыборкаДетальныеЗаписи.Свободно);
			Текстрока.Наличие = ВыборкаДетальныеЗаписи.Наличие;
			Возврат ВыборкаДетальныеЗаписи.Наличие;
		КонецЦикла;
	Иначе
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			сообщить("В наличии без учета резервов: "+ВыборкаДетальныеЗаписи.ВНаличииОстаток);
			сообщить("В резерве: "+ВыборкаДетальныеЗаписи.ВРезервеСоСкладаОстаток);
			сообщить("В резерве под заказ: "+ВыборкаДетальныеЗаписи.ВРезервеПодЗаказОстаток);
			Текстрока.Наличие = ВыборкаДетальныеЗаписи.Наличие;
			Возврат ВыборкаДетальныеЗаписи.Наличие;
		КонецЦикла;
	КонецЕсли;
	Возврат "отсутствует";	
КонецФункции

&НаСервере
Функция ПолучитьКОтгрузкеНаСкладе(ТекСтрока)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
		|	ТоварыКОтгрузкеОстатки.ВРезервеОстаток КАК ВРезервеОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ТоварыКОтгрузкеОстатки.Номенклатура = &Номенклатура
		|	И ТоварыКОтгрузкеОстатки.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Номенклатура", ТекСтрока.Ссылка);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		сообщить("К отгрузке: "+ВыборкаДетальныеЗаписи.КОтгрузкеОстаток);
		сообщить("В резерве: "+ВыборкаДетальныеЗаписи.ВРезервеОстаток);
		Текстрока.КОтгрузке = ВыборкаДетальныеЗаписи.КОтгрузкеОстаток;
		Возврат ВыборкаДетальныеЗаписи.КОтгрузкеОстаток;
	КонецЦикла;
	Возврат "отсутствует";	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции

&НаСервере
Функция ПолучитьЦенуНоменклатуры(ТекСтрока)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура
		|	И ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦены";
	
	Запрос.УстановитьПараметр("Номенклатура", ТекСтрока.Ссылка);
	Запрос.УстановитьПараметр("ВидЦены", Объект.ВидЦены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Текстрока.Цена = ВыборкаДетальныеЗаписи.Цена;
		Возврат ВыборкаДетальныеЗаписи.Цена;
	КонецЦикла;
	Возврат 0;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции

&НаКлиенте
Процедура ЗагрузитьОплатыПоКонтрагентуИз1С(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВводКодаКлиентаДляПолученияОплат", ЭтаФорма);
	ПоказатьВводЧисла(ОписаниеОповещения, 0, "Введите код клиента из ABCP",8,0);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводКодаКлиентаДляПолученияОплат(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПолученноеЗначение < 100 Тогда
	Иначе
		ЗагрузитьПлатежиПоКодуКлиентаИз1С(ПолученноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПлатежиПоКодуКлиентаИз1С(Ид)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	НайденныйКлиент = ОбработкаОбъект.НайтиКонтрагентаПоИдентификатору(Ид);
	Если НЕ ЗначениеЗаполнено(НайденныйКлиент) Тогда
		сообщить("Не нашли клиента по коду: "+Ид);
		Возврат;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ВернутьТаблицуОплат1С(НайденныйКлиент).Выгрузить());
	//Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ВернутьТаблицуОплат(,Ид).Выгрузить());
	//Если Элементы.paymentOrderLinks.Видимость Тогда
	//	Объект.paymentOrderLinks.Загрузить(ОбработкаОбъект.paymentOrderLinks.Выгрузить());
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыПлатежейНаСервере(ОчищатьТаблицу = Истина)
	Если Объект.Франчайзи Тогда
		Структура = Новый Структура("Использовать", Истина);
		НайденныеСтроки = Объект.ТаблицаДоступов.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если ОчищатьТаблицу Тогда
				Объект.ТипыПлатежей.Очистить();
			КонецЕсли;
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				//ЗаполнитьЗначенияСвойств(Объект,ТекСтрока);
				ЗаполнитьТипыПлатежейНаСервереПоДоступу(Ложь, ТекСтрока.АдресСервиса, ТекСтрока.Пользователь, ТекСтрока.Пароль);
			КонецЦикла;
			//Объект.ТипыПлатежей.Сортировать("НаименованиеСтатуса");
		Иначе
			ЗаполнитьТипыПлатежейНаСервереПоДоступу(Ложь);
		КонецЕсли;
	Иначе
		Если ОчищатьТаблицу Тогда
			Объект.ТипыПлатежей.Очистить();
		КонецЕсли;
		ЗаполнитьТипыПлатежейНаСервереПоДоступу(Ложь);
		Для Каждого СтрокаТаблицы Из Объект.ТаблицаСтатусов Цикл
			СтрокаТаблицы.СоздаватьЗаявкуПокупателя = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	
	
Процедура ЗаполнитьТипыПлатежейНаСервереПоДоступу(ОчищатьТаблицу = Истина, АдресСервиса = "", Пользователь = "", Пароль = "")
	Если АдресСервиса = "" Тогда
		АдресСервиса = Объект.АдресСервиса;
	КонецЕсли;
	Если Пользователь = "" Тогда
		Пользователь = Объект.Пользователь;
	КонецЕсли;
	Если Пароль = "" Тогда
		Пароль = Объект.Пароль;
	КонецЕсли;
	//Если ТипПлатежаНаличный <> 0 Или ТипПлатежаЭлектронный <> 0 Тогда
	//	//уже заполняли типы платежей
	//	Возврат;
	//КонецЕсли;
	//ТипыПлатежей = Новый СписокЗначений;
	//ВремТипыПлатежей = Объект.ТипыПлатежей.Выгрузить();
	Структура = Новый Структура("id");
	Если ОчищатьТаблицу Тогда
		Объект.ТипыПлатежей.Очистить();
	КонецЕсли;
	ТекстЗапроса = "/basket/paymentMethods?userlogin="+Пользователь+"&userpsw="+Пароль;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	//ЗаписьВЛог("ИспользоватьИндивидуальныеНастройкиПользователей "+ИспользоватьИндивидуальныеНастройкиПользователей+" ИмяПользователя "+ИмяПользователя()+" АдресСервиса "+АдресСервиса+" ТекстЗапроса "+ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	//ЗаписьВЛог("типы платежей: "+СтрокаОтвет);
	Если СокрЛП(СтрокаОтвет) = "[]" Тогда
		ТекстСообщения = "Не заполнены идентификаторы способов оплаты, необходимы при отправке заказа (при включенной опции «Корзина: показывать тип оплаты»)";
		сообщить(ТекстСообщения);
		ЗаписьВЛог(ТекстСообщения);
		Возврат;
	КонецЕсли;
	//ЭтотОбъект.UnicodeEncode(СтрокаОтветUTF8);
	//только на сервере РеквизитФормыВЗначение("Объект").UnicodeEncode(СтрокаОтвет);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	Иначе
		//СписокЭлементов = СтруктураИзJSON();
		//Сообщить(СтрокаОтвет);
		ТипПлатежаНаличный = 0;
		ТипПлатежаЭлектронный = 0;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Для Каждого Элемент Из СписокЭлементов Цикл
			Если НЕ ОчищатьТаблицу Тогда
				НайденныеСтроки = Объект.ТипыПлатежей.НайтиСтроки(Новый Структура("id", Элемент.id));
				Если НайденныеСтроки.Количество() > 0 Тогда
					//ЗаполнитьЗначенияСвойств(НовСтрока, НайденныеСтроки[0], "СоздаватьЗаявкуПокупателя, СоздаватьЗаказПоставщикам, СоздаватьПоступление, СоздаватьРеализацию");
					НайденныеСтроки[0].name = Элемент.name;
					НайденныеСтроки[0].АдресСервиса = АдресСервиса;
					НайденныеСтроки[0].Пользователь = Пользователь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НовСтрока = Объект.ТипыПлатежей.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
			НовСтрока.АдресСервиса = АдресСервиса;
			НовСтрока.Пользователь = Пользователь;
			//Структура.id = НовСтрока.id;
			//НайденныеСтроки = ВремТипыПлатежей.НайтиСтроки(Структура);
			//Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			//	ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока,,"id");
			//	НовСтрока.name = Элемент.name;
			//КонецЦикла;
			Если Объект.ТипПлатежаЭлектронный = 0 Тогда
				Если Лев(НРег(Элемент.name),3) = "эле" Тогда
					Объект.ТипПлатежаЭлектронный = Число(Элемент.id);
				КонецЕсли;
			КонецЕсли;
			Если Объект.ТипПлатежаНаличный = 0 Тогда
				Если Лев(НРег(Элемент.name),3) = "нал" Тогда
					Объект.ТипПлатежаНаличный = Число(Элемент.id);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//ЗаписьВЛог("ТипПлатежаНаличный = "+ТипПлатежаНаличный+", ТипПлатежаЭлектронный="+ТипПлатежаЭлектронный);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТипыПлатежей1(Команда)
	Если Объект.ТипыПлатежей.Количество() = 0 Тогда
		ЗаполнитьТипыПлатежейНаСервере(Истина);
 		Возврат;
	КонецЕсли;
	Режим = РежимДиалогаВопрос.ДаНетОтмена;
	Оповещение = Новый ОписаниеОповещения("ОповещениеЗаполнитьТипыПлатежей", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Очистить таблицу платежей?", Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполнитьТипыПлатежей(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
       	ЗаполнитьТипыПлатежейНаСервере(Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьТипыПлатежейНаСервере(Ложь);
	Иначе
		Возврат;
    КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ВыгрузитьОбщиеОстаткиНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыгрузитьОбщиеОстатки();
	Объект.ТаблицаОстатков.Загрузить(ОбработкаОбъект.ТаблицаОстатков.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбщиеОстатки(Команда)
	ВыгрузитьОбщиеОстаткиНаСервере();
КонецПроцедуры

&НаСервере
Функция НайтиКонтрагентаПоИд(Ид)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Найденный = ОбработкаОбъект.НайтиКонтрагентаПоИдентификатору(Ид);
	Если ЗначениеЗаполнено(Найденный) Тогда
		Возврат Найденный;
	КонецЕсли;
	Возврат Справочники.Контрагенты.ПустаяСсылка();
КонецФункции

&НаКлиенте
Процедура ТЗКлиентыИдентификаторКонтрагентаПриИзменении(Элемент)
	ТД = ЭтаФорма.Элементы.ТЗКлиенты.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТД.ИдентификаторКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	ТД.Контрагент = НайтиКонтрагентаПоИд(ТД.ИдентификаторКонтрагента);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзНираксНаСервере(ЗаполнитьНастройкиСвязи = Ложь)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	distributorId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("distributorId");
	userId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("userId");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Ниракс_АВСРКонтрагенты.Объект,
	               |	Ниракс_АВСРКонтрагенты.КодПользователяНаСайте
	               |ИЗ
	               |	РегистрСведений.Ниракс_АВСРКонтрагенты КАК Ниракс_АВСРКонтрагенты";
	Результат = Запрос.Выполнить();
	Организация = "";
	СтатусПозиций = "";
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		НачатьТранзакцию();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = Выборка.Объект;
			МенеджерЗаписи.Свойство = userId.Ссылка;
			МенеджерЗаписи.Значение = Число(Выборка.КодПользователяНаСайте);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	//и поставщиков тоже
	//Ниракс_ABCPПоставщик - надо заполнить ТаблицаСкладов и по ней в наименованиях искать
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Ниракс_ABCPПоставщик.Наименование,
	               |	Ниракс_ABCPПоставщик.Контрагент,
	               |	Ниракс_ABCPПоставщик.ИдентификаторПоставщика
	               |ИЗ
	               |	РегистрСведений.Ниракс_ABCPПоставщик КАК Ниракс_ABCPПоставщик";
	Результат = Запрос.Выполнить();
	Организация = "";
	СтатусПозиций = "";
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Если Объект.ТаблицаСкладов.Количество() = 0 Тогда
				ЗаполнитьСкладыСервер();
			КонецЕсли;
			Структура = Новый Структура("НаименованиеПоставщика");
			СтруктураИд = Новый Структура("ИдентификаторПоставщика");
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не ЗначениеЗаполнено(Выборка.Контрагент) Тогда
					Продолжить;
				КонецЕсли;
				Структура.НаименованиеПоставщика = Выборка.Наименование;
				СтруктураИд.ИдентификаторПоставщика = Число(Выборка.ИдентификаторПоставщика);
				НайденныеСтроки = Объект.ТаблицаСкладов.НайтиСтроки(СтруктураИд);
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НайденнаяСтрока.Контрагент = Выборка.Контрагент;
						МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Объект = Выборка.Контрагент;
						МенеджерЗаписи.Свойство = distributorId.Ссылка;
						МенеджерЗаписи.Значение = Число(НайденнаяСтрока.ИдентификаторПоставщика);
						МенеджерЗаписи.Записать();
					КонецЦикла;
				Иначе
					НайденныеСтроки = Объект.ТаблицаСкладов.НайтиСтроки(Структура);
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НайденнаяСтрока.Контрагент = Выборка.Контрагент;
						МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Объект = Выборка.Контрагент;
						МенеджерЗаписи.Свойство = distributorId.Ссылка;
						МенеджерЗаписи.Значение = Число(НайденнаяСтрока.ИдентификаторПоставщика);
						МенеджерЗаписи.Записать();
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	//Ниракс_АВСРСкладыДляВыгрузкиНаличия_УТ11
	//ещё есть склады
	Если ЗаполнитьНастройкиСвязи Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Первые 1
		                |	Ниракс_ABCPНастройкиСвязи.Организация,
		                |	Ниракс_ABCPНастройкиСвязи.ПрефиксАдресаСайта,
		                |	Ниракс_ABCPНастройкиСвязи.Логин,
		                |	Ниракс_ABCPНастройкиСвязи.ХешПароля,
		                |	Ниракс_ABCPНастройкиСвязи.СтатусПозиций,
		                |	Ниракс_ABCPНастройкиСвязи.НачальнаяДатаИзменения
		                |ИЗ
		                |	РегистрСведений.Ниракс_ABCPНастройкиСвязи КАК Ниракс_ABCPНастройкиСвязи";
		Результат = Запрос.Выполнить();
		Организация = "";
		СтатусПозиций = "";
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Если ЗначениеЗаполнено(Выборка.Организация) Тогда
				Организация = Выборка.Организация;
			КонецЕсли;
			Объект.АдресСервиса = Выборка.ПрефиксАдресаСайта;
			Объект.Пользователь = Выборка.Логин;
			Объект.Пароль = Выборка.ХешПароля;
			СтатусПозиций = Выборка.СтатусПозиций;
		КонецЕсли;
		ЗаполнитьРеквизитыПоУмолчанию();
		Если НЕ Организация = "" Тогда
			Объект.Организация = Организация;
		КонецЕсли;
		Попытка
			ЗаполнитьСтатусыНаСервере(Истина);
		Исключение
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Ниракс_АВСРСтатусыПозицийВЗаказе.Наименование КАК НаименованиеСтатуса,
			               |	Ниракс_АВСРСтатусыПозицийВЗаказе.Код КАК КодСтатуса,
			               |	Ниракс_АВСРСтатусыПозицийВЗаказе.Представление
			               |ИЗ
			               |	Справочник.Ниракс_АВСРСтатусыПозицийВЗаказе КАК Ниракс_АВСРСтатусыПозицийВЗаказе";
			Результат = Запрос.Выполнить();
			Организация = "";
			СтатусПозиций = "";
			Если НЕ Результат.Пустой() Тогда
				Объект.ТаблицаСтатусов.Загрузить(Результат.Выгрузить());
			КонецЕсли;
		КонецПопытки;
		Если СтатусПозиций <> "" Тогда
			НайденныеСтроки = Объект.ТаблицаСтатусов.НайтиСтроки(Новый Структура("КодСтатуса", СтатусПозиций.Код));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.СоздаватьЗаявкуПокупателя = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзНиракс(Команда)
	//можно и настройки подключения тоже
	Если Объект.АдресСервиса = "" Тогда
		сообщить("Заполняем настройки связи из регистров Ниракс");
		ЗаполнитьНастройкиСвязи = Истина;
	Иначе
		ЗаполнитьНастройкиСвязи = Ложь;
	КонецЕсли;
	ЗаполнитьИзНираксНаСервере(ЗаполнитьНастройкиСвязи);
КонецПроцедуры

&НаСервере
Процедура ДокументыПоТипамПлатежейПриИзмененииНаСервере()
	Если Объект.ДокументыПоТипамПлатежей Тогда
		//Объект.БанковскийСчет = "";//в других документах используется
		Объект.Касса = "";
		Объект.ЭквайринговыйТерминал = "";
		Объект.КассаККМ = "";
		Элементы.БанковскийСчет.Доступность = Ложь;
		Элементы.Касса.Доступность = Ложь;
		Элементы.ЭквайринговыйТерминал.Доступность = Ложь;
		Элементы.КассаККМ.Доступность = Ложь;
		Если Объект.ТипыПлатежей.Количество() = 0 Тогда
			ЗаполнитьТипыПлатежейНаСервере();
		КонецЕсли;
	Иначе
		Элементы.БанковскийСчет.Доступность = Истина;
		Элементы.Касса.Доступность = Истина;
		Элементы.ЭквайринговыйТерминал.Доступность = Истина;
		Элементы.КассаККМ.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоТипамПлатежейПриИзменении(Элемент)
	ДокументыПоТипамПлатежейПриИзмененииНаСервере();
	Если Объект.ДокументыПоТипамПлатежей Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОфисы;
		ПоказатьОповещениеПользователя(,,"Настройте соответствие между типом платежа и создаваемым документом. После этого сохраните настройки");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеренестиАВЗвПроизводителяНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПеренестиАВЗВПроизводителя();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиАВЗвПроизводителя(Команда)
	ПеренестиАВЗвПроизводителяНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьПроизводителя(Номенклатура)
	Возврат Номенклатура.Производитель;
КонецФункции

&НаКлиенте
Процедура ТаблицаПриходНоменклатураПриИзменении(Элемент)
	Если Элементы.ТаблицаПриход.ТекущиеДанные<>Неопределено Тогда
		ТД = Элементы.ТаблицаПриход.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТД.Номенклатура) Тогда
			ТД.Производитель = ПолучитьПроизводителя(ТД.Номенклатура);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область МножественныеИдентификаторы
&НаКлиенте
Процедура ДобавитьМножественныйИдентификаторКлиенту(Команда)
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ВыбранныйКонтрагент = "";//Справочники.Контрагенты.ПустаяСсылка();
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВыборКонтрагента", ЭтаФорма);
	ПоказатьВводЗначения(ОписаниеОповещения, ВыбранныйКонтрагент, "Выберите контрагента", ОписаниеТипов);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборКонтрагента(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Результат;
	СтрокаИдентификаторов = ПолучитьМножественныеИдентификаторыКонтрагента(Результат);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВводМножественныхИдентификаторов", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаИдентификаторов, "Введите № идентификаторов через запятую");
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводМножественныхИдентификаторов(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если СтрДлина(ПолученноеЗначение) < 6 Тогда
		Возврат;
	Иначе
		ИзменитьМножественныеИдентификаторыКлиенту(ПереданныеПараметры, ПолученноеЗначение);
		ПоказатьОповещениеПользователя(,,"Для клиента «"+ПереданныеПараметры+"» сохранены множественные идентификаторы: "+ПолученноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьМножественныеИдентификаторыКлиенту(Контрагент, СтрокаИдентификаторов)
	multipleuserId = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("multipleuserId (Контрагенты)");//клиенты, которые через строчку заданы
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Контрагент;
	МенеджерЗаписи.Свойство = multipleuserId.Ссылка;
	МенеджерЗаписи.Значение = СокрЛП(СтрокаИдентификаторов);
	МенеджерЗаписи.Записать();
КонецПроцедуры

Функция ПолучитьМножественныеИдентификаторыКонтрагента(Контрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект КАК Контрагент,
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ДополнительныеСведения.Объект.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &multipleuserId
	               |	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Контрагенты
	               |	И ДополнительныеСведения.Объект.ПометкаУдаления = ЛОЖЬ
	               |	И ДополнительныеСведения.Объект.Ссылка = &Ссылка";
	multipleuserId = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("multipleuserId (Контрагенты)");//клиенты, которые через строчку заданы
	Запрос.УстановитьПараметр("multipleuserId", multipleuserId.Ссылка);
	Запрос.УстановитьПараметр("Ссылка", Контрагент.Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат СокрЛП(Выборка.Значение);
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервере
Процедура ЗаполнитьСинонимыБрендовНираксНаСервере(Очищать = Ложь)
	Если Очищать Тогда
		Объект.СинонимыБрендов.Очистить();
	Конецесли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ниракс_ABCPСинонимы.Бренд КАК Наименование,
		|	Ниракс_ABCPСинонимы.Синоним,
		|	Ниракс_ABCPСинонимы.Производитель КАК Бренд
		|ИЗ
		|	РегистрСведений.Ниракс_ABCPСинонимы КАК Ниракс_ABCPСинонимы";
	
	РезультатЗапроса = Запрос.Выполнить();
	//Если Очищать Тогда
	//	Объект.СинонимыБрендов.Загрузить(РезультатЗапроса.Выгрузить());
	//	Возврат;
	//КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтрока = Объект.СинонимыБрендов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаДетальныеЗаписи);
		Если НовСтрока.Наименование = "" Тогда
			НовСтрока.Наименование = НовСтрока.Синоним;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовСтрока.Бренд) Тогда
			НовСтрока.Бренд = Справочники.Производители.НайтиПоНаименованию(НовСтрока.Синоним);
			Если НЕ ЗначениеЗаполнено(НовСтрока.Бренд) Тогда
				НовСтрока.Бренд = Справочники.Производители.НайтиПоНаименованию(НовСтрока.Наименование);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСинонимыБрендовНиракс(Команда)
	Если Объект.СинонимыБрендов.Количество() = 0 Тогда
		ЗаполнитьСинонимыБрендовНираксНаСервере(Истина);
		Возврат;
	КонецЕсли;
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьСинонимыБрендов", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Возможно, синонимы брендов уже заполнены, очистить таблицу?", Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьСинонимыБрендов(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСинонимыБрендовНираксНаСервере(Истина);
	Иначе
		ЗаполнитьСинонимыБрендовНираксНаСервере(Ложь);
    КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОпределитьКолонкиПоУПД
&НаКлиенте
Процедура ОпределитьКолонкиПоУПД(Команда)
	Если ИмяФайла = "" Тогда
		сообщить("Не выбран файл");
	КонецЕсли;
	НС = 18;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВводСтроки", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, НС, "Введите № строки в таблице Excel с заголовками УПД");
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводСтроки(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если СтрДлина(ПолученноеЗначение) > 3 Тогда
	Иначе
		ЗагрузитьФайлИОпределитьКолонки(ПолученноеЗначение);
		//Если Объект.Отладка Тогда
			//Текст = Новый ТекстовыйДокумент;
			//Текст.УстановитьТекст(Объект.ТекстДляОтладки);
			//Текст.Показать("Отладка "+ТекущаяДата());
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьФайлИОпределитьКолонки(НомерСтрокиЗаголовков)
	Объект.КолонкаАртикул = 0;
	Объект.КолонкаПроизводитель = 0;
	Объект.КолонкаНаименование = 0;
	Объект.КолонкаКоличество = 0;
	Объект.КолонкаЦена = 0;
	Объект.КолонкаНДС = 0;
	Объект.КолонкаСумма = 0;
	Объект.КолонкаЗаказ = 0;
	Объект.КолонкаКодСтраны = 0;
	Объект.КолонкаСтрана = 0;
	Объект.КолонкаНомерГТД = 0;
	Объект.КолонкаШтрихКод = 0;
	Объект.КолонкаЯчейка = 0;
	Объект.КолонкаСуммаНДС = 0;
	Объект.ЦенаБезНДС = Истина;
	НРегИмяФайла = Нрег(ИмяФайла);
	Если Прав(НРегИмяФайла, 3) = "xls" Тогда
		Расширение = "xls";
	ИначеЕсли Прав(НРегИмяФайла, 4) = "xlsx" Тогда
		Расширение = "xlsx";
	Иначе
		сообщить("Формат файлов не поддерживается, неизвестное расширение: "+Расширение+" у файла: "+ИмяФайла);
	КонецЕсли;
	Путь	= КаталогВременныхФайлов() + Новый УникальныйИдентификатор() + "."+Расширение;
	Файл	= ПолучитьИзВременногоХранилища(АдресХранения);
	
	Файл.Записать(Путь);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(Путь, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	ОбластьЛиста = ТабличныйДокумент.ПолучитьОбласть();
	ВсегоКолонок = ОбластьЛиста.ПолучитьРазмерОбластиДанныхПоГоризонтали();
	Если ВсегоКолонок = 0 Тогда
		//ВсегоКолонок = ОбластьЛиста.ШиринаСтраницы;
		сообщить("Не определили количество колонок, пересохраните документ из Excel");
		Возврат;
	КонецЕсли;
	ПредСодержимое = "";
	//Объект.ТекстДляОтладки = "";
	Объект.КолонкаКодСтраны = 0;
	Объект.КолонкаСтрана = 0;
	
	Для НК = 1 По ВсегоКолонок Цикл
		Содержимое = СтрЗаменить(СокрЛП(ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиЗаголовков, НК).ТекущаяОбласть.Текст),Символ(160),"");
		Содержимое = СтрЗаменить(Содержимое,Символ(10)," ");//перенос строки
		Содержимое = СтрЗаменить(Содержимое,"  "," ");//перенос строки
		Если Содержимое = "" Тогда
			Продолжить;
		КонецЕсли;
		Если Содержимое = ПредСодержимое Тогда
			Продолжить;
		КонецЕсли;
		ПредСодержимое = Содержимое;
		//Если Объект.Отладка Тогда
		//	Объект.ТекстДляОтладки = Объект.ТекстДляОтладки+НК+"	"+Содержимое+"
		//	|";
		//КонецЕсли;
		Если Содержимое = "Единица измерения" или Содержимое = "В том числе сумма акциза" или Содержимое = "№ п/п" или Содержимое = "Код вида товара" или Содержимое = "Комментарий" Тогда
			Продолжить;
		КонецЕсли;
		Если Лев(Содержимое, 9) = "Код товар" Тогда //Код товара/ работ, услуг
			Объект.КолонкаАртикул = НК;
			Продолжить;
		КонецЕсли;
		Если Лев(Содержимое, 19) = "Наименование товара" Тогда //Наименование товара (описание выполненных работ, оказанных услуг), имущественного права
			Объект.КолонкаНаименование = НК;
			Продолжить;
		КонецЕсли;
		Если Лев(Содержимое, 5) = "Коли-" или Содержимое="Количество (объем)"Тогда
			Объект.КолонкаКоличество = НК;
			Продолжить;
		КонецЕсли;
		Если Лев(Содержимое, 4) = "Цена" Тогда
			Объект.КолонкаЦена = НК;
			Продолжить;
		КонецЕсли;
		Если Лев(Содержимое, 16) = "Налоговая ставка" или Лев(Содержимое, 7) = "Налого-" или Лев(Содержимое, 5) = "Нало-" Тогда //Нало- говая ставка
			Объект.КолонкаНДС = НК;
			Продолжить;
		КонецЕсли;
		Если Лев(Содержимое, 12) = "Сумма налога" Тогда
			Объект.КолонкаСуммаНДС = НК;
			Продолжить;
		КонецЕсли;
		Если Лев(Содержимое, 17) = "Стоимость товаров" Тогда
			Объект.КолонкаСумма = НК;
			Продолжить;
		КонецЕсли;
		Если Лев(Содержимое, 20) = "Страна происхождения" Или Лев(Содержимое, 27) = "Страна проиcхождения товара" Тогда
			Объект.КолонкаКодСтраны = НК;
			Объект.КолонкаСтрана = НК+3;
			Если НК=44 Тогда
				Объект.КолонкаСтрана = НК+1;
			КонецЕсли;
			Если НК>100 Тогда
				Объект.КолонкаСтрана = НК+5;
			КонецЕсли;
			Если Объект.КолонкаКодСтраны = 0 Тогда
				сообщить("Код страны не заполнен, проверьте колонку «Страна»");
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если Лев(Содержимое, 21) = "Регистрационный номер" Или Лев(Содержимое, 27) = "Номер таможенной декларации" Тогда
			Объект.КолонкаНомерГТД = НК;
			Продолжить;
		КонецЕсли;
		//Код вида товара
		//Единица измерения
		//Коли- чество (объем)
		//Цена (тариф) за единицу измерения
		//Стоимость товаров (работ, услуг), имущест- венных прав без налога - всего
		//В том числе сумма акциза
		//Налоговая ставка
		//Сумма налога, предъяв- ляемая покупателю
		//Стоимость товаров (работ, услуг), имущест- венных прав с налогом - всего
		//Страна происхождения товара
		//Регистрационный номер таможенной декларации
		сообщить(""+НК+"	"+Содержимое);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//выбираем партнёра, потом по нему определяем контрагента и вставляем в поле после выбора
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПроверитьПоставщиковВРСНаСервере()
	Массив = Новый Массив;
	Для Каждого ТекСтрока Из Объект.ТаблицаСкладов Цикл
		Контрагент = ТекСтрока.Контрагент;
		ИдПоставщика = ТекСтрока.ИдентификаторПоставщика;
		Если Массив.Найти(Контрагент) = Неопределено Тогда
			Если ТекСтрока.ИдентификаторОсновногоПоставщика = ТекСтрока.ИдентификаторПоставщика Тогда
				ТекСтрока.ИдентификаторОсновногоПоставщика = 0;
				ТекСтрока.ОсновнойКонтрагент = 0;
			КонецЕсли;
			Если ЗначениеЗаполнено(Контрагент) И ИдПоставщика <> 0 Тогда
				сообщить("Контрагенту "+Контрагент+" обновлён distributorId "+ИдПоставщика);
				ДобавитьИзменитьdistributorId(Контрагент, ИдПоставщика);
				Массив.Добавить(Контрагент);
			КонецЕсли;
		Иначе
			сообщить("у ид. поставщика "+ИдПоставщика+" не может повторяться контрагент "+ТекСтрока.Контрагент);
			ТекСтрока.Контрагент = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоставщиковВРС(Команда)
	ПроверитьПоставщиковВРСНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьАртикулыНаСервере()
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Артикул КАК Артикул
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НС = 0;
	Очищено = 0;
	НачатьТранзакцию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Артикул = СокрЛП(ВыборкаДетальныеЗаписи.Артикул);
		ОчищенныйАртикул = Артикул;//потом можно в одну строку
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул," ","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,".","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,",","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,":","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,";","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,"/","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,"\","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,"-","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,"+","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,"=","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,"_","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,"(","");
		ОчищенныйАртикул = СтрЗаменить(ОчищенныйАртикул,")","");
		Если ОчищенныйАртикул = Артикул Тогда
			Продолжить;
		КонецЕсли;
		Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Об.ОбменДанными.Загрузка = Истина;
		Об.Артикул = ОчищенныйАртикул;
		Об.Записать();
		Очищено = Очищено + 1;
		НС = НС + 1;
		Если НС % 100 = 0 Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	Если Очищено <> 0 Тогда
		сообщить("Очищено артикулов: "+Очищено);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАртикулы(Команда)
	ОчиститьАртикулыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиUserIdНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Значение КАК Значение,
		|	СУММА(1) КАК Количество
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|
		|СГРУППИРОВАТЬ ПО
		|	ДополнительныеСведения.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Контрагент,
		|	ДополнительныеСведения.Значение КАК ИдентификаторКонтрагента
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Значение В
		|			(ВЫБРАТЬ
		|				ТЗ.Значение
		|			ИЗ
		|				ТЗ
		|			ГДЕ
		|				ТЗ.Количество > 1)";
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	userId = ОбработкаОбъект.НайтиДобавитьСвойствоКонтрагента("userId");
	Запрос.УстановитьПараметр("Свойство", userId.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Объект.ТаблицаКлиентов.Загрузить(РезультатЗапроса.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДублиUserId(Команда)
	ПроверитьДублиUserIdНаСервере();
КонецПроцедуры

&НаСервере
Функция ВернутьСписокБрендПоАртикулу(ПоАртикулу)
	Список = Новый СписокЗначений;
	АдресСервиса = Объект.АдресСервиса;
	Пользователь = Объект.Пользователь;
	Пароль = Объект.Пароль;
	ТекстЗапроса = "/search/tips?userlogin="+Пользователь+"&userpsw="+Пароль+"&number="+СокрЛП(ПоАртикулу);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат Список;
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Для Каждого Элемент Из СписокЭлементов Цикл
			Ид = Элемент.brand;
			Список.Добавить(Ид, Элемент.brand+" "+Элемент.number+" "+Элемент.description);
		КонецЦикла;
	КонецЕсли;
	Возврат Список;
КонецФункции

&НаКлиенте
Процедура ПодобратьБренд(Команда)
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Производитель) Тогда
		сообщить("Уже заполнен производитель");
		Возврат;
	КонецЕсли;
	Если ТекСтрока.Артикул = "" Тогда
		сообщить("Не заполнен артикул");
		Возврат;
	КонецЕсли;
	Список = ВернутьСписокБрендПоАртикулу(ТекСтрока.Артикул);
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораБренда", ЭтотОбъект);
	Список.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите поставщика для выгрузки");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораБренда(Элемент, Параметры) Экспорт
    Если Элемент <> Неопределено Тогда
		сообщить(Элемент.Значение);
		ТД = Элементы.ТЗОстатки.ТекущиеДанные;
		ТД.Производитель = Элемент.Значение;
		Если СтрДлина(ТД.Производитель) > 2 Тогда
			ДобавитьПроизводительНоменклатуре(ТД.Ссылка, ТД.Производитель)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоЗаявкеПриИзменении(Элемент)
	Если Объект.ФильтрПоЗаявке>0 И Объект.ФильтрПоЗаявке<1000 Тогда
		ДатаНачала = ТекущаяДата()-Объект.ГлубинаПросмотраЗаявок*24*3600;
		ДатаОкончания = ДатаНачала + Объект.ФильтрПоЗаявке * 86400;
		ПоказатьОповещениеПользователя(,,""+Формат(ДатаНачала,"ДФ=dd.MM.yyyy")+" - "+Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГлубинаПросмотраЗаявокПриИзменении(Элемент)
	ФильтрПоЗаявкеПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТипыПлатежейКассаПриИзменении(Элемент)
	ТД = ЭтаФорма.Элементы.ТипыПлатежей.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.Касса) Тогда
		ТД.ЭквайринговыйТерминал = "";
		ТД.БанковскийСчет = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипыПлатежейЭквайринговыйТерминалПриИзменении(Элемент)
	ТД = ЭтаФорма.Элементы.ТипыПлатежей.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.ЭквайринговыйТерминал) Тогда
		ТД.Касса = "";
		ТД.БанковскийСчет = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипыПлатежейБанковскийСчетПриИзменении(Элемент)
	ТД = ЭтаФорма.Элементы.ТипыПлатежей.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.БанковскийСчет) Тогда
		ТД.ЭквайринговыйТерминал = "";
		ТД.Касса = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗакрытиеОтгруженныхОтменённыхЗаказовНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗакрытиеОтгруженныхОтменённыхЗаказов();
	Объект.ТаблицаЗаявок.Загрузить(ОбработкаОбъект.ТаблицаЗаявок.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеОтгруженныхОтменённыхЗаказов(Команда)
	ЗакрытиеОтгруженныхОтменённыхЗаказовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтгруженныеОтменённыеЗаказыНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьОтгруженныеОтменённыеЗаказы();
	Объект.ТаблицаЗаявок.Загрузить(ОбработкаОбъект.ТаблицаЗаявок.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтгруженныеОтменённыеЗаказы(Команда)
	ЗаполнитьОтгруженныеОтменённыеЗаказыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗакрытьЗаказыИзТаблицыНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗакрытьЗаказыИзТаблицы();
	Объект.ТаблицаЗаявок.Загрузить(ОбработкаОбъект.ТаблицаЗаявок.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказыИзТаблицы(Команда)
	ЗакрытьЗаказыИзТаблицыНаСервере();
КонецПроцедуры

&НаСервере
Функция ПроверитьВидНоменклатуры()
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Возврат Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры.ТипНоменклатуры) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	Если НЕ ПроверитьВидНоменклатуры() Тогда
		ОткрытьЗначение(Объект.ВидНоменклатуры);
		сообщить("Выберите тип номенклатуры у вида номенклатуры");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекСтрока.Контрагент) И Не ЗначениеЗаполнено(ТекСтрока.ОсновнойКонтрагент) Тогда
		сообщить("Не выбран поставщик или основной поставщик");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекСтрока.Партнер) Тогда
		Если Не ЗначениеЗаполнено(ТекСтрока.ОсновнойКонтрагент) Тогда
			сообщить("Не выбран партнер");
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация",ТекСтрока.Организация);
	Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
		ДополнительныеПараметры.Вставить("Контрагент", ТекСтрока.Контрагент);
		ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(Элемент, СтандартнаяОбработка, ТекСтрока.Партнер, , ТекущаяДата(), ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры.Вставить("Контрагент", ТекСтрока.ОсновнойКонтрагент);
		ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(Элемент, СтандартнаяОбработка, ПолучитьПартнера(ТекСтрока.ОсновнойКонтрагент), , ТекущаяДата(), ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПартнера(КонтрагентСсылка)
	Возврат КонтрагентСсылка.Партнер;
КонецФункции

&НаКлиенте
Процедура ТаблицаПоступленийОтборНомерЗаявкиОткрытие(Элемент, СтандартнаяОбработка)
	НомерЗаявки = Элемент.ТекстРедактирования;
	ЗапуститьПриложение("http://cp.abcp.ru/?page=orders&id_order="+Формат(Число(НомерЗаявки), "ЧГ=0"));
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Функция НайтиСвойствоПВХ(ИмяСвойства)
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства);
	Возврат Свойство.Ссылка;
КонецФункции

&НаКлиенте
Процедура ТЗКлиентыИдентификаторКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("Значение", Число(Элемент.ТекстРедактирования));  
	Отбор.Вставить("Свойство", НайтиСвойствоПВХ("userId (Контрагенты)"));
	ОткрытьФорму("РегистрСведений.ДополнительныеСведения.ФормаСписка", Новый Структура("Отбор", Отбор));
КонецПроцедуры

//подбор поступления по артикулам
&НаКлиенте
Процедура ПоискПоАртикуламИзБуфераОбмена(Команда)
	Буфер = Новый COMОбъект("htmlfile");
    ДанныеБуфера = Буфер.ParentWindow.ClipboardData.Getdata("Text");
	Если СтрДлина(ДанныеБуфера) < 5 Тогда
		сообщить("В буфере обмена ничего нет или слишком мало данных, или в настройках зоны Internet Explorer надо разрешить программный доступ к буферу обмена");
		сообщить(ДанныеБуфера);
		Возврат;
	КонецЕсли;
	ПоискПоАртикуламИзБуфераОбменаНаСервере(ДанныеБуфера);
КонецПроцедуры

Процедура ПоискПоАртикуламИзБуфераОбменаНаСервере(ДанныеБуфера)
	//на серверную перенести
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ДанныеБуфера);
	КС = Текст.КоличествоСтрок();
	НС = 1;
	СтрокаИзБуфера = СокрЛП(Текст.ПолучитьСтроку(НС));
	НесколькоКолонок = Ложь;
	Если Найти(СтрокаИзБуфера, Символ(9))>0 Тогда
		НесколькоКолонок = Истина; //придумать надо, как распределить колонки
	КонецЕсли;
	
	Структура = Новый Структура("Артикул");
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаПоступлений Цикл
		СтрокаТаблицы.Артикул = ОчиститьАртикул(СтрокаТаблицы.Артикул);
	КонецЦикла;
	
	Для НС = 1 По КС Цикл
		СтрокаИзБуфера = СокрЛП(Текст.ПолучитьСтроку(НС));
		АртикулДляПоиска = СтрокаИзБуфера;
		Если СтрДлина(АртикулДляПоиска) < 3 Тогда
			Продолжить;
		КонецЕсли;
		ОчищенныйАртикулДляПоиска = ОчиститьАртикул(АртикулДляПоиска);
		Структура.Артикул = АртикулДляПоиска;
		НСтроки = Объект.ТаблицаПоступлений.НайтиСтроки(Структура);
		Если НСтроки.Количество() = 0 Тогда
			Структура.Артикул = ОчищенныйАртикулДляПоиска;
			НСтроки = Объект.ТаблицаПоступлений.НайтиСтроки(Структура);
			Если НСтроки.Количество() = 0 Тогда
				сообщить("Не найден артикул");
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Для Каждого НСтрока Из НСтроки Цикл
			//СтрокаТаблицыПоступлений = Элементы.ТаблицаПоступлений.ТекущиеДанные;
			СтрокаТаблицыПоступлений = НСтрока;
			Если СтрокаТаблицыПоступлений.Количество = 0 Тогда //это закрытый заказ
				Возврат;
			КонецЕсли;
			Если СтрокаТаблицыПоступлений.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется") Тогда
				СтрокаТаблицыПоступлений.ВДокумент = Ложь;
				//ПоказатьОповещениеПользователя(,,""+СтрокаТаблицыПоступлений.Номенклатура+" пропускаем позицию № "+Формат(СтрокаТаблицыПоступлений.КодСтроки,"ЧГ=0")+" с вариантом обеспечения: "+СтрокаТаблицыПоступлений.ВариантОбеспечения);
				//ПоказатьОповещениеПользователя(,,""+СтрокаТаблицыПоступлений.Номенклатура+" у позиции № "+Формат(СтрокаТаблицыПоступлений.КодСтроки,"ЧГ=0")+" вариант обеспечения: "+СтрокаТаблицыПоступлений.ВариантОбеспечения);
				//Возврат;
			КонецЕсли;
			НовСтрока = Объект.ТаблицаПоступленийОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаблицыПоступлений);
			Если НовСтрока.ИдентификаторНоменклатуры = 0 Тогда
				НовСтрока.ИдентификаторНоменклатуры = НовСтрока.КодСтроки;
			КонецЕсли;
			НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаЗакупки;
			НовСтрока.ИсходноеКоличество = НовСтрока.Количество;//для разделения заказов
			НовСтрока.КоличествоНаПечать = НовСтрока.Количество;//gorod_alex
			НовСтрока.ИсходнаяЦенаЗакупки = НовСтрока.ЦенаЗакупки;
			НовСтрока.ИсходнаяЦенаПродажи = НовСтрока.ЦенаПродажи;
			НовСтрока.ВДокумент = Истина;
			Объект.ТаблицаПоступлений.Удалить(СтрокаТаблицыПоступлений);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеТоваровУслуг1ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ПоступлениеТоваровУслуг) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьИзПоступления", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Заполнить таблицу данными из поступления?", Режим, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьИзПоступления(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ТаблицаКлиентов.Очистить();
    КонецЕсли;
	ЗаполнитьПоступлениеНаЗакладкеПриход();
КонецПроцедуры

Процедура ЗаполнитьПоступлениеНаЗакладкеПриход()
	Если Объект.ПоступлениеТоваровУслуг.Товары.Количество() = 0 Тогда
		сообщить("Нет строк в документе");
	КонецЕсли;
	ПоступлениеУжеЕсть = Истина;
	Объект.Поставщик = Объект.ПоступлениеТоваровУслуг.Контрагент;
	Объект.ТаблицаПриход.Загрузить(Объект.ПоступлениеТоваровУслуг.Товары.Выгрузить());//если долго будет заполняться, можно запросом сделать
	Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти("КодТНВЭД") <> Неопределено Тогда
		ЕстьКодТНВЭД = Истина;
		Дополнение = ",КодТНВЭД";
	Иначе
		ЕстьКодТНВЭД = Ложь;
		Дополнение = "";
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаПриход Цикл
		Ном = СтрокаТаблицы.Номенклатура;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Ном, "Артикул,Производитель,Наименование");
		Если ЕстьКодТНВЭД Тогда
			СтрокаТаблицы.ТНВЭД = Ном.КодТНВЭД;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) Тогда
			Попытка
				СтрокаТаблицы.Страна = СтрокаТаблицы.НомерГТД.СтранаПроисхождения;
				Если ЗначениеЗаполнено(СтрокаТаблицы.Страна) Тогда
					СтрокаТаблицы.КодСтраны = СтрокаТаблицы.Страна.Код;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТНВЭД) Тогда
			Попытка
				СтрокаТаблицы.СтавкаНДС = Ном.КодТНВЭД;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда //это перечисление
			Попытка
				СтрокаТаблицы.СтавкаНДС = Ном.СтавкаНДС.ПеречислениеСтавкаНДС;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтатусовСоздаватьВозвратОтПокупателяПриИзменении(Элемент)
	ТД = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	ТД.СоздаватьРеализацию = Истина;
	Если ТД.СоздаватьЗаявкуПокупателя = Истина И ТД.СоздаватьРеализацию = Истина Тогда
		ТД.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
		ТД.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению");//КОтгрузке
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтатусовСоздаватьВозвратПоставщикуПриИзменении(Элемент)
	ТД = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	ТД.СоздаватьЗаказПоставщикам = Истина;
	ТД.СоздаватьПоступление = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьТекущийДоступНаСервере()
	НовСтрока = Объект.ТаблицаДоступов.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, Объект);
	НовСтрока.Использовать = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТекущийДоступ(Команда)
	ДобавитьТекущийДоступНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЗНоменклатураОписаниеОткрытие(Элемент, СтандартнаяОбработка)
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерЗаявки = ТекСтрока.НомерЗаявки;
	ИдентификаторНоменклатуры = ТекСтрока.ИдентификаторНоменклатуры;
	ЗапуститьПриложение("http://cp.abcp.ru/orders/"+Формат(Число(НомерЗаявки), "ЧГ=0")+"/addPosition?orderPosId="+Формат(Число(ИдентификаторНоменклатуры), "ЧГ=0"));
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТЗНоменклатураИдентификаторНоменклатурыОткрытие(Элемент, СтандартнаяОбработка)
	ТЗНоменклатураОписаниеОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОплатыПоКонтрагентуССайта(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВводКодаКлиентаПлатежиССайта", ЭтаФорма);
	ПоказатьВводЧисла(ОписаниеОповещения, 0, "Введите код клиента из ABCP",8,0);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводКодаКлиентаПлатежиССайта(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПолученноеЗначение < 100 Тогда
	Иначе
		ЗагрузитьПлатежиПоКодуКлиентаССайта(ПолученноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПлатежиПоКодуКлиентаССайта(Ид)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	НайденныйКлиент = ОбработкаОбъект.НайтиКонтрагентаПоИдентификатору(Ид);
	Если НЕ ЗначениеЗаполнено(НайденныйКлиент) Тогда
		сообщить("Не нашли клиента по коду: "+Ид);
		Возврат;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ВернутьТаблицуОплат1С(НайденныйКлиент).Выгрузить());
	Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ВернутьТаблицуОплат(,Ид).Выгрузить());
	Если Элементы.paymentOrderLinks.Видимость Тогда
		Объект.paymentOrderLinks.Загрузить(ОбработкаОбъект.paymentOrderLinks.Выгрузить());
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМенеджеровНаСервере()
	СтараяТаблица = Объект.ТаблицаМенеджеров.Выгрузить();
	Объект.ТаблицаМенеджеров.Очистить();
	Если НЕ Объект.Франчайзи Или Объект.ТаблицаДоступов.Количество() = 0 Тогда
		ЗаполнитьМенеджеровПоДоступу(Объект.АдресСервиса, Объект.Пользователь, Объект.Пароль, СтараяТаблица)
	Иначе
		Для каждого СтрокаТаблицы Из Объект.ТаблицаДоступов Цикл
			ЗаполнитьМенеджеровПоДоступу(СтрокаТаблицы.АдресСервиса, СтрокаТаблицы.Пользователь, СтрокаТаблицы.Пароль, СтараяТаблица)
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМенеджеровПоДоступу(АдресСервиса, Пользователь, Пароль, СтараяТаблица)
	Структура = Новый Структура("id");
	СписокМенеджеров = Новый СписокЗначений;
	ТекстЗапроса = "/cp/managers?userlogin="+Пользователь+"&userpsw="+Пароль+"&state=1";
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	КонецЕсли;
	СписокЭлементов = СтруктураИзJSON(СтрокаОтвет);
	
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если НЕ Элемент.allowLogin Тогда
			//Продолжить;
		КонецЕсли;
		НовСтрока = Объект.ТаблицаМенеджеров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
		ФИО = Элемент.lastName+" "+Элемент.firstName;
		НовСтрока.name = ФИО;
		НовСтрока.АдресСервиса = АдресСервиса;
		НовСтрока.Пользователь = Пользователь;
		НовСтрока.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(ФИО);
		Если ЗначениеЗаполнено(НовСтрока.Ответственный) Тогда
			НовСтрока.Подразделение = НовСтрока.Ответственный.Подразделение;
		КонецЕсли; 
		Структура.id = НовСтрока.id;
		НайденныеСтроки = СтараяТаблица.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество()> 0 Тогда
			ЗаполнитьЗначенияСвойств(НовСтрока,  НайденныеСтроки[0],"Ответственный,Подразделение");
		КонецЕсли;
		//Ид = Число(Элемент.contractorId);//email phone, может быть тоже вносить?
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМенеджеров(Команда)
	ЗаполнитьМенеджеровНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМенеджеровОтветственныйПриИзменении(Элемент)
	ТД = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.Ответственный) Тогда
		ТД.Подразделение = ПолучитьПодразделениеМенеджера(ТД.Ответственный);
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьПодразделениеМенеджера(Ссылка)
	Возврат Ссылка.Подразделение;
КонецФункции //ПолучитьПодразделениеМенеджера

&НаСервере
Процедура ЗагрузитьВозвратыОплатНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьВозвратыОплат();
	Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ТаблицаОплат.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВозвратыОплат(Команда)
	ЗагрузитьВозвратыОплатНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьВозвратыОплатНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СоздатьВозвратыОплат();
	Объект.ТаблицаОплат.Загрузить(ОбработкаОбъект.ТаблицаОплат.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратыОплат(Команда)
	СоздатьВозвратыОплатНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТипыПлатежейПриАктивизацииСтрокиНаСервере(НомСтроки)
	Попытка
		ТекСтрока = Объект.ТипыПлатежей[НомСтроки];
		Если Не ЗначениеЗаполнено(ТекСтрока.ДоговорЭквайринга) Тогда
			Если Объект.УТ115 Тогда
				ТекСтрока.ДоговорЭквайринга = Справочники["ДоговорыЭквайринга"].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТипыПлатежейПриАктивизацииСтроки(Элемент)
	Если Элементы.ТипыПлатежей.ТекущиеДанные<> Неопределено Тогда
		ТипыПлатежейПриАктивизацииСтрокиНаСервере(Элементы.ТипыПлатежей.ТекущиеДанные.НомерСтроки - 1);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокКорзинНаСервере(ИдКонтрагента)
	АдресСервиса = Объект.АдресСервиса;
	Пользователь = Объект.Пользователь;
	Пароль = Объект.Пароль;
	ТекстЗапроса = "/cp/users?userlogin="+Пользователь+"&userpsw="+Пароль+"&customersIds[]="+Формат(ИдКонтрагента,"ЧГ=0");
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		сообщить("Не найдено");
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		Для Каждого Элемент Из СписокЭлементов Цикл
			Для Каждого Корзина Из Элемент["baskets"] Цикл
				сообщить(СокрЛП(Корзина.Ключ)+"	"+СокрЛП(Корзина.Значение));
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокКорзин(Команда)
	ТД = Элементы.НастраиваемыеКлиенты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		сообщить("Выберите клиента");
		Возврат;
	КонецЕсли;
	ИдКонтрагента = ТД.userId;
	Если ИдКонтрагента = 0 Тогда
		сообщить("Введите код клиента");
		Возврат;
	КонецЕсли;
	ПолучитьСписокКорзинНаСервере(ИдКонтрагента);
КонецПроцедуры

&НаСервере
Процедура СопоставитьПоТелефонуНаСервере()
	Массив = Новый Массив;
	Для Каждого ТекСтрока Из Объект.ТаблицаКлиентов Цикл
		Если ЗначениеЗАполнено(ТекСтрока.Контрагент) Тогда
			Массив.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из Массив Цикл
		Объект.ТаблицаКлиентов.Удалить(Элемент);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
		|	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
		|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И ПартнерыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера)
		|	И ПартнерыКонтактнаяИнформация.Представление В (&Представление)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
	
	Запрос.УстановитьПараметр("Представление", Объект.ТаблицаКлиентов.Выгрузить(,"МобильныйТелефон").ВыгрузитьКолонку("МобильныйТелефон"));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		//сообщить("Не заполнены номера");
		Возврат;
	КонецЕсли;
	НС = 0;
	Выборка = Результат.Выбрать();
	Структура = Новый Структура("МобильныйТелефон");
	Пока Выборка.Следующий() Цикл
		//НС =НС + 1;
		Структура.МобильныйТелефон = Выборка.Представление;
		НСтроки = Объект.ТаблицаКлиентов.НайтиСтроки(Структура);
		Для Каждого НСтрока Из Нстроки Цикл
			НСтрока.Партнер = Выборка.Партнер;
		КонецЦикла;
	КонецЦикла;
	//Дозаполняем контрагентами
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.Партнер КАК Партнер
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Партнер В (&Партнер)";
	
	Запрос.УстановитьПараметр("Партнер", Объект.ТаблицаКлиентов.Выгрузить(,"Партнер").ВыгрузитьКолонку("Партнер"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Структура = Новый Структура("Партнер");
	Пока Выборка.Следующий() Цикл
		//НС =НС + 1;
		Структура.Партнер = Выборка.Партнер;
		НСтроки = Объект.ТаблицаКлиентов.НайтиСтроки(Структура);
		Для Каждого НСтрока Из Нстроки Цикл
			Если Не ЗначениеЗаполнено(НСтрока.Контрагент) Тогда
				НСтрока.Контрагент = Выборка.Контрагент;
				ДобавитьИзменитьuserId(НСтрока.Контрагент, НСтрока.ИдентификаторКонтрагента);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПоТелефону(Команда)
	СопоставитьПоТелефонуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКонтрагентаВJSON(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВводКодаКлиентаJSON", ЭтаФорма);
	ПоказатьВводЧисла(ОписаниеОповещения, 0, "Введите код клиента из ABCP",8,0);
КонецПроцедуры
 
&НаКлиенте
Процедура ОповещениеВводКодаКлиентаJSON(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПолученноеЗначение < 100 Тогда
	Иначе
		Текст = ПолучитьДанныеКлиентаВJSONНаСервере(ПолученноеЗначение);
		Текст.Показать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеКлиентаВJSONНаСервере(ПолученноеЗначение)
	//ФильтрПоЗаявке = Объект.ФильтрПоЗаявке;
	//Если Объект.Франчайзи Тогда
	//	Для Каждого СтрокаТаблицы Из Объект.ТаблицаДоступов Цикл
	//		АдресСервиса = СтрокаТаблицы.АдресСервиса;
	//		Пользователь = СтрокаТаблицы.Пользователь;
	//		Пароль = СтрокаТаблицы.Пароль;
	//		//ТекстЗапроса = "/cp/order?userlogin="+Пользователь+"&userpsw="+Пароль+"&number="+Формат(ФильтрПоЗаявке, "ЧГ=0")+"&format=additional";//чтобы при гостевом заказе данные возвращал, в том числе адрес
	//		ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+"&withDeleted=1&numbers[]="+Формат(ФильтрПоЗаявке, "ЧГ=0")+"&format=additional";
	//		Если Объект.Отладка Тогда
	//			сообщить(АдресСервиса+ТекстЗапроса);
	//		КонецЕсли;
	//		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	//		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	//		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	//		КодСостояния = HTTPОтвет.КодСостояния;
	//		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	//		Если СтрокаОтвет = "{""errorCode"":301,""errorMessage"":""Order with such online number not found""}" Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		Текст = Новый ТекстовыйДокумент;
	//		Текст.ДобавитьСтроку(СтрокаОтвет);
	//		Возврат Текст;
	//	КонецЦикла; 
	//Иначе
		АдресСервиса = Объект.АдресСервиса;
		Пользователь = Объект.Пользователь;
		Пароль = Объект.Пароль;
		//ТекстЗапроса = "/cp/order?userlogin="+Пользователь+"&userpsw="+Пароль+"&number="+Формат(ФильтрПоЗаявке, "ЧГ=0")+"&format=additional";//чтобы при гостевом заказе данные возвращал, в том числе адрес
		ТекстЗапроса = "/cp/users?userlogin="+Пользователь+"&userpsw="+Пароль+"&safeMode=1&customersIds[]="+Формат(ПолученноеЗначение, "ЧГ=0");
		Если Объект.Отладка Тогда
			сообщить(АдресСервиса+ТекстЗапроса);
		КонецЕсли;
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если СтрокаОтвет = "{""errorCode"":301,""errorMessage"":""Order with such online number not found""}" Тогда
			сообщить("Нет клиента № "+ПолученноеЗначение);
		КонецЕсли; 
		//Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		//	Возврат ""+КодСостояния+" "+СтрокаОтвет;
		//КонецЕсли;
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(СтрокаОтвет);
		Если Найти(СтрокаОтвет, "isDelete"":""1""")>0 Тогда
			Текст.ДобавитьСтроку("Внимание! Клиент удалён, его не будет в данных для загрузки с сайта");
		КонецЕсли;
		Возврат Текст;
	//КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура ПодобратьБрендДляПрихода(Команда)
	ТД = Элементы.ТаблицаПриход.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.Производитель) Тогда
		сообщить("Уже заполнен производитель");
		Возврат;
	КонецЕсли;
	Если ТД.Артикул = "" Тогда
		сообщить("Не заполнен артикул");
		Возврат;
	КонецЕсли;
	Список = ВернутьСписокБрендПоАртикулу(ТД.Артикул);
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораБренда2", ЭтотОбъект);
	Список.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите поставщика для выгрузки");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораБренда2(Элемент, Параметры) Экспорт
    Если Элемент <> Неопределено Тогда
		ТД = Элементы.ТаблицаПриход.ТекущиеДанные;
		ТД.ПроизводительСтрокой = СокрЛП(Элемент.Значение);
		Если СтрДлина(ТД.ПроизводительСтрокой) > 2 Тогда
			ДобавитьПроизводительНоменклатуре(ТД.Номенклатура, ТД.ПроизводительСтрокой, ТД.НомерСтроки - 1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область ПоказатьПрайс
&НаСервере
Функция ПоказатьПрайсНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТабДок = Новый ТабличныйДокумент;
	Макет = ОбработкаОбъект.ПолучитьМакет("Макет");
	Область = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ТабДок.Вывести(ОбластьШапка);
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаОстатков Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтрокаТаблицы);
		Если СтрокаТаблицы.Производитель = "" И Объект.NonameВместоПустыхБрендов Тогда
			ОбластьСтрока.Параметры.Производитель = "Noname";
		КонецЕсли;
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	Возврат ТабДок;
КонецФункции

&НаКлиенте
Процедура ПоказатьПрайс(Команда)
	Если Объект.ТаблицаОстатков.Количество() = 0 Тогда
		сообщить("Не заполнена таблица остатков");
		Возврат;
	КонецЕсли;
	ТабДок = ПоказатьПрайсНаСервере();
	Попытка
		//в старых конфигурациях не работает
		//Вывод ТабДокумента в типовую форму БСП "ПечатьДокументов"
		Заголовок = "Прайс на "+СокрЛП(ТекущаяДата());
		КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("Макет");
		ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, "Макет");
		ПечатнаяФорма.ТабличныйДокумент = ТабДок;
		КлючУникальности = Строка(Новый УникальныйИдентификатор);
		ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
		ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
		ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
		ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
		ПараметрыОткрытия.ПараметрыПечати.Вставить("ЗаголовокФормы", Заголовок);
		ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ВладелецФормы, КлючУникальности);
	Исключение
		ТабДок.Показать();
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ДобавитьКонтрагентаПоКоду
&НаКлиенте
Процедура ДобавитьКлиентаПоКоду(Команда)
	Буфер = Новый COMОбъект("htmlfile");
    ДанныеБуфера = Буфер.ParentWindow.ClipboardData.Getdata("Text");
	Если СтрДлина(ДанныеБуфера) < 6 Или СтрДлина(ДанныеБуфера) > 20 Тогда
		НомерПлатежа = "";
		//Возврат;
	Иначе
		Если Найти(ДанныеБуфера,"0") = 0 Тогда //все документы вида ***00***
			НомерПлатежа = "";
		Иначе
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(ДанныеБуфера);
			//КС = Текст.КоличествоСтрок();
			НомерПлатежа = Текст.ПолучитьСтроку(1);
		КонецЕсли;
	КонецЕсли;

	Если НомерПлатежа = "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВводКодаКлиента", ЭтаФорма);
		ПоказатьВводСтроки(ОписаниеОповещения, НомерПлатежа, "Введите код клиента на сайте");
	Иначе
		ЗагрузитьКлиентаПоКодуСервер(НомерПлатежа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводКодаКлиента(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если СтрДлина(ПолученноеЗначение) < 6 Или СтрДлина(ПолученноеЗначение) > 20 Тогда
	Иначе
		ЗагрузитьКлиентаПоКодуСервер(ПолученноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКлиентаПоКодуСервер(КодКлиента)
	ПереченьИдентификаторов = "";
	ПереченьИдентификаторов = ПереченьИдентификаторов + "&customersIds[]="+КодКлиента;//Формат(ТекСтрока.ИдентификаторКонтрагента, "ЧГ=0");
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьТаблицуКлиентовССайта(Истина,ПереченьИдентификаторов);
	Объект.ТаблицаКлиентов.Загрузить(ОбработкаОбъект.ТаблицаКлиентов.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиОплатНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Значение КАК Значение,
		|	СУММА(1) КАК Количество
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|
		|СГРУППИРОВАТЬ ПО
		|	ДополнительныеСведения.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Документ,
		|	ДополнительныеСведения.Объект.Контрагент КАК Контрагент,
		|	ДополнительныеСведения.Значение КАК paymentNumber,
		|	ДополнительныеСведения.Объект.Дата КАК Дата,
		|	ДополнительныеСведения.Объект.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ВЫБОР
		|		КОГДА ДополнительныеСведения.Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
		|			ТОГДА ""Возврат""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК paymentType
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Значение В
		|			(ВЫБРАТЬ
		|				ТЗ.Значение
		|			ИЗ
		|				ТЗ
		|			ГДЕ
		|				ТЗ.Количество > 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	paymentNumber,
		|	Дата";
	НомерПлатежногоДокумента = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("НомерПлатежногоДокумента (Документы)");
	Запрос.УстановитьПараметр("Свойство", НомерПлатежногоДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Объект.ТаблицаОплат.Загрузить(РезультатЗапроса.Выгрузить());//но могут и возвраты попасть
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДублиОплат(Команда)
	ПроверитьДублиОплатНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ПоказатьПрайс
&НаСервере
Функция ПоказатьНастройкиПоставщиковНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТабДок = Новый ТабличныйДокумент;
	Макет = ОбработкаОбъект.ПолучитьМакет("Макет");
	Область = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ТабДок.Вывести(ОбластьШапка);
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаОстатков Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтрокаТаблицы);
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	Возврат ТабДок;
КонецФункции

&НаКлиенте
Процедура ПоказатьНастройкиПоставщиков(Команда)
	Если Объект.ТаблицаОстатков.Количество() = 0 Тогда
		сообщить("Не заполнена таблица остатков");
		Возврат;
	КонецЕсли;
	ТабДок = ПоказатьНастройкиПоставщиковНаСервере();
	Попытка
		//в старых конфигурациях не работает
		//Вывод ТабДокумента в типовую форму БСП "ПечатьДокументов"
		Заголовок = "Прайс на "+СокрЛП(ТекущаяДата());
		КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("Макет");
		ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, "Макет");
		ПечатнаяФорма.ТабличныйДокумент = ТабДок;
		КлючУникальности = Строка(Новый УникальныйИдентификатор);
		ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
		ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
		ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
		ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
		ПараметрыОткрытия.ПараметрыПечати.Вставить("ЗаголовокФормы", Заголовок);
		ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ВладелецФормы, КлючУникальности);
	Исключение
		ТабДок.Показать();
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

//лучше использовать колонку "Обеспечение", надо отключить константу
//"Использовать расширенные возможности заказа клиента"
//заодно "Использовать статусы заказов поставщикам"
//"Использовать статусы реализаций товаров услуг"
//"Использовать согласование заказов клиентов"
//и в НСИ администрировании - Продажи - согласование заказов клиентов выключить чтобы вверху не было
//не закрывается заказ без полной оплаты
//НСИ администрировании - Продажи - Условия и порядок оплаты - Константа "Использование этапов оплаты в закупках"