//http://docs.abcp.ru/wiki/API:Docs
Перем ТЗЗаявкиМодуль Экспорт;
Перем ТЗНоменклатураМодуль Экспорт;
Перем СписокКонтрагентовДляОбновленияБаланса;
Перем СписокЗаявокДляОбновленияОстатков;
Перем ИспользоватьОрдернуюСхемуПриОтгрузке;
Перем ВерсияОбработки;
Перем СписокРеализаций;//если не все товары пришли, то надо обновлять статус только этих товаров
Перем СписокОрдеров;
Перем ТаблицаТоваровРеализации;
Перем ТаблицаТоваровРасходногоОрдера;
Перем ТабМенеджеров;
Перем НенайденныеКонтрагенты;
Перем АдресХранилищаИндикатора Экспорт;//временное хранилище, где хранится состояние индикатора
Перем userId Экспорт;//свойство контрагента
Перем multipleuserId Экспорт;//здесь хранятся ид.нескольких клиентов через запятую
Перем orderId Экспорт;//№ заявки в ABCP
Перем СвойствоНомерЗаказа Экспорт;//
Перем НомерПлатежногоДокумента Экспорт;//
Перем НомерЗаказаВДокументеОплаты Экспорт;//
Перем ИдентификаторКонтрагентаВДокументеОплаты Экспорт;//
Перем distributorId Экспорт;//идентификатор поставщика
Перем employeeId Экспорт;//идентификатор менеджера контрагента, а основной менеджер находится в карточке контрагента, реквизит "Ответственный"
Перем СкладКонтрагента Экспорт;//склад контрагента, который автоматически подставляется в документы этого контрагента
Перем ИдСкладаКонтрагента Экспорт;//идентификатор склада контрагента, который автоматически подставляется в документы этого контрагента
Перем userAPI Экспорт;//ссылка на пользователя
Перем dateUpdated Экспорт;//дата обновления заявки, чтобы по несколько раз не проверять
Перем deliveryOfficeId Экспорт;//Идентификатор офиса самовывоза
Перем deliveryOffice Экспорт;//Офис самовывоза
Перем ДатаОбновленияСтатусаABCP Экспорт;
Перем number Экспорт;//свойство "Артикул", номенклатуры из ABCP
Перем numberFix Экспорт;//свойство "Артикул", номенклатуры из ABCP
Перем balance Экспорт;//Текущий баланс клиента
//Перем creditLimit Экспорт;//Значение лимита кредита в валюте сайта
Перем СписокИзмененныхЗаявок;//список, в котором хранятся заявки, измененные во время последнего сеанса, у них может изменится статус, и создадутся дополнительные документы
Перем РежимЗаписиДок;
Перем СозданыЗаказыПоставщикам, СозданыПоступления;
Перем Интерактивно Экспорт;//признак интерактивного открытия обработки, чтобы при заполнении таблиц передавать данные на клиент
Перем УИ Экспорт;//используется для анализа измененных из 1С заказов
Перем ОсновнойМенедежер;
//для чека ккм
Перем ДанныеФискальнойОперации;
Перем ПараметрыКассыККМ;
Перем ОрганизацияПлательщикЕНВД Экспорт;
Перем ОрганизацияРозницаПлательщикЕНВД Экспорт;
Перем ОрганизацияУСН Экспорт;
Перем ОрганизацияРозницаУСН Экспорт;
Перем РазмерСтавкиНДС Экспорт;
Перем РазмерСтавкиНДС100 Экспорт;
Перем МассивНашихСкладов;
Перем СоответствиеНашиСклады;//соответствие, чтобы грузить с наших складов
Перем СкладыПоПоставщику;
Перем СоответствиеВариантыОбеспеченияПоСтатусам;
Перем МассивВыгружаемыхСкладов;
Перем МассивЧужихСкладов;
Перем ДатаОбновленияСальдо Экспорт;//для корректной выгрузки балансов клиентов, в том числе нулевых
Перем ВыгруженноеСальдо Экспорт;
Перем creditLimit Экспорт;//Значение лимита кредита в валюте сайта
Перем payDelay Экспорт;//Отсрочка платежа(в днях)
Перем overdueSaldo Экспорт;//Просроченный баланс
Перем МассивЗагружаемыхСтатусов;
Перем МассивСозданныхРеализаций;
Перем id9652, id22842, id18879, id26207, id14544;
Перем ИспользоватьСоглашенияСПоставщиками;
Перем ИспользоватьСоглашенияСКлиентами;
Перем ИспользованиеСоглашенийСКлиентами;//константа
Перем СоответствиеСоглашениеСКлиентомПоСкладу;
Перем СоответствиеСоглашениеПоСкладу;
Перем СоответствиеВалютаЗакупки;//соответствие поставщика и валюты закупки
Перем СоответствиеВалютаПродажи;//соответствие поставщика и валюты продажи
Перем ОрганизацияПоПоставщику;
Перем ОрганизацияПоИсходномуПоставщику;//если у поставщика есть основной контрагент, то может быть всё равно другая организация
Перем СоглашениеПоПоставщику;
Перем СоглашениеПоИсходномуПоставщику;//если у поставщика есть основной контрагент, то может быть всё равно другая организация
Перем БанковскийСчетОрганизацииПоУмолчанию;
Перем БанковскийСчетОрганизацииРозницаПоУмолчанию;
Перем СоответствиеБанковскийСчетОрганизации;
Перем СоответствиеКассаОрганизации;
Перем МассивЗаказовДляПерепроведения;
Перем Рубли Экспорт;
Перем КонстантаИспользоватьСерииНоменклатуры;
Перем ЕстьРеквизитДоговораНалогообложениеНДС;
Перем СоответствиеИдентификаторовКлиентов;//чтобы одним запросом всех клиентов находил
Перем СоответствиеИдентификаторовПоКонтрагентам;//по контрагенту - его код, для оплат
Перем СоответствиеИдентификаторовПоставщиков;//чтобы одним запросом всех поставщиков находил
Перем СоответствиеКлиентовПоКорзине;//у одного клиента разные корзины, и по корзине разные юр.лица в 1С
Перем СоответствиеПроизводителей;//чтобы одним запросом все бренды заполнил
Перем ТаблицаДокументовОплат;//чтобы одним запросом все документы оплаты, которые уже созданы в 1С, чтобы каждый раз не дёргать регистр сведений
//для оплат и возвратов
Перем СоответствиеКасс;
Перем СоответствиеЭквайринговыхТерминалов;
Перем СоответствиеОрганизаций;
//возвраты
Перем СоответствиеКасса;
Перем СоответствиеЭквайринг;
Перем СоответствиеБезнал;
Перем СоответствиеОрганизацииПоТипуПлатежа;
Перем МассивНеЗагружать;
Перем МассивИсключенныхИдентификаторов;
Перем ИсключаемыеОфисы;
Перем СоответствиеБрендПроизводитель;
Перем СоответствиеМножественныхИдентификаторов;
Перем МассивНеЗагружаемыхпоставщиков;
Перем НенайденныеПоставщики;
Перем СоответствиеСинонимПроизводитель;
Перем СоответствиеПоставщиков;
Перем СоответствиеПоставщиковПоДополнительномуКоду;
Перем СоответствиеНашиСкладыВариантОбеспечения;
Перем СоответствиеСпособаДоставкиКодуДоставки;
Перем СоответствиеПеревозчикПартнерКодуДоставки;
Перем СоответствиеЗонаДоставкиКодуДоставки;
Перем СоответствиеКассыПрефиксуНомера;
Перем СоответствиеТерминалаПрефиксуНомера;
Перем СоответствиеТипаПлатежаПрефиксуНомера;
Перем СоответствиеДоговораЭквайрингаПрефиксуНомера;
Перем СоответствиеОрганизацииПрефиксуНомера;
Перем СоответствиеДоговораЭквайрингаТипуПлатежа;
Перем МассивПрефиксовНомеров;
Перем СоответствиеОтветственногоПоКодуМенеджера;
Перем СоответствиеСкладаПоставщику;
Перем СоответствиеСтатусыЗаказов20;

Функция ПолучитьВерсиюОбработки(СДатой = Ложь) Экспорт
	Версия = "4.0.1";
	Если НЕ СДатой Тогда
		Возврат Версия;
	КонецЕсли;
	Возврат Версия + ", 08.03.2023"+?(Заказы20, " (2.0)","");
КонецФункции

Процедура ЗаписьВЛог(ТекстСообщения, УровеньСообщения = 0, Выводить = Ложь) Экспорт
	Если УровеньСообщения < 0  Тогда
		Возврат;
	КонецЕсли;
	Если ТекстСообщения = "" Тогда
		Возврат;
	КонецЕсли;
	Если Выводить И (Не СкрыватьСообщения) Тогда
		сообщить(ТекстСообщения);
	КонецЕсли;
	Если ЛогФайл = ""  Тогда
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Информация, , "1C-ABCP", ТекстСообщения);
		Возврат;
	КонецЕсли;
	Попытка
		Файл = Новый ЗаписьТекста(ЛогФайл,КодировкаТекста.ANSI,,Истина);
		Файл.ЗаписатьСтроку(Формат(ТекущаяДата(),"ДЛФ=DT")+"	"+ТекстСообщения);
		Файл.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Предупреждение, , "ЗаписьВЛог", "Не удалось записать в файл: "+ЛогФайл+". Сообщение: "+ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

Функция СтруктураИзJSON(СтрокаОтвет = "", ИмяФайла = "") Экспорт
	//Структура = Новый Структура;
	ЧтениеJSON = Новый ЧтениеJSON;
	Если ИмяФайла<>"" Тогда
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);	
	Иначе
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	КонецЕсли;
	Попытка
		Структура = ПрочитатьJSON(ЧтениеJSON);
		//если у контрагента есть offices, то на них не действует параметр safe, все равно надо через regexp вычищать
	Исключение
		ЧтениеJSON.Закрыть();
		ЗаписьВЛог(СтрокаОтвет,6);
		Структура = Новый Структура;
		Возврат Структура;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	Возврат Структура;
КонецФункции

Функция КодСостояния200(КодСостояния, Знач СтрокаОтвет, Знач ИмяФайла = "", Выводить = Истина)
	Если КодСостояния <> 200 Тогда
		сообщить("Статус: " + КодСостояния);
		Если КодСостояния = 414 Тогда
			сообщить("Слишком длинный запрос: " + КодСостояния);
		КонецЕсли;
		Если КодСостояния = 418 Тогда
			сообщить("Возможно, не оплачен период аренды сервиса ABCP");
		КонецЕсли;
		ОписаниеОшибки = СтруктураИзJSON(СтрокаОтвет, ИмяФайла);
		Попытка
			ТекстСообщения = "Ответ сервера: errorCode: " + ОписаниеОшибки.errorCode+", errorMessage: " + ОписаниеОшибки.errorMessage;
			ЗаписьВЛог(ТекстСообщения,6, Выводить);
			Если СокрЛП(ОписаниеОшибки.errorCode) = "103" Тогда
				ТекстСообщения = "Возможно, не оплачен период аренды сервиса";
				ЗаписьВЛог(ТекстСообщения,6,Истина);
			ИначеЕсли СокрЛП(ОписаниеОшибки.errorCode) = "301" Тогда
				ТекстСообщения = "Заказа с таким номером нет в ABCP, возможно, он был удалён или объединён с другим заказом";//"Order with such online number not found"
				ЗаписьВЛог(ТекстСообщения,,Истина);
			КонецЕсли;
		Исключение
			ЗаписьВЛог(СтрокаОтвет,6,Истина);
		КонецПопытки;
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ПроверитьПараметр(Наименование, ЭтоЧисло = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(ЭтотОбъект[Наименование]) Тогда
		ТекстСообщения = "Не заполнен параметр: "+Наименование;
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ПроверитьПараметр", ТекстСообщения);
		ЗаписьВЛог(ТекстСообщения, 5, Истина);
		//сообщить("Не заполнен параметр: "+Наименование);
		Возврат Ложь;
	Иначе
		Если ЭтоЧисло Тогда //нужны для проверки статусов
			Попытка
				Н = Число(ЭтотОбъект[Наименование]);
				Если Н = 0 Тогда
					ТекстСообщения = "Не заполнен параметр: "+Наименование;
					ЗаписьВЛог(ТекстСообщения,5,Истина);
					Возврат Ложь;
				Иначе
					Возврат Истина;
				КонецЕсли;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПараметрыЗаполнены(ПереченьПоставщиков = Ложь, КодыСтатусов = Ложь) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ТекстСообщения = "Не включена функциональная опция «Дополнительные реквизиты и сведения» в пункте «Администрирование» - «Общие настройки»";
		ЗаписьВЛог(ТекстСообщения,5,Истина);
		сообщить("Невозможен поиск и сопоставление объектов в базе 1С и на сайте");
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ПроверитьПараметр", ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	//проверяем, все ли свойства заполнены
	Если НЕ ПроверитьПараметр("АдресСервиса") Тогда Возврат Ложь; КонецЕсли;
	Если НЕ ПроверитьПараметр("Пользователь") Тогда Возврат Ложь; КонецЕсли;
	Если НЕ ПроверитьПараметр("Пароль") Тогда Возврат Ложь; КонецЕсли;
	Если НЕ ПроверитьПараметр("Пароль") Тогда Возврат Ложь; КонецЕсли;
	Если НЕ ПроверитьПараметр("Склад") Тогда Возврат Ложь; КонецЕсли;
	Если НЕ ПроверитьПараметр("Организация") Тогда Возврат Ложь; КонецЕсли;
	//Если НЕ ПроверитьПараметр("ВидЦены") Тогда Возврат Ложь; КонецЕсли;
	Если НЕ КодыСтатусов Тогда
		//Если НЕ ПроверитьПараметр("КодСтатусаПолучен", Истина) Тогда Возврат Ложь; КонецЕсли;
		//Если НЕ ПроверитьПараметр("КодСтатусаВРаботе", Истина) Тогда Возврат Ложь; КонецЕсли;
		Если НЕ ПроверитьПараметр("КодСтатусаНаСкладе", Истина) Тогда Возврат Ложь; КонецЕсли;
		Если НЕ ПроверитьПараметр("КодСтатусаВыдано", Истина) Тогда Возврат Ложь; КонецЕсли;
	Конецесли;
	Возврат Истина;
КонецФункции

Функция ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, Валюта = Неопределено) Экспорт
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Если БанковскийСчет.Владелец = Организация Тогда
			Возврат БанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	//в конфигурации если больше одного, то ничего не возвращает
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчетОрганизации
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|	И НЕ БанковскиеСчетаОрганизаций.Закрыт
	|	И (БанковскиеСчетаОрганизаций.Владелец = &Организация
	|		ИЛИ &Организация = Неопределено)
	|	И (БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = &Валюта
	|		ИЛИ &Валюта = Неопределено)";
	
	Если УТ111 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НЕ БанковскиеСчетаОрганизаций.Закрыт","");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;	
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.УстановитьПараметр("Валюта", ?(ЗначениеЗаполнено(Валюта), Валюта, Неопределено));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	КонецЕсли;
	Выборка  = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.БанковскийСчетОрганизации;
КонецФункции

Функция ПолучитьБанковскийСчетПоУмолчанию(Получатель, Валюта = Неопределено) Экспорт
	//в конфигурации если больше одного, то ничего не возвращает
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетПолучателя
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
	|	И НЕ БанковскиеСчетаКонтрагентов.Закрыт
	|	И БанковскиеСчетаКонтрагентов.Владелец = &Получатель
	|	И (БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &Валюта
	|		ИЛИ &Валюта = Неопределено)";

	
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Валюта", ?(ЗначениеЗаполнено(Валюта), Валюта, Неопределено));
	
	Если УТ111 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НЕ БанковскиеСчетаКонтрагентов.Закрыт","");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	Выборка  = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.БанковскийСчетПолучателя;
КонецФункции

Функция ПолучитьДоговорПоУмолчанию(ДокументОбъект = Неопределено, ХозяйственныеОперации = Неопределено, ВалютаВзаиморасчетов = Неопределено, НаправлениеДеятельности = Неопределено, Контрагент = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Если ЗаполнятьОрганизациюПоДоговору И НЕ ДокументОбъект = Неопределено И НЕ Контрагент = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |ГДЕ
		               |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		               |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		               |	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	               |	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	               |	И ДоговорыКонтрагентов.Организация = &Организация";
	
	Запрос.Текст = ТекстЗапроса;
	Если ДокументОбъект = Неопределено И Контрагент <> Неопределено Тогда
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("ЗакупкаПодДеятельность") <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.ЗакупкаПодДеятельность) Тогда
					Об = Выборка.Ссылка.ПолучитьОбъект();
					Об.ЗакупкаПодДеятельность = НалогообложениеНДСРеализация;
					Об.Записать();
				КонецЕсли;
			КонецЕсли;
			Возврат Выборка.Ссылка;
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	Если Не УТ111 Тогда //в очень старых версиях нестабильно работает
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокументОбъект, ДокументОбъект.ХозяйственнаяОперация, ВалютаВзаиморасчетов);
		Если ЗначениеЗаполнено(Договор) Тогда
			Возврат Договор.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	//или можно отбор по типу договора
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		ТекстЗапроса = ТекстЗапроса + " И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)";
	//Иначе
	//	ТекстЗапроса = ТекстЗапроса + " И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	Если ИспользоватьДоговорыСКлиентами И СоздаватьДоговоры Тогда
		Контрагент = ДокументОбъект.Контрагент;
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.ИнициализироватьСправочник();
		ЗаполнитьРеквизитыНовогоДоговора(НовыйДоговор, Контрагент);

		ДоговорСПоставщиком = Ложь;
		Если ЗначениеЗаполнено(ХозяйственныеОперации) И ХозяйственныеОперации = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
			НовыйДоговор.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			НовыйДоговор.Наименование = "С поставщиком";
			НовыйДоговор.Комментарий = "(ПолучитьДоговорПоУмолчанию) авт. создан при обмене с ABCP "+ТекущаяДата()+", поставщик "+СокрЛП(Контрагент)+" ЗаполнятьОрганизациюПоДоговору="+ЗаполнятьОрганизациюПоДоговору+", ДокументОбъект="+ДокументОбъект+", ХозяйственныеОперации="+ХозяйственныеОперации;
			ДоговорСПоставщиком = Истина;
		КонецЕсли;
		Если ДоговорСПоставщиком Тогда
			НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
		Иначе
			НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
		КонецЕсли;
		НовыйДоговор.Дата = НачалоМесяца(ДокументОбъект.Дата);
		НовыйДоговор.ДатаНачалаДействия = НовыйДоговор.Дата;
		//НовыйДоговор.Номер = ИдентификаторКонтрагента;
		Лев7 = Лев(АдресСервиса, 7);
		Если Лев7 = "id22842" Тогда
			НовыйДоговор.Наименование = "Договор Оферты 3-17";
			НовыйДоговор.НалогообложениеНДСОпределяетсяВДокументе = Ложь;
		КонецЕсли;
		НовыйДоговор.НаименованиеДляПечати = НовыйДоговор.Наименование;
		Если НЕ УТКазахстан Тогда
			Если Лев7 <> "id14544"  Тогда
				НовыйДоговор.СтавкаНДС = НДСВДоговореКлиента;
				//Если НДСВДоговореКлиента = Перечисления.СтавкиНДС.БезНДС Тогда
				//	НовыйДоговор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				//Иначе
				//	НовыйДоговор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				//КонецЕсли;
			КонецЕсли;
		Иначе
			НовыйДоговор.СтавкаНДС = ?(НДСВДоговореКлиента = Перечисления.СтавкиНДС.БезНДС, Справочники["СтавкиНДС"]["БезНДС"], Справочники["СтавкиНДС"]["НДС12"]);
		КонецЕсли;
		Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("ЗакупкаПодДеятельность") <> Неопределено Тогда
			НовыйДоговор.ЗакупкаПодДеятельность = НалогообложениеНДСРеализация;
			Если ЗначениеЗаполнено(ХозяйственныеОперации) И ХозяйственныеОперации = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
				НовыйДоговор.ЗакупкаПодДеятельность = НалогообложениеНДСПоступление;
			КонецЕсли;
		КонецЕсли;
		НовыйДоговор.Записать();
		ТекстСообщения = "создан договор по для покупателя: "+СокрЛП(Контрагент);
		ЗаписьВЛог(ТекстСообщения,3);
		Возврат НовыйДоговор.Ссылка;
	КонецЕсли;
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
КонецФункции

Процедура ЗаполнитьРеквизитыНовогоДоговора(Знач НовыйДоговор, Контрагент)
	НовыйДоговор.ВалютаВзаиморасчетов = Валюта;//Константы.ВалютаРегламентированногоУчета.Получить();
	НовыйДоговор.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	НовыйДоговор.Подразделение = Подразделение;
	НовыйДоговор.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	НовыйДоговор.ПорядокРасчетов = ПорядокРасчетов;
	Попытка
		НовыйДоговор.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных;
		НовыйДоговор.СпособДоставки = Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении;//иначе не показывается в списке
	Исключение
	КонецПопытки;
	НовыйДоговор.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	НовыйДоговор.Контрагент = Контрагент.Ссылка;
	НовыйДоговор.Партнер = Контрагент.Партнер;
	НовыйДоговор.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетПоУмолчанию(Контрагент.Ссылка);
	НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
	НовыйДоговор.Наименование = "Поставки";
	НовыйДоговор.НаименованиеДляПечати = НовыйДоговор.Наименование;
	Если БанковскийСчетОрганизацииПоУмолчанию = Неопределено Тогда
		БанковскийСчетОрганизацииПоУмолчанию = ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, Валюта);
	КонецЕсли;
	НовыйДоговор.БанковскийСчет = БанковскийСчетОрганизацииПоУмолчанию;
	Если БанковскийСчетОрганизацииРозницаПоУмолчанию = Неопределено Тогда
		Если Организация <> ОрганизацияРозница Тогда
			БанковскийСчетОрганизацииРозницаПоУмолчанию = ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОрганизацияРозница, Валюта);
		Иначе
			БанковскийСчетОрганизацииРозницаПоУмолчанию = БанковскийСчетОрганизацииПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	//ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(НовыйДоговор.Организация, НовыйДоговор.ПорядокОплаты, НовыйДоговор.БанковскийСчет);
	//ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент.Ссылка, Неопределено, НовыйДоговор.БанковскийСчетКонтрагента);
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДСОпределяетсяВДокументе") <> Неопределено Тогда
		НовыйДоговор.НалогообложениеНДСОпределяетсяВДокументе = Истина; //НалогообложениеНДС = НалогообложениеНДСПоступление;
	КонецЕсли;
	Если Лев(АдресСервиса, 5) = "mrcar" Тогда
		НовыйДоговор.НалогообложениеНДСОпределяетсяВДокументе = Ложь;
		НовыйДоговор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		НовыйДоговор.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
	Иначе
		НовыйДоговор.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		//НовыйДоговор.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	КонецЕсли;
	Если Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		НовыйДоговор.Организация = ОрганизацияРозница;
		НовыйДоговор.БанковскийСчет = БанковскийСчетОрганизацииРозницаПоУмолчанию;
		Если УТ114 И (НЕ ВерсияУТ = "11.3.4.21") Тогда //11.4.3.172
			Попытка
				Если ОрганизацияРозницаПлательщикЕНВД Тогда
					НовыйДоговор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
				ИначеЕсли ОрганизацияРозницаУСН Тогда
					НовыйДоговор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		НовыйДоговор.Организация = Организация;
		НовыйДоговор.БанковскийСчет = БанковскийСчетОрганизацииПоУмолчанию;
		Если (НЕ ВерсияУТ = "11.3.4.21") Тогда
			Попытка
				Если ОрганизацияПлательщикЕНВД Тогда
					НовыйДоговор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
				ИначеЕсли ОрганизацияУСН Тогда
					НовыйДоговор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если НЕ УТ111 И НЕ УТ112 И НЕ УТ113 Тогда //И НЕ (УТ114 И (Подверсия3=3 ИЛИ Подверсия3=1)) Тогда //в 11.4.3 этого реквизита нет
		НовыйДоговор.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
	КонецЕсли;
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("ЗакупкаПодДеятельность") <> Неопределено Тогда
		НовыйДоговор.ЗакупкаПодДеятельность = НалогообложениеНДСРеализация;
	КонецЕсли;
	Лев7 = Лев(АдресСервиса, 7);
	Если Лев7 <> "id14544"  Тогда
		НовыйДоговор.СтавкаНДС = НДСВДоговореКлиента;
		Если УТКазахстан Тогда
			НовыйДоговор.СтавкаНДС = ?(НДСВДоговореКлиента = Перечисления.СтавкиНДС.БезНДС, Справочники["СтавкиНДС"]["БезНДС"], Справочники["СтавкиНДС"]["НДС12"]);
		КонецЕсли;
	КонецЕсли;
	Если УТ114 И (НЕ ВерсияУТ = "11.3.4.21") И (НЕ ВерсияУТ = "11.3.4.172") Тогда
		Если ОрганизацияРозницаПлательщикЕНВД = Неопределено Тогда
			ЗаполнитьДанныеУчетнойПолитики();
		КонецЕсли;
		Если ОрганизацияРозницаПлательщикЕНВД Тогда
			НовыйДоговор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
		ИначеЕсли ОрганизацияРозницаУСН Тогда
			НовыйДоговор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			НовыйДоговор.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		Если УТКазахстан Тогда
			НовыйДоговор.СтавкаНДС = ?(НДСВДоговореКлиента = Перечисления.СтавкиНДС.БезНДС, Справочники["СтавкиНДС"]["БезНДС"], Справочники["СтавкиНДС"]["НДС12"]);
		КонецЕсли;
	КонецЕсли;
	Если НЕ УТ111 И НЕ УТ112 И НЕ УТ113 Тогда //И НЕ (УТ114 И (Подверсия3=3 ИЛИ Подверсия3=1)) Тогда //в 11.4.3 этого реквизита нет
		НовыйДоговор.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
	КонецЕсли;
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("ЗакупкаПодДеятельность") <> Неопределено Тогда
		НовыйДоговор.ЗакупкаПодДеятельность = НалогообложениеНДСРеализация;
	КонецЕсли;
	НовыйДоговор.СтавкаНДС = НДСВДоговореКлиента;
КонецПроцедуры

Процедура ЗаполнитьСоответствиеИдентификаторовКлиентов(МассивИдентификаторов)
	СоответствиеИдентификаторовКлиентов = Новый Соответствие;
	userId = НайтиДобавитьСвойствоКонтрагента("userId");	
	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект,
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Значение В(&Значение)";
	Запрос.УстановитьПараметр("Значение", МассивИдентификаторов);
	Запрос.УстановитьПараметр("Свойство", userId);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			СоответствиеИдентификаторовКлиентов.Вставить(Число(Выборка.Значение), Выборка.Объект);
		Исключение
		КонецПопытки
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ТаблицаМенеджеров Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
			СоответствиеИдентификаторовКлиентов.Вставить(СтрокаТаблицы.contractorId, СтрокаТаблицы.Контрагент);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТаблицуКлиентовССайта(ДобавлятьКлиентовВБазу = Ложь, ПереченьИдентификаторов = "", СвернутыеИдентификаторы = Неопределено, ОбновитьБалансВ1С = Ложь) Экспорт
	//СтрокаПаузы = "ping -n 1 -w 100 127.255.255.255";//задержка на 0.1 с
	//СтрокаПаузы = "Timeout /T 1 /NoBreak";
	//WshShell = Новый COMОбъект("WScript.Shell"); 
	
	//Лев7 = Лев(АдресСервиса, 7);
	//Если Лев7 = "id14985"  Тогда id14985 = Истина; Иначе id14985 = Ложь; КонецЕсли;
	//сделать какой-нибудь обработчик, чтобы показывал, сколько % из всех клиентов загрузилось
	Если НЕ ПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяДата()>=Дата(2019,1,1) И ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС18 И НЕ УТКазахстан Тогда
		ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
	Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		РазмерСтавкиНДС = 0;
		РазмерСтавкиНДС100 = 100;
	Иначе
		Если НЕ УТКазахстан Тогда
			РазмерСтавкиНДС = 20;
			РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
		Иначе
			РазмерСтавкиНДС = 12;
			РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаКлиентов.Очистить();
	//ТекстЗапроса = "/cp/users?userlogin="+Пользователь+"&userpsw="+Пароль;//+"&dateCreatedStart="+Формат(Объект.Период.ДатаНачала, "ДФ=yyyy-MM-dd")+" 00:00:00&dateCreatedEnd="+Формат(Объект.Период.ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59";
	userId = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("userId (Контрагенты)", Истина);
	ЛимитВозвращаемыхЗаписей = 1000;
	skip = 0;
	ВсегоКлиентов = 0;
	СписокНайденныхИдентификаторов = Новый СписокЗначений;//чтобы сверить, какие идентификаторы были не найдены, это, скорее всего сотрудники или менеджеры, их добавляем после добавления контрагентов
	Пока skip <= ВсегоКлиентов Цикл
		Если ПереченьИдентификаторов = "" Тогда
			ТекстЗапроса = "/cp/users?userlogin="+Пользователь+"&userpsw="+Пароль+"&state=1";//только зарегистрированные
			ДатаНачала = НачалоДня(ТекущаяДата()) - ГлубинаПросмотраКлиентов*24*3600;
			ДатаОкончания = ТекущаяДата();
			ТекстЗапроса = "/cp/users?userlogin="+Пользователь+"&userpsw="+Пароль+"&state=1&dateUpdatedStart="+Формат(ДатаНачала, "ДФ=yyyy-MM-dd")+" 00:00:00&dateUpdatedEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59";
		Иначе
			ТекстЗапроса = "/cp/users?userlogin="+Пользователь+"&userpsw="+Пароль+ПереченьИдентификаторов;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "&format=p&ut11&safeMode=1&skip="+Формат(skip,"ЧН=0; ЧГ=0")+"&limit="+Формат(ЛимитВозвращаемыхЗаписей,"ЧГ=0");
		ТекстЗапроса = ТекстЗапроса + "safeMode=1";
		Если Отладка Тогда
			ЗаписьВЛог(АдресСервиса+ТекстЗапроса);
		КонецЕсли;
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		Попытка
			ОтветJSON = ПрочитатьJSON(ЧтениеJSON, Ложь);//уже неактуально - прочитать в соответствие, так как у delivery address ключ - число
		Исключение
			ЧтениеJSON.Закрыть();
			ТекстСообщения = "ошибка обработки клиентов с сайта в формате JSON, ответ сервера:"+СтрокаОтвет;
			ЗаписьВЛог(ТекстСообщения,6,Истина);
			Возврат;
		КонецПопытки;
		ЧтениеJSON.Закрыть();
		Если skip > 0 Тогда
			//WshShell.Run(СтрокаПаузы, 0, -1);
			Попытка
				ОбщегоНазначенияБТС.Пауза(1);
			Исключение
			КонецПопытки;
		КонецЕсли;
		skip = skip + ЛимитВозвращаемыхЗаписей;
		СписокЭлементов = ОтветJSON.items;
		Если ВсегоКлиентов = 0 Тогда
			ВсегоКлиентов = Число(ОтветJSON.count);
			ЗаписьВЛог("Всего клиентов для запроса: "+ОтветJSON.count+", "+ВсегоКлиентов);
			Если ВсегоКлиентов = 0 Тогда
				Прервать;
			КонецЕсли;
		Иначе
			//сообщить(ВсегоКлиентов);
		КонецЕсли;
		Если СписокЭлементов.Количество() > 0 Тогда
			ТекстСообщения = "Всего клиентов для загрузки: "+СписокЭлементов.Количество();
			ЗаписьВЛог(ТекстСообщения,1);
		КонецЕсли;
		
		//заполняем сопоставление клиентами, чтобы одним запросом из регистра сведений получить все userId
		МассивИдентификаторов = Новый Массив;
		Для Каждого Элемент Из СписокЭлементов Цикл
			МассивИдентификаторов.Добавить(Число(Элемент.userId));
			МассивИдентификаторов.Добавить(Элемент.userId);
		КонецЦикла;
		ЗаполнитьСоответствиеИдентификаторовКлиентов(МассивИдентификаторов);
			
		Для Каждого Элемент Из СписокЭлементов Цикл
			СостояниеКлиента = Элемент.state;
			Если ЗначениеЗаполнено(СостояниеКлиента) Тогда
				СостояниеАккаунта = Число(СостояниеКлиента);// -1 - отклоненный, 0 - ожидает регистрации, 1 - зарегистрированный, 2 - удаленный.
			Иначе
				СостояниеАккаунта = 1;
			КонецЕсли;
			//Если СостояниеАккаунта = 0 Или СостояниеАккаунта = 1 Тогда
			//Если Найти(Элемент.organizationName, "test")>0 Тогда //не добавляем тестовых контрагентов
			//	Продолжить;
			//КонецЕсли;
			Если СостояниеАккаунта = 0 Или СостояниеАккаунта = 1 Тогда
				Если НеЗагружатьФизическихЛиц Тогда
					Если Элемент.marketType = "1" Тогда //1 Розница
						Продолжить;
					КонецЕсли;
					//1 Автопарк 2 Автосервис 3 Автосервис + Магазин 4 Дистрибьютор 5 Интернет-магазин 6 Магазин				
					//Если Элемент.business = "1" Тогда - обычно не заполнено
					//	Продолжить;
					//КонецЕсли;
				КонецЕсли;
				НовСтрока = ТаблицаКлиентов.Добавить();
				НовСтрока.ИдентификаторКонтрагента = Число(Элемент.userId);
				СписокНайденныхИдентификаторов.Добавить(НовСтрока.ИдентификаторКонтрагента);
				НовСтрока.Фамилия = Элемент.surname;
				НовСтрока.Имя = Элемент.name;
				НовСтрока.Отчество = Элемент.secondName;
				НовСтрока.МобильныйТелефон = Элемент.mobile;
				НовСтрока.Email = Элемент.email;
				НовСтрока.НаименованиеОрганизации = Элемент.organizationName;
				НовСтрока.ОфициальноеНаименованиеОрганизации = Элемент.organizationOfficialName;
				НовСтрока.СостояниеАккаунта = СостояниеАккаунта;
				НовСтрока.ИдентификаторМенеджера = Элемент.employeeId;
				НовСтрока.Баланс = Элемент.balance;
				НовСтрока.userlogin = Элемент.mobile;
				НовСтрока.ЮридическийАдрес = Элемент.organizationOfficialAddress; //хранится в таблице "контактная информация"
				Попытка
					Если СокрЛП(Элемент.registrationDate<>"0000-00-00 00:00:00") Тогда
						НовСтрока.ДатаРегистрации = XMLЗначение(Тип("Дата"), Элемент.registrationDate);
					КонецЕсли;
				Исключение
					сообщить("Дату регистрации «"+НовСтрока.НаименованиеОрганизации+"» не удалось преобразовать в дату: "+ Элемент.registrationDate);
				КонецПопытки;
				НовСтрока.marketType = Элемент.marketType;
				Если ЗначениеЗаполнено(Элемент.offices) Тогда
					Для Каждого ЭлементОфиса Из Элемент.offices Цикл
						НовСтрока.office = ЭлементОфиса;
						Прервать;//запоминаем только первый
					КонецЦикла;
				КонецЕсли;
				НовСтрока.business = Элемент.business;
				НовСтрока.organizationForm = Элемент.organizationForm;
				НовСтрока.ОГРН = Элемент.ogrn;//ОГРН
				НовСтрока.bankName = Элемент.bankName;//Наименование банка
				НовСтрока.bik = Элемент.bik;//БИК банка
				НовСтрока.correspondentAccount = Элемент.correspondentAccount;//Корреспондентский счет банка
				НовСтрока.organizationAccount = Элемент.organizationAccount;//Расчетный счет организации
				НовСтрока.comment = Элемент.comment;//Комментарий пользователя
				НовСтрока.managerComment = Элемент.managerComment;//Комментарий менеджера
				НовСтрока.creditLimit = Элемент.creditLimit;//Текущий лимит кредита клиента
				НовСтрока.payDelay = Элемент.payDelay;//Отсрочка платежа(в днях)
				НовСтрока.Баланс = Элемент.balance;//Текущий баланс клиента
				НовСтрока.inStopList = ?(Элемент.inStopList="1", Истина, Ложь);//Флаг "В стоп-листе"
				Если НЕ Элемент.stopListDateIn = Неопределено Тогда
					Попытка
						НовСтрока.stopListDateIn = XMLЗначение(Тип("Дата"), Элемент.stopListDateIn);//Дата попадания в стоп-лист (если inStopList = 1) в формате YYYY-MM-DD
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				Если Элемент.deliveryAddress<>Неопределено Тогда
					Для Каждого Адрес Из Элемент.deliveryAddress Цикл
						НовСтрока.АдресДоставки = Адрес.name;
					КонецЦикла;
					//КонецЕсли;
				КонецЕсли;
				НовСтрока.ИНН = Элемент.inn;
				НовСтрока.КПП = Элемент.kpp;
				//НовСтрока.Контрагент = НайтиКлиентаПоТелефону(НовСтрока.МобильныйТелефон);
				//НовСтрока.Контрагент = НайтиКонтрагентаПоИдентификатору(НовСтрока.ИдентификаторКонтрагента);
				КлиентИзСоответствия = СоответствиеИдентификаторовКлиентов.Получить(НовСтрока.ИдентификаторКонтрагента);//сразу всех заполняем
				Если ЗначениеЗаполнено(КлиентИзСоответствия) Тогда
					НовСтрока.Контрагент = КлиентИзСоответствия;
				КонецЕсли;
				Если ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
					ДобавлятьЗаписьВРегистр = Ложь;
				Иначе
					ДобавлятьЗаписьВРегистр = Истина;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
					//НовСтрока.Контрагент = НайтиКонтрагентаПоНаименованию(НовСтрока.НаименованиеОрганизации);
					//Если id14985 = Ложь И НовСтрока.ИНН<>"" Тогда
					Если НовСтрока.ИНН<>"" Тогда
						НовСтрока.Контрагент = НайтиКонтрагентаПоИНН(СокрЛП(НовСтрока.ИНН), СокрЛП(НовСтрока.КПП));
						Если ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
							ЗаписьВЛог("Нашли по ИНН ("+НовСтрока.ИНН+") контрагента «"+НовСтрока.Контрагент+"»");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
					//НовСтрока.Контрагент = НайтиКонтрагентаПоНаименованию(НовСтрока.НаименованиеОрганизации);
					НовСтрока.Контрагент = НайтиКонтрагентаПоТелефону(НовСтрока.МобильныйТелефон);
					Если НЕ ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
						ПартнерПоТелефону = НайтиКонтрагентаПоТелефонуПартнера(НовСтрока.МобильныйТелефон);
					КонецЕсли;
					Если ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
						ЗаписьВЛог("Нашли по телефону ("+НовСтрока.МобильныйТелефон+") контрагента «"+НовСтрока.Контрагент+"»");
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
					//НовСтрока.Контрагент = НайтиКонтрагентаПоНаименованию(НовСтрока.НаименованиеОрганизации);
					НовСтрока.Контрагент = НайтиКонтрагентаПоАдресуЭП(НовСтрока.Email);
					Если ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
						ЗаписьВЛог("Нашли по e-mail ("+НовСтрока.Email+") контрагента «"+НовСтрока.Контрагент+"»");
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НовСтрока.Контрагент) И ИскатьКлиентовПоНаименованию Тогда
					НовСтрока.Контрагент = НайтиКонтрагентаПоНаименованию(НовСтрока.НаименованиеОрганизации);
					Если ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
						ЗаписьВЛог("Нашли по наименованию ("+НовСтрока.НаименованиеОрганизации+") контрагента «"+НовСтрока.Контрагент+"»");
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовСтрока.Контрагент) И ДобавлятьЗаписьВРегистр Тогда
					ИдентификаторКонтрагента = НайтиСвойствоКонтрагента(НовСтрока.Контрагент, "userId (Контрагенты)");
					Если (ИдентификаторКонтрагента<>"") И (Число(ИдентификаторКонтрагента)<>Число(НовСтрока.ИдентификаторКонтрагента)) Тогда
						ЗаписьВЛог("У найденного контрагента «"+НовСтрока.Контрагент+"» не совпадает идентификатор в базе "+Формат(ИдентификаторКонтрагента,"ЧГ=0")+" и на сайте "+Формат(НовСтрока.ИдентификаторКонтрагента,"ЧГ=0"),6,Истина);
					КонецЕсли;
					МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект = НовСтрока.Контрагент;
					МенеджерЗаписи.Свойство = userId.Ссылка;
					МенеджерЗаписи.Значение = Число(НовСтрока.ИдентификаторКонтрагента);
					МенеджерЗаписи.Записать();
					//вот так программно можно записывать. Универсальный метод, но для объекта, а не для ссылки
					//МассивСтруктур = Новый Массив;
					//МассивСтруктур.Добавить(Новый Структура("Свойство, Значение", СвойствоДатаСоздания, ТекущаяДата()));
					//УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Объект.Номенклатура,МассивСтруктур);
				КонецЕсли;
				НовСтрока.Менеджер = НайтиМенеджераПоИдентификатору(НовСтрока.ИдентификаторМенеджера);
				Если Не ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
					Если СинхронизироватьКонтрагентов Тогда
						Если ДобавлятьКлиентовВБазу Тогда
							//НовСтрока.Контрагент = ДобавитьКонтрагентаСервер(НовСтрока, Ложь);
							НовСтрока.Контрагент = ДобавитьКонтрагентаСервер(Элемент, Истина);
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(НенайденныйКлиент) Тогда //если не нашли, вставляем служебного
							НовСтрока.Контрагент = ДобавитьКонтрагентаСервер(Элемент, Истина);
							НовСтрока.Контрагент = НенайденныйКлиент;
						КонецЕсли;
					КонецЕсли;
				Иначе
					organizationAccount = СокрЛП(Элемент["organizationAccount"]);//Расчетный счет организации
					Если organizationAccount<>"" Тогда
						bankName = Элемент.bankName;//Наименование банка
						bik = СокрЛП(Элемент.bik);//БИК банка
						correspondentAccount = Элемент["correspondentAccount"];//Корреспондентский счет банка
						БанковскийСчетКонтрагента = НайтиДобавитьБанковскийСчет(НовСтрока.Контрагент.Ссылка, bik, bankName, correspondentAccount, organizationAccount);
					КонецЕсли;
				КонецЕсли;
				Если ПереченьИдентификаторов <> "" И НенайденныеКонтрагенты <> Неопределено Тогда //процедура была вызвана для создания ненайденных контрагентов в базе, поэтому заполняем таблицу НенайденныеКонтрагенты
					Структура = Новый Структура("ИдентификаторКонтрагента");
					Структура.ИдентификаторКонтрагента = НовСтрока.ИдентификаторКонтрагента;
					НайденныеСтроки = НенайденныеКонтрагенты.НайтиСтроки(Структура);
					Если НайденныеСтроки.Количество() > 0 Тогда
						Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							НайденнаяСтрока.Контрагент = НовСтрока.Контрагент;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				//Запрос.УстановитьПараметр("Контрагент", НовСтрока.Контрагент);
				//Результат = Запрос.Выполнить();
				//Если НЕ Результат.Пустой() Тогда
				//	Выборка = Результат.Выбрать();
				//	Выборка.Следующий();
				//	НовСтрока.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
				//	НовСтрока.ДопустимаяСуммаЗадолженности = Выборка.ДопустимаяСуммаЗадолженности;
				//	НовСтрока.СрокОплаты = Выборка.СрокОплаты;
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;//цикл по skip
	ТаблицаКлиентов.Сортировать("НаименованиеОрганизации,Фамилия,Имя,Отчество");
	Если СвернутыеИдентификаторы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//СписокНайденныхИдентификаторов - в этом списке добавленные идентификаторы
	//СвернутыеИдентификаторы - в этой таблице все  из запроса идентификаторы
	Если СинхронизироватьКонтрагентов И СписокНайденныхИдентификаторов.Количество() < СвернутыеИдентификаторы.Количество() И ОбновитьБалансВ1С = Ложь Тогда
		//сообщить("остались несозданные контрагенты, возможно, это менеджеры");
		ТабМенеджеров = ПолучитьПереченьМенеджеровABCP(Истина);
		Для Каждого ОставшийсяКонтрагент Из СвернутыеИдентификаторы Цикл
			Если СписокНайденныхИдентификаторов.НайтиПоЗначению(ОставшийсяКонтрагент.ИдентификаторКонтрагента) = Неопределено Тогда
				НайденнаяСтрока = ТабМенеджеров.Найти(Формат(ОставшийсяКонтрагент.ИдентификаторКонтрагента,"ЧГ=0"),"contractorId");
				Если НайденнаяСтрока <> Неопределено Тогда
					НовыйКонтрагент = ДобавитьМенеджераВСправочникКонтрагентов(НайденнаяСтрока.lastName+" "+НайденнаяСтрока.firstName, ОставшийсяКонтрагент.ИдентификаторКонтрагента, НайденнаяСтрока);
					НовСтрока = ТаблицаКлиентов.Добавить();
					НовСтрока.ИдентификаторКонтрагента = ОставшийсяКонтрагент.ИдентификаторКонтрагента;
					НовСтрока.Имя = НовыйКонтрагент.Наименование;
					НовСтрока.Контрагент = НовыйКонтрагент;
					Структура = Новый Структура("ИдентификаторКонтрагента", ОставшийсяКонтрагент.ИдентификаторКонтрагента);
					НайденныеСтроки = НенайденныеКонтрагенты.НайтиСтроки(Структура);
					Если НайденныеСтроки.Количество() > 0 Тогда
						Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							НайденнаяСтрока.Контрагент = НовСтрока.Контрагент;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьТаблицуКлиентовССайта

Процедура СоздатьНовыхКлиентовССайта()
	ЗаполнитьТаблицуКлиентовССайта(Истина);
КонецПроцедуры

Функция ПолучитьПереченьМенеджеровABCP(ВозвращатьТаблицу = Ложь, ДляКлиентов = Ложь) Экспорт
	//http://docs.abcp.ru/wiki/API:Docs
	СписокМенеджеров = Новый СписокЗначений;
	ТекстЗапроса = "/cp/managers?userlogin="+Пользователь+"&userpsw="+Пароль+"&state=1";//только зарегистрированные
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ТабМенеджеров = Новый ТаблицаЗначений;
	ТабМенеджеров.Колонки.Добавить("id", Новый ОписаниеТипов("Число"));
	ТабМенеджеров.Колонки.Добавить("firstName");
	ТабМенеджеров.Колонки.Добавить("lastName");
	ТабМенеджеров.Колонки.Добавить("email");
	ТабМенеджеров.Колонки.Добавить("phone");
	ТабМенеджеров.Колонки.Добавить("contractorId");
	ТабМенеджеров.Колонки.Добавить("mobile");
	ТабМенеджеров.Колонки.Добавить("comment");
	ТабМенеджеров.Колонки.Добавить("isFranchiseeLogin");
	ТабМенеджеров.Колонки.Добавить("officeName");
	ТабМенеджеров.Колонки.Добавить("officeId");
	ТабМенеджеров.Колонки.Добавить("Пользователь");
	Если ДляКлиентов Тогда
		ТабМенеджеров.Колонки.Добавить("ИдентификаторКонтрагента", Новый ОписаниеТипов("Число"));
		ТабМенеджеров.Колонки.Добавить("Фамилия");
		ТабМенеджеров.Колонки.Добавить("Имя");
		ТабМенеджеров.Колонки.Добавить("НаименованиеОрганизации");
		ТабМенеджеров.Колонки.Добавить("МобильныйТелефон");
		ТабМенеджеров.Колонки.Добавить("office", Новый ОписаниеТипов("Число"));
		ТабМенеджеров.Колонки.Добавить("filialId", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если НЕ ВозвращатьТаблицу Тогда
		ТаблицаКлиентов.Очистить();
	КонецЕсли;
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат СписокМенеджеров;
	КонецЕсли;
	СписокЭлементов = СтруктураИзJSON(СтрокаОтвет);
	НС = СписокЭлементов.Количество();
	Если НС = 0 Тогда
		Возврат СписокМенеджеров;
	КонецЕсли;
	
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если НЕ Элемент.allowLogin Тогда
			//Продолжить;
		КонецЕсли;
		Если Элемент.lastName = "НодаСофт" Тогда //пропускаем внутреннего сотрудника
			Продолжить;
		КонецЕсли;
		Ид = Число(Элемент.contractorId);//email phone, может быть тоже вносить?
		Найденный = НайтиКонтрагентаПоИдентификатору(Ид);
		Если ЗначениеЗаполнено(Найденный) Тогда
			//Продолжить;//если контрагент и сотрудник одинаковый, тогда не будет добавляться в список менеджеров
		КонецЕсли;
		НовСтрока = ТабМенеджеров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
		НовСтрока.id = Строка(Элемент.id);
		//сообщить(Элемент.id);
		ФИО = Элемент.lastName+" "+Элемент.firstName;
		СписокМенеджеров.Добавить(Ид, ФИО);// + " ("+Ид+")");
		НовСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ФИО,Истина);
		//тогда контактная информация заполняться не будет
		//Если Не ЗначениеЗаполнено(НовСтрока.Пользователь) Тогда
		//	НовПользователь = Справочники.Пользователи.СоздатьЭлемент();
		//	НовПользователь.Наименование = ФИО;
		//	НовПользователь.ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФИО);
		//	НовПользователь.Записать();
		//	НовСтрока.Пользователь = НовПользователь.Ссылка;
		//	ЗаписьВЛог("Добавлен пользователь "+НовПользователь.Наименование+", ид "+Формат(Ид,"ЧГ=0"), , Истина);
		//КонецЕсли;
		Если ДляКлиентов Тогда
			НовСтрока.ИдентификаторКонтрагента = НовСтрока.contractorId;
			НовСтрока.Фамилия = НовСтрока.lastName;
			НовСтрока.Имя = НовСтрока.firstName;
			НовСтрока.НаименованиеОрганизации = Элемент.lastName+" "+Элемент.firstName;
			НовСтрока.МобильныйТелефон = НовСтрока.mobile;
			НовСтрока.Email = НовСтрока.email;
			НовСтрока.office = НовСтрока.officeId;
			НовСтрока.filialId = НовСтрока.id;
		КонецЕсли;
		
	КонецЦикла;
	Если ВозвращатьТаблицу Тогда
		Возврат ТабМенеджеров;
	Иначе
		Возврат СписокМенеджеров;
	КонецЕсли;
КонецФункции

Функция ДобавитьМенеджераВСправочникКонтрагентов(Наименование, ИдентификаторКонтрагента, СтрокаТаблицы = Неопределено) Экспорт
	Если ИспользоватьТранзакции Тогда НачатьТранзакцию(); КонецЕсли;
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();//ДобавитьМенеджераВСправочникКонтрагентов
	Партнер = Справочники.Партнеры.СоздатьЭлемент();
	Партнер.Наименование = Наименование;
	Партнер.НаименованиеПолное = Наименование;
	Партнер.Клиент = Истина;
	Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Если БитАвтоСервис Тогда
		НачалоКИ = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""";
		КонецКИ = "</КонтактнаяИнформация>";
		EmailКонтрагента = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		ТелефонКонтрагента = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		//ФаксКонтрагенты = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
		//ПочтовыйАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
		ФактАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		ЮрАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		
		МобильныйТелефон = "79991234567";
		КодСтраны = "7";
		КодГорода = "999";
		НомерБезКодов = "1234567";
		ПредставлениеТелефона = МобильныйТелефон;
		СтрокаКонтактнойИнформации = Партнер.КонтактнаяИнформация.Добавить();
		СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;//.ТелефонПартнера;
		//СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Комментарий>"+МобильныйТелефон+"</Комментарий><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+""" Добавочный=""""/>"+КонецКИ;
		СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+"""/>"+КонецКИ;
		СтрокаКонтактнойинформации.НомерТелефона = МобильныйТелефон;
		СтрокаКонтактнойИнформации.НомерТелефонаБезКодов = Прав(МобильныйТелефон,7);
		СтрокаКонтактнойИнформации.Представление = МобильныйТелефон;
	КонецЕсли;
	Партнер.Записать();
	ТекстСообщения = "добавлен партнер-сотрудник: "+СокрЛП(Партнер.Наименование);//+", Идентификатор менеджера "+НовСтрока.employeeId;
	ЗаписьВЛог(ТекстСообщения);
	Контрагент.Партнер = Партнер.Ссылка;
	
	Контрагент.Наименование = Наименование;
	Контрагент.НаименованиеПолное = Контрагент.Наименование;
	Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("userId (Контрагенты)", Истина);
	
	//СтрокаДопРеквизитов = Контрагент.ДополнительныеРеквизиты.Добавить();
	//СтрокаДопРеквизитов.Свойство = Свойство;
	//СтрокаДопРеквизитов.Значение = ИдентификаторКонтрагента;
	//СтрокаДопРеквизитов.ТекстоваяСтрока = СокрЛП(ИдентификаторКонтрагента);
	
	Если БитАвтосервис Тогда
		Представление = "+7 ("+Сред(МобильныйТелефон,2,3)+") "+Сред(МобильныйТелефон,5,3)+"-"+Сред(МобильныйТелефон,8,2)+"-"+Сред(МобильныйТелефон,10,2);
		Попытка
			ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ТелефонКонтрагента);
			ОбъектXDTOКИ.Комментарий = МобильныйТелефон;
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
		Исключение
			ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(,Представление, ТелефонКонтрагента.Тип);
		КонецПопытки;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, ТелефонКонтрагента, ТелефонКонтрагента.Тип);
	КонецЕсли;
	Контрагент.Записать();

	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Контрагент.Ссылка;
	МенеджерЗаписи.Свойство = Свойство;
	МенеджерЗаписи.Значение = ИдентификаторКонтрагента;
	МенеджерЗаписи.Записать();
	
	//Об = Контрагент.ПолучитьОбъект();
	СтрокиДополнительныеРеквизиты = Контрагент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство.Ссылка));
	Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
		СтрокаДополнительныеРеквизиты = Контрагент.ДополнительныеРеквизиты.Добавить();
	Иначе
		СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
	КонецЕсли;
	СтрокаДополнительныеРеквизиты.Свойство = Свойство.Ссылка;
	СтрокаДополнительныеРеквизиты.Значение = Число(ИдентификаторКонтрагента);
	СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = Формат(ИдентификаторКонтрагента,"ЧГ=0");
	Контрагент.Записать();
	
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	Если ИспользоватьДоговорыСКлиентами И СоздаватьДоговоры Тогда
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.ИнициализироватьСправочник();
		ЗаполнитьРеквизитыНовогоДоговора(НовыйДоговор, Контрагент);
		
		НовыйДоговор.Дата = НачалоМесяца(ТекущаяДата());
		НовыйДоговор.ДатаНачалаДействия = НовыйДоговор.Дата;
		НовыйДоговор.Номер = ИдентификаторКонтрагента;

		НовыйДоговор.Комментарий = "(ДобавитьМенеджераВСправочникКонтрагентов) авт. создан при обмене с ABCP "+ТекущаяДата()+", покупатель "+СокрЛП(Контрагент);
		НовыйДоговор.Записать();
		ТекстСообщения = "создан договор по ид контрагента :	"+ИдентификаторКонтрагента+", покупатель: "+СокрЛП(Контрагент);
		ЗаписьВЛог(ТекстСообщения,3);
	КонецЕсли;
	
	Если ИспользоватьСоглашенияСКлиентами = Неопределено Тогда
		ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	КонецЕсли;
	Если ИспользованиеСоглашенийСКлиентами = Неопределено Тогда
		ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	КонецЕсли;
	Если ИспользоватьСоглашенияСКлиентами И (ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения Или ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения) Тогда
		НовоеСоглашение = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();//СоглашенияСПоставщиками
		//ИнициализироватьСправочник не экспортный метод, дублируем
		НовоеСоглашение.Менеджер = Пользователи.ТекущийПользователь();
		НовоеСоглашение.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
		НовоеСоглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;//ЗакупкаУПоставщика;
		НовоеСоглашение.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
		Если ВерсияУТ <> "3.2.3.18" И НЕ УТ111 Тогда
			НовоеСоглашение.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КонецЕсли;	
		НовоеСоглашение.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		НовоеСоглашение.Склад = Склад;//ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
		Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		Иначе
			НовоеСоглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
		НовоеСоглашение.ПорядокРасчетов = ПорядокРасчетов;//брать из настроек модуля Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию();
		Если УТ114 Тогда
			НовоеСоглашение.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(НовоеСоглашение.ПорядокОплаты, НовоеСоглашение.ХозяйственнаяОперация);
		КонецЕсли;
		Если УТ113 Тогда
			НовоеСоглашение.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(НовоеСоглашение.ПорядокОплаты);
		КонецЕсли;
		Если Не ИспользоватьДоговорыСКлиентами Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
				ИЛИ НовоеСоглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				НовоеСоглашение.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
			Иначе
				НовоеСоглашение.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
			КонецЕсли;
		Иначе
			НовоеСоглашение.ИспользуютсяДоговорыКонтрагентов = Истина;
		КонецЕсли;
		НовоеСоглашение.Наименование = "Поставки";
		//НовоеСоглашение.Номер = "";
		НовоеСоглашение.Дата = НачалоМесяца(ТекущаяДата());
		НовоеСоглашение.ДатаНачалаДействия = НовоеСоглашение.Дата;
		НовоеСоглашение.Контрагент = Контрагент.Ссылка;
		НовоеСоглашение.Партнер = Контрагент.Партнер;
		НовоеСоглашение.Комментарий = "(ДобавитьМенеджераВСправочникКонтрагентов) авт. создан при обмене с ABCP "+ТекущаяДата();
		НовоеСоглашение.Записать();
	КонецЕсли;	
	
	Если ИспользоватьТранзакции Тогда ЗафиксироватьТранзакцию(); КонецЕсли;
	ТекстСообщения = "добавлен менеджер в справочник контрагентов: "+СокрЛП(Контрагент.Наименование)+", идентификатор "+Формат(ИдентификаторКонтрагента,"ЧГ=0");
	ЗаписьВЛог(ТекстСообщения);
	Возврат Контрагент.Ссылка;
КонецФункции //ДобавитьМенеджераВСправочникКонтрагентов

Функция ПолучитьИдентификаторКонтрагента(Контрагент, Поставщик = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО Контрагенты.Ссылка = ДополнительныеСведения.Объект
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И Контрагенты.Ссылка = &Ссылка";
	               			   
	Запрос.УстановитьПараметр("Ссылка", Контрагент.Ссылка);
	Если Поставщик Тогда
		ИмяСвойства = "distributorId";
	Иначе
		ИмяСвойства = "userId";
	КонецЕсли;
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства+" (Контрагенты)");
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Значение;
	КонецЕсли;
КонецФункции //ПолучитьИдентификаторКонтрагента

Процедура ЗаполнитьСоответствиеИдентификаторовПоКонтрагентам(СписокКонтрагентов, Поставщик = Ложь) Экспорт
	СоответствиеИдентификаторовПоКонтрагентам = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект В(&Объект)";
	               			   
	Запрос.УстановитьПараметр("Объект", СписокКонтрагентов);
	ИмяСвойства = "userId";
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства+" (Контрагенты)");
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеИдентификаторовПоКонтрагентам.Вставить(Выборка.Объект, Выборка.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция НайтиДобавитьОтветственногоПоИдентификатору(ИдМенеджера, ИмяСвойства = "managerId (Пользователи)")
	Если ИдМенеджера = 0 Тогда
		Если ЗначениеЗаполнено(ОсновнойМенеджер) Тогда
			Возврат ОсновнойМенеджер;
		Иначе
			Возврат Справочники.Пользователи.ПустаяСсылка();//ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИдМенеджера) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();//ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Пользователи) КАК Объект,
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ДополнительныеСведения.Свойство КАК Свойство
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Значение = &Значение
	               |	И ДополнительныеСведения.Свойство.Наименование = &Наименование
	               |	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Пользователи";
	Запрос.УстановитьПараметр("Значение", Число(ИдМенеджера));
	Запрос.УстановитьПараметр("ЗначениеСтрокой", Формат(ИдМенеджера,"ЧГ=0"));
	Запрос.УстановитьПараметр("Наименование", ИмяСвойства);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.Объект) Тогда
			Возврат Выборка.Объект;
		КонецЕсли;
	КонецЕсли;
	Если СинхронизироватьМенеджеров Тогда
		Если Не ЗначениеЗаполнено(ТабМенеджеров) Тогда
			ТабМенеджеров = ПолучитьПереченьМенеджеровABCP(Истина);
		КонецЕсли;
		//сообщить(ТабМенеджеров.Количество());
		//Структура = Новый Структура("id", Формат(ИдМенеджера,"ЧГ=0"));
		Структура = Новый Структура("id", Число(ИдМенеджера));
		НачалоКИ = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""";
		КонецКИ = "</КонтактнаяИнформация>";
		СтрокиМенеджеров = ТабМенеджеров.НайтиСтроки(Структура);
		//сообщить(НайденныеСтроки.Количество());
		Для Каждого СтрокаМенеджера Из СтрокиМенеджеров Цикл
			Если ЗначениеЗаполнено(СтрокаМенеджера.Пользователь) Тогда
				Возврат СтрокаМенеджера.Пользователь;
			КонецЕсли;
			Об = Справочники.Пользователи.НайтиПоНаименованию(СтрокаМенеджера.lastName+" "+СтрокаМенеджера.firstName, Истина);
			//сообщить(СтрокаМенеджера.lastName+" "+СтрокаМенеджера.firstName);
			Если Не ЗначениеЗаполнено(Об) Тогда
				Об = Справочники.Пользователи.СоздатьЭлемент();
				Об.Наименование = СтрокаМенеджера.lastName+" "+СтрокаМенеджера.firstName;
				ЗаписьВЛог("Добавлен менеджер "+Об.Наименование+", ид "+Формат(ИдМенеджера,"ЧГ=0"), , Истина);
			Иначе
				Об = Об.ПолучитьОбъект();
			КонецЕсли;
			МобильныйТелефон = СтрокаМенеджера.phone;
			//УстановитьПривилегированныйРежим(Истина);
			//УстановитьПривилегированныйРежим(Ложь);
			КодСтраны = Лев(МобильныйТелефон,1);
			КодГорода = Сред(МобильныйТелефон,2,3);
			НомерБезКодов = Сред(МобильныйТелефон,5);
			ПредставлениеТелефона = "+" + КодСтраны + " (" + КодГорода + ") " + НомерБезКодов;
			//ПредставлениеТелефона = "+"+Лев(врем,1)+" ("+Сред(врем,2,3)+") "+Прав(врем,7);
			ПредставлениеТелефона = "+"+КодСтраны+" ("+КодГорода+") "+Прав(МобильныйТелефон,7);

			//некорректно заполняет телефон, необходимо пользоваться функцией, и сразу заполнять и почту и телефон
			//УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация
			//УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта

			СтрокаКонтактнойИнформации = Об.КонтактнаяИнформация.Добавить();
			СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
			//СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Комментарий>"+МобильныйТелефон+"</Комментарий><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+""" Добавочный=""""/>"+КонецКИ;
			СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+"""/>"+КонецКИ;
			СтрокаКонтактнойинформации.НомерТелефона = МобильныйТелефон;
			СтрокаКонтактнойИнформации.НомерТелефонаБезКодов = Прав(МобильныйТелефон,7);
			СтрокаКонтактнойИнформации.Представление = МобильныйТелефон;
			Если Подверсия2>3 И Подверсия3>5 Тогда//в 11.4.6 появилась
			СтрокаКонтактнойИнформации.Значение = "{
													|""value"": """+МобильныйТелефон+""",
													|""comment"": """",
													|""type"": ""Телефон"",
													|""countryCode"": """",
													|""areaCode"": """",
													|""number"": """+МобильныйТелефон+""",
													|""extNumber"": """"
													|}";
			КонецЕсли;
			Если Не УТ111 Тогда
				Об.Комментарий = "создано автоматически "+СокрЛП(ТекущаяДата());
			КонецЕсли;
			Email = СтрокаМенеджера.Email;
			//некорректно заполняет телефон, необходимо пользоваться функцией, и сразу заполнять и почту и телефон
			//УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация
			//УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта
			СтрокаКонтактнойИнформации = Об.КонтактнаяИнформация.Добавить();
			СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;//.EmailПартнера;
			СтрокаКонтактнойИнформации.ЗначенияПолей = НачалоКИ+Email+"""><Комментарий/><Состав xsi:type=""ЭлектроннаяПочта"" Значение="""+Email+"""/>"+КонецКИ;
			СтрокаКонтактнойИнформации.АдресЭП = Email;
			СтрокаКонтактнойИнформации.Представление = Email;
			Если Подверсия2>3 И Подверсия3>5 Тогда//в 11.4.6 появилась
			//<ДоменноеИмяСервера>после@</ДоменноеИмяСервера>
			СтрокаКонтактнойИнформации.Значение = "{
													|""value"": """+Email+""",
													|""comment"": """",
													|""type"": ""АдресЭлектроннойПочты""
													|}";
			КонецЕсли;
			
			
			
			Об.Записать();
			СтрокаМенеджера.Пользователь = Об.Ссылка;
			
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Истина);
			Если Не ЗначениеЗаполнено(Свойство) Тогда
				ТекстСообщения = "не найдено свойство: "+ИмяСвойства;
				ЗаписьВЛог(ТекстСообщения);
			Иначе
				НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей(); 
				МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = Об.Ссылка;
				МенеджерЗаписи.Свойство = Свойство;
				МенеджерЗаписи.Значение = Число(ИдМенеджера);
				МенеджерЗаписи.Записать();
				
				//иначе выгружается некорректно
				//СтрокиДополнительныеРеквизиты = Об.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство.Ссылка));
				//Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
				//	СтрокаДополнительныеРеквизиты = Об.ДополнительныеРеквизиты.Добавить();
				//Иначе
				//	СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
				//КонецЕсли;
				//СтрокаДополнительныеРеквизиты.Свойство = Свойство.Ссылка;
				//СтрокаДополнительныеРеквизиты.Значение = Число(ИдМенеджера);
				//СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = Формат(ИдМенеджера,"ЧГ=0");
				//Об.Записать();
			КонецЕсли;
			ТекстСообщения = "добавлен отсутствующий пользователь: "+СокрЛП(Об.Наименование)+", идентификатор "+Формат(ИдМенеджера, "ЧГ=0");
			ЗаписьВЛог(ТекстСообщения);
			Возврат Об.Ссылка;	
		КонецЦикла;
	Иначе
		Возврат ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
КонецФункции

// Добавляет банковский счет выбранному контрагенту
// 
// Параметры:
//  БИКБанка - БИК банка
//  ТекстКорреспондента - ТекстКорреспондента
//  КоррСчетБанка - к/с банка
//  НаименованиеБанка - наименование банка
//  РасчетныйСчетВБанке - р/с в банке
//	БИККоррБанка - БИК банка для непрямых расчетов
//	КоррСчетКорБанка - КоррСчет банка для непрямых расчетов
//	НаименованиеПолучателя
//
// Возвращаемое значение:
//  Справочник.БанковскиеСчета - Возвращает ссылку на элемент справочника "Банковские счета"
// 
Функция НайтиДобавитьБанковскийСчет(Контрагент, БИКБанка, НаименованиеБанка, КоррСчетБанка, РасчетныйСчетВБанке, ГородБанка = "", ОбновитьДанные = Ложь) Экспорт
	Если БИКБанка = "0" Или КоррСчетБанка = "0" Или РасчетныйСчетВБанке = "0" Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если СтрДлина(РасчетныйСчетВБанке)<>20 Тогда
		//ТекстСообщения = "Длина расчетного счета меньше 20 символов";
		//ЗаписьВЛог(ТекстСообщения,6,Истина);
		Возврат Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	БанковскийСчетКонтрагента  = Справочники.БанковскиеСчетаКонтрагентов.НайтиПоРеквизиту("НомерСчета", РасчетныйСчетВБанке,,Контрагент);
	Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
		Возврат БанковскийСчетКонтрагента.Ссылка;
	КонецЕсли;
	//НачатьТранзакцию();
	Если НЕ (УТ111 Или УТ112 Или УТ113 ) Тогда
		БанкСсылка = Справочники.КлассификаторБанков.НайтиПоКоду(СокрЛП(БИКБанка));
		Если БанкСсылка = Справочники.КлассификаторБанков.ПустаяСсылка() Тогда
			Банк = Справочники.КлассификаторБанков.СоздатьЭлемент();
			Банк.Код = БИКБанка;
			Банк.КоррСчет = КоррСчетБанка;
			Банк.Наименование = НаименованиеБанка;
			Банк.Записать();
			БанкСсылка = Банк.Ссылка;
		КонецЕсли;
	Иначе
		БанкСсылка = Справочники.КлассификаторБанковРФ.НайтиПоКоду(СокрЛП(БИКБанка));
		Если БанкСсылка = Справочники.КлассификаторБанковРФ.ПустаяСсылка() Тогда
			Банк = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
			Банк.Код = БИКБанка;
			Банк.КоррСчет = КоррСчетБанка;
			Банк.Наименование = НаименованиеБанка;
			Банк.Записать();
			БанкСсылка = Банк.Ссылка;
		КонецЕсли;
	КонецЕсли;
	//Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
	БанковскийСчетКонтрагента.ВалютаДенежныхСредств = Валюта;
	БанковскийСчетКонтрагента.Владелец = Контрагент.Ссылка;
	БанковскийСчетКонтрагента.Банк = БанкСсылка;
	БанковскийСчетКонтрагента.БИКБанка = БИКБанка;
	БанковскийСчетКонтрагента.НаименованиеБанка = НаименованиеБанка;
	БанковскийСчетКонтрагента.ГородБанка = ГородБанка;
	БанковскийСчетКонтрагента.Наименование = "основной";
	БанковскийСчетКонтрагента.НомерСчета = РасчетныйСчетВБанке;
	БанковскийСчетКонтрагента.Записать();
	//ЗафиксироватьТранзакцию();
	Возврат БанковскийСчетКонтрагента.Ссылка;
КонецФункции

Функция НайтиКонтрагентаПоИдентификатору(ИдентификаторКонтрагента, ИмяСвойства = "userId (Контрагенты)", НаименованиеПоставщика = "", ТолькоПоиск = Ложь) Экспорт
	Если ИдентификаторКонтрагента = 0 Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоставщикДляПоступления) Тогда
		Возврат ПоставщикДляПоступления;
	КонецЕсли;
	Запрос = Новый Запрос;
	Если ИмяСвойства = "distributorId (Контрагенты)" Тогда
		Если СоответствиеИдентификаторовПоставщиков = Неопределено  Тогда
			СоответствиеИдентификаторовПоставщиков = Новый Соответствие;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект,
			               |	ДополнительныеСведения.Значение КАК Значение
			               |ИЗ
			               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			               |ГДЕ
			               |	ДополнительныеСведения.Свойство.Наименование = &Наименование
			               |	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Контрагенты";
			Запрос.УстановитьПараметр("Наименование", ИмяСвойства);
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					СоответствиеИдентификаторовПоставщиков.Вставить(Число(Выборка.Значение), Выборка.Объект);
					СоответствиеИдентификаторовПоставщиков.Вставить(Формат(Выборка.Значение,"ЧГ=0"), Выборка.Объект);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ПоставщикПоСоответствию = СоответствиеИдентификаторовПоставщиков.Получить(ИдентификаторКонтрагента);
		Если ЗначениеЗаполнено(ПоставщикПоСоответствию) Тогда
			Возврат ПоставщикПоСоответствию;
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	(ДополнительныеСведения.Значение = &Значение
	               |			ИЛИ ДополнительныеСведения.Значение = &ЗначениеСтрокой)
	               |	И ДополнительныеСведения.Свойство.Наименование = &Наименование
	               |	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Контрагенты";
	Запрос.УстановитьПараметр("Значение", Число(ИдентификаторКонтрагента));
	Запрос.УстановитьПараметр("ЗначениеСтрокой", Формат(ИдентификаторКонтрагента,"ЧГ=0"));
	//Запрос.УстановитьПараметр("ЗначениеСтрокой", Строка(Формат(ИдентификаторКонтрагента,"ЧГ=0")));
	Запрос.УстановитьПараметр("Наименование", ИмяСвойства);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ТолькоПоиск Тогда
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		Если СинхронизироватьПоставщиков И НаименованиеПоставщика<>"" Тогда
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Истина);
			Если Не ЗначениеЗаполнено(Свойство) Тогда
				ТекстСообщения = "не найдено свойство: "+ИмяСвойства;
				ЗаписьВЛог(ТекстСообщения);
			КонецЕсли;
			Если ИспользоватьТранзакции Тогда НачатьТранзакцию(); КонецЕсли;
			
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();//НайтиКонтрагентаПоИдентификатору - добавляем поставщика
			Если ТаблицаПоставщиков.Количество() = 0 Тогда
				ЗаполнитьТаблицуПоставщиков();
			КонецЕсли;
			Партнер = Справочники.Партнеры.СоздатьЭлемент();
			Партнер.Наименование = НаименованиеПоставщика;
			Партнер.НаименованиеПолное = НаименованиеПоставщика;
			Партнер.Поставщик = Истина;
			Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;//поставщики все юр.лица
			Если БитАвтоСервис Тогда
				НачалоКИ = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""";
				КонецКИ = "</КонтактнаяИнформация>";
				EmailКонтрагента = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				ТелефонКонтрагента = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				//ФаксКонтрагенты = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
				//ПочтовыйАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
				ФактАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ЮрАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				
				МобильныйТелефон = "79991234567";
				КодСтраны = "7";
				КодГорода = "999";
				НомерБезКодов = "1234567";
				ПредставлениеТелефона = МобильныйТелефон;
				СтрокаКонтактнойИнформации = Партнер.КонтактнаяИнформация.Добавить();
				СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;//.ТелефонПартнера;
				//СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Комментарий>"+МобильныйТелефон+"</Комментарий><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+""" Добавочный=""""/>"+КонецКИ;
				СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+"""/>"+КонецКИ;
				СтрокаКонтактнойинформации.НомерТелефона = МобильныйТелефон;
				СтрокаКонтактнойИнформации.НомерТелефонаБезКодов = Прав(МобильныйТелефон,7);
				СтрокаКонтактнойИнформации.Представление = МобильныйТелефон;
			КонецЕсли;
			
			Партнер.Записать();
			//Партнер.ГруппаДоступа = Справочники.ГруппыДоступаПартнеров...
			//Партнер.ОсновнойМенеджер = НайтиМенеджераПоИдентификатору(Число(НовСтрока.ИдентификаторМенеджера));
			ТекстСообщения = "добавлен партнер-контрагент: "+СокрЛП(Партнер.Наименование);//+", Идентификатор менеджера "+НовСтрока.employeeId;
			ЗаписьВЛог(ТекстСообщения);
			Контрагент.Партнер = Партнер.Ссылка;
			Контрагент.Наименование = НаименованиеПоставщика;
			Контрагент.НаименованиеПолное = НаименованиеПоставщика;
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			
			//тогда свойство должно быть ЭтоДополнительноеСведение = Ложь;
			//СтрокаДопРеквизитов = Контрагент.ДополнительныеРеквизиты.Добавить();
			//СтрокаДопРеквизитов.Свойство = Свойство;
			//СтрокаДопРеквизитов.Значение = Число(ИдентификаторКонтрагента);
			//СтрокаДопРеквизитов.ТекстоваяСтрока = Формат(Число(ИдентификаторКонтрагента),"ЧГ=0");
			Если БитАвтосервис Тогда
				Представление = "+7 ("+Сред(МобильныйТелефон,2,3)+") "+Сред(МобильныйТелефон,5,3)+"-"+Сред(МобильныйТелефон,8,2)+"-"+Сред(МобильныйТелефон,10,2);
				Попытка
					ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ТелефонКонтрагента);
					ОбъектXDTOКИ.Комментарий = МобильныйТелефон;
					ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
				Исключение
					ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(,Представление, ТелефонКонтрагента.Тип);
				КонецПопытки;
				УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, ТелефонКонтрагента, ТелефонКонтрагента.Тип);
			КонецЕсли;
			Контрагент.Записать();
			
			ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
			ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
			Если УТ111 Тогда
				ИспользоватьДоговорыСПоставщиками = Ложь;
			Иначе
				ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
			КонецЕсли;
			Если ИспользоватьДоговорыСПоставщиками И СоздаватьДоговоры Тогда
				НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				НовыйДоговор.ИнициализироватьСправочник();
				ЗаполнитьРеквизитыНовогоДоговора(НовыйДоговор, Контрагент);
				
				НовыйДоговор.Дата = НачалоМесяца(ТекущаяДата());
				НовыйДоговор.ДатаНачалаДействия = НовыйДоговор.Дата;
				НовыйДоговор.Номер = ИдентификаторКонтрагента;
				НовыйДоговор.Наименование = "с поставщиком";
				НовыйДоговор.НаименованиеДляПечати = НовыйДоговор.Наименование;
				НовыйДоговор.ПорядокРасчетов = ПорядокРасчетовЗаказПоставщику;
				НовыйДоговор.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
				НовыйДоговор.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
				НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
				НовыйДоговор.Комментарий = "(НайтиКонтрагентаПоИдентификатору) авт. создан при обмене с ABCP "+ТекущаяДата()+", поставщик "+СокрЛП(Контрагент);;
				НовыйДоговор.Записать();
				ТекстСообщения = "создан договор по ид контрагента :	"+ИдентификаторКонтрагента+", покупатель: "+СокрЛП(Контрагент);
				ЗаписьВЛог(ТекстСообщения,3);
			КонецЕсли;
			
			Если УТ111 Тогда
				ИспользоватьСоглашенияСПоставщиками = Ложь;
			Иначе
				ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
			КонецЕсли;
			Если ИспользоватьСоглашенияСПоставщиками Тогда
				НовоеСоглашение = Справочники.СоглашенияСПоставщиками.СоздатьЭлемент();//СоглашенияСПоставщиками
				//ИнициализироватьСправочник не экспортный метод, дублируем
				НовоеСоглашение.Менеджер = Пользователи.ТекущийПользователь();
				НовоеСоглашение.Статус = Перечисления.СтатусыСоглашенийСПоставщиками.Действует;
				НовоеСоглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
				НовоеСоглашение.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
				Если ВерсияУТ <> "3.2.3.18" И НЕ УТ111 Тогда
					НовоеСоглашение.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
				КонецЕсли;
				НовоеСоглашение.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
				НовоеСоглашение.Склад = Склад;//ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				Иначе
					НовоеСоглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
					Если УТ114 Тогда
						НовоеСоглашение.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(НовоеСоглашение.ПорядокОплаты, НовоеСоглашение.ХозяйственнаяОперация);
					КонецЕсли;
				КонецЕсли;
				НовоеСоглашение.ЦенаВключаетНДС = ЦенаВключаетНДСПриПокупке;
				Если УТ113 Тогда
					НовоеСоглашение.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(НовоеСоглашение.ПорядокОплаты);
				КонецЕсли;
				Если Не ИспользоватьДоговорыСПоставщиками Тогда
					Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
						ИЛИ НовоеСоглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
						НовоеСоглашение.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
					Иначе
						НовоеСоглашение.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
					КонецЕсли;
				Иначе
					НовоеСоглашение.ИспользуютсяДоговорыКонтрагентов = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПорядокРасчетовЗаказПоставщику) Тогда
					НовоеСоглашение.ПорядокРасчетов = ПорядокРасчетовЗаказПоставщику;
				КонецЕсли;
				НовоеСоглашение.Наименование = "Поставки";
				//НовоеСоглашение.Номер = "";
				НовоеСоглашение.Дата = ТекущаяДата();
				НовоеСоглашение.ДатаНачалаДействия = НовоеСоглашение.Дата;
				НовоеСоглашение.Контрагент = Контрагент.Ссылка;
				НовоеСоглашение.Партнер = Контрагент.Партнер;
				НовоеСоглашение.Комментарий = "(НайтиКонтрагентаПоИдентификатору) авт. создан при обмене с ABCP "+ТекущаяДата();
				НовоеСоглашение.Записать();
			КонецЕсли;	
			
			//СтруктураПоиска = Новый Структура("id,ДополнительныйКод", ИдентификаторКонтрагента, Ложь);
			СтруктураПоиска = Новый Структура("id", ИдентификаторКонтрагента);//нет такой колонки
			Если ТаблицаПоставщиков.Количество() = 0 Тогда
				ЗаполнитьТаблицуПоставщиков();
			КонецЕсли;
			НайденныеСтроки = ТаблицаПоставщиков.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество()>0 Тогда
				СтрокаКонтрагента = НайденныеСтроки[0];
				//ЮридическийАдрес = НовСтрока["organizationOfficialAddress"];
				//МобильныйТелефон = СокрЛП(НовСтрока["mobile"]);
				//marketType = СокрЛП(НовСтрока["marketType"]);
				//organizationForm = СокрЛП(НовСтрока["organizationForm"]);
				//business = СокрЛП(НовСтрока["business"]);
				Если СтрокаКонтрагента.organizationOfficialName<>"" Тогда
					Контрагент.НаименованиеПолное = СтрокаКонтрагента.organizationOfficialName;
				КонецЕсли;
				Если СтрокаКонтрагента.inn<>"" Тогда
					Контрагент.ИНН = СтрокаКонтрагента.inn;
				КонецЕсли;
				Если СтрокаКонтрагента.kpp<>"" Тогда
					Контрагент.КПП = СтрокаКонтрагента.kpp;
				КонецЕсли;
				Если СтрокаКонтрагента.organizationAccount<>"" Тогда
					//добавляем банковский счет
					Если НЕ (УТ111 Или УТ112 Или УТ113 ) Тогда
						БанкСсылка = Справочники.КлассификаторБанков.НайтиПоКоду(СтрокаКонтрагента.bik);
						Если БанкСсылка = Справочники.КлассификаторБанков.ПустаяСсылка() Тогда
							Банк = Справочники.КлассификаторБанков.СоздатьЭлемент();
							Банк.Код = СтрокаКонтрагента.bik;
							Банк.КоррСчет = СтрокаКонтрагента.correspondentAccount;
							Банк.Наименование = СтрокаКонтрагента.bankName;
							Банк.Записать();
							БанкСсылка = Банк.Ссылка;
						КонецЕсли;
					Иначе
						БанкСсылка = Справочники.КлассификаторБанковРФ.НайтиПоКоду(СтрокаКонтрагента.bik);
						Если БанкСсылка = Справочники.КлассификаторБанковРФ.ПустаяСсылка() Тогда
							Банк = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
							Банк.Код = СтрокаКонтрагента.bik;
							Банк.КоррСчет = СтрокаКонтрагента.correspondentAccount;
							Банк.Наименование = СтрокаКонтрагента.bankName;
							Банк.Записать();
							БанкСсылка = Банк.Ссылка;
						КонецЕсли;
					КонецЕсли;
					//Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
					БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
					БанковскийСчетКонтрагента.ВалютаДенежныхСредств = Валюта;
					БанковскийСчетКонтрагента.Владелец = Контрагент.Ссылка;
					БанковскийСчетКонтрагента.Банк = БанкСсылка;
					БанковскийСчетКонтрагента.БИКБанка = СтрокаКонтрагента.bik;
					БанковскийСчетКонтрагента.НаименованиеБанка = СтрокаКонтрагента.bik;
					БанковскийСчетКонтрагента.ГородБанка = СтрокаКонтрагента.city;
					БанковскийСчетКонтрагента.Наименование = "основной";
					БанковскийСчетКонтрагента.НомерСчета = СтрокаКонтрагента.organizationAccount;
					БанковскийСчетКонтрагента.Записать();
				КонецЕсли;
				Контрагент.Записать();
			КонецЕсли;
			//добавляем свойство
			НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей(); 
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = Контрагент.Ссылка;
			МенеджерЗаписи.Свойство = Свойство;
			МенеджерЗаписи.Значение = Число(ИдентификаторКонтрагента);
			МенеджерЗаписи.Записать();
			Если ИмяСвойства = "distributorId (Контрагенты)" Тогда
				СоответствиеИдентификаторовПоставщиков.Вставить(Число(ИдентификаторКонтрагента), Контрагент.Ссылка);
				СоответствиеИдентификаторовПоставщиков.Вставить(Формат(ИдентификаторКонтрагента,"ЧГ=0"), Контрагент.Ссылка);
			КонецЕсли;
			
			//СтрокиДополнительныеРеквизиты = Контрагент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство.Ссылка));
			//Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
			//	СтрокаДополнительныеРеквизиты = Контрагент.ДополнительныеРеквизиты.Добавить();
			//Иначе
			//	СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
			//КонецЕсли;
			//СтрокаДополнительныеРеквизиты.Свойство = Свойство.Ссылка;
			//СтрокаДополнительныеРеквизиты.Значение = Число(ИдентификаторКонтрагента);
			//СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = Формат(ИдентификаторКонтрагента,"ЧГ=0");
			Контрагент.Записать();
			
			Если ИспользоватьТранзакции Тогда ЗафиксироватьТранзакцию(); КонецЕсли;
			ТекстСообщения = "добавлен отсутствующий поставщик: "+СокрЛП(Контрагент.Наименование)+", идентификатор "+Формат(ИдентификаторПоставщика, "ЧГ=0");
			ЗаписьВЛог(ТекстСообщения);
			Возврат Контрагент.Ссылка;	
		Иначе
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если НаименованиеПоставщика<>"" Тогда
		Если НЕ Выборка.Объект.Партнер.Поставщик Тогда
			Партнер = Выборка.Объект.Партнер.ПолучитьОбъект();
			Партнер.Поставщик = Истина;
			Партнер.Записать();
		КонецЕсли;
		Если Выборка.Объект.ИНН = "" Тогда
			//если это не online и не on-line, то добавляем другие реквизиты
		КонецЕсли;
	Иначе
		Если НЕ Выборка.Объект.Партнер.Клиент Тогда
			Партнер = Выборка.Объект.Партнер.ПолучитьОбъект();
			Партнер.Клиент = Истина;
			Партнер.Записать();
		КонецЕсли;
	КонецЕсли;
	СсылкаНаКонтрагента = Выборка.Объект;
	Если ЗначениеЗаполнено(СсылкаНаКонтрагента.ГоловнойКонтрагент) Тогда
		//СсылкаНаКонтрагента = СсылкаНаКонтрагента.ГоловнойКонтрагент;
	КонецЕсли;
	Если ПолучатьГаражУНовыхКонтрагентов Тогда
		//ЗаполнитьДанныеГаража(СсылкаНаКонтрагента, ИдентификаторКонтрагента);
	КонецЕсли;
	Возврат СсылкаНаКонтрагента;
КонецФункции //НайтиКонтрагентаПоИдентификатору

Процедура ЗаполнитьДанныеГаража(Контрагент, ИдКонтрагента) Экспорт
	ТекстЗапроса = "/cp/users/garage?userlogin="+Пользователь+"&userpsw="+Пароль+"&userId="+Формат(Число(ИдКонтрагента),"ЧГ=0");
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	Если КодСостояния = 500 Тогда
		сообщить("Слишком большой запрос");
	КонецЕсли;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	//если 404, то у этого пользователя нет машин
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
		//Продолжить;
	КонецЕсли;
	//У пользователя с таким userId нет автомобилей в гараже
	Если СтрокаОтвет = "{""errorCode"":301,""errorMessage"":""\u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u043a\u0438\u043c userId \u043d\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432 \u0433\u0430\u0440\u0430\u0436\u0435""}" Тогда
		Возврат;
	КонецЕсли;
	СписокЭлементов = СтруктураИзJSON(СтрокаОтвет);
	Если СтрокаОтвет = "[]" Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                |	АвтомобилиКлиентов.Ссылка
	                |ИЗ
	                |	Справочник.АвтомобилиКлиентов КАК АвтомобилиКлиентов
	                |ГДЕ
	                |	АвтомобилиКлиентов.ВИН = &ВИН
	                |	И АвтомобилиКлиентов.Контрагент = &Контрагент";
	Для Каждого Элемент Из СписокЭлементов Цикл
		//garageCarId	Идентификатор автомобиля в гараже
		//manufacturer	Марка автомобиля
		//model	Модель автомобиля
		//modification	Модификация автомобиля
		//vin	VIN номер
		//frame	FRAME номер
		//mileage	Пробег
		
		//если вин не заполнен, то не ищем
		Если СокрЛП(Элемент.vin) <> "" Тогда
			Запрос.УстановитьПараметр("ВИН", СокрЛП(Элемент.vin)); 
			Запрос.УстановитьПараметр("Контрагент", Контрагент.Ссылка);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Автомобиль = Справочники.АвтомобилиКлиентов.СоздатьЭлемент();
				Автомобиль.Контрагент = Контрагент.Ссылка;
				Автомобиль.ВладелецАвто = СокрЛП(Контрагент.Ссылка);
				Автомобиль.НаименованиеКонтрагента = СокрЛП(Контрагент.Ссылка);
				Автомобиль.ГосНомер = СокрЛП(Элемент.garageCarId);
				Автомобиль.Пробег = Элемент.mileage;
				Автомобиль.Руль = Перечисления.Руль.Левый;
				Автомобиль.ВИН = СокрЛП(Элемент.vin);
				Автомобиль.ВИНИмпортный = СокрЛП(Элемент.vin);
				Автомобиль.Примечание = СокрЛП(Элемент.modification);
				Автомобиль.Модель = НайтиДобавитьМодель(СокрЛП(Элемент.manufacturer), СокрЛП(Элемент.model), СокрЛП(Элемент.modification));
				Автомобиль.Записать();
				ЗаписьВЛог("Добавлен автомобиль контрагенту "+Контрагент.Ссылка+" "+Элемент.vin,1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция НайтиДобавитьМодель(НаименованиеМарки, НаименованиеМодели, Модификация)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Модели.Ссылка
	               |ИЗ
	               |	Справочник.Модели КАК Модели
	               |ГДЕ
	               |	Модели.Наименование = &НаименованиеМодели
	               |	И Модели.Владелец.Наименование = &НаименованиеМарки";
	Запрос.УстановитьПараметр("НаименованиеМодели", НаименованиеМодели); 
	Запрос.УстановитьПараметр("НаименованиеМарки", НаименованиеМарки);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Элемент = Справочники.Модели.СоздатьЭлемент();
	Элемент.Наименование = НаименованиеМодели;
	Элемент.НаименованиеМодели = НаименованиеМодели;
	Марка = Справочники.Марки.НайтиПоНаименованию(НаименованиеМарки, Истина);
	Если Не ЗначениеЗаполнено(Марка) Тогда
		Марка = Справочники.Марки.СоздатьЭлемент();
		Марка.Наименование = НаименованиеМарки;
		Марка.Записать();
	КонецЕсли;
	Элемент.Владелец = Марка.Ссылка;
	Элемент.Записать();
	Возврат Элемент.Ссылка;
КонецФункции

Функция НайтиКонтрагентаПоНаименованию(Наименование)
	Ссылка = Справочники.Контрагенты.НайтиПоНаименованию(Наименование,Истина);
	Если Ссылка.ЭтоГруппа Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Возврат Ссылка;
КонецФункции //НайтиКонтрагентаПоНаименованию

Функция НайтиКонтрагентаПоИНН(ИНН, КПП) Экспорт
	Если ИНН = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	//Возврат Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ИНН);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 3
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Партнер.Код КАК ПартнерКод
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартнерКод";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Если КПП = "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Контрагенты.КПП = &КПП", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		//если не нашли по ИНН и КПП, пробуем по ИНН
		Если КПП = "" Тогда
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Контрагенты.КПП = &КПП", "");
			Запрос.Текст = ТекстЗапроса;
			РезультатЗапроса = Запрос.Выполнить();
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();

КонецФункции //НайтиКонтрагентаПоИНН

Функция НайтиКонтрагентаПоТелефону(МобильныйТелефон, Партнер = Ложь) Экспорт
	Если МобильныйТелефон = "" Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Если Партнер = Ложь Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КонтрагентыКонтактнаяИнформация.Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		               |ГДЕ
		               |	КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		               |	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
		               |	И КонтрагентыКонтактнаяИнформация.НомерТелефона = &НомерТелефона";
	Иначе
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Партнеры.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		               |ГДЕ
		               |	КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		               |	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
		               |	И КонтрагентыКонтактнаяИнформация.НомерТелефона = &НомерТелефона";
	КонецЕсли;
	Лев7 = Лев(АдресСервиса, 7);
	Если Лев7 = "id14544"  Тогда
		id14544 = Истина;
	Иначе
		id14544 = Ложь;
	КонецЕсли;
	Если id14544 Тогда//телефон может быть у контактного лица
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КонтактныеЛицаПартнеров.Владелец КАК Владелец
		               |ПОМЕСТИТЬ ТЗ
		               |ИЗ
		               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		               |ГДЕ
		               |	КонтактныеЛицаПартнеров.КонтактнаяИнформация.НомерТелефона = &НомерТелефона
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Контрагенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.Партнер В
		               |			(ВЫБРАТЬ
		               |				ТЗ.Владелец
		               |			ИЗ
		               |				ТЗ)
		               |	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Контрагенты.Код";
	КонецЕсли;
	//ТелефонВБазе = "+"+Лев(МобильныйТелефон,1)+" (" + Сред(МобильныйТелефон,2,3)+") "+Сред(МобильныйТелефон,5); 
	Запрос.УстановитьПараметр("НомерТелефона", МобильныйТелефон);
	//Результат = Запрос.Выполнить();
	//Если НЕ Результат.Пустой() Тогда
	//	Выборка = Результат.Выбрать();
	//	Выборка.Следующий();
	//	Возврат Выборка.Ссылка;
	//КонецЕсли;
	
	ДругойНомер = "";
	Если Лев(МобильныйТелефон, 1) = "7" Тогда
		ДругойНомер = "8" + Сред(МобильныйТелефон, 2);
	ИначеЕсли Лев(МобильныйТелефон, 1) = "8" Тогда
		ДругойНомер = "7" + Сред(МобильныйТелефон, 2);
	КонецЕсли;
	Если ДругойНомер<>"" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И КонтрагентыКонтактнаяИнформация.НомерТелефона = &НомерТелефона", "И ((КонтрагентыКонтактнаяИнформация.НомерТелефона = &НомерТелефона) Или (КонтрагентыКонтактнаяИнформация.НомерТелефона = &ДругойНомер))");
		Запрос.УстановитьПараметр("ДругойНомер", ДругойНомер);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ТелефонВБазе = "+"+Лев(МобильныйТелефон,1)+" (" + Сред(МобильныйТелефон,2,3)+") "+Сред(МобильныйТелефон,5,3)+"-"+Сред(МобильныйТелефон,8,2)+"-"+Сред(МобильныйТелефон,10,2);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если ДругойНомер<>"" Тогда
		ТелефонВБазе = "+"+Лев(ДругойНомер,1)+" (" + Сред(ДругойНомер,2,3)+") "+Сред(ДругойНомер,5,3)+"-"+Сред(ДругойНомер,8,2)+"-"+Сред(ДругойНомер,10,2);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если Партнер = Ложь Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Возврат Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
КонецФункции //НайтиКонтрагентаПоТелефону

Функция НайтиКонтрагентаПоТелефонуПартнера(МобильныйТелефон) Экспорт
	Если МобильныйТелефон = "" Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ТЗ
		               |ИЗ
		               |	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		               |ГДЕ
		               |	ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		               |	И ПартнерыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера)
		               |	И ПартнерыКонтактнаяИнформация.НомерТелефона = &НомерТелефона
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Контрагенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.Партнер В
		               |			(ВЫБРАТЬ
		               |				ТЗ.Ссылка
		               |			ИЗ
		               |				ТЗ)";
	Запрос.УстановитьПараметр("НомерТелефона", МобильныйТелефон);
	
	ДругойНомер = "";
	Если Лев(МобильныйТелефон, 1) = "7" Тогда
		ДругойНомер = "8" + Сред(МобильныйТелефон, 2);
	ИначеЕсли Лев(МобильныйТелефон, 1) = "8" Тогда
		ДругойНомер = "7" + Сред(МобильныйТелефон, 2);
	КонецЕсли;
	Если ДругойНомер<>"" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И КонтрагентыКонтактнаяИнформация.НомерТелефона = &НомерТелефона", "И ((КонтрагентыКонтактнаяИнформация.НомерТелефона = &НомерТелефона) Или (КонтрагентыКонтактнаяИнформация.НомерТелефона = &ДругойНомер))");
		Запрос.УстановитьПараметр("ДругойНомер", ДругойНомер);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ТелефонВБазе = "+"+Лев(МобильныйТелефон,1)+" (" + Сред(МобильныйТелефон,2,3)+") "+Сред(МобильныйТелефон,5,3)+"-"+Сред(МобильныйТелефон,8,2)+"-"+Сред(МобильныйТелефон,10,2);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если ДругойНомер<>"" Тогда
		ТелефонВБазе = "+"+Лев(ДругойНомер,1)+" (" + Сред(ДругойНомер,2,3)+") "+Сред(ДругойНомер,5,3)+"-"+Сред(ДругойНомер,8,2)+"-"+Сред(ДругойНомер,10,2);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Контрагенты.ПустаяСсылка();
КонецФункции //НайтиКонтрагентаПоТелефонуПартнера

Функция НайтиКонтрагентаПоАдресуЭП(АдресЭП)//---trs//+++trs
	
	Если СокрЛП(АдресЭП) = "" Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыКонтактнаяИнформация.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	               |	И КонтрагентыКонтактнаяИнформация.АдресЭП = &АдресЭП";
	
	Запрос.УстановитьПараметр("АдресЭП", СокрЛП(АдресЭП));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Справочники.Контрагенты.ПустаяСсылка();
КонецФункции //НайтиКонтрагентаПоАдресуЭП

Функция НайтиИдКлиентаПоНомеруТелефонаВABCP(НомерТелефона) Экспорт
	Если СтрДлина(НомерТелефона)<>11 Тогда
		Возврат 0;
	КонецЕсли;
	ТекстЗапроса = "/cp/users?userlogin="+Пользователь+"&userpsw="+Пароль+"&phone="+НомерТелефона;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = HTTPОтвет.КодСостояния;
	СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат 0;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	Попытка
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON, Истина);//прочитать в соответствие, так как у delivery address ключ - число
	Исключение
		ЧтениеJSON.Закрыть();
		ТекстСообщения = "ошибка обработки клиентов с сайта в формате JSON, ответ сервера:"+СтрокаОтвет;
		ЗаписьВЛог(ТекстСообщения);
		Возврат 0;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	Если СписокЭлементов.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	СтруктураТелефон = Новый Структура("МобильныйТелефон");
	Для Каждого Элемент Из СписокЭлементов Цикл
		Возврат Число(Элемент["userId"]);
	КонецЦикла;
	Возврат 0;
КонецФункции	

Функция НайтиМенеджераПоИдентификатору(ИдентификаторМенеджера) Экспорт
	Если ИдентификаторМенеджера = Неопределено Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	////ДополнительныеСведения.Отбор.Значение.Установить(Строка(ИдентификаторКонтрагента));
	//ДополнительныеСведения.Отбор.Свойство.Установить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторМенеджера (Пользователь)"));
	//ДополнительныеСведения.Прочитать();
	//Для Каждого ТекЗначение Из ДополнительныеСведения Цикл
	//	Если ТекЗначение.Значение = Строка(ИдентификаторМенеджера) Тогда
	//		Возврат ТекЗначение.Объект;
	//	КонецЕсли;
	//КонецЦикла;
	//Возврат Справочники.Контрагенты.ПустаяСсылка();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Пользователи.Ссылка
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	                      |		ПО Пользователи.Ссылка = ДополнительныеСведения.Объект
	                      |ГДЕ
	                      |	ДополнительныеСведения.Свойство.Наименование = &Свойство
	                      |	И ДополнительныеСведения.Значение = &Значение";
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//               |	ДополнительныеСведения.Объект.Ссылка КАК Ссылка,
	//               |	ДополнительныеСведения.Свойство.Наименование
	//               |ИЗ
	//               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	//               |		ПО ДополнительныеСведения.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	//               |ГДЕ
	//               |	ДополнительныеРеквизитыИСведения.Наименование = &Свойство
	//               |	И ДополнительныеСведения.Значение = &Значение";
	Запрос.УстановитьПараметр("Значение", Число(ИдентификаторМенеджера));
	Запрос.УстановитьПараметр("Свойство", "ИдентификаторМенеджера (Пользователь)");
	Результат = Запрос.Выполнить();
	//сообщить(ИдентификаторМенеджера);
	Если Результат.Пустой() Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции //НайтиМенеджераПоИдентификатору

Функция НайтиСвойствоКонтрагента(Контрагент, Наименование) Экспорт
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//               |	ДополнительныеСведения.Значение
	//               |ИЗ
	//               |	Справочник.Контрагенты КАК Контрагенты
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//               |		ПО Контрагенты.Ссылка = ДополнительныеСведения.Объект
	//               |ГДЕ
	//               |	ДополнительныеСведения.Свойство.Наименование = &Свойство
	//               |	И ДополнительныеСведения.Объект = &Объект";
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство.Наименование = &Свойство
	               |	И ДополнительныеСведения.Объект = &Объект";
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ДополнительныеСведения.Значение,
	//               |	ДополнительныеСведения.Свойство.Наименование
	//               |ИЗ
	//               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//               |ГДЕ
	//               |	ДополнительныеСведения.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Свойство", Наименование);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Значение;
	КонецЕсли;
КонецФункции //НайтиСвойствоКонтрагента

Функция НайтиСвойствоПользователя(Пользователь, Наименование)
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//               |	ДополнительныеСведения.Значение
	//               |ИЗ
	//               |	Справочник.Пользователи КАК Пользователи
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//               |		ПО Пользователи.Ссылка = ДополнительныеСведения.Объект
	//               |ГДЕ
	//               |	ДополнительныеСведения.Свойство.Наименование = &Свойство
	//               |	И ДополнительныеСведения.Объект = &Объект";
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство.Наименование = &Свойство
	               |	И ДополнительныеСведения.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Пользователь);
	Запрос.УстановитьПараметр("Свойство", Наименование);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Значение;
	КонецЕсли;
КонецФункции //НайтиСвойствоПользователя

Функция НайтиСвойствоЗаказаКлиента(ЗаказКлиента, Наименование)
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//               |	ЗаказКлиента.Ссылка
	//               |ИЗ
	//               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//               |		ПО ЗаказКлиента.Ссылка = ДополнительныеСведения.Объект
	//               |ГДЕ
	//               |	ДополнительныеСведения.Свойство.Наименование = &Свойство
	//               |	И ДополнительныеСведения.Значение = &Значение";
	               			   
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство.Наименование = &Свойство
	               |	И ДополнительныеСведения.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ЗаказКлиента);
	Запрос.УстановитьПараметр("Свойство", Наименование);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат null;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Значение;
	КонецЕсли;
КонецФункции //НайтиСвойствоЗаказаКлиента

Процедура ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Организация, ПорядокОплаты, БанковскийСчет) Экспорт
	
	Если ЗначениеЗаполнено(БанковскийСчет) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОплатаВВалюте = ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Организация
	|	И ((БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = &ВалютаРегл И НЕ &ОплатаВВалюте)
	|	ИЛИ (БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств <> &ВалютаРегл И &ОплатаВВалюте))
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОплатаВВалюте", ОплатаВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		БанковскийСчет = Выборка.БанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ПорядокОплаты, БанковскийСчет) Экспорт
	
	Если ЗначениеЗаполнено(БанковскийСчет) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОплатаВВалюте = ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
	                      |	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчет
	                      |ИЗ
	                      |	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	                      |ГДЕ
	                      |	БанковскиеСчетаКонтрагентов.Владелец = &Контрагент
	                      |	И (БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &ВалютаРегл
	                      |				И НЕ &ОплатаВВалюте
	                      |			ИЛИ БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств <> &ВалютаРегл
	                      |				И &ОплатаВВалюте)
	                      |	И НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ОплатаВВалюте", ОплатаВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		БанковскийСчет = Выборка.БанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьКонтрагентаСервер(НовСтрока, ССайта = Истина);
	ИдОфиса = 0;
	НачалоКИ = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""";
	КонецКИ = "</КонтактнаяИнформация>";
	ФактАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ЮрАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	
	ЮридическийАдрес = "";
	Если ССайта Тогда
		ИдентификаторКонтрагента = Число(НовСтрока.userId);
		Если НовСтрока.deliveryAddress<>Неопределено Тогда
			Для Каждого Адрес Из НовСтрока.deliveryAddress Цикл
				ЮридическийАдрес = Адрес.name;
			КонецЦикла;
		КонецЕсли;
		МобильныйТелефон=СокрЛП(НовСтрока.mobile);
		Если НовСтрока.employeeId <> Неопределено тогда
			ИдентификаторМенеджера = Число(НовСтрока.employeeId);
		КонецЕсли;
	Иначе
		ИдентификаторКонтрагента = Число(НовСтрока.ИдентификаторКонтрагента);
		ЮридическийАдрес = НовСтрока.ЮридическийАдрес;
		МобильныйТелефон=СокрЛП(НовСтрока.МобильныйТелефон);
		ИдентификаторМенеджера = НовСтрока.ИдентификаторМенеджера;
	КонецЕсли;
	marketType = НовСтрока.marketType;
	organizationForm = СокрЛП(НовСтрока.organizationForm);
	business = СокрЛП(НовСтрока.business);
	comment = СокрЛП(НовСтрока.comment);
	managerComment = СокрЛП(НовСтрока.managerComment);
	Если ЗначениеЗаполнено(НовСтрока.offices) Тогда
		Для Каждого ЭлементОфиса Из НовСтрока.offices Цикл
			ИдОфиса = ЭлементОфиса;
			Прервать;//запоминаем только первый
		КонецЦикла;
	КонецЕсли;
	Если НЕ СинхронизироватьКонтрагентов Тогда
		ТекстСообщения = "Не найден контрагент: "+СокрЛП(НовСтрока.organizationName)+", телефон "+СокрЛП(НовСтрока.mobile)+", идентификатор "+СокрЛП(ИдентификаторКонтрагента);
		ЗаписьВЛог(ТекстСообщения);
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	//создаем контрагента и клиента
	Если ИспользоватьТранзакции Тогда НачатьТранзакцию(); КонецЕсли;
	
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();//ДобавитьКонтрагентаСервер
	//чтобы другой контрагент Андрей не привязывался к тому же партнеру, который когда то создан
	Если ССайта Тогда
		//НайденныйПартнер = Справочники.Партнеры.НайтиПоНаименованию(НовСтрока["organizationName"], Истина);
		//Если НайденныйПартнер = Справочники.Партнеры.ПустаяСсылка() Тогда
			Партнер = Справочники.Партнеры.СоздатьЭлемент();
			Партнер.Наименование = НовСтрока["organizationName"];
			Партнер.НаименованиеПолное = Партнер.Наименование;
			Партнер.ОсновнойМенеджер = НайтиМенеджераПоИдентификатору(НовСтрока["employeeId"]);
			Партнер.Комментарий = comment;
			//Партнер.ГруппаДоступа = Справочники.ГруппыДоступаПартнеров...
		//Иначе
		//	Партнер = НайденныйПартнер.ПолучитьОбъект(); 
		//КонецЕсли;
	Иначе
		//НайденныйПартнер = Справочники.Партнеры.НайтиПоНаименованию(НовСтрока.НаименованиеОрганизации, Истина);
		//Если НайденныйПартнер = Справочники.Партнеры.ПустаяСсылка() Тогда
			Партнер = Справочники.Партнеры.СоздатьЭлемент();
			Партнер.Наименование = НовСтрока.НаименованиеОрганизации;
			Партнер.НаименованиеПолное = НовСтрока.НаименованиеОрганизации;
			Партнер.ОсновнойМенеджер = НайтиМенеджераПоИдентификатору(Число(НовСтрока.ИдентификаторМенеджера));
			Партнер.Комментарий = comment;
			ТекстСообщения = "добавлен партнер: "+СокрЛП(Партнер.Наименование)+", Идентификатор менеджера "+СокрЛП(НовСтрока.employeeId);
			//Партнер.ГруппаДоступа = Справочники.ГруппыДоступаПартнеров...
			ЗаписьВЛог(ТекстСообщения)
		//Иначе
		//	Партнер = НайденныйПартнер.ПолучитьОбъект(); 
		//КонецЕсли;
	КонецЕсли;
	//Партнер.ОбменДанными.Загрузка = Истина;//1Бит иначе на телефон ругается
	//Если БитАвтосервис Тогда
	//	УстановитьПривилегированныйРежим(Истина);
	//КонецЕсли;
	Если МобильныйТелефон = "" И БитАвтосервис Тогда //иначе партнера не даёт записать
		МобильныйТелефон = "79991234567";
	КонецЕсли;
	
	КодСтраны = Лев(МобильныйТелефон,1);
	КодГорода = Сред(МобильныйТелефон,2,3);
	НомерБезКодов = Сред(МобильныйТелефон,5);
	ПредставлениеТелефона = "+" + КодСтраны + " (" + КодГорода + ") " + НомерБезКодов;
	ПредставлениеТелефона = "+" + КодСтраны + " (" + КодГорода + ") " + Прав(МобильныйТелефон,7);
	Если БитАвтосервис Тогда
		СтрокаКонтактнойИнформации = Партнер.КонтактнаяИнформация.Добавить();
		СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;//.ТелефонПартнера;
		//СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Комментарий>"+МобильныйТелефон+"</Комментарий><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+""" Добавочный=""""/>"+КонецКИ;
		СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+"""/>"+КонецКИ;
		СтрокаКонтактнойинформации.НомерТелефона = МобильныйТелефон;
		СтрокаКонтактнойИнформации.НомерТелефонаБезКодов = Прав(МобильныйТелефон,7);
		СтрокаКонтактнойИнформации.Представление = МобильныйТелефон;
	КонецЕсли;
	Партнер.Записать();
	//Если НЕ ЗначениеЗаполнено(НайденныйПартнер) Тогда
		Партнер.Клиент = Истина;
		Если ССайта Тогда
			Если СокрЛП(НовСтрока["registrationDate"]<>"0000-00-00 00:00:00") Тогда
				Партнер.ДатаРегистрации = XMLЗначение(Тип("Дата"), НовСтрока["registrationDate"]);
			КонецЕсли;
			Если СокрЛП(НовСтрока["kpp"]) = "" Тогда
				Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
			Иначе
				Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
			КонецЕсли;
		Иначе
			Партнер.ДатаРегистрации = НовСтрока.ДатаРегистрации;
			Если СокрЛП(НовСтрока.КПП) = "" Тогда
				Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
			Иначе
				Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
			КонецЕсли;
		КонецЕсли;
		Партнер.Записать();
	//КонецЕсли;
	Контрагент.Партнер = Партнер.Ссылка;
	Если ССайта Тогда
		Контрагент.Наименование = НовСтрока["organizationName"];
		Контрагент.НаименованиеПолное = Контрагент.Наименование;
		Контрагент.ИНН = НовСтрока["inn"];
		Контрагент.КПП = НовСтрока["kpp"];
		Если НЕ УТ111 Тогда
			Контрагент.РегистрационныйНомер = НовСтрока["ogrn"];
		КонецЕсли;
	Иначе
		Контрагент.Наименование = НовСтрока.НаименованиеОрганизации;
		Контрагент.НаименованиеПолное = НовСтрока.НаименованиеОрганизации;
		Контрагент.ИНН = НовСтрока.ИНН;
		Контрагент.КПП = НовСтрока.КПП;
		Если НЕ УТ111 Тогда
			Контрагент.РегистрационныйНомер = НовСтрока.ОГРН;
		КонецЕсли;
	КонецЕсли;
	Контрагент.ДополнительнаяИнформация = "Тип регистрации: "+marketType+", правовая форма организации: "+organizationForm+", тип организации: "+business;
	Если Лев(АдресСервиса,7) = "id19225" Тогда
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Иначе
		Если СокрЛП(Контрагент.ИНН) = "" И СокрЛП(Контрагент.КПП) = "" Тогда
			Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		Иначе
			Если organizationForm = "" Тогда
				Если СокрЛП(Контрагент.КПП) = "" И marketType = 1 Тогда //marketType: 1 - Розница, 2 - Опт
					Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
					Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				Иначе
					Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
					Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонецЕсли;
			Иначе
				Если organizationForm = "ИП" ИЛИ organizationForm = "ЧП" ИЛИ organizationForm = "ПБОЮЛ" ИЛИ organizationForm = "ГКФХ" Тогда
					Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
					Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				Иначе
					Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
					Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Контрагент.ДополнительнаяИнформация //Дополнительная информация о контактном лице. Доступна для изменения партнером при самообслуживании.
	Если БитАвтосервис Тогда
		ТелефонКонтрагента = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		Представление = МобильныйТелефон;//"+7 ("+Сред(МобильныйТелефон,2,3)+") "+Сред(МобильныйТелефон,5,3)+"-"+Сред(МобильныйТелефон,8,2)+"-"+Сред(МобильныйТелефон,10,2);
		Попытка
			ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ТелефонКонтрагента);
			ОбъектXDTOКИ.Комментарий = МобильныйТелефон;
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
		Исключение
			ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(,Представление, ТелефонКонтрагента.Тип);
		КонецПопытки;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, ТелефонКонтрагента, ТелефонКонтрагента.Тип);
	КонецЕсли;
	Контрагент.Записать();
	
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	Если ИспользоватьДоговорыСКлиентами И СоздаватьДоговоры Тогда
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.ИнициализироватьСправочник();
		ЗаполнитьРеквизитыНовогоДоговора(НовыйДоговор, Контрагент);
		
		НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
		Если СокрЛП(НовСтрока["registrationDate"]<>"0000-00-00 00:00:00") Тогда
			НовыйДоговор.Дата = XMLЗначение(Тип("Дата"), НовСтрока["registrationDate"]);
		Иначе
			НовыйДоговор.Дата = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		НовыйДоговор.ДатаНачалаДействия = НовыйДоговор.Дата;
		НовыйДоговор.Номер = ИдентификаторКонтрагента;
		НовыйДоговор.Наименование = "Поставки";
		Если id22842<>Неопределено И id22842 Тогда
			НовыйДоговор.Наименование = "Договор Оферты 3-17";
		КонецЕсли;
		НовыйДоговор.НаименованиеДляПечати = НовыйДоговор.Наименование;
		
		Если id22842<>Неопределено И id22842 Тогда
			НовыйДоговор.НалогообложениеНДСОпределяетсяВДокументе = Ложь;
		КонецЕсли;
		Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
			НовыйДоговор.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
			НовыйДоговор.ЗакупкаПодДеятельностьОпределяетсяВДокументе = Истина;
		КонецЕсли;
		НовыйДоговор.Комментарий = "(ДобавитьКонтрагентаСервер) авт. создан при обмене с ABCP "+ТекущаяДата()+", покупатель "+СокрЛП(Контрагент);
		НовыйДоговор.Записать();
		ТекстСообщения = "создан договор по ид контрагента :	"+ИдентификаторКонтрагента+", покупатель: "+СокрЛП(Контрагент);
		ЗаписьВЛог(ТекстСообщения,3);
	КонецЕсли;
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	Если ИспользоватьСоглашенияСКлиентами  И ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения Тогда
		НовоеСоглашение = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();//СоглашенияСПоставщиками
		//ИнициализироватьСправочник не экспортный метод, дублируем
		НовоеСоглашение.Менеджер = Пользователи.ТекущийПользователь();
		НовоеСоглашение.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
		НовоеСоглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;//ЗакупкаУПоставщика;
		НовоеСоглашение.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
		Если ВерсияУТ <> "3.2.3.18" И НЕ УТ111 Тогда
			НовоеСоглашение.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КонецЕсли;
		НовоеСоглашение.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		НовоеСоглашение.Склад = Склад;//ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
		Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		Иначе
		НовоеСоглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
		НовоеСоглашение.ПорядокРасчетов = ПорядокРасчетов;//брать из настроек модуля Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию();
		Если УТ114 Тогда
			НовоеСоглашение.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(НовоеСоглашение.ПорядокОплаты, НовоеСоглашение.ХозяйственнаяОперация);
		КонецЕсли;
		Если УТ113 Тогда
			НовоеСоглашение.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(НовоеСоглашение.ПорядокОплаты);
		КонецЕсли;
		Если Не ИспользоватьДоговорыСКлиентами Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
				ИЛИ НовоеСоглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				НовоеСоглашение.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
			Иначе
				НовоеСоглашение.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
			КонецЕсли;
		Иначе
			НовоеСоглашение.ИспользуютсяДоговорыКонтрагентов = Истина;
		КонецЕсли;
		НовоеСоглашение.Наименование = "Поставки";
		//НовоеСоглашение.Номер = "";
		НовоеСоглашение.Дата = ТекущаяДата();
		НовоеСоглашение.ДатаНачалаДействия = НовоеСоглашение.Дата;
		НовоеСоглашение.Контрагент = Контрагент.Ссылка;
		НовоеСоглашение.Партнер = Контрагент.Партнер;
		НовоеСоглашение.Комментарий = "(ДобавитьКонтрагентаСервер) авт. создан при обмене с ABCP "+ТекущаяДата();
		НовоеСоглашение.Записать();
	КонецЕсли;	
	
	Если ССайта Тогда
		organizationAccount = СокрЛП(НовСтрока["organizationAccount"]);//Расчетный счет организации
	Иначе
		organizationAccount = НовСтрока.organizationAccount;
	КонецЕсли;
	Если organizationAccount<>"" Тогда
		Если ССайта Тогда
			bankName = НовСтрока.bankName;//Наименование банка
			bik = СокрЛП(НовСтрока.bik);//БИК банка
			correspondentAccount = НовСтрока.correspondentAccount;//Корреспондентский счет банка
		Иначе
			bankName = НовСтрока.bankName;//Наименование банка
			bik = СокрЛП(НовСтрока.bik);//БИК банка
			correspondentAccount = НовСтрока.correspondentAccount;//Корреспондентский счет банка
		КонецЕсли;
		БанковскийСчетКонтрагента = НайтиДобавитьБанковскийСчет(Контрагент.Ссылка, bik, bankName, correspondentAccount, organizationAccount);
	КонецЕсли;
	//некорректно заполняет телефон, необходимо пользоваться функцией, и сразу заполнять и почту и телефон

	//УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация
	//УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта
	//http://forum.aeroion.ru/topic779.html
	//http://forum.infostart.ru/forum33/topic107160/
	Если ЮридическийАдрес <> "" Тогда
		Представление = ЮридическийАдрес;
		Если УТ111 Тогда
			СтрокаКонтактнойИнформации = Контрагент.КонтактнаяИнформация.Добавить();
			СтрокаКонтактнойинформации.Тип = перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			СтрокаКонтактнойИнформации.ЗначенияПолей = НачалоКИ+Представление+"""><Комментарий>"+Представление+"</Комментарий><Состав xsi:type=""Адрес"" Страна=""РОССИЯ""><Состав xsi:type=""АдресРФ""><СубъектРФ></СубъектРФ><СвРайМО><Район/></СвРайМО><Город/><НаселПункт/><Улица></Улица></Состав></Состав>"+КонецКИ;
			СтрокаКонтактнойИнформации.Представление = Представление;
			
			СтрокаКонтактнойИнформации = Партнер.КонтактнаяИнформация.Добавить();
			СтрокаКонтактнойинформации.Тип = перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			СтрокаКонтактнойИнформации.ЗначенияПолей = НачалоКИ+ЮридическийАдрес+"""><Комментарий>"+ЮридическийАдрес+"</Комментарий><Состав xsi:type=""Адрес"" Страна=""РОССИЯ""><Состав xsi:type=""АдресРФ""><СубъектРФ></СубъектРФ><СвРайМО><Район/></СвРайМО><Город/><НаселПункт/><Улица></Улица></Состав></Состав>"+КонецКИ;
			СтрокаКонтактнойИнформации.Представление = ЮридическийАдрес;
		Иначе
			Попытка //в новых версиях в JSON хранится
				ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ФактАдресКонтрагента);
				ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			Исключение
				ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(,Представление, ФактАдресКонтрагента.Тип);
			КонецПопытки;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, ФактАдресКонтрагента, ФактАдресКонтрагента.Тип);
			
			Попытка
				ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(ЮридическийАдрес, ЮрАдресКонтрагента);
				ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			Исключение
				ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(,Представление, ЮрАдресКонтрагента.Тип);
			КонецПопытки;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Партнер, ЗначенияПолей, ЮрАдресКонтрагента, ЮрАдресКонтрагента.Тип);
		КонецЕсли;
	КонецЕсли;
	
	Если НовСтрока.email<>"" Тогда
		Представление = НовСтрока.email;
		Если УТ111 Тогда
			СтрокаКонтактнойИнформации = Контрагент.КонтактнаяИнформация.Добавить();
			СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;//.EmailПартнера;
			СтрокаКонтактнойИнформации.ЗначенияПолей = НачалоКИ+Представление+"""><Комментарий/><Состав xsi:type=""ЭлектроннаяПочта"" Значение="""+НовСтрока["email"]+"""/>"+КонецКИ;
			СтрокаКонтактнойИнформации.АдресЭП = Представление;
			СтрокаКонтактнойИнформации.Представление = Представление;
		Иначе
			EmailКонтрагента = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			Попытка
				ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, EmailКонтрагента);
				ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			Исключение
				ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(,Представление, EmailКонтрагента.Тип);
			КонецПопытки;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, EmailКонтрагента, EmailКонтрагента.Тип);
			
			EmailПартнера = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			Попытка
				ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, EmailПартнера);
				ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			Исключение
				ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(,Представление, EmailПартнера.Тип);
			КонецПопытки;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Партнер, ЗначенияПолей, EmailПартнера, EmailПартнера.Тип);
		КонецЕсли;
	КонецЕсли;
	//УправлениеКонтактнойИнформацией.ЗаполнитьКонтактнуюИнформациюОбъекта() - устарела вместо неё эта
	//УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта();
	
	Если УТ111 Тогда
		КодСтраны = Лев(МобильныйТелефон,1);
		КодГорода = Сред(МобильныйТелефон,2,3);
		НомерБезКодов = Сред(МобильныйТелефон,5);
		ПредставлениеТелефона = "+" + КодСтраны + " (" + КодГорода + ") " + Прав(МобильныйТелефон,7);
		СтрокаКонтактнойИнформации = Контрагент.КонтактнаяИнформация.Добавить();
		СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		//СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Комментарий>"+МобильныйТелефон+"</Комментарий><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+""" Добавочный=""""/>"+КонецКИ;
		СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+"""/>"+КонецКИ;
		СтрокаКонтактнойинформации.НомерТелефона = МобильныйТелефон;
		СтрокаКонтактнойИнформации.НомерТелефонаБезКодов = Прав(МобильныйТелефон,7);
		СтрокаКонтактнойИнформации.Представление = МобильныйТелефон;
	Иначе
		Если НЕ БитАвтосервис Тогда
			Представление = МобильныйТелефон;//"+7 ("+Сред(МобильныйТелефон,2,3)+") "+Сред(МобильныйТелефон,5,3)+"-"+Сред(МобильныйТелефон,8,2)+"-"+Сред(МобильныйТелефон,10,2);
			ТелефонКонтрагента = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			Попытка
				ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ТелефонКонтрагента);
				ОбъектXDTOКИ.Комментарий = МобильныйТелефон;
				ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			Исключение
				ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(,Представление, ТелефонКонтрагента.Тип);
			КонецПопытки;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, ТелефонКонтрагента, ТелефонКонтрагента.Тип);
			
			ТелефонПартнера = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			Попытка
				ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ТелефонПартнера);
				ОбъектXDTOКИ.Комментарий = МобильныйТелефон;
				ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
			Исключение
				ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(,Представление, ТелефонПартнера.Тип);
			КонецПопытки;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Партнер, ЗначенияПолей, ТелефонПартнера, ТелефонПартнера.Тип);
		КонецЕсли;
	КонецЕсли;	

	Контрагент.ДополнительнаяИнформация = "создано автоматически "+СокрЛП(ТекущаяДата())+" "+comment;
	Контрагент.Записать();
	
	Если ССайта Тогда
		Партнер.БизнесРегион = НайтиДобавитьБизнесРегион(НовСтрока["city"]);//если не сайта, то не добавляет
	КонецЕсли;
	
	Партнер.ОсновнойМенеджер = НайтиМенеджераПоИдентификатору(ИдентификаторМенеджера);
	Партнер.Записать();

	//добавляем свойство
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("userId (Контрагенты)", Истина);
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Контрагент.Ссылка;
	МенеджерЗаписи.Свойство = Свойство;
	МенеджерЗаписи.Значение = ИдентификаторКонтрагента;
	МенеджерЗаписи.Записать();
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("employeeId (Контрагенты)", Истина);
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Контрагент.Ссылка;
	МенеджерЗаписи.Свойство = Свойство;
	МенеджерЗаписи.Значение = ИдентификаторМенеджера;
	МенеджерЗаписи.Записать();
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор склада контрагента (Контрагенты)", Истина);
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Контрагент.Ссылка;
	МенеджерЗаписи.Свойство = Свойство;
	МенеджерЗаписи.Значение = ИдОфиса;
	МенеджерЗаписи.Записать();
	
	//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("userlogin (Контрагенты)", Истина);
	//МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Объект = Контрагент.Ссылка;
	//МенеджерЗаписи.Свойство = Свойство;
	//МенеджерЗаписи.Значение = НовСтрока.userlogin; 
	//МенеджерЗаписи.Записать();
	
	Если ИспользоватьТранзакции Тогда ЗафиксироватьТранзакцию(); КонецЕсли;
	ТекстСообщения = "добавлен контрагент: "+СокрЛП(Контрагент.Наименование)+", телефон "+МобильныйТелефон+", идентификатор "+СокрЛП(ИдентификаторКонтрагента);
	ЗаписьВЛог(ТекстСообщения);
	Возврат Контрагент.Ссылка;
КонецФункции //ДобавитьКонтрагентаСервер

Функция НайтиДобавитьБизнесРегион(БизнесРегион);
	Если БизнесРегион = "" Тогда
		Возврат Справочники.БизнесРегионы.ПустаяСсылка();
	КонецЕсли;
	Спр = Справочники.БизнесРегионы.НайтиПоНаименованию(СокрЛП(БизнесРегион));
	Если Спр = Справочники.БизнесРегионы.ПустаяСсылка() Тогда
		Спр = Справочники.БизнесРегионы.СоздатьЭлемент();
		Спр.Наименование = БизнесРегион;
		Спр.Записать();
		Возврат Спр.Ссылка;
	Иначе
		Возврат Спр.Ссылка;
	КонецЕсли;
КонецФункции //НайтиДобавитьБизнесРегион

//для корректного заполнения галочек в договорах заполняем 
Процедура ЗаполнитьДанныеУчетнойПолитики() Экспорт
	ОрганизацияПлательщикЕНВД = Ложь;
	ОрганизацияУСН = Ложь;
	ОрганизацияРозницаПлательщикЕНВД = Ложь;
	ОрганизацияРозницаУСН = Ложь;
	Если УТ111 Тогда
		Возврат;
	КонецЕсли;
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда //РегистрСведений.НастройкиСистемыНалогообложения
		ОрганизацияПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Организация, ТекущаяДата());
		ОрганизацияУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, ТекущаяДата());
		ОрганизацияРозницаПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(ОрганизацияРозница, ТекущаяДата());
		ОрганизацияРозницаУСН = УчетнаяПолитика.ПрименяетсяУСН(ОрганизацияРозница, ТекущаяДата());
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетнаяПолитикаОрганизацийСрезПоследних.ПлательщикЕНВД КАК ПлательщикЕНВД,
	               |	УчетнаяПолитикаОрганизацийСрезПоследних.УчетнаяПолитика КАК УчетнаяПолитика,
	               |	УчетнаяПолитикаОрганизацийСрезПоследних.ПрименяетсяУСН КАК ПрименяетсяУСН
	               |ИЗ
	               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НаДату, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ОрганизацияПлательщикЕНВД = Выборка.ПлательщикЕНВД;
			ОрганизацияУСН = Выборка.ПрименяетсяУСН;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияРозница) Тогда
		Запрос.УстановитьПараметр("Организация", ОрганизацияРозница);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ОрганизацияРозницаПлательщикЕНВД = Выборка.ПлательщикЕНВД;
			ОрганизацияРозницаУСН = Выборка.ПрименяетсяУСН;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура НайтиДобавитьСвойства()
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ТипИдентификатораЧисло = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(32));
	ТипИдентификатораСтрока50 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(50));
	ТипИдентификатораСтрока100 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(100));
	
	Массив = Новый Массив;
	КЧ = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧД = Новый ОписаниеТипов(Массив, , , КЧ);
	
	МассивДата = Новый Массив;
	МассивДата.Добавить(Тип("Дата"));
	ТипИдентификатораДата = Новый ОписаниеТипов(МассивДата, , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	distributorId = НайтиДобавитьСвойствоКонтрагента("distributorId");
	userId = НайтиДобавитьСвойствоКонтрагента("userId");
	employeeId = НайтиДобавитьСвойствоКонтрагента("employeeId");
	//СкладКонтрагента = НайтиДобавитьСвойствоКонтрагента("Склад контрагента");
	ИдСкладаКонтрагента = НайтиДобавитьСвойствоКонтрагента("Идентификатор склада контрагента");
	dateUpdated = НайтиДобавитьСвойствоЗаказа("dateUpdated");
	orderId = НайтиДобавитьСвойствоЗаказа("orderId");
	deliveryOfficeId = НайтиДобавитьСвойствоЗаказа("deliveryOfficeId", ТипИдентификатораЧисло);//Идентификатор офиса самовывоза
	deliveryOffice = НайтиДобавитьСвойствоЗаказа("deliveryOffice", ТипИдентификатораСтрока50);//Офис самовывоза
	ДатаОбновленияСтатусаABCP = НайтиДобавитьСвойствоРеализации("ДатаОбновленияСтатусаABCP");
	
	ДатаОбновленияСальдо = НайтиДобавитьСвойствоКонтрагента("Дата обновления сальдо", Новый ОписаниеТипов(МассивДата, , ,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ВыгруженноеСальдо = НайтиДобавитьСвойствоКонтрагента("Выгруженное сальдо", ОписаниеТиповЧД);
	creditLimit = НайтиДобавитьСвойствоКонтрагента("creditLimit");//Значение лимита кредита в валюте сайта
	payDelay = НайтиДобавитьСвойствоКонтрагента("payDelay");//Отсрочка платежа(в днях)
	overdueSaldo = НайтиДобавитьСвойствоКонтрагента("overdueSaldo");//Просроченный баланс
	ИдентификаторКонтрагентаВДокументеОплаты = НайтиДобавитьСвойствоДокумента("Идентификатор контрагента в документе оплаты", ТипИдентификатораЧисло);
	НомерЗаказаВДокументеОплаты = НайтиДобавитьСвойствоДокумента("Номер заказа в документе оплаты", ТипИдентификатораЧисло);
	
	userAPI = НайтиДобавитьСвойствоЗаказа("userAPI", ТипИдентификатораСтрока);
	//ещё надо добавить свойство номенклатуры "Артикул для поиска"
КонецПроцедуры

Функция ВернутьТаблицуЗаявокССайта(ТолькоСвежие = Ложь, Интерактивно = Ложь) Экспорт
	ВерсияОбработки = ПолучитьВерсиюОбработки();
	НайтиДобавитьСвойства();
	Лев6 = Лев(АдресСервиса, 6);
	Лев7 = Лев(АдресСервиса, 7);
	Если Лев6 = "id9652" Тогда id9652 = Истина; Иначе id9652 = Ложь; КонецЕсли;
	Если Лев7 = "id22842" Тогда id22842 = Истина; Иначе id22842 = Ложь; КонецЕсли;
	Если Лев7 = "id18879" Тогда id18879 = Истина; Иначе id18879 = Ложь; КонецЕсли;
	Если Лев7 = "id26207"  Тогда id26207 = Истина; Иначе id26207 = Ложь; КонецЕсли;
	Если Лев7 = "id14544"  Тогда id14544 = Истина; Иначе id14544 = Ложь; КонецЕсли;
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	
	СоответствиеСоглашениеСКлиентомПоСкладу = Новый Соответствие;
	СоответствиеСоглашениеПоСкладу = Новый Соответствие;
	СоответствиеВалютаЗакупки = Новый Соответствие;
	СоответствиеВалютаПродажи = Новый Соответствие;
	Для Каждого СтрокаСклада Из ТаблицаСкладов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСклада.ИдентификаторПоставщика) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаСклада.Выгружать И ЗначениеЗаполнено(СтрокаСклада.Склад) Тогда
			Если ЗначениеЗаполнено(СтрокаСклада.СоглашениеСКлиентом) Тогда //могут быть типовые, которые зависят от поставщика
				СоответствиеСоглашениеСКлиентомПоСкладу.Вставить(СтрокаСклада.ИдентификаторПоставщика, СтрокаСклада.СоглашениеСКлиентом);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСклада.Соглашение) Тогда
				СоответствиеСоглашениеПоСкладу.Вставить(СтрокаСклада.ИдентификаторПоставщика, СтрокаСклада.Соглашение);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаСклада.ВалютаЗакупки) Тогда
			СоответствиеВалютаЗакупки.Вставить(СтрокаСклада.ИдентификаторПоставщика, СтрокаСклада.ВалютаЗакупки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаСклада.ВалютаПродажи) Тогда
			СоответствиеВалютаПродажи.Вставить(СтрокаСклада.ИдентификаторПоставщика, СтрокаСклада.ВалютаПродажи);
		КонецЕсли;
	КонецЦикла;
	
	//делаем по другому алгоритму
	Если НЕ УТ112 Тогда
		ТоварнаяКатегория = Справочники.ТоварныеКатегории.НайтиПоНаименованию("запчасти для иномарок");
	КонецЕсли;
	ОсновнойМенедежер = ПараметрыСеанса.ТекущийПользователь;
	ЗаполнитьДанныеУчетнойПолитики();
	
	Если НеПроводитьДокументы Тогда
		РежимЗаписиДок = РежимЗаписиДокумента.Запись;
	Иначе
		РежимЗаписиДок = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		РазмерСтавкиНДС = 0;
		РазмерСтавкиНДС100 = 100;
	Иначе
		Если НЕ УТКазахстан Тогда
			РазмерСтавкиНДС = 20;
			РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
		Иначе
			РазмерСтавкиНДС = 12;
			РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
		КонецЕсли;
	КонецЕсли;
	Если ИспользоватьСерииНоменклатуры Тогда
		Если НЕ Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
			ИспользоватьСерииНоменклатуры = Ложь;
		КонецЕсли;
		Если НЕ ВидНоменклатуры.ИспользоватьСерии Тогда
			ИспользоватьСерииНоменклатуры = Ложь;
		КонецЕсли;
	Конецесли;
	Если ИспользоватьСерииНоменклатуры Тогда
		Если НЕ ВидНоменклатуры.ИспользоватьСерии Тогда
			КонстантаИспользоватьСерииНоменклатуры = Ложь;
		КонецЕсли;
	КонецЕсли;
	КонстантаИспользоватьСерииНоменклатуры = Константы.ИспользоватьСерииНоменклатуры.Получить();
	Если КонстантаИспользоватьСерииНоменклатуры Тогда
		Если НЕ ВидНоменклатуры.ИспользоватьСерии Тогда
			КонстантаИспользоватьСерииНоменклатуры = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МассивСозданныхРеализаций = Новый Массив;//чтобы заново не проходить по уже обработанным реализациям
	ТаблицаДокументовОплат = Неопределено;//по каждому доступу отдельно очищать надо	
	ТаблицаЗаявок.Очистить();
	ТаблицаНоменклатуры.Очистить();
	Если НЕ Франчайзи Тогда
		ВернутьТаблицуЗаявокССайтаПоДоступу(ТолькоСвежие, Интерактивно);
		ТаблицаЗаявок.Сортировать("ДатаЗаявки Убыв");
		НСтроки = ТаблицаЗаявок.НайтиСтроки(Новый Структура("ОбработанаПоДругомуДоступу", Ложь));
		Для каждого НСтрока Из НСтроки Цикл
			НСтрока.ОбработанаПоДругомуДоступу = Истина;
		КонецЦикла; 
		Возврат ТаблицаЗаявок;
	КонецЕсли;
	ВремТаблицаСкладов = Новый ТаблицаЗначений;
	ВремТаблицаСтатусов = Новый ТаблицаЗначений;
	ВремОптовыеКлиенты = Новый ТаблицаЗначений;
	ВремТаблицаСкладов = ТаблицаСкладов.Выгрузить();
	ВремТаблицаСтатусов = ТаблицаСтатусов.Выгрузить();
	//ВремОптовыеКлиенты = ОптовыеКлиенты.Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаДоступов Цикл
		Если НЕ ТекСтрока.Использовать Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаДокументовОплат = Неопределено;//по каждому доступу отдельно очищать надо	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ТекСтрока);
		ЗаписьВЛог("Загрузка заявок по франчайзи "+АдресСервиса+" / "+Пользователь, 3);
		ЗаписьВЛог("Организация: "+Организация+", склад: "+Склад+", склад в поступлении: "+СкладВПоступлении+", подразделение: "+Подразделение, 3);
		ВернутьТаблицуЗаявокССайтаПоДоступу(ТолькоСвежие, Интерактивно);
		НСтроки = ТаблицаЗаявок.НайтиСтроки(Новый Структура("ОбработанаПоДругомуДоступу", Ложь));
		Для каждого НСтрока Из НСтроки Цикл
			НСтрока.ОбработанаПоДругомуДоступу = Истина;
		КонецЦикла; 
	КонецЦикла;
	ТаблицаЗаявок.Сортировать("ДатаЗаявки Убыв");
	Возврат ТаблицаЗаявок;
КонецФункции //ВернутьТаблицуЗаявокССайта

Процедура ВернутьТаблицуЗаявокССайтаПоДоступу(ТолькоСвежие = Ложь, Интерактивно = Ложь) Экспорт
	//Адрес = "C:\Users\n.tarasov\Desktop\ABCP_УТ11_20230308 _ с испр реал_230309.epf";
	//Обр = ВнешниеОбработки.Создать(Адрес, БезопасныйРежим());
	//Обр.ВернутьТаблицуЗаявокССайтаПоДоступу(ТолькоСвежие, Интерактивно);
	//Возврат;
	
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДС") <> Неопределено Тогда
		ЕстьРеквизитДоговораНалогообложениеНДС = Истина;
	Иначе
		ЕстьРеквизитДоговораНалогообложениеНДС = Ложь;
	КонецЕсли;
	СозданыЗаказыКлиентов = Ложь;
	СозданыЗаказыПоставщикам = Ложь;
	СписокИзмененныхЗаявок = Новый СписокЗначений;
	СозданыПоступления = Ложь;
	СозданыРеализации = Ложь;
	
	Если НЕ Заказы20 Тогда
		ЗаполнитьТаблицуЗаявокССайта(,, ФильтрПоЗаявке, , , , , ,ТолькоСвежие);
	Иначе
		ЗаполнитьТаблицуЗаявокССайта20(,, ФильтрПоЗаявке, , , , , ,ТолькоСвежие);
	КонецЕсли;

	СоздатьЗаказыКлиентов();
	СоздатьЗаказыПоставщикам();
	СоздатьПоступленияТоваровУслуг();
	ПерепровестиЗаказыДляПерепроведения();//когда у заказа вариант обеспечения "Отгружен", но поступление делается позже, тогда движения документа становятся некорректны
	СоздатьОрдераНаПоступление();
	СоздатьРеализацииТоваровУслуг();
	СоздатьЧекиККМВместоРеализации();
	СоздатьВозвратыОтКлиентов();
	СоздатьПеремещенияТоваров();
	СоздатьВозвратыПоставщику();
	ИзменитьНаСтатусКВыдаче();
	Если УдалятьОшибочныеВозвраты Тогда
		ПометитьНаУдалениеОшибочныеВозвраты();
	КонецЕсли;
КонецПроцедуры //ВернутьТаблицуЗаявокССайтаПоДоступу

Процедура ПерепровестиЗаказыДляПерепроведения()
	Если МассивЗаказовДляПерепроведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ДокСсылка Из МассивЗаказовДляПерепроведения Цикл
		Если НЕ ЗначениеЗаполнено(ДокСсылка) Тогда
			Продолжить;
		КонецЕсли;
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		ЗаписьВЛог("Перепроведение "+ДокСсылка);
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение); 
			ЗаписьВЛог("Ошибка при перепроведении: "+ДокСсылка+", "+ОписаниеОшибки());
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры //ПерепровестиЗаказыДляПерепроведения

//Процедура меняет статусы заявок, у которых все позиции стоят в статусах "На складе", "С наличия", "Возврат", "Отказ"
//т.е. все позиции заказа или на складе или отменены
//им меняется статус "Готов к выдаче", а в административной панели настроена отправка СМС с этим статусом, чтобы не рассылать СМС по каждой позиции
Процедура ИзменитьНаСтатусКВыдаче()
	Если НЕ СтатусГотовКВыдачеПриНеобходимости Тогда
		Возврат;
	КонецЕсли;
	Если КодСтатусаГотовКВыдаче < 10000 Тогда
		Возврат;
	КонецЕсли;
	Если АдресСервиса = "catalog.detali812.ru.public.api.abcp.ru" Тогда
		ЭтоДетали812 = Истина;
	Иначе
		ЭтоДетали812 = Ложь;
	КонецЕсли;
	Структура = Новый Структура("НомерЗаявки");
	
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли; 
		Структура.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Структура);
		КоличествоДляИзменения = НайденныеСтроки.Количество();
		КоличествоНаСкладе = 0;
		ПереченьПозиций = "";
		НС = 0;
		Для Каждого СтрокаНоменклатуры Из НайденныеСтроки Цикл
			Если СтрокаНоменклатуры.ИдентификаторНоменклатуры = 0 Тогда
				Продолжить;
			КонецЕсли;
			КодСтатуса = СтрокаНоменклатуры.КодСтатуса;
			Если КодСтатуса = КодСтатусаНаСкладе Или КодСтатуса = КодСтатусаСНаличия Или КодСтатуса = КодСтатусаОтказ Или КодСтатуса = КодСтатусаВозврат Тогда
				КоличествоНаСкладе = КоличествоНаСкладе + 1;
				Если КодСтатуса = КодСтатусаНаСкладе Тогда
					НС = НС + 1;
					ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(СтрокаНоменклатуры.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+Формат(КодСтатусаГотовКВыдаче,"ЧГ=0");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоДляИзменения = КоличествоНаСкладе И ПереченьПозиций <> "" Тогда
			ЗаписьВЛог("Изменить на статус к выдаче");
			ОбновитьСтатусЗаявки(СтрокаЗаявки.НомерЗаявки, ПереченьПозиций, КодСтатусаГотовКВыдаче,,Истина);
			Если ЭтоДетали812 И ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
				ЗаписьВЛог("Отправляем сообщение клиенту по заявке № "+СтрокаЗаявки.НомерЗаявки);
				Попытка
					Об = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
					Об.ОповеститьКлиентаОГотовностиТовараКОтгрузке();
				Исключение
					ТекстСообщения = ОписаниеОшибки();
					ЗаписьВЛог(ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Если случайно поставили возврат, создался документ, а потом вернули статус выдано, чтобы возвраты помечались на удаление
Процедура ПометитьНаУдалениеОшибочныеВозвраты()
	//смотрим по загруженным измененным заказам и реализациям на их основе, какие были созданы возвраты
	//есть ли у этих позиций галочки "Создавать возврат клиенту". Если нет
	МассивСтатусов = Новый Массив;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если НеЗагружатьОтказы и СтрокаСтатуса.КодСтатуса = КодСтатусаОтказ Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаСтатуса.СоздаватьВозвратОтКлиента Тогда
			МассивСтатусов.Добавить(СтрокаСтатуса.КодСтатуса);
		КонецЕсли;
	КонецЦикла;
	//только в этих статусах могут быть возвраты
	
	Массив = ТаблицаНоменклатуры.ВыгрузитьКолонку("РеализацияТоваровУслуг");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВозвратТоваровОтКлиента.Ссылка КАК ВозвратТоваровОтКлиента,
	               |	ВозвратТоваровОтКлиента.ДокументРеализации КАК ДокументРеализации
	               |ИЗ
	               |	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	               |ГДЕ
	               |	ВозвратТоваровОтКлиента.ДокументРеализации В(&ДокументРеализации)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВозвратТоваровОтКлиента.ДокументРеализации,
	               |	ВозвратТоваровОтКлиента.Ссылка";
	Запрос.УстановитьПараметр("ДокументРеализации", Массив);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		Структура = Новый Структура("РеализацияТоваровУслуг");
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументРеализации = Выборка.ДокументРеализации;
			ВозвратТоваровОтКлиента = Выборка.ВозвратТоваровОтКлиента;
			Структура.РеализацияТоваровУслуг = ДокументРеализации;
		    СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Структура);
			Об = Неопределено;
			МассивСтрокДляУдаления = Новый Массив;
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				Если МассивСтатусов.Найти(СтрокаНоменклатуры.КодСтатуса) = Неопределено Тогда
					//эту позицию удаляем
					Если Об = Неопределено Тогда
						Об = ВозвратТоваровОтКлиента.ПолучитьОбъект();
					КонецЕсли;
					СтрокиДокументов = Об.Товары.НайтиСтроки(Новый Структура("Номенклатура,Количество",СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.Количество)); //ЦенаПродажи
					Для Каждого СтрокаДокументов Из СтрокиДокументов Цикл
						МассивСтрокДляУдаления.Добавить(СтрокаДокументов);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если Об<>Неопределено И МассивСтрокДляУдаления.Количество()<>0 Тогда
				ДокументПроведен = Об.Проведен;
				Если Отладка Тогда
					сообщить(Об);
				КонецЕсли;
				Если Об.Товары.Количество() = МассивСтрокДляУдаления.Количество() Тогда
					Попытка
						Об.УстановитьПометкуУдаления(Истина);
					Исключение
					КонецПопытки;
				Иначе
					Для Каждого Элемент Из МассивСтрокДляУдаления Цикл
						Об.Товары.Удалить(Элемент);
					КонецЦикла;
					Попытка
						Об.Записать();
					Исключение
					КонецПопытки;
					Если ДокументПроведен Тогда
						Попытка
							Об.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ВернутьЗаявкуССайта(НомерЗаявки) Экспорт
	ВерсияОбработки = ПолучитьВерсиюОбработки();
	//ЗаписьВЛог("Интерактивная обработка заявок "+ВерсияОбработки,7);
	//делаем по другому алгоритму
	НайтиДобавитьСвойства();
	//ТЗЗаявки.Очистить();
	//ТЗНоменклатура.Очистить();
	ЗаполнитьТаблицуЗаявокССайта(,, НомерЗаявки, , );
	Возврат ТаблицаЗаявок;
КонецФункции //ВернутьЗаявкуССайта

Процедура ОболочкаОбработчика()
	ОбработатьОжидание();
КонецПроцедуры

Процедура ОбработатьОжидание()
	//если очень много данных, желательно сделать какую-то форму прогресса, чтобы человек видел, что всё работает
	//ЗаписьВЛог("ОбработатьОжидание");
КонецПроцедуры

Процедура ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДС, НовСтрока, Договор = Неопределено, СтавкаНДСОрганизации = Неопределено) Экспорт
	Если Договор = Неопределено Тогда
		времНалогообложениеНДС = НалогообложениеНДС;
		времСтавкаНДС = ОсновнаяСтавкаНДС;
	Иначе
		Если УТ113 И Подверсия2 = 3 И Подверсия3 = 4 Тогда//11.3.4.21
		Иначе	
		//Если Договор.НалогообложениеНДСОпределяетсяВДокументе Тогда
		//	времНалогообложениеНДС = Договор.НалогообложениеНДС;
		//	времСтавкаНДС = Договор.СтавкаНДС;
		//Иначе
		Если ЕстьРеквизитДоговораНалогообложениеНДС = Неопределено Тогда
			Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДС") <> Неопределено Тогда
				ЕстьРеквизитДоговораНалогообложениеНДС = Истина;
			Иначе
				ЕстьРеквизитДоговораНалогообложениеНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если НЕ УТ111 И НЕ УТКазахстан Тогда
				Если ЕстьРеквизитДоговораНалогообложениеНДС И ЗначениеЗаполнено(Договор.НалогообложениеНДС) Тогда
					времНалогообложениеНДС = Договор.НалогообложениеНДС;
				Иначе
					времНалогообложениеНДС = НалогообложениеНДС;
				КонецЕсли;
				Если ЗначениеЗаполнено(Договор.СтавкаНДС) Тогда
					времСтавкаНДС = Договор.СтавкаНДС;
				Иначе
					времСтавкаНДС = ОсновнаяСтавкаНДС;
				КонецЕсли;
			Иначе
				времНалогообложениеНДС = НалогообложениеНДС;
				времСтавкаНДС = ОсновнаяСтавкаНДС;
			КонецЕсли;
		//Конецесли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ УТКазахстан Тогда
		Если СтавкаНДСОрганизации <> Неопределено Тогда
			Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				НовСтрока.СтавкаНДС = Справочники["СтавкиНДС"].НайтиПоРеквизиту("ПеречислениеСтавкаНДС", СтавкаНДСОрганизации);
			Иначе
				НовСтрока.СтавкаНДС = СтавкаНДСОрганизации;
			КонецЕсли;
			Если СтавкаНДСОрганизации <> Перечисления.СтавкиНДС.БезНДС Тогда
				НовСтрока.СуммаНДС = НовСтрока.Сумма/120*20;
			Иначе
				НовСтрока.СуммаНДС = 0;
			КонецЕсли;
		Иначе
			Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				Если времНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
					Попытка
						НовСтрока.СтавкаНДС = Справочники["СтавкиНДС"].НайтиПоРеквизиту("ПеречислениеСтавкаНДС", Перечисления.СтавкиНДС.НДС20);
					Исключение
						НовСтрока.СтавкаНДС = Справочники["СтавкиНДС"]["БезНДС"];
					КонецПопытки;
					НовСтрока.СуммаНДС = НовСтрока.Сумма/120*20;
				Иначе
					НовСтрока.СтавкаНДС = Справочники["СтавкиНДС"]["БезНДС"];
					НовСтрока.СуммаНДС = 0;
				КонецЕсли;
			Иначе
				Если времНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
					Попытка
						НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
					Исключение
						НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					КонецПопытки;
					НовСтрока.СуммаНДС = НовСтрока.Сумма/120*20;
				Иначе
					НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					НовСтрока.СуммаНДС = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если времНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			Если времСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				НовСтрока.СтавкаНДС = Справочники["СтавкиНДС"]["БезНДС"];
				НовСтрока.СуммаНДС = 0;
			Иначе
				НовСтрока.СтавкаНДС = Справочники["СтавкиНДС"]["НДС12"];
				НовСтрока.СуммаНДС = НовСтрока.Сумма/РазмерСтавкиНДС100*РазмерСтавкиНДС;
			КонецЕсли;			
		Иначе
			НовСтрока.СтавкаНДС = Справочники["СтавкиНДС"]["БезНДС"];
			НовСтрока.СуммаНДС = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//находит по дате обновления последнюю измененную заявку
Функция НайтиПоследнююИзмененнуюЗаявку(ДатаНачала)
	НачалоПросмотра = ДатаНачала;
	//СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	//ИмяСервера = НСтр(СтрокаСоединения, "Srvr");
	//Если ИмяСервера = "" Тогда
	//	//серверная база, запускается регулярно без участия человека, смотрим за сутки
	//	НачалоПросмотра = ТекущаяДата() - 3600*24;
	//Иначе
	//	//файловая база, вдруг в выходные не запускали, смотрим за 3 дня
	//	НачалоПросмотра = НачалоДня(ТекущаяДата() - 3600*24*3);
	//КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ЗаказКлиента) КАК Объект,
	               |	ДополнительныеСведения.Свойство КАК Свойство,
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Значение >= &НачалоПросмотра
	               |	И ДополнительныеСведения.Объект ССЫЛКА Документ.ЗаказКлиента
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Значение УБЫВ";
	Запрос.УстановитьПараметр("НачалоПросмотра", НачалоПросмотра);
	Запрос.УстановитьПараметр("Свойство", dateUpdated.Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ЗаписьВЛог("Не нашли свежие заявки с "+НачалоПросмотра,2,Ложь);
		Возврат НачалоПросмотра;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДатаВремяПоследнее = Выборка.Значение;
		Дополнение = "";
		Если СмещениеЧасовогоПояса <> 0 Тогда
			Дополнение = "( учитываем сдвиг по времени на "+СмещениеЧасовогоПояса+" часов)";
			//если франчайзи, тогда определяет не ту заявку как последнюю !!!
			ДатаВремяПоследнее = ДатаВремяПоследнее-СмещениеЧасовогоПояса*3600;
		КонецЕсли;
		ЗаписьВЛог("Запрос свежих заявок с момента последней измененной "+ДатаВремяПоследнее+" по заявке "+Выборка.Объект,2,Ложь);
		Возврат ДатаВремяПоследнее;
	КонецЕсли;
КонецФункции

Функция ПолучитьАдресДоставки(ИдКлиента)
	//если гость, то нельзя получить адрес доставки
	ТекстЗапроса = "/cp/users?userlogin="+Пользователь+"&userpsw="+Пароль+"&safeMode=1&customersIds[]="+Формат(ИдКлиента, "ЧГ=0");
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = HTTPОтвет.КодСостояния;
	СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат "";
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	Попытка
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		ЧтениеJSON.Закрыть();
		ТекстСообщения = "ошибка обработки клиентов с сайта в формате JSON, ответ сервера:"+СтрокаОтвет;
		ЗаписьВЛог(ТекстСообщения,6,Истина);
		Возврат "";
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	Если СписокЭлементов[0].Получить("deliveryAddress")<>Неопределено Тогда
		Адреса = СписокЭлементов[0].Получить("deliveryAddress");
		Для Каждого Адрес Из Адреса Цикл
			//Адреса доставки (массив, где ключи - id адресов)
			Возврат Адрес.Значение;
		КонецЦикла;
	КонецЕсли;
	//может быть, это сотрудник?
	Возврат "";
КонецФункции

Функция НайтиСоздатьГостевогоКлиента(Наименование, МобильныйТелефон, Адрес)
	//гостевой клиент должен совпадать и по наименованию и по телефону
	Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(Наименование, Истина);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		КонтрагентПоТелефону = НайтиКонтрагентаПоТелефону(МобильныйТелефон);
		Если ЗначениеЗаполнено(КонтрагентПоТелефону) Тогда
			Возврат КонтрагентПоТелефону;
		КонецЕсли;
		//Если Контрагент = КонтрагентПоТелефону Тогда
		//	Возврат Контрагент.Ссылка;
		//Иначе
			ПартнерПоТелефону = НайтиКонтрагентаПоТелефону(МобильныйТелефон, Истина);
			Если ЗначениеЗаполнено(ПартнерПоТелефону) И Контрагент.Партнер = ПартнерПоТелефону Тогда
				Возврат Контрагент.Ссылка;
			КонецЕсли;
		//КонецЕсли;//почему найденный контрагент не возвращается?
	Иначе
		КонтрагентПоТелефону = НайтиКонтрагентаПоТелефону(МобильныйТелефон);
		Если ЗначениеЗаполнено(КонтрагентПоТелефону) Тогда
			Возврат КонтрагентПоТелефону;
		КонецЕсли;
	КонецЕсли;
	НачалоКИ = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""";
	КонецКИ = "</КонтактнаяИнформация>";
	
	КодСтраны = Лев(МобильныйТелефон,1);
	КодГорода = Сред(МобильныйТелефон,2,3);
	НомерБезКодов = Сред(МобильныйТелефон,5);
	ПредставлениеТелефона = "+" + КодСтраны + " (" + КодГорода + ") " + НомерБезКодов;
	ПредставлениеТелефона = "+" + КодСтраны + " (" + КодГорода + ") " + Прав(МобильныйТелефон,7);
	
	//Если ЗначениеЗаполнено(Контрагент) Тогда
	//	Возврат Контрагент.Ссылка;
	//КонецЕсли;
	//НайденныйПартнер = Справочники.Партнеры.НайтиПоНаименованию(Наименование, Истина);
	//Если НайденныйПартнер = Справочники.Партнеры.ПустаяСсылка() Тогда
		Партнер = Справочники.Партнеры.СоздатьЭлемент();
		Партнер.Наименование = Наименование;
		Партнер.НаименованиеПолное = Партнер.Наименование;
		Партнер.ДатаРегистрации = ТекущаяДата();
		//Партнер.ОсновнойМенеджер = НайтиМенеджераПоИдентификатору(НовСтрока["employeeId"]);
		Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Партнер.Клиент = Истина;
		
		СтрокаКонтактнойИнформации = Партнер.КонтактнаяИнформация.Добавить();
		СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;//.ТелефонПартнера;
		//СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Комментарий>"+МобильныйТелефон+"</Комментарий><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+""" Добавочный=""""/>"+КонецКИ;
		СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+"""/>"+КонецКИ;
		СтрокаКонтактнойинформации.НомерТелефона = МобильныйТелефон;
		СтрокаКонтактнойИнформации.НомерТелефонаБезКодов = Прав(МобильныйТелефон,7);
		СтрокаКонтактнойИнформации.Представление = МобильныйТелефон;
		
		Партнер.Записать();
		НайденныйПартнер = Партнер.Ссылка;
	//КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = Контрагент.ПолучитьОбъект();
		Контрагент.КонтактнаяИнформация.Очистить();
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	Контрагент.Партнер = НайденныйПартнер.Ссылка;
	Контрагент.Наименование = Наименование;
	Контрагент.НаименованиеПолное = Контрагент.Наименование;
	Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Контрагент.ДополнительнаяИнформация = "авт. создан из гостевого клиента, телефон "+МобильныйТелефон;
	
	СтрокаКонтактнойИнформации = Контрагент.КонтактнаяИнформация.Добавить();
	СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	//СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Комментарий>"+МобильныйТелефон+"</Комментарий><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+""" Добавочный=""""/>"+КонецКИ;
	СтрокаКонтактнойинформации.ЗначенияПолей = НачалоКИ+ПредставлениеТелефона+"""><Состав xsi:type=""НомерТелефона"" КодСтраны="""+КодСтраны+""" КодГорода="""+КодГорода+""" Номер="""+НомерБезКодов+"""/>"+КонецКИ;
	СтрокаКонтактнойинформации.НомерТелефона = МобильныйТелефон;
	СтрокаКонтактнойИнформации.НомерТелефонаБезКодов = Прав(МобильныйТелефон,7);
	СтрокаКонтактнойИнформации.Представление = МобильныйТелефон;
	
	Контрагент.Записать();
	
	Если Адрес <> "" Тогда
		ФактАдресКонтрагента = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		//Если УТ111 Тогда
			СтрокаКонтактнойИнформации = Контрагент.КонтактнаяИнформация.Добавить();
			СтрокаКонтактнойинформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКонтактнойИнформации.Вид = ФактАдресКонтрагента;
			СтрокаКонтактнойИнформации.ЗначенияПолей = НачалоКИ+Адрес+"""><Комментарий>"+Адрес+"</Комментарий><Состав xsi:type=""Адрес"" Страна=""РОССИЯ""><Состав xsi:type=""АдресРФ""><СубъектРФ></СубъектРФ><СвРайМО><Район/></СвРайМО><Город/><НаселПункт/><Улица></Улица></Состав></Состав>"+КонецКИ;
			СтрокаКонтактнойИнформации.Представление = Адрес;
			СтрокаКонтактнойИнформации.ВидДляСписка = ФактАдресКонтрагента;
			Контрагент.Записать();
		//Иначе
		//	ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Адрес, ФактАдресКонтрагента);
		//	ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
		//	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контрагент, ЗначенияПолей, ФактАдресКонтрагента, ФактАдресКонтрагента.Тип);
		//КонецЕсли;			
	КонецЕсли;			
	
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	Если ИспользоватьДоговорыСКлиентами И СоздаватьДоговоры И ЗначениеЗаполнено(Контрагент.Ссылка) Тогда
		НайденныйДоговор = ПолучитьДоговорПоУмолчанию(,,,,Контрагент.Ссылка);
		Если Не ЗначениеЗаполнено(НайденныйДоговор) Тогда
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговор.ИнициализироватьСправочник();
			ЗаполнитьРеквизитыНовогоДоговора(НовыйДоговор, Контрагент);
			НовыйДоговор.Дата = НачалоМесяца(ТекущаяДата());
			НовыйДоговор.ДатаНачалаДействия = НовыйДоговор.Дата;
			НовыйДоговор.Номер = "гость";
			НовыйДоговор.Комментарий = "(НайтиСоздатьГостевогоКлиента) авт. создан при обмене с ABCP "+ТекущаяДата()+", покупатель "+СокрЛП(Контрагент);
			Если НЕ УТ111 И НЕ УТ112 И НЕ УТ113 Тогда //И НЕ (УТ114 И (Подверсия3=3 ИЛИ Подверсия3=1)) Тогда //в 11.4.3 этого реквизита нет
				НовыйДоговор.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
			КонецЕсли;
			НовыйДоговор.Записать();
		КонецЕсли;
	КонецЕсли;
	Возврат Контрагент.Ссылка
КонецФункции

Процедура ЗаполнитьТаблицуЗаявокССайта20(ВызовИзФормы = Ложь, СтатусЗаявок="", ФильтрПоЗаявке = 0, ОчищатьТаблицы = Ложь, СтрокаСтатусаДляКонтроля="", ТолькоПроверкаПоставщиков = Ложь, ИдКлиента = 0, ИдПоставщика = 0, ТолькоСвежие = Ложь) Экспорт
	
	//https://www.abcp.ru/wiki/API.TS.Admin#position_statuses
	СоответствиеСтатусыЗаказов20 = Новый Соответствие();
	СоответствиеСтатусыЗаказов20.Вставить("new", 1);
	СоответствиеСтатусыЗаказов20.Вставить("reservation", 2);
	СоответствиеСтатусыЗаказов20.Вставить("finished", 3);
	СоответствиеСтатусыЗаказов20.Вставить("prepayment", 4);
	СоответствиеСтатусыЗаказов20.Вставить("orderPicking", 5);
	СоответствиеСтатусыЗаказов20.Вставить("delivery", 6);
	СоответствиеСтатусыЗаказов20.Вставить("canceled", 7);
	СоответствиеСтатусыЗаказов20.Вставить("supOrder", 8);
	СоответствиеСтатусыЗаказов20.Вставить("supOrderCanceled", 9);
	
	Лев7 = Лев(АдресСервиса, 7);
	Если Лев7 = "id13923" Тогда id13923 = Истина; Иначе id13923 = Ложь;	КонецЕсли;
	Если Лев7 = "id41032" Тогда	id41032 = Истина; Иначе id41032 = Ложь; КонецЕсли;
	Если Лев7 = "id20243"  Тогда id20243 = Истина; Иначе id20243 = Ложь; КонецЕсли;
	
	ЗаполнитьСоответствия();

	ЛимитВозвращаемыхЗаписей = 1000;
	skip = 0;
	ВсегоЗагружаемыхЗаказов = 0;
	ДатаНачала = ТекущаяДата()-ГлубинаПросмотраЗаявок*24*3600;//НачалоДня(ТекущаяДата())-ГлубинаПросмотраЗаявок*24*3600;
	ДатаОкончания = ТекущаяДата();
	Пока skip <= ВсегоЗагружаемыхЗаказов Цикл
		Если ФильтрПоЗаявке > 0 Тогда
			ТекстЗапроса = "/cp/ts/orders/list?userlogin="+Пользователь+"&userpsw="+Пароль+"&number="+Формат(ФильтрПоЗаявке,"ЧГ=0");//&output=s
		Иначе
			ТекстЗапроса = "/cp/ts/orders/list?userlogin="+Пользователь+"&userpsw="+Пароль+"&updateDateStart="+Формат(ДатаНачала,"ДФ='yyyy-MM-dd HH:mm:ss'")+"&updateDateEnd="+Формат(ДатаОкончания,"ДФ='yyyy-MM-dd HH:mm:ss'");
			//ТекстЗапроса = "/cp/ts/orders/list?userlogin="+Пользователь+"&userpsw="+Пароль+"&dateStart="+Формат(ДатаНачала,"ДФ=yyyy-MM-dd")+"&dateEnd="+Формат(ДатаОкончания,"ДФ=yyyy-MM-dd");
			ТекстЗапроса = ТекстЗапроса + "&skip="+Формат(skip,"ЧН=0; ЧГ=0")+"&limit="+Формат(ЛимитВозвращаемыхЗаписей,"ЧГ=0");
		КонецЕсли;
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		Если Отладка Тогда
			сообщить(АдресСервиса+ТекстЗапроса);
		КонецЕсли;
		Попытка
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
			КодСостояния = HTTPОтвет.КодСостояния;
		Исключение
			ТекстСообщения = АдресСервиса+ТекстЗапроса;
			//ЗаписьВЛог(ТекстСообщения,6,Истина);
			ТекстСообщения = "Код ошибки"+КодСостояния+"ошибка получения заказов:"+ОписаниеОшибки();
			//ЗаписьВЛог(ТекстСообщения,6,Истина);
			ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			Возврат;
		КонецПопытки;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Если skip > 0 Тогда
			//WshShell.Run(СтрокаПаузы, 0, -1);
			ОбщегоНазначенияБТС.Пауза(1);
		КонецЕсли;
		skip = skip + ЛимитВозвращаемыхЗаписей;
		СписокЭлементов = ОтветJSON["list"];
		Если ВсегоЗагружаемыхЗаказов = 0 Тогда
			ВсегоЗагружаемыхЗаказов = Число(ОтветJSON["total"]);
			ЗаписьВЛог("Всего заявок для запроса порциями: "+ОтветJSON["total"]+", "+ВсегоЗагружаемыхЗаказов);
			Если ВсегоЗагружаемыхЗаказов = 0 Тогда
				Прервать;
			КонецЕсли;
		Иначе
			//сообщить(ВсегоЗагружаемыхЗаказов);
		КонецЕсли;
		МассивИдентификаторов = Новый Массив;
		Для Каждого Элемент Из СписокЭлементов Цикл
			МассивИдентификаторов.Добавить(Число(Элемент["clientId"]));
			МассивИдентификаторов.Добавить(Элемент["clientId"]);
		КонецЦикла;
		ЗаполнитьСоответствиеИдентификаторовКлиентов(МассивИдентификаторов);
		
		Для Каждого Элемент Из СписокЭлементов Цикл
			НовЗаявка = ТаблицаЗаявок.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗаявка, Элемент);
			НовЗаявка.ИдентификаторКонтрагента = НовЗаявка.clientId;
			НовЗаявка.НомерЗаявки = НовЗаявка.Id;
			НовЗаявка.ДатаЗаявки = ПреобразоватьИзСтрокиВДату(НовЗаявка.createDate);
			НовЗаявка.ДатаОбновления = ПреобразоватьИзСтрокиВДату(НовЗаявка.updateDate);
			НовЗаявка.dateUpdated = НовЗаявка.ДатаОбновления;
			

			Если НЕ ЗаменятьТолькоРозничныхПокупателей И ЗначениеЗаполнено(ОсновнойПокупатель) Тогда
				Если Отладка Тогда
					сообщить("Меняем всех клиентов на "+ОсновнойПокупатель);
				КонецЕсли;
				НовЗаявка.Контрагент = ОсновнойПокупатель;
			Иначе
				Если НовЗаявка.ИдентификаторКонтрагента <> ИдентификаторГостя Тогда
					Если ИспользоватьМножественныеИдентификаторы Тогда
						КонтрагентСМножественнымиИдентификаторами = СоответствиеМножественныхИдентификаторов.Получить(НовЗаявка.ИдентификаторКонтрагента);
						Если КонтрагентСМножественнымиИдентификаторами <> Неопределено Тогда
							НовЗаявка.Контрагент = КонтрагентСМножественнымиИдентификаторами;
						Иначе
							//НовЗаявка.Контрагент = НайтиКонтрагентаПоИдентификатору(НовЗаявка.ИдентификаторКонтрагента);
							КлиентИзСоответствия = СоответствиеИдентификаторовКлиентов.Получить(НовЗаявка.ИдентификаторКонтрагента);
							Если ЗначениеЗаполнено(КлиентИзСоответствия) Тогда
								НовЗаявка.Контрагент = КлиентИзСоответствия;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если КлиентПоКорзине Тогда //И НовЗаявка.basketId <> 0 Тогда
							врем = Формат(НовЗаявка.basketId,"ЧГ=0")+"_"+Формат(НовЗаявка.ИдентификаторКонтрагента,"ЧГ=0");
							КлиентИзСоответствияПоКорзине = СоответствиеКлиентовПоКорзине.Получить(врем);
							Если ЗначениеЗаполнено(КлиентИзСоответствияПоКорзине) Тогда
								НовЗаявка.Контрагент = КлиентИзСоответствияПоКорзине;
								Если Отладка Тогда
									сообщить("Клиент по корзине № "+НовЗаявка.basketId+" - "+КлиентИзСоответствияПоКорзине);
								КонецЕсли;
							Иначе
								Если Отладка Тогда
									сообщить("не найден клиент по корзине "+врем+"");
								КонецЕсли;
							КонецЕсли;
						Иначе
							//НовЗаявка.Контрагент = НайтиКонтрагентаПоИдентификатору(НовЗаявка.ИдентификаторКонтрагента);
							КлиентИзСоответствия = СоответствиеИдентификаторовКлиентов.Получить(НовЗаявка.ИдентификаторКонтрагента);
							Если ЗначениеЗаполнено(КлиентИзСоответствия) Тогда
								НовЗаявка.Контрагент = КлиентИзСоответствия;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе //добавляем гостя
					//НовЗаявка.Контрагент = НайтиКонтрагентаПоИдентификатору(НовЗаявка.ИдентификаторКонтрагента);//мы могли руками его присвоить
					КлиентИзСоответствия = СоответствиеИдентификаторовКлиентов.Получить(НовЗаявка.ИдентификаторКонтрагента);
					Если ЗначениеЗаполнено(КлиентИзСоответствия) Тогда
						НовЗаявка.Контрагент = КлиентИзСоответствия;
					КонецЕсли;
					Если Элемент.Свойство("additional") Тогда //если нашли клиента, то всё равно адрес может быть в этой структуре
						additional = Элемент.additional;
						consumer = additional.consumer;//Покупатель - гость
						Если additional.Свойство("phone") Тогда
							phone = additional.phone;//
						КонецЕсли;
						Адрес = "";
						Если additional.Свойство("yandexDeliveryParams") Тогда
							yandexDeliveryParams = additional.yandexDeliveryParams;
							city = yandexDeliveryParams.city;//город
							methodName = yandexDeliveryParams.methodName;//DPD, курьером до двери",
							methodCost = yandexDeliveryParams.methodCost;// цена доставки
							methodType = yandexDeliveryParams.methodType;//TODOOR,
							street = yandexDeliveryParams.street;//улица
							house = yandexDeliveryParams.house;//дом
							apartment = yandexDeliveryParams.apartment;//квартира
							zipCode = yandexDeliveryParams.zipCode;//индекс
							firstName = yandexDeliveryParams.firstName;//полное имя
							lastName = yandexDeliveryParams.lastName;//совпадает с пред
							mobile = yandexDeliveryParams.mobile;//представление № телефона с +7(...)...
							Если СтрДлина(consumer) < СтрДлина(firstName) Тогда
								consumer = firstName;
							КонецЕсли;
							Адрес = ""+zipCode+","+city+","+street+","+house+","+apartment;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(НовЗаявка.Контрагент) Тогда
							НовЗаявка.Контрагент = НайтиСоздатьГостевогоКлиента(consumer,phone,Адрес);
						КонецЕсли;
						НовЗаявка.АдресДоставки = Адрес;
					КонецЕсли;
				КонецЕсли;
				//Если ЗначениеЗаполнено(НовЗаявка.Контрагент) Тогда
				//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор склада контрагента (Контрагенты)");
				//	СтрокиДополнительныеРеквизиты = НовСтрока.Контрагент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство.Ссылка));
				//	Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
				//		Об = НовСтрока.Контрагент.ПолучитьОбъект();
				//		СтрокаДополнительныеРеквизиты = Об.ДополнительныеРеквизиты.Добавить();
				//		СтрокаДополнительныеРеквизиты.Свойство = Свойство;
				//		СтрокаДополнительныеРеквизиты.Значение = НовСтрока.office;
				//		СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = Формат(НовСтрока.office,"ЧГ=0");
				//		Об.Записать();
				//	КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
			Если НЕ ЗаменятьТолькоРозничныхПокупателей И ЗначениеЗаполнено(ОсновнойПокупатель) И ЗначениеЗаполнено(НовЗаявка.Контрагент) И НовЗаявка.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Если Отладка Тогда
					сообщить("Меняем в заявке розничного клиента на "+ОсновнойПокупатель);
				КонецЕсли;
				НовЗаявка.Контрагент = ОсновнойПокупатель;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НовЗаявка.Контрагент) И НЕ СинхронизироватьКонтрагентов И ЗначениеЗаполнено(НенайденныйКлиент) Тогда
				НовЗаявка.Контрагент = НенайденныйКлиент;
				НовЗаявка.Комментарий = НовЗаявка.Комментарий + " " + Элемент.userId + " " + Элемент.userName;
			КонецЕсли;
			Если СинхронизироватьКонтрагентов И Не ЗначениеЗаполнено(НовЗаявка.Контрагент) Тогда
				ТекстСообщения = "Не найден контрагент с идентификатором "+Формат(НовЗаявка.ИдентификаторКонтрагента, "ЧГ=0")+", идентификатор заявки "+СокрЛП(Формат(НовЗаявка.НомерЗаявки, "ЧГ=0"))+" от "+Дата(НовЗаявка.ДатаЗаявки);
				ЗаписьВЛог(ТекстСообщения,5);
				Отбор = Новый Структура();
				Отбор.Вставить("ИдентификаторКонтрагента", НовЗаявка.ИдентификаторКонтрагента);
				НовНенайденный = НенайденныеКонтрагенты.Добавить();
				НовНенайденный.ИдентификаторКонтрагента = НовЗаявка.ИдентификаторКонтрагента; 
				НовНенайденный.НомерЗаявки = НовЗаявка.НомерЗаявки; 
			КонецЕсли;
			//по ненайденным клиентам их данные вносим в комментарий
			Если НЕ СинхронизироватьКонтрагентов И НовЗаявка.Контрагент = НенайденныйКлиент Тогда
				ТекстСообщения = "Не найден контрагент (только получаем данные) с идентификатором "+Формат(НовЗаявка.ИдентификаторКонтрагента, "ЧГ=0")+", идентификатор заявки "+СокрЛП(Формат(НовЗаявка.НомерЗаявки, "ЧГ=0"))+" от "+Дата(НовЗаявка.ДатаЗаявки);
				ЗаписьВЛог(ТекстСообщения,5);
				Отбор = Новый Структура();
				Отбор.Вставить("ИдентификаторКонтрагента", НовЗаявка.ИдентификаторКонтрагента);
				НовНенайденный = НенайденныеКонтрагенты.Добавить();
				НовНенайденный.ИдентификаторКонтрагента = НовЗаявка.ИдентификаторКонтрагента; 
				НовНенайденный.НомерЗаявки = НовЗаявка.НомерЗаявки; 
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	СоздатьНенайденныхКонтрагентовПоИдентификаторам(НенайденныеКонтрагенты);
	
	Для Каждого НовЗаявка Из ТаблицаЗаявок Цикл
		//Если ОрганизацияПоСкладу Тогда
		//	НовЗаявка.Организация = ОрганизацияПоПоставщику.Получить(Число(Позиция.distributorId));
		//	НовЗаявка.ОрганизацияВПоступлении = ОрганизацияПоИсходномуПоставщику.Получить(Число(Позиция.distributorId));
		//КонецЕсли;
		//организация ещё по типу оплаты paymentTypeId заполняется после загрузки всех заявок
		Если Не ЗначениеЗаполнено(НовЗаявка.Организация) Тогда
			НовЗаявка.Организация = Организация;//но может быть розничный клиент
			Если ЗначениеЗаполнено(НовЗаявка.Контрагент) Тогда
				Если НовЗаявка.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
					НовЗаявка.Организация = ОрганизацияРозница;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДозаполнитьРеквизитыТаблицыЗаявок();

	ЗагрузитьПозицииЗаявок();
КонецПроцедуры

Процедура ЗагрузитьПозицииЗаявок()
	НомераЗаказов = "";
	НС = 0;
	Массив = ТаблицаЗаявок.Выгрузить(,"id").ВыгрузитьКолонку("id");
	Для Каждого Элемент Из Массив Цикл
		НС = НС + 1;
		НомераЗаказов = НомераЗаказов+"&orderIds[]="+Формат(Элемент,"ЧГ=0");
		Если НС % 50 = 0 Тогда
			ЗагрузитьПозицииЗаявокПорция(НомераЗаказов);
			НомераЗаказов = "";
		КонецЕсли;
	КонецЦикла;
	Если НомераЗаказов<>"" Тогда
		ЗагрузитьПозицииЗаявокПорция(НомераЗаказов)
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
		//ВалютаСоответствия = СоответствиеВалютаЗакупки.Получить(СтрокаЗаявки.distributorId);
		//Если ЗначениеЗаполнено(ВалютаСоответствия) Тогда
		//	СтрокаЗаявки.ВалютаЗакупки = ВалютаСоответствия;
		//КонецЕсли;
		//ВалютаСоответствия = СоответствиеВалютаПродажи.Получить(СтрокаЗаявки.distributorId);
		//Если ЗначениеЗаполнено(ВалютаСоответствия) Тогда
		//	СтрокаЗаявки.ВалютаПродажи = ВалютаСоответствия;
		//КонецЕсли;
		
		Если ЗагружатьОчищенныеАртикулы Тогда
			НомерДетали = СтрокаТаблицы.numberFix;
		Иначе
			НомерДетали = СтрокаТаблицы.number;
		КонецЕсли;
		НаименованиеБренда = СокрЛП(СтрокаТаблицы.brand);
		//проблема, есть деталь и REANAULT и RVI, в этой логике принудительноставится синоним RVI, надо подумать, как искать с приоритетом основного и вспомогательного бренда
		Если ИспользоватьСинонимыБрендов Тогда
			//СоответствиеСинонимов = Новый Соответствие;
			Производитель = СоответствиеБрендПроизводитель.Получить(НаименованиеБренда);
			Если НЕ ЗначениеЗаполнено(Производитель) Тогда
				Производитель = СоответствиеСинонимПроизводитель.Получить(НаименованиеБренда);
				Если НЕ ЗначениеЗаполнено(Производитель) Тогда
					Производитель = НайтиДобавитьПроизводитель(НаименованиеБренда);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Производитель = НайтиДобавитьПроизводитель(НаименованиеБренда);
			Если ПроизводительВБренде Тогда
				Марка = НайтиДобавитьМарку(НаименованиеБренда);
			КонецЕсли;
		КонецЕсли;
		Номенклатура = НайтиДобавитьНоменклатуруПоАртикулу(СокрЛП(НомерДетали), Производитель, СтрокаТаблицы, , СинхронизироватьНоменклатуру,СтрокаТаблицы.orderid, Марка);
		Если СинхронизироватьНоменклатуру = Истина И Не ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.Номенклатура = Номенклатура;
	КонецЦикла;	
	
	ДозаполнитьРеквизитыТаблицыНоменклатуры();
КонецПроцедуры //ЗагрузитьПозицииЗаявок()

Процедура ЗагрузитьПозицииЗаявокПорция(НомераЗаказов)
	Если НЕ ПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;

	ЛимитВозвращаемыхЗаписей = 1000;
	skip = 0;
	ВсегоЗагружаемыхПозиций = 0;
	Пока skip <= ВсегоЗагружаемыхПозиций Цикл
		//orderIds
		ТекстЗапроса = "/cp/ts/positions/list?userlogin="+Пользователь+"&userpsw="+Пароль+НомераЗаказов;
		ТекстЗапроса = ТекстЗапроса + "&skip="+Формат(skip,"ЧН=0; ЧГ=0")+"&limit="+Формат(ЛимитВозвращаемыхЗаписей,"ЧГ=0");
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		Если Отладка Тогда
			сообщить(АдресСервиса+ТекстЗапроса);
		КонецЕсли;
		Попытка
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
			КодСостояния = HTTPОтвет.КодСостояния;
		Исключение
			ТекстСообщения = АдресСервиса+ТекстЗапроса;
			//письВЛог(ТекстСообщения,6,Истина);
			ТекстСообщения = "Код ошибки"+КодСостояния+"ошибка получения заказов:"+ОписаниеОшибки();
			//письВЛог(ТекстСообщения,6,Истина);
			ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			Возврат;
		КонецПопытки;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Если skip > 0 Тогда
			//WshShell.Run(СтрокаПаузы, 0, -1);
			ОбщегоНазначенияБТС.Пауза(1);
		КонецЕсли;
		skip = skip + ЛимитВозвращаемыхЗаписей;
		СписокЭлементов = ОтветJSON["list"];
		Если ВсегоЗагружаемыхПозиций = 0 Тогда
			ВсегоЗагружаемыхПозиций = Число(ОтветJSON["total"]);
			ЗаписьВЛог("Всего позиций для запроса порциями: "+ОтветJSON["total"]+", "+ВсегоЗагружаемыхПозиций);
			Если ВсегоЗагружаемыхПозиций = 0 Тогда
				Прервать;
			КонецЕсли;
		Иначе
			//сообщить(ВсегоЗагружаемыхПозиций);
		КонецЕсли;
		Для Каждого Элемент Из СписокЭлементов Цикл
			НовСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
			ЗаполнитьЗначенияСвойств(НовСтрока, Элемент.priceData);
			НовСтрока.КодСтатуса = СоответствиеСтатусыЗаказов20.Получить(НовСтрока.status);
			НовСтрока.КодСтатусаСайт = НовСтрока.КодСтатуса;
			НовСтрока.СтатусСайт = НовСтрока.status;
			НовСтрока.НомерДетали = НовСтрока.numberFix;
			НовСтрока.Описание = НовСтрока.description;
			НовСтрока.Количество = НовСтрока.availability;
			НовСтрока.ИдентификаторНоменклатуры = НовСтрока.productId;

			НовСтрока.ИдентификаторСтроки = НовСтрока.productId;
			НовСтрока.ЦенаЗакупки = НовСтрока.distPrice;
			НовСтрока.ЦенаЗакупкиСклад = НовСтрока.ЦенаЗакупки;
			НовСтрока.ЦенаПродажи = НовСтрока.sellPrice;//clSellPrice
			Если НовСтрока.ЦенаПродажи = 0 Тогда
				НовСтрока.ЦенаПродажи = НовСтрока.buyPrice;
			КонецЕсли;
			НовСтрока.ЦенаПродажиСклад = НовСтрока.ЦенаПродажи;
			НовСтрока.Сумма = НовСтрока.Количество * НовСтрока.ЦенаПродажи;
			НовСтрока.НомерЗаявки = НовСтрока.orderId;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //ЗагрузитьПозицииЗаявокПорция

Процедура ЗаполнитьСоответствия()
	СоответствиеВалютаЗакупки = Новый Соответствие;
	СоответствиеВалютаПродажи = Новый Соответствие;
	//заполняем соответствие по основному поставщику, если код выбран в колонке ИдентификаторОсновногоПоставщика
	СоответствиеПоставщиков = Новый Соответствие;
	СоответствиеПоставщиковПоДополнительномуКоду = Новый Соответствие;
	ОрганизацияПоПоставщику = Новый Соответствие;
	ОрганизацияПоИсходномуПоставщику = Новый Соответствие;
	СоглашениеПоПоставщику = Новый Соответствие;
	СоглашениеПоИсходномуПоставщику = Новый Соответствие;
	СоответствиеСпособаДоставкиКодуДоставки = Новый Соответствие;
	СоответствиеУслугиКодуДоставки = Новый Соответствие;
	СоответствиеПеревозчикПартнерКодуДоставки = Новый Соответствие;
	СоответствиеЗонаДоставкиКодуДоставки = Новый Соответствие;
	МассивНашихСкладов = Новый Массив;
	МассивЧужихСкладов = Новый Массив;
	МассивНеЗагружаемыхпоставщиков = Новый Массив;
	//лучше сюда сразу поставщика вставлять
	ЕстьФранчайзи = Ложь;
	Если Франчайзи И ТаблицаДоступов.Количество()>0 Тогда
		ЕстьФранчайзи = Истина;
	КонецЕсли;
	//добавляем наши склады, чтобы не создавать 
	МассивВыгружаемыхСкладов = Новый Массив;
	Если СокрЛП(ИдентификаторПоставщика) <> "" Тогда
		Попытка
			МассивВыгружаемыхСкладов.Добавить(Число(СокрЛП(ИдентификаторПоставщика)));
		Исключение
		КонецПопытки;
	КонецЕсли;
	СтрокиНашихСкладов = ТаблицаСкладов.НайтиСтроки(Новый Структура("НашСклад", Истина));
	СоответствиеНашиСклады = Новый Соответствие;
	СоответствиеНашиСкладыВариантОбеспечения = Новый Соответствие;
	Для Каждого СтрокаНашихСкладов Из СтрокиНашихСкладов Цикл
		Если ЗначениеЗаполнено(СтрокаНашихСкладов.Склад) И СтрокаНашихСкладов.ИдентификаторПоставщика<>0 Тогда
			МассивВыгружаемыхСкладов.Добавить(Число(СтрокаНашихСкладов.ИдентификаторПоставщика));
			СоответствиеНашиСклады.Вставить(СтрокаНашихСкладов.ИдентификаторПоставщика, СтрокаНашихСкладов.Склад);
			Если ЗначениеЗаполнено(СтрокаНашихСкладов.ВариантОбеспечения) Тогда
				СоответствиеНашиСкладыВариантОбеспечения.Вставить(СтрокаНашихСкладов.ИдентификаторПоставщика, СтрокаНашихСкладов.ВариантОбеспечения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СтрокиНашихСкладов = ТаблицаСкладов.НайтиСтроки(Новый Структура("Выгружать", Истина));
	Для Каждого СтрокаНашихСкладов Из СтрокиНашихСкладов Цикл
		Если ЗначениеЗаполнено(СтрокаНашихСкладов.Склад) И СтрокаНашихСкладов.ИдентификаторПоставщика<>0 Тогда
			Если МассивВыгружаемыхСкладов.Найти(Число(СтрокаНашихСкладов.ИдентификаторПоставщика)) = Неопределено Тогда
				МассивВыгружаемыхСкладов.Добавить(Число(СтрокаНашихСкладов.ИдентификаторПоставщика));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СкладыПоПоставщику = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаСкладов Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Склад) И СтрокаТаблицы.ИдентификаторПоставщика<>0 Тогда
			СкладыПоПоставщику.Вставить(СтрокаТаблицы.ИдентификаторПоставщика, СтрокаТаблицы.Склад);
		КонецЕсли;
	КонецЦикла;
	СоответствиеВариантыОбеспеченияПоСтатусам = Новый Соответствие;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если ЗначениеЗаполнено(СтрокаСтатуса.ВариантОбеспечения) Тогда
			СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.ВариантОбеспечения);
		Иначе
			Если УТ111 Тогда
				СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.СоСклада);
			Иначе
				Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
					СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.Требуется);
				ИначеЕсли Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("УдалитьТребуется")<> Неопределено Тогда
					СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.УдалитьТребуется);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивЗагружаемыхСтатусов = Новый Массив;
	Если ОтборЗагружаемыхПозиций Тогда //при загрузке заполняем только те позиции, у которых статус находится в этом массиве
		Структура = Новый Структура("СоздаватьЗаявкуПокупателя", Истина);
		СтрокиСтатусов = ТаблицаСтатусов.НайтиСтроки(Структура);
		Для Каждого СтрокаСтатусов Из СтрокиСтатусов Цикл
			МассивЗагружаемыхСтатусов.Добавить(СтрокаСтатусов.КодСтатуса);
		КонецЦикла;
		
		Структура = Новый Структура("СоздаватьЗаказПоставщикам", Истина);
		СтрокиСтатусов = ТаблицаСтатусов.НайтиСтроки(Структура);
		Для Каждого СтрокаСтатусов Из СтрокиСтатусов Цикл
			Если МассивЗагружаемыхСтатусов.Найти(СтрокаСтатусов.КодСтатуса) = Неопределено Тогда
				МассивЗагружаемыхСтатусов.Добавить(СтрокаСтатусов.КодСтатуса);
			КонецЕсли;
		КонецЦикла;
		
		Структура = Новый Структура("СоздаватьПоступление", Истина);
		СтрокиСтатусов = ТаблицаСтатусов.НайтиСтроки(Структура);
		Для Каждого СтрокаСтатусов Из СтрокиСтатусов Цикл
			Если МассивЗагружаемыхСтатусов.Найти(СтрокаСтатусов.КодСтатуса) = Неопределено Тогда
				МассивЗагружаемыхСтатусов.Добавить(СтрокаСтатусов.КодСтатуса);
			КонецЕсли;
		КонецЦикла;
		
		Структура = Новый Структура("СоздаватьРеализацию", Истина);
		СтрокиСтатусов = ТаблицаСтатусов.НайтиСтроки(Структура);
		Для Каждого СтрокаСтатусов Из СтрокиСтатусов Цикл
			Если МассивЗагружаемыхСтатусов.Найти(СтрокаСтатусов.КодСтатуса) = Неопределено Тогда
				МассивЗагружаемыхСтатусов.Добавить(СтрокаСтатусов.КодСтатуса);
			КонецЕсли;
		КонецЦикла;
		
		Если Не НеЗагружатьОтказы И ЗначениеЗаполнено(КодСтатусаОтказ) Тогда
			МассивЗагружаемыхСтатусов.Добавить(КодСтатусаОтказ);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаСкладов Цикл
		Если ТекСтрока.НеЗагружать Тогда
			МассивНеЗагружаемыхпоставщиков.Добавить(ТекСтрока.ИдентификаторПоставщика);
		КонецЕсли;
		//у франчайзи под этим кодом может быть другой контрагент
		Если ТекСтрока.ДополнительныйКод И ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.АдресСервиса = АдресСервиса  И ТекСтрока.Пользователь = Пользователь Тогда
			СоответствиеПоставщиковПоДополнительномуКоду.Вставить(ТекСтрока.ИдентификаторПоставщика, ТекСтрока.Контрагент);
		КонецЕсли; 
		
		Если ТекСтрока.ИдентификаторОсновногоПоставщика<>0 Тогда
			СоответствиеПоставщиков.Вставить(ТекСтрока.ИдентификаторПоставщика, ТекСтрока.ИдентификаторОсновногоПоставщика);
			Если ОрганизацияПоСкладу И ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				ОрганизацияПоПоставщику.Вставить(ТекСтрока.ИдентификаторПоставщика, ТекСтрока.Организация);
				ОрганизацияПоИсходномуПоставщику.Вставить(ТекСтрока.ИдентификаторПоставщика, ТекСтрока.Организация);
				Если ЗначениеЗаполнено(ТекСтрока.Соглашение) Тогда
					СоглашениеПоПоставщику.Вставить(ТекСтрока.ИдентификаторПоставщика, ТекСтрока.Соглашение);
					СоглашениеПоИсходномуПоставщику.Вставить(ТекСтрока.ИдентификаторПоставщика, ТекСтрока.Соглашение);
				КонецЕсли;
			КонецЕсли;
			Если ТолькоСвоиСклады Тогда
				Если ТекСтрока.НашСклад Тогда
					МассивНашихСкладов.Добавить(ТекСтрока.ИдентификаторПоставщика);
				Иначе
					МассивЧужихСкладов.Добавить(ТекСтрока.ИдентификаторПоставщика);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ОрганизацияПоСкладу И ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				ОрганизацияПоПоставщику.Вставить(ТекСтрока.ИдентификаторПоставщика, ТекСтрока.Организация);
			КонецЕсли;
			//Если ТолькоСвоиСклады Тогда
				Если ТекСтрока.НашСклад Тогда
					МассивНашихСкладов.Добавить(ТекСтрока.ИдентификаторПоставщика);
				Иначе
					МассивЧужихСкладов.Добавить(ТекСтрока.ИдентификаторПоставщика);
				КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//во время загрузки заменяем бренды на их синонимы
	СоответствиеБрендПроизводитель = Новый Соответствие;
	СоответствиеСинонимПроизводитель = Новый Соответствие;
	Если ИспользоватьСинонимыБрендов Тогда
		Для Каждого ТекСтрока Из СинонимыБрендов Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Бренд) Тогда
				СоответствиеБрендПроизводитель.Вставить(ТекСтрока.Наименование, ТекСтрока.Бренд);
				СоответствиеСинонимПроизводитель.Вставить(ТекСтрока.Синоним, ТекСтрока.Бренд);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИсключаемыеОфисы = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаОфисов Цикл
		Если ТекСтрока.НеЗагружать Тогда
			ИсключаемыеОфисы.Добавить(ТекСтрока.id);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из СпособыДоставки Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СпособДоставки) Тогда
			СоответствиеСпособаДоставкиКодуДоставки.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.СпособДоставки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Услуга) Тогда
			СоответствиеУслугиКодуДоставки.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.Услуга);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПеревозчикПартнер) Тогда
			СоответствиеПеревозчикПартнерКодуДоставки.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.ПеревозчикПартнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЗонаДоставки) Тогда
			СоответствиеЗонаДоставкиКодуДоставки.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.ЗонаДоставки);
		КонецЕсли;
	КонецЦикла;
	
	БанковскийСчетОрганизацииПоУмолчанию = ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, Валюта);
	Если Организация <> ОрганизацияРозница Тогда
		БанковскийСчетОрганизацииРозницаПоУмолчанию = ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОрганизацияРозница, Валюта);
	Иначе
		БанковскийСчетОрганизацииРозницаПоУмолчанию = БанковскийСчетОрганизацииПоУмолчанию;
	КонецЕсли;
	//может быть несколько оргнанизаций по типам опла, лучше соответствие какое-нибудь заполнять
	СоответствиеБанковскийСчетОрганизации = Новый Соответствие;
	СоответствиеБанковскийСчетОрганизации.Вставить(Организация, БанковскийСчетОрганизацииПоУмолчанию);
	СоответствиеБанковскийСчетОрганизации.Вставить(ОрганизацияРозница, БанковскийСчетОрганизацииРозницаПоУмолчанию);
	Если ТипыПлатежей.Количество()>0 Тогда
		Для Каждого СтрокаТаблицы Из ТипыПлатежей Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Организация) Тогда
				Если СоответствиеБанковскийСчетОрганизации.Получить(СтрокаТаблицы.Организация) = Неопределено Тогда //пока нет в соответствии
					СоответствиеБанковскийСчетОрганизации.Вставить(СтрокаТаблицы.Организация, ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтрокаТаблицы.Организация, Валюта));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	НенайденныеКонтрагенты = Новый ТаблицаЗначений;
	НенайденныеКонтрагенты.Колонки.Добавить("ИдентификаторКонтрагента");
	НенайденныеКонтрагенты.Колонки.Добавить("Контрагент");
	НенайденныеКонтрагенты.Колонки.Добавить("НомерЗаявки");
	НенайденныеПоставщики = Новый СписокЗначений;//чтобы по несколько раз не предупреждал

	ИспользоватьОрдернуюСхемуПриОтгрузке = Ложь;//Склад.ИспользоватьОрдернуюСхемуПриОтгрузке;
	СписокКонтрагентовДляОбновленияБаланса = Новый СписокЗначений;
	//СтруктураИндикатора = Новый Структура("КоличествоЗаявок", КоличествоЗаявок);
	//СтруктураИндикатора.Вставить("ПорядковыйНомерЗаявки");
	
	Если ИсключитьИдентификаторыКлиентов <> "" Тогда
		МассивИсключенныхИдентификаторов = СтрРазделить(ИсключитьИдентификаторыКлиентов, ",");
	КонецЕсли;
	
	Если СоответствиеОтветственногоПоКодуМенеджера = Неопределено Тогда
		СоответствиеОтветственногоПоКодуМенеджера = Новый Соответствие;
		СоответствиеПодразделенияПоКодуМенеджера = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из ТаблицаМенеджеров Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Ответственный) Тогда
				СоответствиеОтветственногоПоКодуМенеджера.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.Ответственный);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Подразделение) Тогда
				СоответствиеПодразделенияПоКодуМенеджера.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.Подразделение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//лучше хранить у себя в настройках
	Если ИспользоватьМножественныеИдентификаторы Тогда
		//загружаем в соответствие множественные идентификаторы
		СоответствиеМножественныхИдентификаторов = Новый Соответствие;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Контрагент,
		               |	ДополнительныеСведения.Значение КАК Значение,
		               |	ДополнительныеСведения.Объект.Наименование КАК Наименование
		               |ИЗ
		               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |ГДЕ
		               |	ДополнительныеСведения.Свойство = &multipleuserId
		               |	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Контрагенты
		               |	И ДополнительныеСведения.Объект.ПометкаУдаления = ЛОЖЬ";
		multipleuserId = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("multipleuserId (Контрагенты)", Истина);//клиенты, которые через строчку заданы
		Запрос.УстановитьПараметр("multipleuserId", multipleuserId.Ссылка);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Массив = СтрРазделить(Выборка.Значение, ",", Ложь);
				Для Каждого Элемент Из Массив Цикл
					Попытка
						СоответствиеМножественныхИдентификаторов.Вставить(Число(Элемент),Выборка.Контрагент);
					Исключение
						сообщить("Неверный элемент множественного ид. "+Элемент);
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	СоответствиеКлиентовПоКорзине = Новый Соответствие;
	Если КлиентПоКорзине Тогда
		Для Каждого СтрокаТаблицы Из НастраиваемыеКлиенты Цикл
			Если СтрокаТаблицы.userId>0 И ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				//СоответствиеКлиентовПоКорзине.Вставить(СтрокаТаблицы.basketId, СтрокаТаблицы.Контрагент);
				врем = Формат(СтрокаТаблицы.basketId,"ЧГ=0")+"_"+Формат(СтрокаТаблицы.userId,"ЧГ=0");
				СоответствиеКлиентовПоКорзине.Вставить(врем, СтрокаТаблицы.Контрагент);
				//Если Отладка Тогда
				//	сообщить(врем+"	"+СтрокаТаблицы.Контрагент);
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьСоответствия()

//НачалоПорции = Неопределено, КонецПорции = Неопределено - если переданы, то загружается порция заявок. Если загружать за полгода, тогда сервер вернуть 500
Процедура ЗаполнитьТаблицуЗаявокССайта(ВызовИзФормы = Ложь, СтатусЗаявок="", ФильтрПоЗаявке = 0, ОчищатьТаблицы = Ложь, СтрокаСтатусаДляКонтроля="", ТолькоПроверкаПоставщиков = Ложь, ИдКлиента = 0, ИдПоставщика = 0, ТолькоСвежие = Ложь) Экспорт
	Если НЕ ПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	Лев7 = Лев(АдресСервиса, 7);
	Если Лев7 = "id13923" Тогда id13923 = Истина; Иначе id13923 = Ложь;	КонецЕсли;
	Если Лев7 = "id41032" Тогда	id41032 = Истина; Иначе id41032 = Ложь; КонецЕсли;
	Если Лев7 = "id20243"  Тогда id20243 = Истина; Иначе id20243 = Ложь; КонецЕсли;
	
	ЗаполнитьСоответствия();

	ПорядковыйНомерЗаявки = 0;

	
	Если ОчищатьТаблицы Тогда
		ТаблицаЗаявок.Очистить();
		ТаблицаНоменклатуры.Очистить();
	КонецЕсли;
	Если СтатусЗаявок = 0 Тогда
		Возврат;
	КонецЕсли;
	//https://helpf.pro/faq/view/1302.html - обработка ожидания
	Если СтатусЗаявок = "" Тогда
		СтатусЗаявокСтрокой = "";
	Иначе
		НайденнаяСтрока = ТаблицаСтатусов.Найти(СтатусЗаявок, "КодСтатуса");
		Если НайденнаяСтрока = Неопределено Тогда
			СтатусЗаявокСтрокой = "";
		Иначе
			СтатусЗаявокСтрокой = НайденнаяСтрока.НаименованиеСтатуса;
		КонецЕсли;
	КонецЕсли;
	
	Если ГлубинаПросмотраЗаявок = 0 Тогда
		ДатаНачала = НачалоДня(ТекущаяДата());//НачалоДня(ТекущаяДата())-ГлубинаПросмотраЗаявок*24*3600;
		Если ГлубинаПросмотраЗаявокВМинутах>0 Тогда
			ДатаНачала = ТекущаяДата() - 3600 * СмещениеЧасовогоПояса - ГлубинаПросмотраЗаявокВМинутах * 60;
			ЗаписьВЛог("Загрузка заявок с "+ДатаНачала+", пользователь "+Пользователь+", адрес сервиса "+АдресСервиса);
		КонецЕсли;
	Иначе
		Если ГлубинаПросмотраЗаявок<>888 Тогда
			ДатаНачала = ТекущаяДата()-ГлубинаПросмотраЗаявок*24*3600;//НачалоДня(ТекущаяДата())-ГлубинаПросмотраЗаявок*24*3600;
		Иначе
			ДатаНачала = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	ДатаОтсеченияСтарыхЗаявок = ДобавитьМесяц(ДатаНачала,-3);
	Если ЗначениеЗаполнено(ДатаНачалаУчета) И ДатаОтсеченияСтарыхЗаявок < ДатаНачалаУчета Тогда
		ДатаОтсеченияСтарыхЗаявок = ДатаНачалаУчета;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачалаУчета) Тогда
		Если ДатаНачала < ДатаНачалаУчета Тогда
			ДатаНачала = ДатаНачалаУчета;
		КонецЕсли;
		Если ДатаОтсеченияСтарыхЗаявок < ДатаНачалаУчета Тогда
			ДатаОтсеченияСтарыхЗаявок = ДатаНачалаУчета;
		КонецЕсли;
	КонецЕсли;
	ДатаОкончания = ТекущаяДата();
	Если ЗначениеЗаполнено(ФильтрПоЗаявке) И ФильтрПоЗаявке<366 Тогда //делаем возможность загружать частями, и используем этот реквизит для указания количества дней
		ДатаОкончания = ДатаНачала + ФильтрПоЗаявке * 86400;
		Если ОтборЗаявокПоДатеСоздания Тогда
			сообщить("Загрузка заказов за период: "+ДатаНачала+" - "+ДатаОкончания);
		Иначе
			сообщить("Загрузка заказов, изменённых за период: "+ДатаНачала+" - "+ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	ДополнительныеДанныеЗапроса = "";
	Если ИдентификаторГостя <> 0 Тогда //Или ЗначениеЗаполнено(УслугаДоставки) Или СпособыДоставки.Количество()>0 Тогда
		//ДополнительныеДанныеЗапроса = "&format=additional";
		Если ИспользоватьAPI2021 Тогда
			ЗаписьВЛог("&format=additional и &format=p несовместимы, отключите параметр «Использовать API 08.2021»",,Истина);
		Иначе
			ДополнительныеДанныеЗапроса = "&format=additional";
		КонецЕсли;
	КонецЕсли;
	
	ЛимитВозвращаемыхЗаписей = 200;
	Если Лев(АдресСервиса, 5) = "mxcar" Тогда
		ЛимитВозвращаемыхЗаписей = 100;
	КонецЕсли;
	skip = 0;
	ВсегоЗагружаемыхЗаказов = 0;
	Пока skip <= ВсегоЗагружаемыхЗаказов Цикл
		//ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+"&dateCreatedStart="+Формат(ДатаНачала, "ДФ=yyyy-MM-dd")+" 00:00:00&dateCreatedEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59";//&statusCode=56233";
		//лучше так: При указании фильтра по дате обновления, будут выбраны как новые заказы, так и обновленные, попадающие под действие фильтра.
		//для уменьшения объема, если ИдентификаторГостя = 0 Тогда не нужна доп информация
		Если ФильтрПоЗаявке = 0 Или ФильтрПоЗаявке < 366 Тогда //ТЗНоменклатураКодСтатусаСайтНачалоВыбора
			Если ОтборЗаявокПоДатеСоздания Тогда
				ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+ДополнительныеДанныеЗапроса+"&dateCreatedStart="+Формат(ДатаНачала, "ДФ=yyyy-MM-dd")+" 00:00:00&ut11&dateCreatedEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59&desc=true";//&statusCode=56233";
			Иначе
				Если ТолькоСвежие Тогда
					ДатаНачала = НайтиПоследнююИзмененнуюЗаявку(ДатаНачала);
				КонецЕсли;
				ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+ДополнительныеДанныеЗапроса+"&dateUpdatedStart="+Формат(ДатаНачала, "ДФ='yyyy-MM-dd HH:mm:ss'")+"&ut11&dateUpdatedEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59&desc=true";//&statusCode=56233";
			КонецЕсли;
			Если СтатусЗаявок<>"" Тогда
				ТекстЗапроса = ТекстЗапроса + "&statusCode="+Формат(СтатусЗаявок,"ЧГ=0");//надо передавать в виде строки, чтобы не было разделителя тысяч
			КонецЕсли;
		Иначе
			//ТекстЗапроса = "/cp/order?userlogin="+Пользователь+"&userpsw="+Пароль+"&number="+Формат(ФильтрПоЗаявке, "ЧГ=0")+ДополнительныеДанныеЗапроса;//чтобы при гостевом заказе данные возвращал, в том числе адрес
			ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+"&numbers[]="+Формат(ФильтрПоЗаявке, "ЧГ=0")+ДополнительныеДанныеЗапроса;//чтобы при гостевом заказе данные возвращал, в том числе адрес
			//можно /cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+"&numbers[]="+Формат(ФильтрПоЗаявке, "ЧГ=0")
			//сообщить(ТекстЗапроса);
			//ТекстЗапроса = ТекстЗапроса+"&withDeleted=1";//включать удалённые заказы
			Если ГлубинаПросмотраЗаявок = 888 Тогда //чтобы загрузить одну заявку, но обработать, как общие
				ГлубинаПросмотраЗаявок = 0;
				ФильтрПоЗаявке = 0;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОфисСамовывоза) Тогда
			ТекстЗапроса = ТекстЗапроса+"&officeId="+Формат(ОфисСамовывоза, "ЧГ=0");
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтборПоПоставщику) Тогда
			ТекстЗапроса = ТекстЗапроса+"&distributorId="+Формат(ОтборПоПоставщику, "ЧГ=0");
		КонецЕсли;
		Если ЗначениеЗаполнено(ФильтрПоЗаявке) И ФильтрПоЗаявке<366 Тогда //делаем возможность загружать частями, и используем этот реквизит для указания количества дней
			//сообщить(АдресСервиса+ТекстЗапроса);
		КонецЕсли;
		Если ИспользоватьAPI2021 Тогда
			ТекстЗапроса = ТекстЗапроса + "&format=p&ut11&safeMode=1&skip="+Формат(skip,"ЧН=0; ЧГ=0")+"&limit="+Формат(ЛимитВозвращаемыхЗаписей,"ЧГ=0");
		Иначе
			ТекстЗапроса = ТекстЗапроса + "&ut11&safeMode=1";
		КонецЕсли;
		Если Отладка Тогда
			сообщить(АдресСервиса+ТекстЗапроса);
			//ЗаписьВЛог(СтрЗаменить(АдресСервиса+ТекстЗапроса,Пароль,"***"));
		КонецЕсли;
		
		//сообщить("Заполнение заявок по статусу "+СокрЛП(СтатусЗаявок)+", период "+СокрЛП(ДатаНачала)+"-"+СокрЛП(ДатаОкончания));
		//сообщить(ТекстЗапроса);
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		Попытка
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
			КодСостояния = HTTPОтвет.КодСостояния;
		Исключение
			ТекстСообщения = АдресСервиса+ТекстЗапроса;
			ЗаписьВЛог(ТекстСообщения,6,Истина);
			ТекстСообщения = "Код ошибки"+КодСостояния+"ошибка получения заказов:"+ОписаниеОшибки();
			ЗаписьВЛог(ТекстСообщения,6,Истина);
			ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			Возврат;
		КонецПопытки;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
			Возврат;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		Если ИспользоватьAPI2021 Тогда
			ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
		Иначе
			СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
			ВсегоЗагружаемыхЗаказов = 1;//чтобы в беконечный цикл со skip не входил
		КонецЕсли;
		//поменял формат запроса, уже неважно
		//Если (ФильтрПоЗаявке = 0) Или ФильтрПоЗаявке<366 Тогда
		//	ОтветJSON = ПрочитатьJSON(ЧтениеJSON);
		//Иначе
		//	Список = ПрочитатьJSON(ЧтениеJSON);
		//	ОтветJSON = Новый Массив;
		//	ОтветJSON.Добавить(Список);
		//КонецЕсли;
		ЧтениеJSON.Закрыть();
		Если skip > 0 Тогда
			//WshShell.Run(СтрокаПаузы, 0, -1);
			Попытка
				ОбщегоНазначенияБТС.Пауза(1);
			Исключение
			КонецПопытки;
		КонецЕсли;
		skip = skip + ЛимитВозвращаемыхЗаписей;
		Если ИспользоватьAPI2021 Тогда
			СписокЭлементов = ОтветJSON["items"];
			Если ВсегоЗагружаемыхЗаказов = 0 Тогда
				ВсегоЗагружаемыхЗаказов = Число(ОтветJSON["count"]);
				ЗаписьВЛог("Всего заявок для запроса порциями: "+ОтветJSON["count"]+", "+ВсегоЗагружаемыхЗаказов);
				СписокЭлементовКоличество = СписокЭлементов.Количество();
				Если СписокЭлементовКоличество > ВсегоЗагружаемыхЗаказов Тогда
					ЗаписьВЛог("СписокЭлементовКоличество "+СписокЭлементовКоличество+", ВсегоЗагружаемыхЗаказов "+ВсегоЗагружаемыхЗаказов);
					ВсегоЗагружаемыхЗаказов = СписокЭлементовКоличество;
				КонецЕсли;
				Если ВсегоЗагружаемыхЗаказов = 0 Тогда
					Прервать;
				КонецЕсли;
			Иначе
				//сообщить(ВсегоЗагружаемыхЗаказов);
			КонецЕсли;
		КонецЕсли;
		Если СтатусЗаявок = "" Тогда
			ТекстСообщения = "";
			Если ОтборЗаявокПоДатеСоздания Тогда
				ТекстСообщения = "Загрузка заявок с отбором по дате создания, глубина просмотра "+ГлубинаПросмотраЗаявок;
			Иначе
				//Если ИспользоватьВремяПредыдущейЗагрузки Тогда
				//	ТекстСообщения = "Загрузка заявок, с "+ДатаВремяНачала;
				//Иначе
					ТекстСообщения = "Загрузка заявок, глубина просмотра в днях: "+ГлубинаПросмотраЗаявок+", с "+ДатаНачала;
				//КонецЕсли;
			КонецЕсли;
		Иначе
			ЗаписьВЛог(ТекстСообщения+", всего заявок "+СписокЭлементов.Количество(),7);
		КонецЕсли;
		//ПодключитьОбработчикОжидания("ОболочкаОбработчика", 2, Истина);
		//заполняем сопоставление клиентами, чтобы одним запросом из регистра сведений получить все userId
		МассивИдентификаторов = Новый Массив;
		Для Каждого Элемент Из СписокЭлементов Цикл
			МассивИдентификаторов.Добавить(Число(Элемент["userId"]));
			МассивИдентификаторов.Добавить(Элемент["userId"]);
		КонецЦикла;
		ЗаполнитьСоответствиеИдентификаторовКлиентов(МассивИдентификаторов);
		КоличествоЗаявок = СписокЭлементов.Количество();
		//сообщить(СписокЭлементов.Количество());
		Для Каждого Элемент Из СписокЭлементов Цикл
			//еще есть информаци о платежах Элемент.paymentTypeId
			//https://helpf.pro/faq/view/1302.html - обработка ожидания
			
			// АЛЕКСЕЙ ОТЛАДКА
			//Если Элемент.userName <> "Сотрудник Лысенко Алексей"
			//	И Элемент.userName <> "Лысенко Алексей" Тогда
			//	Продолжить;
			//КонецЕсли;   
			//Если Число(Элемент.number) <> 186958228 Тогда
			//	Продолжить;
			//КонецЕсли;
			// АЛЕКСЕЙ ОТЛАДКА
			
			Если (ФильтрПоЗаявке <> 0) И ФильтрПоЗаявке<366 Тогда
				//сообщить(СписокЭлементов.Количество());
			КонецЕсли;
			Если (ФильтрПоЗаявке <> 0) И ФильтрПоЗаявке>366 И (ФильтрПоЗаявке <> Число(Элемент.number)) Тогда //для отладки загрузки одной заявки
				Продолжить;
			КонецЕсли;
			Если (ФильтрПоЗаявке = 0) И id13923 Тогда
				Если СтрДлина(Элемент.internalNumber) = 9 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДатаЗаявки = ПреобразоватьИзСтрокиВДату(Элемент.date);
			//не загружаем очень старые заявки, у которых случайно поменяли статус. Но, если надо загрузить принудительно, то разрешаем
			Если (ФильтрПоЗаявке = 0) И (ДатаЗаявки < ДатаОтсеченияСтарыхЗаявок) Тогда
				Продолжить;
			КонецЕсли;
			Дубликат = ТаблицаЗаявок.Найти(Число(Элемент.number), "НомерЗаявки");//чтобы не было дублирования заявок
			Если Дубликат<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ИсключитьИдентификаторыКлиентов <> "" Тогда
				Если МассивИсключенныхИдентификаторов.Найти(Строка(Элемент.userId)) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//если поставщик выбран, то сначала проверяем, есть ли этот поставщик в заказе
			Выдано = 0;
			Если ОтборПоПоставщику>0 Тогда
				ЕстьПозицииПоПоставщику = Ложь;
				ОтбиратьПоПоставщику = Истина;
				ОтборПоПоставщикуСтрокой = Формат(ОтборПоПоставщику, "ЧГ=0");
			ИначеЕсли ТолькоСвоиСклады Тогда
				ЕстьПозицииПоПоставщику = Ложь;
				ОтбиратьПоПоставщику = Ложь;
			Иначе
				ЕстьПозицииПоПоставщику = Истина;
				ОтбиратьПоПоставщику = Ложь;
			КонецЕсли;
			
			Для Каждого СтрокаЭлемента Из Элемент.positions Цикл
				Если Число(СтрокаЭлемента.statusCode) = КодСтатусаВыдано Тогда //"53520" и ещё отказ учитывать
					Выдано = Выдано + 1;
				КонецЕсли;
				Если НЕ ЕстьПозицииПоПоставщику Тогда
					Если ОтбиратьПоПоставщику И СтрокаЭлемента.distributorId = ОтборПоПоставщикуСтрокой Тогда
						ЕстьПозицииПоПоставщику = Истина;
					КонецЕсли;
					Если ТолькоСвоиСклады Тогда
						Если МассивНашихСкладов.Найти(Число(СтрокаЭлемента.distributorId)) <> Неопределено Тогда
							ЕстьПозицииПоПоставщику = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьПозицииПоПоставщику Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Элемент.deliveryOfficeId) И ИсключаемыеОфисы.Найти(Число(Элемент.deliveryOfficeId)) <> Неопределено Тогда//эти офисы не загружаем
				Продолжить;
			КонецЕсли;
			//проверяем, есть очень старые заявки, которые зачем-то попадают в загрузку
			НовЗаявка = ТаблицаЗаявок.Добавить();
						
			ЗаполнитьЗначенияСвойств(НовЗаявка, Элемент, "deliveryOfficeId,deliveryOffice,deliveryTypeId,deliveryType,paymentTypeId,paymentType,userCode,basketId,basketName");
			НовЗаявка.НомерЗаявки = Элемент.number;
			НовЗаявка.ДатаЗаявки = ДатаЗаявки;
			//НовЗаявка.shipmentDate = ПреобразоватьИзСтрокиВДату(Элемент.shipmentDate);
			НовЗаявка.dateUpdated = ПреобразоватьИзСтрокиВДату(Элемент.dateUpdated);// - СмещениеЧасовогоПояса*3600;
			НовЗаявка.ИмяПокупателя = Элемент.userName;
			НовЗаявка.Комментарий = Элемент.comment;
			//здесь ищем заявку и проверяем дату обновления
			НовЗаявка.ИдентификаторКонтрагента = Число(Элемент.userId);
			Если НЕ ЗаменятьТолькоРозничныхПокупателей И ЗначениеЗаполнено(ОсновнойПокупатель) Тогда
				Если Отладка Тогда
					сообщить("Меняем всех клиентов на "+ОсновнойПокупатель);
				КонецЕсли;
				НовЗаявка.Контрагент = ОсновнойПокупатель;
			Иначе
				Если НовЗаявка.ИдентификаторКонтрагента <> ИдентификаторГостя Тогда
					Если ИспользоватьМножественныеИдентификаторы Тогда
						КонтрагентСМножественнымиИдентификаторами = СоответствиеМножественныхИдентификаторов.Получить(НовЗаявка.ИдентификаторКонтрагента);
						Если КонтрагентСМножественнымиИдентификаторами <> Неопределено Тогда
							НовЗаявка.Контрагент = КонтрагентСМножественнымиИдентификаторами;
						Иначе
							//НовЗаявка.Контрагент = НайтиКонтрагентаПоИдентификатору(НовЗаявка.ИдентификаторКонтрагента);
							КлиентИзСоответствия = СоответствиеИдентификаторовКлиентов.Получить(НовЗаявка.ИдентификаторКонтрагента);
							Если ЗначениеЗаполнено(КлиентИзСоответствия) Тогда
								НовЗаявка.Контрагент = КлиентИзСоответствия;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если КлиентПоКорзине Тогда //И НовЗаявка.basketId <> 0 Тогда
							врем = Формат(НовЗаявка.basketId,"ЧГ=0")+"_"+Формат(НовЗаявка.ИдентификаторКонтрагента,"ЧГ=0");
							КлиентИзСоответствияПоКорзине = СоответствиеКлиентовПоКорзине.Получить(врем);
							Если ЗначениеЗаполнено(КлиентИзСоответствияПоКорзине) Тогда
								НовЗаявка.Контрагент = КлиентИзСоответствияПоКорзине;
								Если Отладка Тогда
									сообщить("Клиент по корзине № "+НовЗаявка.basketId+" - "+КлиентИзСоответствияПоКорзине);
								КонецЕсли;
							Иначе
								Если Отладка Тогда
									сообщить("не найден клиент по корзине "+врем+"");
								КонецЕсли;
							КонецЕсли;
						Иначе
							//НовЗаявка.Контрагент = НайтиКонтрагентаПоИдентификатору(НовЗаявка.ИдентификаторКонтрагента);
							КлиентИзСоответствия = СоответствиеИдентификаторовКлиентов.Получить(НовЗаявка.ИдентификаторКонтрагента);
							Если ЗначениеЗаполнено(КлиентИзСоответствия) Тогда
								НовЗаявка.Контрагент = КлиентИзСоответствия;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе //добавляем гостя
					//НовЗаявка.Контрагент = НайтиКонтрагентаПоИдентификатору(НовЗаявка.ИдентификаторКонтрагента);//мы могли руками его присвоить
					КлиентИзСоответствия = СоответствиеИдентификаторовКлиентов.Получить(НовЗаявка.ИдентификаторКонтрагента);
					Если ЗначениеЗаполнено(КлиентИзСоответствия) Тогда
						НовЗаявка.Контрагент = КлиентИзСоответствия;
					КонецЕсли;
					Если Элемент.Свойство("additional") Тогда //если нашли клиента, то всё равно адрес может быть в этой структуре
						additional = Элемент.additional;
						consumer = additional.consumer;//Покупатель - гость
						Если additional.Свойство("phone") Тогда
							phone = additional.phone;//
						КонецЕсли;
						Адрес = "";
						Если additional.Свойство("yandexDeliveryParams") Тогда
							yandexDeliveryParams = additional.yandexDeliveryParams;
							city = yandexDeliveryParams.city;//город
							methodName = yandexDeliveryParams.methodName;//DPD, курьером до двери",
							methodCost = yandexDeliveryParams.methodCost;// цена доставки
							methodType = yandexDeliveryParams.methodType;//TODOOR,
							street = yandexDeliveryParams.street;//улица
							house = yandexDeliveryParams.house;//дом
							apartment = yandexDeliveryParams.apartment;//квартира
							zipCode = yandexDeliveryParams.zipCode;//индекс
							firstName = yandexDeliveryParams.firstName;//полное имя
							lastName = yandexDeliveryParams.lastName;//совпадает с пред
							mobile = yandexDeliveryParams.mobile;//представление № телефона с +7(...)...
							Если СтрДлина(consumer) < СтрДлина(firstName) Тогда
								consumer = firstName;
							КонецЕсли;
							Адрес = ""+zipCode+","+city+","+street+","+house+","+apartment;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(НовЗаявка.Контрагент) Тогда
							НовЗаявка.Контрагент = НайтиСоздатьГостевогоКлиента(consumer,phone,Адрес);
						КонецЕсли;
						НовЗаявка.АдресДоставки = Адрес;
					КонецЕсли;
				КонецЕсли;
				//Если ЗначениеЗаполнено(НовЗаявка.Контрагент) Тогда
				//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор склада контрагента (Контрагенты)");
				//	СтрокиДополнительныеРеквизиты = НовСтрока.Контрагент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство.Ссылка));
				//	Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
				//		Об = НовСтрока.Контрагент.ПолучитьОбъект();
				//		СтрокаДополнительныеРеквизиты = Об.ДополнительныеРеквизиты.Добавить();
				//		СтрокаДополнительныеРеквизиты.Свойство = Свойство;
				//		СтрокаДополнительныеРеквизиты.Значение = НовСтрока.office;
				//		СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = Формат(НовСтрока.office,"ЧГ=0");
				//		Об.Записать();
				//	КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
			Если НЕ ЗаменятьТолькоРозничныхПокупателей И ЗначениеЗаполнено(ОсновнойПокупатель) И ЗначениеЗаполнено(НовЗаявка.Контрагент) И НовЗаявка.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Если Отладка Тогда
					сообщить("Меняем в заявке розничного клиента на "+ОсновнойПокупатель);
				КонецЕсли;
				НовЗаявка.Контрагент = ОсновнойПокупатель;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НовЗаявка.Контрагент) И НЕ СинхронизироватьКонтрагентов И ЗначениеЗаполнено(НенайденныйКлиент) Тогда
				НовЗаявка.Контрагент = НенайденныйКлиент;
				НовЗаявка.Комментарий = НовЗаявка.Комментарий + " " + Элемент.userId + " " + Элемент.userName;
			КонецЕсли;
			Если СинхронизироватьКонтрагентов И Не ЗначениеЗаполнено(НовЗаявка.Контрагент) Тогда
				ТекстСообщения = "Не найден контрагент с идентификатором "+Формат(НовЗаявка.ИдентификаторКонтрагента, "ЧГ=0")+", идентификатор заявки "+СокрЛП(Формат(НовЗаявка.НомерЗаявки, "ЧГ=0"))+" от "+Дата(НовЗаявка.ДатаЗаявки);
				ЗаписьВЛог(ТекстСообщения,5);
				Отбор = Новый Структура();
				Отбор.Вставить("ИдентификаторКонтрагента", НовЗаявка.ИдентификаторКонтрагента);
				НовНенайденный = НенайденныеКонтрагенты.Добавить();
				НовНенайденный.ИдентификаторКонтрагента = НовЗаявка.ИдентификаторКонтрагента; 
				НовНенайденный.НомерЗаявки = НовЗаявка.НомерЗаявки; 
			КонецЕсли;
			//по ненайденным клиентам их данные вносим в комментарий
			Если НЕ СинхронизироватьКонтрагентов И НовЗаявка.Контрагент = НенайденныйКлиент Тогда
				ТекстСообщения = "Не найден контрагент (только получаем данные) с идентификатором "+Формат(НовЗаявка.ИдентификаторКонтрагента, "ЧГ=0")+", идентификатор заявки "+СокрЛП(Формат(НовЗаявка.НомерЗаявки, "ЧГ=0"))+" от "+Дата(НовЗаявка.ДатаЗаявки);
				ЗаписьВЛог(ТекстСообщения,5);
				Отбор = Новый Структура();
				Отбор.Вставить("ИдентификаторКонтрагента", НовЗаявка.ИдентификаторКонтрагента);
				НовНенайденный = НенайденныеКонтрагенты.Добавить();
				НовНенайденный.ИдентификаторКонтрагента = НовЗаявка.ИдентификаторКонтрагента; 
				НовНенайденный.НомерЗаявки = НовЗаявка.НомерЗаявки; 
			КонецЕсли;
			НовЗаявка.managerId = Элемент.managerId;
			//чтобы менеджер был в заказе: "Заказы: привязывать оформляемые сотрудниками клиентские заказы к сотрудникам"
			Если СинхронизироватьМенеджеров Тогда
				Если СоответствиеОтветственногоПоКодуМенеджера<>Неопределено Тогда
					Значение = СоответствиеОтветственногоПоКодуМенеджера.Получить(НовЗаявка.managerId);
					Если ЗначениеЗаполнено(Значение) Тогда
						НовЗаявка.Ответственный = Значение;
					КонецЕсли; 
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(НовЗаявка.Ответственный) Тогда
					Если ИспользоватьМенеджераИзКарточкиКонтрагента Тогда
						Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("employeeId (Контрагенты)", Истина);
						МенеджерыКонтрагента = НовЗаявка.Контрагент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));
						Если МенеджерыКонтрагента.Количество() > 0 Тогда
							НовЗаявка.managerId = Число(МенеджерыКонтрагента[0].Значение);
						КонецЕсли;
						Если Не ЗначениеЗаполнено(НовЗаявка.Ответственный) И ЗначениеЗаполнено(НовЗаявка.Контрагент) Тогда
							Если ЗначениеЗаполнено(НовЗаявка.Контрагент.Партнер.ОсновнойМенеджер) Тогда
								НовЗаявка.Ответственный = НовЗаявка.Контрагент.Партнер.ОсновнойМенеджер;//добавится только после добавления контрагента
							Иначе
								НовЗаявка.Ответственный = НайтиДобавитьОтветственногоПоИдентификатору(НовЗаявка.managerId);
							КонецЕсли;
						Иначе
							НовЗаявка.Ответственный = НайтиДобавитьОтветственногоПоИдентификатору(НовЗаявка.managerId);
						КонецЕсли;
					Иначе
						НовЗаявка.Ответственный = НайтиДобавитьОтветственногоПоИдентификатору(НовЗаявка.managerId);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(НовЗаявка.Контрагент) Тогда
					НовЗаявка.Ответственный = НовЗаявка.Контрагент.Партнер.ОсновнойМенеджер;//добавится только после добавления контрагента
					Если Отладка И ЗначениеЗаполнено(НовЗаявка.Ответственный) Тогда
						сообщить("У клиента ответственный "+НовЗаявка.Контрагент+" "+НовЗаявка.Ответственный);
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НовЗаявка.Ответственный) Тогда
				НовЗаявка.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;

			НовЗаявка.Позиций = Элемент.positionsQuantity;
			НовЗаявка.СуммаЗаявки = Элемент.sum;
			НовЗаявка.ДатаОбновления = ПреобразоватьИзСтрокиВДату(Элемент.dateUpdated);// - СмещениеЧасовогоПояса * 3600;
			//АТС 01.12.2021
			Если id41032 Тогда
				НовЗаявка.НомерСделкиБ24 = ПолучитьНомерСделкиИзЗаметок(Элемент.notes);
			КонецЕсли; 
			НовЗаявка.НомерИсходногоЗаказа = ПолучитьНомерИсходногоЗаказа(Элемент.notes);
			//АТС
			//Элемент.notes - массив заметок к заказу 
			//НовЗаявка.ТипДоставки = Элемент.deliveryType;
			НовЗаявка.ТипОплаты = Элемент.paymentType;//Наличный (Элемент.paymentTypeId="2920") Электронный (2921) Безналичный расчет  (2985)
			Если НовЗаявка.ТипОплаты = "Оплата не выбрана" Тогда
				НовЗаявка.ТипОплаты = "";
			КонецЕсли;
			Если НовЗаявка.ИдентификаторКонтрагента <> ИдентификаторГостя И НовЗаявка.АдресДоставки = "" Тогда//у гостя уже сделали
				НовЗаявка.АдресДоставки = Элемент.deliveryAddress;//самовывоз или наш адрес или другой адрес
			КонецЕсли;
			Если НовЗаявка.НомерИсходногоЗаказа<>0 Тогда
				НовЗаявка.ЗаказКлиента = НайтиЗаявку(НовЗаявка.НомерИсходногоЗаказа, Дата(НовЗаявка.ДатаЗаявки));
				Если НумерацияЗаказовКакВABCP И ЗначениеЗаполнено(НовЗаявка.ЗаказКлиента) Тогда //меняем нужные реквизиты на новый номер
					НомерЗаявкиСтрокой = Формат(НовЗаявка.НомерЗаявки,"ЧГ=0");
					Если НовЗаявка.ЗаказКлиента.Номер<>НомерЗаявкиСтрокой Тогда
						ЗаписьВЛог(""+НовЗаявка.ЗаказКлиента.Номер+"->"+НомерЗаявкиСтрокой);
						Об = НовЗаявка.ЗаказКлиента.ПолучитьОбъект();
						Об.Номер = НомерЗаявкиСтрокой;
						Об.НомерПоДаннымКлиента = НомерЗаявкиСтрокой;
						Об.ОбменДанными.Загрузка = Истина;
						Попытка
							Об.Записать();
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НовЗаявка.ЗаказКлиента) Тогда
				НовЗаявка.ЗаказКлиента = НайтиЗаявку(НовЗаявка.НомерЗаявки, Дата(НовЗаявка.ДатаЗаявки));
			КонецЕсли;
			НовЗаявка.СтоимостьДоставки = Элемент.deliveryCost;
			Если НовЗаявка.deliveryTypeId = "-1" Тогда
				Если ПолучатьАдресДоставки Тогда
					НовЗаявка.АдресДоставки = ПолучитьАдресДоставки(НовЗаявка.ИдентификаторКонтрагента);
				КонецЕсли;
				Если НовЗаявка.АдресДоставки = "" Или НЕ ПолучатьАдресДоставки Тогда
					Если Элемент.Свойство("additional") Тогда
						additional = Элемент.additional;
						Адрес = "";
						Если additional.Свойство("yandexDeliveryParams") Тогда
							yandexDeliveryParams = additional.yandexDeliveryParams;
							city = yandexDeliveryParams.city;//город
							methodName = yandexDeliveryParams.methodName;//DPD, курьером до двери",
							methodCost = yandexDeliveryParams.methodCost;// цена доставки
							methodType = yandexDeliveryParams.methodType;//TODOOR,
							НовЗаявка.methodName = methodName;
							НовЗаявка.methodCost = methodCost;
							НовЗаявка.methodType = methodType;
							street = yandexDeliveryParams.street;//улица
							house = yandexDeliveryParams.house;//дом
							apartment = yandexDeliveryParams.apartment;//квартира
							zipCode = yandexDeliveryParams.zipCode;//индекс
							firstName = yandexDeliveryParams.firstName;//полное имя
							lastName = yandexDeliveryParams.lastName;//совпадает с пред
							mobile = yandexDeliveryParams.mobile;//представление № телефона с +7(...)...
							Адрес = ""+zipCode+","+city+","+street+","+house+","+apartment;
						КонецЕсли;
						НовЗаявка.АдресДоставки = Адрес;
						Если additional.Свойство("totalWeight") Тогда
							НовЗаявка.totalWeight = additional.totalWeight;
						Конецесли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//НовЗаявка.АдресДоставки = Элемент.deliveryAddress;
			ОбновлятьБаланс = Ложь;
			СинхронизироватьСтатусЗаявок = Ложь;
			
			СтрокВЗаказе = 0;
			ПорядковыйНомерЗаявки = ПорядковыйНомерЗаявки + 1;
			//СтруктураИндикатора.ПорядковыйНомерЗаявки = ПорядковыйНомерЗаявки;
			//ПоместитьВоВременноеХранилище(СтруктураИндикатора, АдресХранилищаИндикатора);
			Для Каждого Позиция Из Элемент.positions Цикл			
				Если ОтбиратьПоПоставщику И Позиция.distributorId <> ОтборПоПоставщикуСтрокой Тогда
					Продолжить;
				КонецЕсли;
				Если ОрганизацияПоСкладу Тогда
					НовЗаявка.Организация = ОрганизацияПоПоставщику.Получить(Число(Позиция.distributorId));
					НовЗаявка.ОрганизацияВПоступлении = ОрганизацияПоИсходномуПоставщику.Получить(Число(Позиция.distributorId));
				КонецЕсли;
				//организация ещё по типу оплаты paymentTypeId заполняется после загрузки всех заявок
				Если Не ЗначениеЗаполнено(НовЗаявка.Организация) Тогда
					НовЗаявка.Организация = Организация;//но может быть розничный клиент
					Если ЗначениеЗаполнено(НовЗаявка.Контрагент) Тогда
						Если НовЗаявка.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
							НовЗаявка.Организация = ОрганизацияРозница;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				statusCode = Число(Позиция.statusCode);
				Если ОтборЗагружаемыхПозиций И МассивЗагружаемыхСтатусов.Найти(statusCode) = Неопределено Тогда
					Продолжить;//добавляем только те позиции, у которых есть нужный нам статус
				КонецЕсли;
				Если НеЗагружатьОтказы И (statusCode = КодСтатусаОтказ) Тогда
					Продолжить;
				КонецЕсли;
				Если МассивНеЗагружаемыхпоставщиков.Найти(Число(Позиция.distributorId)) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если УдалятьНедопустимыеСимволыИзНаименования Тогда
					Наименование = Позиция.description;
					Результат = "";
					Для НС = 1 По СтрДлина(Наименование) Цикл
						Символ = Сред(Наименование,НС,1);
						Если КодСимвола(Символ) > 31 Тогда
							Результат = Результат + Символ;
						КонецЕсли;
					КонецЦикла;
					Если СтрДлина(Результат) <> СтрДлина(Наименование) Тогда
						Если Отладка Тогда
							сообщить("Удалены нечитаемые символы из наименования "+Результат);
						КонецЕсли;
						Позиция.description = Результат;
					КонецЕсли;
				КонецЕсли;

				Если ЗагружатьОчищенныеАртикулы Тогда
					НомерДетали = Позиция.numberFix;
				Иначе
					НомерДетали = Позиция.number;
				КонецЕсли;
				НаименованиеБренда = СокрЛП(Позиция.brand);
				//проблема, есть деталь и REANAULT и RVI, в этой логике принудительноставится синоним RVI, надо подумать, как искать с приоритетом основного и вспомогательного бренда
				Если ИспользоватьСинонимыБрендов Тогда
					//СоответствиеСинонимов = Новый Соответствие;
					Производитель = СоответствиеБрендПроизводитель.Получить(НаименованиеБренда);
					Если НЕ ЗначениеЗаполнено(Производитель) Тогда
						Производитель = СоответствиеСинонимПроизводитель.Получить(НаименованиеБренда);
						Если НЕ ЗначениеЗаполнено(Производитель) Тогда
							Производитель = НайтиДобавитьПроизводитель(НаименованиеБренда);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Производитель = НайтиДобавитьПроизводитель(НаименованиеБренда);
					Если ПроизводительВБренде Тогда
						Марка = НайтиДобавитьМарку(НаименованиеБренда);
					КонецЕсли;
				КонецЕсли;
				Номенклатура = НайтиДобавитьНоменклатуруПоАртикулу(СокрЛП(НомерДетали), Производитель, Позиция,,СинхронизироватьНоменклатуру,НовЗаявка.НомерЗаявки, Марка);
				Если СинхронизироватьНоменклатуру = Истина И Не ЗначениеЗаполнено(Номенклатура) Тогда
					Продолжить;
				КонецЕсли;
				НовСтрока = ТаблицаНоменклатуры.Добавить();
				// ++ Алексей
				НовСтрока.КоличествоДо = Позиция.quantity;
				// -- Алексей
				НовСтрока.НомерЗаявки = НовЗаявка.НомерЗаявки;
				НовСтрока.Производитель = Производитель;
				НовСтрока.НомерДетали = НомерДетали;
				НовСтрока.numberFix = Позиция.numberFix;
				НовСтрока.number = Позиция.number;
				НовСтрока.Описание = Позиция.description;
				//НовСтрока.Количество = Позиция.quantity;
				НовСтрока.Количество = Позиция.quantityFinal;//если менялось 
				НовСтрока.Номенклатура = Номенклатура;
				НовСтрока.ИдентификаторНоменклатуры = Позиция.id;
				НовСтрока.ЦенаЗакупки = Позиция.priceIn;
				НовСтрока.ЦенаПродажи = Позиция.priceInSiteCurrency;//priceOut;
				Если ЦеныПродажиВРублях Тогда
					НовСтрока.ЦенаПродажи = Позиция.priceOut;
				КонецЕсли;
				Если НовСтрока.ЦенаПродажи = 0 Тогда
					НовСтрока.ЦенаПродажи = Позиция.oldPriceOut;
				КонецЕсли; 
				НовСтрока.Сумма = НовСтрока.ЦенаПродажи * НовСтрока.Количество;//Позиция.priceInSiteCurrency;
				//НовСтрока.Статус = Позиция.status;
				НовСтрока.КодСтатуса = Позиция.statusCode;
				НовСтрока.КодСтатусаСайт = Позиция.statusCode;//зачем, забыл, потом разберусь
				ЗаполнитьЗначенияСвойств(НовСтрока, Позиция, "priceRate,priceInSiteCurrency,currencyInId,currencyOutId,isCanceled,brand,brandFix,oldPriceOut");
				Если Позиция.Свойство("articleCode") Тогда
					НовСтрока.articleCode = Позиция.articleCode;
				КонецЕсли;
				Если Позиция.Свойство("clientOrderNumber") Тогда
					НовСтрока.clientOrderNumber = Позиция.clientOrderNumber;
				КонецЕсли;
				Если Позиция.Свойство("distributorOrderId") Тогда
					НовСтрока.distributorOrderId = Позиция.distributorOrderId;
				КонецЕсли;
				Если Позиция.Свойство("weight") Тогда
					НовСтрока.weight = Позиция.weight;
				КонецЕсли;
				Если Позиция.Свойство("volume") Тогда
					НовСтрока.volume = Позиция.volume;
				КонецЕсли;
				//garageCarId
				Если Позиция.currencyInId <> 1 Тогда
					Если НЕ ЦеныЗакупкиВРублях Тогда
						НовСтрока.ЦенаЗакупки = Позиция.priceIn * Позиция.priceRate;
					КонецЕсли;
				КонецЕсли;
				//если не надо создавать заявку покупателя, устанавливаем соответствующий признак
				НайденнаяСтрокаСтатуса = ТаблицаСтатусов.Найти(НовСтрока.КодСтатуса,"КодСтатуса");
				//уже раньше проверка была Если НеЗагружатьОтказы И (statusCode = КодСтатусаОтказ) Тогда
				//если в одной заявке есть статусы, по которым создается заявка, и по которым не создается, надо создавать заявку
				//Если НайденнаяСтрокаСтатуса<>Неопределено Тогда
				//	Если НайденнаяСтрокаСтатуса.СоздаватьЗаявкуПокупателя Тогда
				//		НовЗаявка.СоздаватьЗаявкуПокупателя = Истина;
				//	Иначе
				//		//иначе отказы не загружаются
				//		Если НеЗагружатьОтказы = Ложь И НовСтрока.КодСтатуса = КодСтатусаОтказ Тогда
				//			НовЗаявка.СоздаватьЗаявкуПокупателя = Ложь;//Истина;
				//		//Иначе
				//			НовЗаявка.НеСоздаватьЗаявкуПокупателя = Истина;
				//		КонецЕсли;
				//		//Продолжить;
				//	КонецЕсли;
				//Иначе
				//	//НовЗаявка.НеСоздаватьЗаявкуПокупателя = Истина;//попался неизвестный статус, игнорируем
				//КонецЕсли;
				Если НовСтрока.КодСтатуса = КодСтатусаНовый Тогда //если хотя бы у одной позиции код статуса "Новый", тогда это новая заявка
					НовЗаявка.НоваяЗаявка = Истина;
				Конецесли;			
				НовСтрока.СтатусСайт = Позиция.status;
				НовСтрока.dateUpdated = ПреобразоватьИзСтрокиВДату(Позиция.dateUpdated);
				НовЗаявка.ДатаОбновленияПозиций = Макс(НовЗаявка.ДатаОбновленияПозиций-СмещениеЧасовогоПояса*3600, НовСтрока.dateUpdated);
				ЗаполнитьЗначенияСвойств(НовСтрока,Позиция,"distributorId,distributorName,distributorOrderId,deadline,deadlineMax,lineReference,comment,commentAnswer,weight,routeId");
				Если НовСтрока.deadlineMax = 0 Тогда
					НовСтрока.deadlineMax = НовСтрока.deadline;
				КонецЕсли;
				//проверяем, есть ли замена поставщика
				НовСтрока.ИсходныйdistributorId = НовСтрока.distributorId;//так как основной поставщик может изменяться
				ИдентификаторОсновногоПоставщика = СоответствиеПоставщиков.Получить(НовСтрока.distributorId);
				//СоответствиеОсновногоПоставщика.Вставить(СтрокаНашихСкладов.ИдентификаторПоставщика, СтрокаНашихСкладов.ИдентификаторОсновногоПоставщика);

				distributorIdЧислом = Число(Позиция.distributorId);
				Если ИдентификаторОсновногоПоставщика <> Неопределено Тогда
					Если Отладка Тогда
						сообщить("Ид поставщика "+НовСтрока.distributorId+" изменен на "+ИдентификаторОсновногоПоставщика);
					КонецЕсли;
					НовСтрока.distributorId = ИдентификаторОсновногоПоставщика;
					врем = СоглашениеПоПоставщику.Получить(distributorIdЧислом);
					Если ЗначениеЗаполнено(врем) Тогда
						НовСтрока.Соглашение = врем;
					КонецЕсли;
				КонецЕсли;
				врем = СоглашениеПоИсходномуПоставщику.Получить(distributorIdЧислом);
				Если ЗначениеЗаполнено(врем) Тогда
					НовСтрока.Соглашение = врем;
				КонецЕсли;
				врем = ОрганизацияПоИсходномуПоставщику.Получить(distributorIdЧислом);
				Если ЗначениеЗаполнено(врем) Тогда
					НовСтрока.ОрганизацияВПоступлении = врем;
				КонецЕсли;
				
				//вместо этого вызывается ДозаполнитьРеквизитыТаблицыНоменклатуры
				//Если ЗаполнятьСкладПоПоставщику Тогда //НЕ ЗначениеЗаполнено(НовСтрока.Склад) 
				//	ВремСклад = СкладыПоПоставщику.Получить(НовСтрока.distributorId);
				//	Если Отладка И ФильтрПоЗаявке > 0 Тогда
				//		сообщить(""+НовСтрока.numberFix+"	"+ВремСклад+", в дальнейшем может поменяться из-за настроек склада или офиса");
				//	КонецЕсли;
				//	Если ЗначениеЗаполнено(ВремСклад) Тогда
				//		НовСтрока.Склад = ВремСклад;
				//	КонецЕсли;
				//КонецЕсли;
				//Если НЕ ЗначениеЗаполнено(НовСтрока.Склад) Тогда
				//	НовСтрока.Склад = СоответствиеНашиСклады.Получить(НовСтрока.distributorId);//здесь склад, если стоит галочка "Наш склад"
				//КонецЕсли;
				////если заполняется склад по офису. то этот код ниже
				//Если ЗначениеЗаполнено(НовСтрока.Склад) Тогда
				//	Если НЕ ПроверятьНаличиеНашихПозиций Тогда
				//		НовСтрока.ВариантОбеспечения = СоответствиеВариантыОбеспеченияПоСтатусам.Получить(НовСтрока.КодСтатуса);
				//	Иначе
				//		НовСтрока.ВариантОбеспечения = СоответствиеВариантыОбеспеченияПоСтатусам.Получить(НовСтрока.КодСтатуса);
				//		//наверное, не надо НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				//	КонецЕсли;
				//Иначе
				//	НовСтрока.Склад = Склад;
				//	Если НЕ ПроверятьНаличиеНашихПозиций Тогда
				//		НовСтрока.ВариантОбеспечения = СоответствиеВариантыОбеспеченияПоСтатусам.Получить(НовСтрока.КодСтатуса);
				//	Иначе
				//		НовСтрока.ВариантОбеспечения = СоответствиеВариантыОбеспеченияПоСтатусам.Получить(НовСтрока.КодСтатуса);
				//	КонецЕсли;
				//КонецЕсли;
				//Если ЗначениеЗаполнено(ВариантОбеспеченияСНаличия) И МассивНашихСкладов.Найти(НовСтрока.distributorId) <> Неопределено Тогда
				//	НовСтрока.ВариантОбеспечения = ВариантОбеспеченияСНаличия;//если позиция заказывается с нашего склада, то ставим выбранный вариант, обычно "Отгрузить"
				//КонецЕсли;
				//
				//Если Не ЗначениеЗаполнено(НовЗаявка.Склад) Тогда
				//	НовЗаявка.Склад = НовСтрока.Склад;
				//ИначеЕсли Не НовЗаявка.Склад.ЭтоГруппа Тогда //если несколько складов в заявке, то выбираем их родителя
				//	Если НовЗаявка.Склад <> НовСтрока.Склад Тогда
				//		Если ЗначениеЗаполнено(НовСтрока.Склад.Родитель) Тогда
				//			НовЗаявка.Склад = НовСтрока.Склад.Родитель;
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЕсли;
				//ВариантОбеспеченияНашегоСклада = СоответствиеНашиСкладыВариантОбеспечения.Получить(НовСтрока.distributorId);
				//Если ЗначениеЗаполнено(ВариантОбеспеченияНашегоСклада) Тогда
				//	НовСтрока.ВариантОбеспечения = ВариантОбеспеченияНашегоСклада;
				//КонецЕсли;
				//Если Не ЗначениеЗаполнено(НовСтрока.ВариантОбеспечения) Тогда
				//	Если НЕ УТ115 И НЕ УТ112 И НЕ УТКазахстан И НЕ (КА И Подверсия1 = 2 И Подверсия2 = 5) Тогда
				//		НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;//К обеспечению;
				//	Иначе
				//		Попытка
				//			НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Кобеспечению;
				//		Исключение
				//			Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
				//				НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;//К обеспечению;
				//			КонецЕсли;
				//		КонецПопытки;
				//	КонецЕсли;
				//КонецЕсли;
				СтрокВЗаказе = СтрокВЗаказе + 1;
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(НовЗаявка.ДатаОбновленияПозиций) Тогда
				НовЗаявка.ДатаОбновленияПозиций = НовЗаявка.dateUpdated;
			КонецЕсли;
			Если СтрокВЗаказе = 0 Тогда //если все позиции отменены или отказ поставщика, то убираем вообще заявку
				ТаблицаЗаявок.Удалить(НовЗаявка);
			КонецЕсли;
			Если Отладка И ФильтрПоЗаявке > 0 Тогда
				сообщить(""+НовСтрока.numberFix+"	"+НовСтрока.Склад);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;//цикл по skip
	//ОтключитьОбработчикОжидания("ОболочкаОбработчика");
	
	СоздатьНенайденныхКонтрагентовПоИдентификаторам(НенайденныеКонтрагенты);
	
	ДозаполнитьРеквизитыТаблицыНоменклатуры();
	
	ДозаполнитьРеквизитыТаблицыЗаявок();
	//Если ПредлагатьСНаличия Или АвтоматическиМенятьНаНаличие Тогда
	//	//заполняем Наличие ЦенаЗакупкиСклад ЦенаПродажиСклад
	//	СписокНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	//	ПолучитьОстатки(Неопределено, ВидЦены, Склад, СписокНоменклатуры);
	//	//Если ТЗОстатки.Количество()<>0 Тогда
	//	//	Для Каждого ТекСтрока Из ТЗНоменклатура Цикл
	//	//		СтруктураПоискаПоИдентификатору.ИдентификаторНоменклатуры = ТекСтрока.ИдентификаторНоменклатуры;
	//	//		НайденныеСтроки = ТаблицаНаличия.НайтиСтроки(СтруктураПоискаПоИдентификатору);
	//	//		Если НайденныеСтроки.Количество() > 0 Тогда
	//	//			Продолжить;
	//	//		КонецЕсли;
	//	//		СтруктураПоиска.Ссылка = ТекСтрока.Номенклатура;
	//	//		НайденныеСтроки = ТЗОстатки.НайтиСтроки(СтруктураПоиска);
	//	//		Если НайденныеСтроки.Количество() > 0 Тогда
	//	//			НайденнаяСтрока = НайденныеСтроки[0];
	//	//			ЦенаПродажиСклад = Ценообразование.ПолучитьЦенуНоменклатуры(НайденнаяСтрока.Ссылка, Неопределено, ТипЦенПродажи, ТекущаяДата(), , , , , , ,);
	//	//			ТекСтрока.ЦенаПродажиСклад = ЦенаПродажиСклад;
	//	//			ТекСтрока.Наличие = НайденнаяСтрока.Наличие; 
	//	//			ТекСтрока.ЦенаЗакупкиСклад = НайденнаяСтрока.Цена;
	//	//			Если (ЦенаПродажиСклад < ТекСтрока.ЦенаПродажи) И (НайденнаяСтрока.Наличие >= ТекСтрока.Количество) Тогда
	//	//				НоваяСтрокаНаличия = ТаблицаНаличия.Добавить();
	//	//				//НоваяСтрокаНаличия.Изменять = Ложь;
	//	//				ЗаполнитьЗначенияСвойств(НоваяСтрокаНаличия, ТекСтрока, "Номенклатура, НомерДетали, Бренд, Количество, Наличие, ЦенаЗакупкиСклад, ЦенаЗакупки, ЦенаПродажиСклад, ЦенаПродажи, ИдентификаторНоменклатуры"); 
	//	//			//Если (НайденнаяСтрока.Цена < ТекСтрока.ЦенаЗакупки) И (НайденнаяСтрока.Наличие >= ТекСтрока.Количество) Тогда
	//	//				сообщить("В заявке № "+ТекСтрока.НомерЗаявки+" у номенклатуры "+ТекСтрока.Номенклатура+" цена в наличии "+НайденнаяСтрока.Цена+" меньше чем в заказе "+ТекСтрока.ЦенаЗакупки);
	//	//			КонецЕсли;
	//	//		КонецЕсли;
	//	//	КонецЦикла;
	//	//КонецЕсли;
	//	Если ВызовИзФормы И ПредлагатьСНаличия Тогда
	//		//надо форму другую вызывать модально
	//		//курсы-по-1с.рф/news/отказ-от-модальных-окон-в-1с-8-3/ - но вынести этот вызов в форму
	//		//ТЗЗаявкиМодуль = ТЗЗаявки.Выгрузить();
	//		//ТЗНоменклатураМодуль = ТЗНоменклатура.Выгрузить();
	//	КонецЕсли;
	//	Если АвтоматическиМенятьНаНаличие Тогда
	//		//автоматически меняем и выгружаем на сайт
	//	КонецЕсли;
	//	//Если ПредлагатьСНаличия Или АвтоматическиМенятьНаНаличие Тогда
	//	//заполняем остатки номенклатуры, по заполненным позициям, и выводим или отчет, или спрашиваем
	//КонецЕсли;
КонецПроцедуры //ЗаполнитьТаблицуЗаявокССайта

Процедура СоздатьНенайденныхКонтрагентовПоИдентификаторам(Знач НенайденныеКонтрагенты)
	//создаем ненайденных контрагентов
	Если НенайденныеКонтрагенты.Количество()>0 Тогда
		//cp/users - есть параметр customersIds, в который можно передать список не найденных контрагентов и добавить их
		//http://api.demo.abcp.ru/cp/users?userlogin=username&userpsw=md5pass&customersIds[]=574823&customersIds[]=86954&customersIds[]=56234786
		СвернутыеИдентификаторы = НенайденныеКонтрагенты.Скопировать(,"ИдентификаторКонтрагента");
		СвернутыеИдентификаторы.Свернуть("ИдентификаторКонтрагента",);
		Если СвернутыеИдентификаторы.Количество()>49 Тогда
			ПереченьИдентификаторов = "";
			НС = 0;
			Для Каждого ТекСтрока Из СвернутыеИдентификаторы Цикл
				ПереченьИдентификаторов = ПереченьИдентификаторов + "&customersIds[]="+Формат(ТекСтрока.ИдентификаторКонтрагента, "ЧГ=0");
				НС = НС + 1;
				Если НС % 50 = 0 Тогда
					ЗаполнитьТаблицуКлиентовССайта(СинхронизироватьКонтрагентов, ПереченьИдентификаторов, СвернутыеИдентификаторы);//автоматически добавляем не найденных контрагентов
					ПереченьИдентификаторов = "";
					//заново проходим по заявкам и заполняем созданными контрагентами
					Структура = Новый Структура("НомерЗаявки");
					Для Каждого ТекСтрока Из НенайденныеКонтрагенты Цикл
						Структура.НомерЗаявки = ТекСтрока.НомерЗаявки;
						НайденныеСтроки = ТаблицаЗаявок.НайтиСтроки(Структура);
						Если НайденныеСтроки.Количество() > 0 Тогда
							Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
								НайденнаяСтрока.Контрагент = ТекСтрока.Контрагент;
								Если ИспользоватьМенеджераИзКарточкиКонтрагента Тогда
									Если ЗначениеЗаполнено(НайденнаяСтрока.Контрагент.Партнер.ОсновнойМенеджер) Тогда
										НайденнаяСтрока.Ответственный = НайденнаяСтрока.Контрагент.Партнер.ОсновнойМенеджер;
									КонецЕсли;
								КонецЕсли;
								Если НайденнаяСтрока.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
									НайденнаяСтрока.Организация = ОрганизацияРозница;
								Иначе
									НайденнаяСтрока.Организация = Организация;
								КонецЕсли;
								Если НЕ ЗаменятьТолькоРозничныхПокупателей И ЗначениеЗаполнено(ОсновнойПокупатель) И ЗначениеЗаполнено(НайденнаяСтрока.Контрагент) И НайденнаяСтрока.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
									Если Отладка Тогда
										сообщить("Заменяем розничного клиента на "+ОсновнойПокупатель);
									КонецЕсли;
									НайденнаяСтрока.Контрагент = ОсновнойПокупатель;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			//хвостик туда же
			Если ПереченьИдентификаторов <> "" Тогда
				Если СинхронизироватьКонтрагентов Тогда
					ЗаполнитьТаблицуКлиентовССайта(СинхронизироватьКонтрагентов, ПереченьИдентификаторов, СвернутыеИдентификаторы);//автоматически добавляем не найденных контрагентов
				Иначе
					Если ЗначениеЗаполнено(НенайденныйКлиент) Тогда
						ЗаполнитьТаблицуКлиентовССайта(Ложь, ПереченьИдентификаторов, СвернутыеИдентификаторы);//автоматически добавляем не найденных контрагентов
					КонецЕсли;
				КонецЕсли;
				//заново проходим по заявкам и заполняем созданными контрагентами
				Структура = Новый Структура("НомерЗаявки");
				Для Каждого ТекСтрока Из НенайденныеКонтрагенты Цикл
					Структура.НомерЗаявки = ТекСтрока.НомерЗаявки;
					НайденныеСтроки = ТаблицаЗаявок.НайтиСтроки(Структура);
					Если НайденныеСтроки.Количество() > 0 Тогда
						Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							НайденнаяСтрока.Контрагент = ТекСтрока.Контрагент;
							Если НайденнаяСтрока.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
								НайденнаяСтрока.Организация = ОрганизацияРозница;
							Иначе
								НайденнаяСтрока.Организация = Организация;
							КонецЕсли;
							Если ТекСтрока.Контрагент = НенайденныйКлиент Тогда
								НСтроки = ТаблицаКлиентов.НайтиСтроки(Новый Структура("ИдентификаторКонтрагента", ТекСтрока.ИдентификаторКонтрагента));
								Для Каждого НСтрока Из НСтроки Цикл
									НайденнаяСтрока.Комментарий = НайденнаяСтрока.Комментарий + " " + НСтрока.ЮридическийАдрес + " " + НСтрока.email + " " + НСтрока.МобильныйТелефон;// + " "+НСтрока.registrationDate;
									Прервать;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПереченьИдентификаторов = "";
			Для Каждого ТекСтрока Из СвернутыеИдентификаторы Цикл
				ПереченьИдентификаторов = ПереченьИдентификаторов + "&customersIds[]="+Формат(ТекСтрока.ИдентификаторКонтрагента, "ЧГ=0");
			КонецЦикла;
			//ЗаполнитьТаблицуКлиентовССайта(Ложь, ПереченьИдентификаторов = "")
			//возможно еще стоит добавить синхронизацию менеджеров, у них другие идентификаторы и они добавляются по-другому !!!
			ЗаполнитьТаблицуКлиентовССайта(СинхронизироватьКонтрагентов, ПереченьИдентификаторов, СвернутыеИдентификаторы);//автоматически добавляем не найденных контрагентов
			//заново проходим по заявкам и заполняем созданными контрагентами
			Структура = Новый Структура("НомерЗаявки");
			Для Каждого ТекСтрока Из НенайденныеКонтрагенты Цикл
				Структура.НомерЗаявки = ТекСтрока.НомерЗаявки;
				НайденныеСтроки = ТаблицаЗаявок.НайтиСтроки(Структура);
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НайденнаяСтрока.Контрагент = ТекСтрока.Контрагент;
						Если НайденнаяСтрока.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
							НайденнаяСтрока.Организация = ОрганизацияРозница;
						Иначе
							НайденнаяСтрока.Организация = Организация;
						КонецЕсли;
						Если ТекСтрока.Контрагент = НенайденныйКлиент Тогда
							НСтроки = ТаблицаКлиентов.НайтиСтроки(Новый Структура("ИдентификаторКонтрагента", ТекСтрока.ИдентификаторКонтрагента));
							Для Каждого НСтрока Из НСтроки Цикл
								НайденнаяСтрока.Комментарий = НайденнаяСтрока.Комментарий + " " + НСтрока.ЮридическийАдрес + " " + НСтрока.email + " " + НСтрока.МобильныйТелефон;// + " "+НСтрока.registrationDate;
								Прервать;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДозаполнитьРеквизитыТаблицыНоменклатуры()
	СтруктураНомерЗаявки = Новый Структура("НомерЗаявки");
	Для Каждого НовСтрока Из ТаблицаНоменклатуры Цикл
		НовСтрока.Поставщик = СоответствиеПоставщиковПоДополнительномуКоду.Получить(НовСтрока.distributorId);
		Если НЕ ЗначениеЗаполнено(НовСтрока.Поставщик) Тогда
			НовСтрока.Поставщик = НайтиКонтрагентаПоИдентификатору(НовСтрока.distributorId, "distributorId (Контрагенты)", НовСтрока.distributorName);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовСтрока.Поставщик) Тогда //так как универсальная процедура, то отключаем ненужное информирование
			Если НенайденныеПоставщики.НайтиПоЗначению(НовСтрока.distributorId) = Неопределено Тогда
				ТекстСообщения = СокрЛП(НовСтрока.orderid)+", ошибка: Не удалось сопоставить поставщика с ид = "+СокрЛП(НовСтрока.distributorId)+", «"+НовСтрока.distributorName+"» с контрагентом, заказы поставщикам не будут созданы";
				Если СинхронизироватьПоставщиков Тогда
					ЗаписьВЛог(ТекстСообщения,5,Истина);
				Иначе
				КонецЕсли;
				//СоздаватьЗаказыПоставщикам = Ложь;
				НенайденныеПоставщики.Добавить(НовСтрока.distributorId);
			КонецЕсли;
		КонецЕсли;

		
		Если ЗаполнятьСкладПоПоставщику Тогда //НЕ ЗначениеЗаполнено(НовСтрока.Склад) 
			ВремСклад = СкладыПоПоставщику.Получить(НовСтрока.distributorId);
			Если Отладка И ФильтрПоЗаявке > 0 Тогда
				сообщить(""+НовСтрока.numberFix+"	"+ВремСклад+", в дальнейшем может поменяться из-за настроек склада или офиса");
			КонецЕсли;
			Если ЗначениеЗаполнено(ВремСклад) Тогда
				НовСтрока.Склад = ВремСклад;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовСтрока.Склад) Тогда
			НовСтрока.Склад = СоответствиеНашиСклады.Получить(НовСтрока.distributorId);//здесь склад, если стоит галочка "Наш склад"
		КонецЕсли;
		//если заполняется склад по офису. то этот код ниже
		Если ЗначениеЗаполнено(НовСтрока.Склад) Тогда
			Если НЕ ПроверятьНаличиеНашихПозиций Тогда
				НовСтрока.ВариантОбеспечения = СоответствиеВариантыОбеспеченияПоСтатусам.Получить(НовСтрока.КодСтатуса);
			Иначе
				НовСтрока.ВариантОбеспечения = СоответствиеВариантыОбеспеченияПоСтатусам.Получить(НовСтрока.КодСтатуса);
				//наверное, не надо НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			КонецЕсли;
		Иначе
			НовСтрока.Склад = Склад;
			Если НЕ ПроверятьНаличиеНашихПозиций Тогда
				НовСтрока.ВариантОбеспечения = СоответствиеВариантыОбеспеченияПоСтатусам.Получить(НовСтрока.КодСтатуса);
			Иначе
				НовСтрока.ВариантОбеспечения = СоответствиеВариантыОбеспеченияПоСтатусам.Получить(НовСтрока.КодСтатуса);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВариантОбеспеченияСНаличия) И МассивНашихСкладов.Найти(НовСтрока.distributorId) <> Неопределено Тогда
			НовСтрока.ВариантОбеспечения = ВариантОбеспеченияСНаличия;//если позиция заказывается с нашего склада, то ставим выбранный вариант, обычно "Отгрузить"
		КонецЕсли;
		
		СтруктураНомерЗаявки.НомерЗаявки = НовСтрока.orderId;
		НСтроки = ТаблицаЗаявок.НайтиСтроки(СтруктураНомерЗаявки);
		Если НСтроки.Количество() > 0 Тогда
			НовЗаявка = НСтроки[0];
			Если Не ЗначениеЗаполнено(НовЗаявка.Склад) Тогда
				НовЗаявка.Склад = НовСтрока.Склад;
			ИначеЕсли Не НовЗаявка.Склад.ЭтоГруппа Тогда //если несколько складов в заявке, то выбираем их родителя
				Если НовЗаявка.Склад <> НовСтрока.Склад Тогда
					Если ЗначениеЗаполнено(НовСтрока.Склад.Родитель) Тогда
						НовЗаявка.Склад = НовСтрока.Склад.Родитель;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ВариантОбеспеченияНашегоСклада = СоответствиеНашиСкладыВариантОбеспечения.Получить(НовСтрока.distributorId);
		Если ЗначениеЗаполнено(ВариантОбеспеченияНашегоСклада) Тогда
			НовСтрока.ВариантОбеспечения = ВариантОбеспеченияНашегоСклада;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовСтрока.ВариантОбеспечения) Тогда
			Если НЕ УТ115 И НЕ УТ112 И НЕ УТКазахстан И НЕ (КА И Подверсия1 = 2 И Подверсия2 = 5) Тогда
				НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;//К обеспечению;
			Иначе
				Попытка
					НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Кобеспечению;
				Исключение
					Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
						НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;//К обеспечению;
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ДозаполнитьРеквизитыТаблицыНоменклатуры()
	
Процедура ДозаполнитьРеквизитыТаблицыЗаявок()
	//СоответствиеОфисов = Новый Соответствие;
	Если ТаблицаЗаявок.Количество()>0 Тогда
		СоответствиеПодразделенияСкладу = Новый Соответствие;
		СоответствиеПодразделенияОфису = Новый Соответствие;
		СоответствиеМенеджераОфису = Новый Соответствие;
		СоответствиеМенеджераСкладу = Новый Соответствие;
		СоответствиеОрганизацииОфису = Новый Соответствие;
		СоответствиеОрганизацииТипуОплаты = Новый Соответствие;
		СоответствиеСкладаОфису = Новый Соответствие;
		СоответствиеСтавкиНДСОфису = Новый Соответствие;
		Для Каждого СтрокаОфиса Из ТаблицаОфисов Цикл
			Если ЗначениеЗаполнено(СтрокаОфиса.Ответственный) Тогда
				СоответствиеМенеджераОфису.Вставить(СтрокаОфиса.id, СтрокаОфиса.Ответственный);
				СоответствиеМенеджераСкладу.Вставить(СтрокаОфиса.Склад, СтрокаОфиса.Ответственный);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаОфиса.Подразделение) Тогда
				СоответствиеПодразделенияСкладу.Вставить(СтрокаОфиса.Склад, СтрокаОфиса.Подразделение);
				СоответствиеПодразделенияОфису.Вставить(СтрокаОфиса.id, СтрокаОфиса.Подразделение);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаОфиса.Организация) Тогда
				СоответствиеОрганизацииОфису.Вставить(СтрокаОфиса.id, СтрокаОфиса.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаОфиса.Склад) Тогда
				СоответствиеСкладаОфису.Вставить(СтрокаОфиса.id, СтрокаОфиса.Склад);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаОфиса.СтавкаНДС) Тогда
				СоответствиеСтавкиНДСОфису.Вставить(СтрокаОфиса.id, СтрокаОфиса.СтавкаНДС);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТипыПлатежей Из ТипыПлатежей Цикл
			Если ЗначениеЗаполнено(СтрокаТипыПлатежей.Организация) Тогда
				СоответствиеОрганизацииТипуОплаты.Вставить(СтрокаТипыПлатежей.id, СтрокаТипыПлатежей.Организация);
			КонецЕсли;
		КонецЦикла;
		//заполняем соответствие менеджеров и подразделения по их коду в ABCP
		СоответствиеОтветственногоПоКодуМенеджера = Новый Соответствие;
		СоответствиеПодразделенияПоКодуМенеджера = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из ТаблицаМенеджеров Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Ответственный) Тогда
				СоответствиеОтветственногоПоКодуМенеджера.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.Ответственный);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Подразделение) Тогда
				СоответствиеПодразделенияПоКодуМенеджера.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.Подразделение);
			КонецЕсли;
		КонецЦикла;
		
		СписокЗаявок = "";
		КоличествоЗаявок = 0;
		Структура = Новый Структура("НомерЗаявки");
		СтатусЗаявок = "";
		Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
			КодСтатусаСайт = Формат(СтрокаЗаявки.КодСтатусаСайт, "ЧГ=0");
			НомерЗаявки = Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0");
			Если СтатусЗаявок="" Тогда
				СписокЗаявок = СписокЗаявок + НомерЗаявки + " ";
				КоличествоЗаявок = КоличествоЗаявок + 1;
			Иначе
				Если КодСтатусаСайт = СтатусЗаявок Тогда
					СписокЗаявок = СписокЗаявок + НомерЗаявки + " ";
					КоличествоЗаявок = КоличествоЗаявок + 1;
				КонецЕсли;
			КонецЕсли;
			Если ИспользоватьСкладИзКарточкиКонтрагента Тогда
				ТекущийСклад = СтрокаЗаявки.Склад;
				СтрокаЗаявки.Склад = ПолучитьСкладКонтрагента(СтрокаЗаявки.Контрагент);
				Если СтрокаЗаявки.Склад <> ТекущийСклад Тогда
					СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(новый структура("НомерЗаявки", СтрокаЗаявки.НомерЗаявки));
					для каждого СтрокаНоменклатуры из СтрокиНоменклатуры цикл
						СтрокаНоменклатуры.Склад = СтрокаЗаявки.Склад;
					конеццикла;
				КонецЕсли;
			Иначе
				СкладПоОфису = СоответствиеСкладаОфису.Получить(СтрокаЗаявки.deliveryOfficeId);
				Если ЗначениеЗаполнено(СкладПоОфису) Тогда
					СтрокаЗаявки.Склад = СкладПоОфису;
					Структура.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
					НСтроки = ТаблицаНоменклатуры.НайтиСтроки(Структура);
					Для Каждого НСтрока Из НСтроки Цикл
						НСтрока.Склад = СкладПоОфису;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			//если заполнена таблица соответствия офисов и складов, то подбираем по контрагенту
			СтрокаЗаявки.Подразделение = СоответствиеПодразделенияОфису.Получить(СтрокаЗаявки.deliveryOfficeId);//при самовывозе офиса нет
			Если Не ЗначениеЗаполнено(СтрокаЗаявки.Подразделение) Тогда
				СтрокаЗаявки.Подразделение = СоответствиеПодразделенияСкладу.Получить(СтрокаЗаявки.Склад);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаЗаявки.Подразделение) Тогда
				СтрокаЗаявки.Подразделение = Подразделение;
			КонецЕсли;
			МенеджерПоОфису = СоответствиеМенеджераОфису.Получить(СтрокаЗаявки.Склад);
			Если ЗначениеЗаполнено(МенеджерПоОфису) Тогда
				СтрокаЗаявки.Ответственный = МенеджерПоОфису;
			КонецЕсли;
			ЕстьОрганизацияВОфисе = Ложь;
			ОрганизацияПоОфису = СоответствиеОрганизацииОфису.Получить(СтрокаЗаявки.deliveryOfficeId);
			Если ЗначениеЗаполнено(ОрганизацияПоОфису) Тогда
				СтрокаЗаявки.Организация = ОрганизацияПоОфису;
				Если ПриоритетОрганизацииПоОфису Тогда
					ЕстьОрганизацияВОфисе = Истина;
				КонецЕсли; 
			КонецЕсли;
			ОрганизацияПоТипуОплат = СоответствиеОрганизацииТипуОплаты.Получить(СтрокаЗаявки.paymentTypeId);//ОрганизацияПоТипуОплаты есть
			Если ЕстьОрганизацияВОфисе = Ложь И ЗначениеЗаполнено(ОрганизацияПоТипуОплат) Тогда
				СтрокаЗаявки.Организация = ОрганизацияПоТипуОплат;
			КонецЕсли;
			СтавкаНДСПоОфису = СоответствиеСтавкиНДСОфису.Получить(СтрокаЗаявки.deliveryOfficeId);
			Если ЗначениеЗаполнено(СтавкаНДСПоОфису) Тогда
				СтрокаЗаявки.СтавкаНДС = СтавкаНДСПоОфису;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаЗаявки.СтавкаНДС) Тогда
				СтрокаЗаявки.СтавкаНДС = ОсновнаяСтавкаНДС;
				Если (НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) Или (НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД) Тогда
					СтрокаЗаявки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаЗаявки.managerId>0 Тогда
				Значение = СоответствиеОтветственногоПоКодуМенеджера.Получить(СтрокаЗаявки.managerId);
				Если ЗначениеЗаполнено(Значение) Тогда
					СтрокаЗаявки.Ответственный = Значение;
				КонецЕсли; 
				Значение = СоответствиеПодразделенияПоКодуМенеджера.Получить(СтрокаЗаявки.managerId);
				Если ЗначениеЗаполнено(Значение) Тогда
					СтрокаЗаявки.Подразделение = Значение;
				КонецЕсли; 
			КонецЕсли; 
			Если ЗаменятьТолькоРозничныхПокупателей И ЗначениеЗаполнено(ОсновнойПокупатель) И СтрокаЗаявки.Контрагент <> ОсновнойПокупатель Тогда
				ЮрФизЛицо = СтрокаЗаявки.Контрагент.ЮрФизЛицо;
				Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Или ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
					Если Отладка Тогда
						сообщить("Меняем розничного клиента "+СтрокаЗаявки.Контрагент+" на "+ОсновнойПокупатель);
					КонецЕсли;
					СтрокаЗаявки.Контрагент = ОсновнойПокупатель;
				КонецЕсли;
			КонецЕсли;
			СпособДоставкиВЗаявке = СоответствиеСпособаДоставкиКодуДоставки.Получить(Число(СтрокаЗаявки.deliveryTypeId));
			Если ЗначениеЗаполнено(СпособДоставкиВЗаявке) Тогда
				СтрокаЗаявки.СпособДоставки = СпособДоставкиВЗаявке;
			КонецЕсли;
			ПеревозчикПартнерДоставкиВЗаявке = СоответствиеПеревозчикПартнерКодуДоставки.Получить(Число(СтрокаЗаявки.deliveryTypeId));
			Если ЗначениеЗаполнено(ПеревозчикПартнерДоставкиВЗаявке) Тогда
				СтрокаЗаявки.ПеревозчикПартнер = ПеревозчикПартнерДоставкиВЗаявке;
			КонецЕсли;
			ЗонаДоставкиВЗаявке = СоответствиеЗонаДоставкиКодуДоставки.Получить(Число(СтрокаЗаявки.deliveryTypeId));
			Если ЗначениеЗаполнено(ЗонаДоставкиВЗаявке) Тогда
				СтрокаЗаявки.ЗонаДоставки = ЗонаДоставкиВЗаявке;
			КонецЕсли;
			//СоответствиеПеревозчикПартнерКодуДоставки.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.ПеревозчикПартнер);
			//СоответствиеЗонаДоставкиКодуДоставки.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.ЗонаДоставки);
			
		КонецЦикла;
		Если СтатусЗаявок <> "" Тогда
			СтрокаСтатус = " (статус: "+СтатусЗаявок+")";
		Иначе
			СтрокаСтатус = "";
		КонецЕсли;
		Если КоличествоЗаявок>0 Тогда
			ТекстСообщения = "Обработано заявок"+СтрокаСтатус+": "+ Формат(КоличествоЗаявок, "ЧГ=0")+" ("+СокрЛП(СписокЗаявок)+")";
		КонецЕсли;
		ЗаписьВЛог(ТекстСообщения,7);
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Информация, , ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСкладКонтрагента(Контрагент)
	//делаем по регистру сведений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект,
	               |	ДополнительныеСведения.Свойство КАК Свойство
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство.Наименование = &Наименование
	               |	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Контрагенты
	               |	И ДополнительныеСведения.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Контрагент.Ссылка);
	Запрос.УстановитьПараметр("Наименование", "Идентификатор склада контрагента (Контрагенты)");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Склад;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗначениеОфиса = Выборка.Значение;
	Если ЗначениеОфиса = Неопределено Тогда
		Возврат Склад;
	КонецЕсли;
	//ИдСкладаКонтрагента = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор склада контрагента (Контрагенты)");
	//СкладыКонтрагента = Контрагент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ИдСкладаКонтрагента));
	//Если СкладыКонтрагента.Количество() = 0 Тогда
	//	Возврат Склад;//тот, который в настройках
	//КонецЕсли;
	//ЗначениеОфиса = СкладыКонтрагента[0].Значение;
	СкладыКонтрагента = ТаблицаОфисов.НайтиСтроки(Новый Структура("id", Число(ЗначениеОфиса)));
	Если СкладыКонтрагента.Количество() = 0 Тогда
		Возврат Склад;//тот, который в настройках
	КонецЕсли;
	СкладКонтрагента = СкладыКонтрагента[0].Склад;
	Если Не ЗначениеЗаполнено(СкладКонтрагента) Тогда
		Возврат Склад;
	КонецЕсли;
	Возврат СкладКонтрагента;
КонецФункции

Функция ПолучитьТаблицуНоменклатуры() Экспорт
	//уже не нужно
	//Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаНоменклатуры.Выгрузить());
	УИ = ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры.Выгрузить());
	Возврат УИ;
КонецФункции

Функция ЗакрытЗаказПоставщикуИзРегистра(Заказ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияЗаказовПоставщикам.Заказ КАК Заказ,
		|	СостоянияЗаказовПоставщикам.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
		|ГДЕ
		|	СостоянияЗаказовПоставщикам.Заказ = &Заказ
		|	И СостоянияЗаказовПоставщикам.Состояние = &Состояние";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияЗаказовПоставщикам.Закрыт);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ЗакрытЗаказКлиентаИзРегистра(Заказ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияЗаказовКлиентов.Заказ КАК Заказ,
		|	СостоянияЗаказовКлиентов.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
		|ГДЕ
		|	СостоянияЗаказовКлиентов.Заказ = &Заказ
		|	И СостоянияЗаказовКлиентов.Состояние = &Состояние";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияЗаказовКлиентов.Закрыт);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьСоответствиеСкладаПоставщику()
	СоответствиеСкладаПоставщику = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаСкладов Цикл
		Если СтрокаТаблицы.ИдентификаторПоставщика <> 0 И ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
			СоответствиеСкладаПоставщику.Вставить(СтрокаТаблицы.ИдентификаторПоставщика, СтрокаТаблицы.Склад);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьЗаказыПоставщикам()
	Если Лев(АдресСервиса, 7) = "id15051" Тогда id15051 = Истина; Иначе id15051 = Ложь; КонецЕсли;
	Если Лев(АдресСервиса, 7) = "id11945" Тогда id11945 = Истина; Иначе id11945 = Ложь; КонецЕсли;
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДС") <> Неопределено Тогда
		ЕстьРеквизитДоговораНалогообложениеНДС = Истина;
	Иначе
		ЕстьРеквизитДоговораНалогообложениеНДС = Ложь;
	КонецЕсли;
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("ПорядокОплаты") <> Неопределено Тогда
		ЕслиРеквизитДоговораПорядокОплаты = Истина;
	Иначе
		ЕслиРеквизитДоговораПорядокОплаты = Ложь;
	КонецЕсли;
	
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("ЗакупкаПодДеятельность") <> Неопределено Тогда
		ЕстьЗакупкаПодДеятельность = Истина;
	Иначе
		ЕстьЗакупкаПодДеятельность = Ложь;
	КонецЕсли;
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено И НЕ УТКазахстан Тогда
		ЕстьВариантПриемкиТоваров = Ложь;
		ВариантПриемкиТоваров = "";
	Иначе
		ЕстьВариантПриемкиТоваров = Истина;
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	Если УТ114 И НЕ УТКазахстан Тогда
		Если Метаданные.Документы.ЗаказПоставщику.Реквизиты.Найти("ВариантПриемкиТоваров") = Неопределено Тогда
			ЕстьВариантПриемкиТоваров = Ложь;
		КонецЕсли;
	КонецЕсли;
	//в заказе поставщику нет ЕстьРеквизитОбособленно = ?(Метаданные.Документы.ЗаказПоставщику.ТабличныеЧасти.Товары.Реквизиты.Найти("Обособленно") = Неопределено, Ложь, Истина);
	//Если НЕ СоздаватьЗаказыПоставщикам Тогда
	//	Возврат;
	//КонецЕсли;
	//по каким статусам создается заказ
	Если УТ111 Тогда
		ИспользоватьСоглашенияСПоставщиками = Ложь;
		ИспользоватьДоговорыСПоставщиками = Ложь;
	Иначе
		ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
		ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	КонецЕсли;
	СписокСтатусов = Новый СписокЗначений;
	Структура = Новый Структура("СоздаватьЗаказПоставщикам", Истина);
	МассивСтатусовОтменено = Новый Массив;
	НайденныеСтроки = ТаблицаСтатусов.НайтиСтроки(Структура);
	Для Каждого СтрокаСтатуса Из НайденныеСтроки Цикл
		СписокСтатусов.Добавить(СтрокаСтатуса.КодСтатуса);
		Если СтрокаСтатуса.Отмена Тогда
			МассивСтатусовОтменено.Вставить(СтрокаСтатуса.КодСтатуса);
		КонецЕсли;
	КонецЦикла;
	Если СписокСтатусов.Количество() = 0 Тогда//не создаём заказы покупателей, нет галочек
		Возврат;
	КонецЕсли;
	Если Не НеЗагружатьОтказы И ЗначениеЗаполнено(КодСтатусаОтказ) Тогда
		СписокСтатусов.Добавить(КодСтатусаОтказ);
		//МассивЗагружаемыхСтатусов.Добавить(КодСтатусаОтказ);
	КонецЕсли;
	СоответствиеНалогообложениеНДСПоступление = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаСкладов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.НалогообложениеНДСПоступление) Тогда
			СоответствиеНалогообложениеНДСПоступление.Вставить(ТекСтрока.Контрагент, ТекСтрока.НалогообложениеНДСПоступление);
		Иначе
			СоответствиеНалогообложениеНДСПоступление.Вставить(ТекСтрока.Контрагент, НалогообложениеНДСПоступление);
		КонецЕсли;
	КонецЦикла;
	Если ТипыПлатежей.Количество() = 0 Тогда
		ЗаполнятьПоТипамПлатежей = Ложь;
	Иначе
		ЗаполнятьПоТипамПлатежей = Истина;
		СоответствиеОрганизацииПоТипуПлатежа = Новый Соответствие;
		//СоответствиеСкладаПоТипуПлатежа = Новый Соответствие;
		Для Каждого ТекСтрока Из ТипыПлатежей Цикл
			Если ТекСтрока.id > 0 Тогда
				Если ЗначениеЗаполнено(ТекСтрока.ОрганизацияДляПоставщика) Тогда
					СоответствиеОрганизацииПоТипуПлатежа.Вставить(ТекСтрока.id, ТекСтрока.ОрганизацияДляПоставщика);
				КонецЕсли;
				//Если ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
				//	СоответствиеСкладаПоТипуПлатежа.Вставить(ТекСтрока.id, ТекСтрока.Склад);
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьСоответствиеСкладаПоставщику();
	
	ТаблицаНоменклатуры.Сортировать("НомерЗаявки, distributorId");
	СтруктураЗаказ = Новый Структура("НомерЗаявки");
	СтруктураЗаказ.Вставить("Поставщик");
	
	СтруктураНомерЗаявки = Новый Структура("НомерЗаявки");
	//ДокОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
	ТаблицаЗаявок2 = Новый ТаблицаЗначений;
	ТаблицаЗаявок2 = ТаблицаЗаявок.Выгрузить(, "ЗаказКлиента, НомерЗаявки, ДатаЗаявки, ДатаОбновления, Ответственный, Комментарий, Организация, Склад, Подразделение, ВалютаЗакупки, ВалютаПродажи,Закрыта,paymentTypeId,Изменена,ОбработанаПоДругомуДоступу");
	ТаблицаЗаявок2.Свернуть("ЗаказКлиента, НомерЗаявки, ДатаЗаявки, ДатаОбновления, Ответственный, Комментарий, Организация, Склад, Подразделение, ВалютаЗакупки, ВалютаПродажи,Закрыта,paymentTypeId,Изменена,ОбработанаПоДругомуДоступу",);
	Если ЕстьЗаменаПоставщика Тогда
		//надо перепроверить, взял из Далиона
		ЗапросЛишнихЗаказов = Новый Запрос;
		ЗапросЛишнихЗаказов.Текст = "ВЫБРАТЬ
		                            |	ЗаказПоставщику.Ссылка КАК Ссылка,
		                            |	ЗаказПоставщику.Контрагент КАК Контрагент,
		                            |	ЗаказПоставщику.Статус КАК Статус
		                            |ИЗ
		                            |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		                            |ГДЕ
		                            |	ЗаказПоставщику.ДокументОснование = &ДокументОснование
		                            |	И ТИПЗНАЧЕНИЯ(ЗаказПоставщику.ДокументОснование) = ТИП(Документ.ЗаказКлиента)
		                            |	И ЗаказПоставщику.ПометкаУдаления = ЛОЖЬ";
		ЗапросЛишнихПоступлений = Новый Запрос;
		ЗапросЛишнихПоступлений.Текст = "ВЫБРАТЬ
		                                |	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка,
		                                |	ПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
		                                |	ПриобретениеТоваровУслуг.Комментарий КАК Комментарий
		                                |ИЗ
		                                |	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		                                |ГДЕ
		                                |	ПриобретениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ
		                                |	И ПриобретениеТоваровУслуг.ЗаказПоставщику = &ЗаказПоставщику";
		Если Метаданные.Документы.Найти("ПриобретениеТоваровУслуг") = Неопределено Тогда
			ЗапросЛишнихПоступлений.Текст = СтрЗаменить(ЗапросЛишнихПоступлений.Текст, "ПриобретениеТоваровУслуг", "ПоступлениеТоваровУслуг");
		КонецЕсли;
	КонецЕсли;
	ЗапросНазначений = Новый Запрос;
	ЗапросНазначений.Текст = "ВЫБРАТЬ
	                         |	Назначения.Ссылка КАК Ссылка
	                         |ИЗ
	                         |	Справочник.Назначения КАК Назначения
	                         |ГДЕ
	                         |	Назначения.ПометкаУдаления = ЛОЖЬ
	                         |	И Назначения.Заказ = &Заказ";
	
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок2 Цикл
		//Если Не СтрокаЗаявки.Изменена Тогда//если так делать, тогда поступления будет создаваться не привязанным к заказу поставщика
		//	Продолжить;
		//КонецЕсли;
		//ДокументИзменен = Истина;
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли; 
		Если ФильтрПоЗаявке=0 И (СтрокаЗаявки.Закрыта) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда //нет документа покупателя - нет основания для заказа поставщику
			Продолжить;
		КонецЕсли;
		//Если Статус <> 0 И ТекСтрока.КодСтатусаСайт <> Статус Тогда
		//	Продолжить;
		//КонецЕсли;
		//если есть в списке изменённых заявок, тогда обрабатываем
		Если СписокИзмененныхЗаявок.НайтиПоЗначению(СтрокаЗаявки.ЗаказКлиента) <> Неопределено Тогда
			Если ФильтрПоЗаявке<>0 И СтрокаЗаявки.НомерЗаявки <> ФильтрПоЗаявке Тогда //если принудительно загружаем заявку, то заново всё создаём или находим
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//сортируем заявки по поставщику, чтобы создавать несколько заказов, если разные поставщики в одном документе
		НС = 0;
		СтруктураНомерЗаявки.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураНомерЗаявки);
		Если НайденныеСтроки.Количество() = 0 Тогда//почему-то ничего нет в заявке 
			Продолжить;
		КонецЕсли;
		//ТаблицаЗаказаПокупателя = СтрокаЗаявки.ЗаказКлиента.Товары.Выгрузить(,"Номенклатура");
		//если у этой номенклатуры нет переданного статуса, значит заказ поставщику не создаем
		ЕстьСтатусУПозиций = Ложь;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СписокСтатусов.НайтиПоЗначению(НайденнаяСтрока.КодСтатусаСайт) <> Неопределено Тогда
				ЕстьСтатусУПозиций = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьСтатусУПозиций Тогда 
			Продолжить;
		КонецЕсли;
		//собираем поставщиков, которые есть в этой заявке
		СписокПоставщиков = Новый СписокЗначений;
		СписокИдентификаторовПоставщиков = Новый СписокЗначений;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НеСоздаватьЛишниеЗаказыПоставщикам Тогда //заказы на наши склады не создают заказы поставщикам
				Если МассивВыгружаемыхСкладов.Найти(НайденнаяСтрока.distributorId) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если МассивНашихСкладов.Найти(НайденнаяСтрока.distributorId) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда //если поставщик не заполнен, но не создаем заказ поставщику
				Продолжить;
			КонецЕсли;
			Если СписокПоставщиков.НайтиПоЗначению(НайденнаяСтрока.Поставщик) = Неопределено Тогда
				 СписокПоставщиков.Добавить(НайденнаяСтрока.Поставщик);
				 СписокИдентификаторовПоставщиков.Добавить(НайденнаяСтрока.distributorId);
			КонецЕсли;
		КонецЦикла;		

		Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
			ТаблицаЗаказаПокупателя = СтрокаЗаявки.ЗаказКлиента.Товары.Выгрузить(,"Номенклатура, КодСтроки");
			//находим все заказы поставщикам, введённые на основании заявки и сравниваем со списком поставщиков
			//те, которые не нашли в списке - лишние, помечаем на удаление
			Если (НЕ СтрокаЗаявки.Закрыта) И ЕстьЗаменаПоставщика Тогда
				//собираем поставщиков, которые есть в этой заявке
				ЗапросЛишнихЗаказов.УстановитьПараметр("ДокументОснование", СтрокаЗаявки.ЗаказКлиента);
				МассивКорректныхПоставщиков = Новый Массив;
				Результат = ЗапросЛишнихЗаказов.Выполнить();
				Если НЕ Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						ИдПоставщика = ПолучитьИдентификаторКонтрагента(Выборка.Контрагент,Истина);
						Если СписокИдентификаторовПоставщиков.НайтиПоЗначению(ИдПоставщика) = Неопределено Тогда
							НайденПоИд = Ложь;
						Иначе
							НайденПоИд = Истина;
						КонецЕсли;
						Если СписокПоставщиков.НайтиПоЗначению(Выборка.Контрагент) = Неопределено И НЕ НайденПоИд Тогда
							ЗаписьВЛог("В заявке " + СтрокаЗаявки.ЗаказКлиента + " больше нет поставщика "+Выборка.Контрагент,1,Ложь);
							ЗапросЛишнихПоступлений.УстановитьПараметр("ЗаказПоставщику", Выборка.Ссылка);
							Результат2 = ЗапросЛишнихПоступлений.Выполнить();
							ИгнорироватьРучныеПоступления = Ложь;
							Если НЕ Результат2.Пустой() Тогда
								Выборка2 = Результат2.Выбрать();
								Пока Выборка2.Следующий() Цикл
									Если МассивКорректныхПоставщиков.Найти(Выборка.Контрагент) = Неопределено Тогда
										Если Лев(Выборка2.Комментарий,17) = "создано из модуля" Тогда
											ИгнорироватьРучныеПоступления = Истина;
											МассивКорректныхПоставщиков.Добавить(Выборка2.Контрагент);
											Продолжить;
										КонецЕсли;
										ЗаписьВЛог("Очищаем подчиненное " + Выборка2.Ссылка,1,Ложь);
										Об = Выборка2.Ссылка.ПолучитьОбъект();
										Об.Товары.Очистить();
										Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
										Об.УстановитьПометкуУдаления(Истина);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							ЗаписьВЛог("Очищаем подчиненный " + Выборка.Ссылка,1,Ложь);
							Если НеУчитыватьЗакрытыеЗаказыПоставщикам И (Выборка.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Или ЗакрытЗаказПоставщикуИзРегистра(Выборка.Ссылка)) Тогда
							Иначе
								Если МассивКорректныхПоставщиков.Найти(Выборка.Контрагент) = Неопределено Тогда
									Об = Выборка.Ссылка.ПолучитьОбъект();
									Об.Товары.Очистить();
									Попытка
										Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
										Об.УстановитьПометкуУдаления(Истина);
										ЗаписьВЛог("Помечен на удаление "+Выборка.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " и поставщику «"+Выборка.Контрагент+"»");
									Исключение
										ТекстСообщения = ОписаниеОшибки();
										ЗаписьВЛог(ТекстСообщения, Истина);
										ЗаписьВЛог("Не удалось пометить на удаление "+Выборка.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " и поставщику «"+Выборка.Контрагент+"»");
									КонецПопытки;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТаблицаЗаказаПокупателя = Неопределено;
		КонецЕсли;
		//проходим по списку поставщиков, отбираем позиции в заявке по этим поставщикам и создаем документы
		Для Каждого ЭлементПоставщик Из СписокПоставщиков Цикл
			СтруктураЗаказ.Поставщик = ЭлементПоставщик.Значение;
			СтруктураЗаказ.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
			НайденныеСтрокиЗаказ = ТаблицаНоменклатуры.НайтиСтроки(СтруктураЗаказ);
			КоличествоПозиций = НайденныеСтрокиЗаказ.Количество();//сверяем, если количество позиций, общее количество и общая сумма совпадают, то документ не трогаем
			//если статуса в отборе нет - то есть допущение, что вверху ЕстьСтатусУПозиций проверили, поэтому заказы всем поставщикам надо создавать, даже если одна позиция в заказе стала
			//исправляем это, проходим
			ЕстьСтатусУПозицийПоставщика = Ложь;
			Для Каждого СтрокаТовара Из НайденныеСтрокиЗаказ Цикл
				Если СписокСтатусов.НайтиПоЗначению(СтрокаТовара.КодСтатусаСайт) <> Неопределено Тогда
					ЕстьСтатусУПозицийПоставщика = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьСтатусУПозицийПоставщика Тогда 
				Продолжить;
			КонецЕсли;
			Если КоличествоПозиций = 0 Тогда //по этому поставщику нет позиций с нужным статусом (например, ему всё выдали), поэтому документ не создаем
				Продолжить;
			КонецЕсли;
			ОбщееКоличество = 0;
			ОбщаяСумма = 0;
			Док = НайтиЗаказПоставщику(СтрокаЗаявки.ЗаказКлиента, ЭлементПоставщик.Значение);
			Для Каждого СтрокаТовара Из НайденныеСтрокиЗаказ Цикл
				Если СписокСтатусов.НайтиПоЗначению(СтрокаТовара.КодСтатусаСайт) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТовара.ЗаказПоставщику = Док;//если был найден, то, если не изменился, всё равно ссылку на него в форме заполнить
				ОбщееКоличество = ОбщееКоличество + СтрокаТовара.Количество;
				ОбщаяСумма = ОбщаяСумма + СтрокаТовара.ЦенаЗакупки * СтрокаТовара.Количество;
			КонецЦикла;
			НеМенятьОрганизацию = Ложь;
			НеМенятьСклад = Ложь;
			Если Док = Неопределено Тогда
				ДокОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
				//ДокОбъект.Организация = Организация;
				Если ЗначениеЗаполнено(ОрганизацияВПоступлении) Тогда
					ДокОбъект.Организация = ОрганизацияВПоступлении;
				Иначе
					ДокОбъект.Организация = СтрокаЗаявки.Организация;
				КонецЕсли;
				Если ОрганизацияПоТипуОплаты Тогда
					Если ЗаполнятьПоТипамПлатежей И СтрокаЗаявки.paymentTypeId>0 Тогда
						ОрганизацияИзТипаПлатежа = СоответствиеОрганизацииПоТипуПлатежа.Получить(СтрокаЗаявки.paymentTypeId);
						Если ОрганизацияИзТипаПлатежа <> Неопределено Тогда
							ДокОбъект.Организация = ОрганизацияИзТипаПлатежа;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НСтроки = ТаблицаСкладов.НайтиСтроки(Новый Структура("Контрагент", ЭлементПоставщик.Значение));
				Если НСтроки.Количество() > 0 Тогда
					Для Каждого НСтрока Из НСтроки Цикл
						Если ЗначениеЗаполнено(НСтрока.Организация) Тогда
							ДокОбъект.Организация = НСтрока.Организация;
							НеМенятьОрганизацию = Истина;
							Прервать;
						КонецЕсли;
						Если ЗначениеЗаполнено(НСтрока.Склад) Тогда
							ДокОбъект.Склад = НСтрока.Склад;
							НеМенятьСклад = Истина;
							Если Отладка И ФильтрПоЗаявке <> 0 Тогда
								сообщить("Заказ поставщику "+ЭлементПоставщик.Значение+" склад: "+ДокОбъект.Склад);
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновления;
				ДокОбъект.Согласован = Истина;
				Если id15051 Тогда ДокОбъект["зс_вс_СтатусЗапросаПоставщику"] = Перечисления.зс_вс_СтатусыЗапросаПоставщику.НеПодтвержденПоставщиком; КонецЕсли;
				Если id11945 Тогда
					ДокОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
				КонецЕсли;
			Иначе
				//если уже загрузили, то не трогаем
				Если НеОбновлятьЗагруженныеЗаказыПоставщикам Тогда
					Продолжить;
				КонецЕсли;
				Если (СтрокаЗаявки.Закрыта) Тогда
					Продолжить;
				КонецЕсли;
				//если данные в документе не изменились, ничего не делаем
				Если Док.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Или ЗакрытЗаказПоставщикуИзРегистра(Док.Ссылка)Тогда
					//у закрытого заказа поставщику может быть отказ в заказе клиента
					ЕстьОтказ = Ложь;
					//НачатьТранзакцию();
					СтруктураПоискаОтказа = Новый Структура("КодСтроки,Отменено");
					СтруктураПоискаОтказа.Отменено = Истина;
					СтруктураПоискаДляОтказа = Новый Структура("КодСтроки");
					Для Каждого СтрокаТовара Из НайденныеСтрокиЗаказ Цикл
						Если СтрокаТовара.КодСтатуса = КодСтатусаОтказ Тогда
							СтруктураПоискаОтказа.КодСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
							НайденныеСтроки = Док.Товары.НайтиСтроки(СтруктураПоискаОтказа);
							Если НайденныеСтроки.Количество() > 0 Тогда //уже стоит отказ
								Продолжить;
							КонецЕсли;
							ДокОбъект = Док.ПолучитьОбъект();
							Если ДокОбъект.Дата > СтрокаЗаявки.ДатаОбновления Тогда
								ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновления;
							КонецЕсли;
							СтруктураПоискаДляОтказа.КодСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
							НайденныеСтроки = ДокОбъект.Товары.НайтиСтроки(СтруктураПоискаОтказа);
							Если НайденныеСтроки.Количество() > 0 Тогда //пока нет отказа, ставим
								ЕстьОтказ = Истина;
								Для Каждого НайденнаяСтроки Из НайденныеСтроки Цикл
									НайденнаяСтроки.Отменено = Истина;
									НайденнаяСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
									Попытка
										ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
										ТекстСообщения = "Изменяем статус на «Отменено» у позиции "+Формат(СтрокаТовара.ИдентификаторНоменклатуры, "ЧГ=0")+" в "+СокрЛП(Док);
										ЗаписьВЛог(ТекстСообщения,1);
									Исключение
										ДокОбъект.Записать();
									КонецПопытки;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					//ЗафиксироватьТранзакцию();
					Если ЕстьОтказ Тогда
						Продолжить;
						//ТекстСообщения = "Не изменяем закрытый "+СокрЛП(Док);
						//ЗаписьВЛог(ТекстСообщения,1);
					КонецЕсли;
					//Продолжить;//в закрытый заказ поставщику могут попасть ещё позиции
				КонецЕсли;
				КоличествоСтрок = Док.Товары.Количество();
				ИтогКоличество = Док.Товары.Итог("Количество");
				ИтогСумма = Док.Товары.Итог("Сумма");
				ЕстьОтказ = Ложь;
				Для Каждого СтрокаТовара Из НайденныеСтрокиЗаказ Цикл
					Если СтрокаТовара.КодСтатусаСайт = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(СтрокаТовара.КодСтатусаСайт) <> Неопределено Тогда
						ЕстьОтказ = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ПозицииОтличаются = Ложь;//медленный способ, сравниваем артикул каждой позиции в заказе
				//ФильтрПоЗаявке = 0 И 
				Если КоличествоСтрок <> КоличествоПозиций Тогда
					ПозицииОтличаются = Истина;
				КонецЕсли;
				Если ((КоличествоСтрок = КоличествоПозиций И ИтогКоличество = ОбщееКоличество И ИтогСумма = ОбщаяСумма) Или ПроверятьИзмененияВТоварахЗаказа) И НЕ ЕстьОтказ Тогда
					ТаблицаТоваровЗаказа = ПолучитьТаблицуТоваровЗаказаПоставщику(Док.Ссылка);
					Если ТаблицаТоваровЗаказа <> Неопределено Тогда
						//Структура = Новый Структура("Артикул");
						Структура = Новый Структура("КодСтроки");
						Для Каждого СтрокаТаблицы Из НайденныеСтрокиЗаказ Цикл//НайденныеСтроки
							Структура.КодСтроки = СтрокаТаблицы.ИдентификаторНоменклатуры;
							НСтроки = ТаблицаТоваровЗаказа.НайтиСтроки(Структура);
							Если НСтроки.Количество()=0 Тогда
								Если Отладка Тогда
									сообщить("В заказе 1С "+СтрокаЗаявки.НомерЗаявки+" не найден код строки "+СтрокаТаблицы.ИдентификаторНоменклатуры);
								КонецЕсли; 
								ПозицииОтличаются = Истина;
								Прервать;
							КонецЕсли; 
							НСтрока = НСтроки[0];
							Если НСтрока.Артикул <> СтрокаТаблицы.number И НСтрока.Артикул <> СтрокаТаблицы.numberFix Тогда
								Если Отладка Тогда
									сообщить("В заказе поставщика 1С "+СтрокаЗаявки.НомерЗаявки+" по коду строки "+СтрокаТаблицы.ИдентификаторНоменклатуры+" не совпадает артикул "+НСтрока.Артикул);
								КонецЕсли; 
								ПозицииОтличаются = Истина;
								Прервать;
							КонецЕсли; 
							Если НСтрока.Цена <> СтрокаТаблицы.ЦенаЗакупки Тогда
								Если Отладка Тогда
									сообщить("В заказе поставщика 1С "+СтрокаЗаявки.НомерЗаявки+" по коду строки "+СтрокаТаблицы.ИдентификаторНоменклатуры+" не совпадает цена "+НСтрока.Цена);
								КонецЕсли; 
								ПозицииОтличаются = Истина;
								Прервать;
							КонецЕсли; 
							Если НСтрока.Количество <> СтрокаТаблицы.Количество Тогда
								Если Отладка Тогда
									сообщить("В заказе поставщика 1С "+СтрокаЗаявки.НомерЗаявки+" по коду строки "+СтрокаТаблицы.ИдентификаторНоменклатуры+" не совпадает количество "+НСтрока.Количество);
								КонецЕсли; 
								ПозицииОтличаются = Истина;
								Прервать;
							КонецЕсли; 
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли; 
				
				ДокОбъект = Док.ПолучитьОбъект();
				Если ФильтрПоЗаявке = 0 И (ПозицииОтличаются = Истина Или ((КоличествоСтрок = КоличествоПозиций И ИтогКоличество = ОбщееКоличество И ИтогСумма = ОбщаяСумма) Или ПроверятьИзмененияВТоварахЗаказа) И НЕ ЕстьОтказ) Тогда
					Если НЕ Док.Проведен Тогда
						Если Не ЗначениеЗаполнено(ДокОбъект.НалогообложениеНДС) Тогда
							//СоответствиеНалогообложениеНДСПоступление.Получить(ДокОбъект.Контрагент);
							Если Не ЗначениеЗаполнено(ДокОбъект.НалогообложениеНДС) Тогда
								ДокОбъект.НалогообложениеНДС = НалогообложениеНДСПоступление;
							КонецЕсли;
						КонецЕсли;
						Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
							ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
						Иначе
							ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
						КонецЕсли;
						ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПокупке;//всегда должно стоять, иначе реализция некорректно создаётся
						ДокОбъект.Согласован = Истина;
						Попытка
							ДокОбъект.Записать(РежимЗаписиДок);
							ДокументПроведен = Истина;
							ТекстСообщения = "идентификатор заявки:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", поставщик: "+ЭлементПоставщик.Значение+", проведен непроведенный " +СокрЛП(ДокОбъект);
							ЗаписьВЛог(ТекстСообщения,3);

						Исключение
							ТекстСообщения = "Не удалось провести "+СокрЛП(ДокОбъект)+" "+ОписаниеОшибки();
							ЗаписьВЛог(ТекстСообщения,5,Истина);
							ДокОбъект.Записать();
						КонецПопытки;
					КонецЕсли;
					//Если НЕ (ПроверятьИзмененияВТоварахЗаказа И ПозицииОтличаются) Тогда
					Если ПроверятьИзмененияВТоварахЗаказа Или ПозицииОтличаются Тогда //так работает
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ДокОбъект.Дата > СтрокаЗаявки.ДатаОбновления Тогда
					ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновления;
				КонецЕсли;
				ДокОбъект.Товары.Очистить();
			КонецЕсли;
			ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПокупке;
			ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
			ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
				ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
			ДокОбъект.Приоритет = СтрокаЗаявки.ЗаказКлиента.Приоритет;
			ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			Если НЕ id11945 Тогда
				ДокОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
			КонецЕсли;
			Если УТ111 Тогда
				ДокОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;//иначе реквизит КОформлению не заполнится
			КонецЕсли;
			Если УТ112 Тогда
				ДокОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;//иначе не будет видно на закладке "К поступлению"
			КонецЕсли;
			
			//ДокОбъект.ДатаСогласования = СтрокаЗаявки.ДатаОбновления;
			ДокОбъект.ДатаСогласования = СтрокаЗаявки.ДатаЗаявки;
			ДокОбъект.Согласован = Истина;//emex
			//ДокОбъект.ДатаПоступления = СтрокаЗаявки.ЗаказКлиента.ЖелаемаяДатаОтгрузки;
			ДокОбъект.ДокументОснование = СтрокаЗаявки.ЗаказКлиента;
			ДокОбъект.Комментарий = СтрокаЗаявки.Комментарий;
			ДокОбъект.БанковскийСчет = БанковскийСчет;
			ДокОбъект.Валюта = Валюта;
			Если ЦеныПродажиВРублях Тогда//заказ поставщику
				ДокОбъект.Валюта = Рубли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаЗакупки) Тогда
				ДокОбъект.Валюта = СтрокаЗаявки.ВалютаЗакупки;
			КонецЕсли;
			Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
				ДокОбъект.Валюта = Валюта;
			КонецЕсли;
			Назначение = Неопределено;
			Если ИспользоватьОбособленноеОбеспечениеЗаказов И ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
				ЗапросНазначений.УстановитьПараметр("Заказ", СтрокаЗаявки.ЗаказКлиента);
				Результат = ЗапросНазначений.Выполнить();
				Если НЕ Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					Назначение = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ УТ111 Тогда
				//ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
				//Если ЗначениеЗаполнено(СтрокаЗаявки.СпособДоставки) Тогда
				//	ДокОбъект.СпособДоставки = СтрокаЗаявки.СпособДоставки;
				//Иначе
					ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;//в заказах поставщику самовывоз
				//КонецЕсли;
				ДокОбъект.НомерПоДаннымПоставщика = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
				ДокОбъект.ДатаПоДаннымПоставщика = СтрокаЗаявки.ДатаЗаявки;
				Если НЕ УТ115 И НЕ УТ112 И НЕ УТКазахстан И НЕ (КА И Подверсия1 = 2 И Подверсия2 = 5) Тогда
					ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
				КонецЕсли;
			КонецЕсли;
			Если НЕ УТ111 И НЕ УТ112 И НЕ УТ113 Тогда
				Если ЕстьВариантПриемкиТоваров Тогда
					ДокОбъект.ВариантПриемкиТоваров = ВариантПриемкиТоваров;
				КонецЕсли;
				ДокОбъект.Подразделение = СтрокаЗаявки.Подразделение;
			КонецЕсли;
			ДокОбъект.ЗакупкаПодДеятельность = НалогообложениеНДСПоступление;
			Если УТ111 Тогда
				ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;//??? зависит от настроек
			Иначе
				ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
			КонецЕсли;
			Если УТ111 Или УТ113 Или УТ114 Тогда
				Если ЗначениеЗаполнено(СтрокаЗаявки.Подразделение) Тогда
					ДокОбъект.Подразделение = СтрокаЗаявки.Подразделение;
				Иначе
					ДокОбъект.Подразделение = Подразделение;
				КонецЕсли;
			КонецЕсли;
			ЗаполненСкладПоставщику = Ложь;
			Если НеМенятьСклад = Ложь Тогда
				Если ЗначениеЗаполнено(СтрокаЗаявки.Склад) Тогда
					ДокОбъект.Склад = СтрокаЗаявки.Склад;
				Иначе
					ДокОбъект.Склад = Склад;
				КонецЕсли;
				СкладПоставщику = ДокОбъект.Склад;
				Если ЗначениеЗаполнено(СкладВПоступлении) Тогда
					ДокОбъект.Склад = СкладВПоступлении;
				КонецЕсли;
				Если НайденныеСтрокиЗаказ.Количество()>0 Тогда
					СкладПоставщику = СоответствиеСкладаПоставщику.Получить(НайденныеСтрокиЗаказ[0].ИсходныйdistributorId);
					Если ЗначениеЗаполнено(СкладПоставщику) Тогда
						ДокОбъект.Склад = СкладПоставщику;
						ЗаполненСкладПоставщику = Истина;
						Если Отладка И ФильтрПоЗаявке <> 0 Тогда
							сообщить("Заказ поставщику "+ЭлементПоставщик.Значение+" склад: "+ДокОбъект.Склад);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//ДокОбъект.Магазин = Магазин;
			ДокОбъект.Дата = СтрокаЗаявки.ДатаЗаявки;
			ДокОбъект.ДатаПервогоПоступления = СтрокаЗаявки.ДатаЗаявки;
			//ДокОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
			//ДокОбъект.ЗаполнитьУсловияПродажПоУмолчанию();//заполняем встроенными стредствами
			//ДокОбъект.НалогообложениеНДС = НалогообложениеНДСПоступление;
			ДокОбъект.Контрагент = ЭлементПоставщик.Значение;
			ДокОбъект.Партнер = ДокОбъект.Контрагент.Партнер;
			НеМенятьОрганизацию = Ложь;
			НеМенятьСклад = Ложь;
			НСтроки = ТаблицаСкладов.НайтиСтроки(Новый Структура("Контрагент", ДокОбъект.Контрагент));
			Если НСтроки.Количество() > 0 Тогда
				Для Каждого НСтрока Из НСтроки Цикл
					Если ЗначениеЗаполнено(НСтрока.Организация) Тогда
						ДокОбъект.Организация = НСтрока.Организация;
						НеМенятьОрганизацию = Истина;
						Прервать;
					КонецЕсли;
					Если ЗначениеЗаполнено(НСтрока.Склад) Тогда
						ДокОбъект.Склад = НСтрока.Склад;
						НеМенятьСклад = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			врем = ОрганизацияПоИсходномуПоставщику.Получить(НайденныеСтрокиЗаказ[0].ИсходныйdistributorId);
			Если ЗначениеЗаполнено(врем) Тогда
				ДокОбъект.Организация = врем;
			КонецЕсли;
			Если НеМенятьОрганизацию = Ложь Тогда
				Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					ДокОбъект.Организация = ОрганизацияРозница;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаЗаявки.Организация) Тогда
					ДокОбъект.Организация = СтрокаЗаявки.Организация;
				Конецесли;
				Если ОрганизацияПоТипуОплаты Тогда
					Если ЗаполнятьПоТипамПлатежей И СтрокаЗаявки.paymentTypeId>0 Тогда
						ОрганизацияИзТипаПлатежа = СоответствиеОрганизацииПоТипуПлатежа.Получить(СтрокаЗаявки.paymentTypeId);
						Если ОрганизацияИзТипаПлатежа <> Неопределено Тогда
							ДокОбъект.Организация = ОрганизацияИзТипаПлатежа;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ОрганизацияВПоступлении) Тогда
					ДокОбъект.Организация = ОрганизацияВПоступлении;
				КонецЕсли;
			КонецЕсли;
			ДокОбъект.НалогообложениеНДС = СоответствиеНалогообложениеНДСПоступление.Получить(ДокОбъект.Контрагент);
			Если Не ЗначениеЗаполнено(ДокОбъект.НалогообложениеНДС) Тогда
				ДокОбъект.НалогообложениеНДС = НалогообложениеНДСПоступление;
			КонецЕсли;
			Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
				ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Иначе
				ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			КонецЕсли;
			ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПокупке;
			Если ИспользоватьСоглашенияСПоставщиками Тогда
				врем = СоглашениеПоИсходномуПоставщику.Получить(НайденныеСтрокиЗаказ[0].ИсходныйdistributorId);
				Если ЗначениеЗаполнено(врем) Тогда
					СоглашениеПоСкладу = врем;
				Иначе
					СоглашениеПоСкладу = СоответствиеСоглашениеПоСкладу.Получить(НайденныеСтрокиЗаказ[0].distributorId);
				КонецЕсли;
				
				Если СоглашениеПоСкладу <> Неопределено Тогда
					ДокОбъект.Соглашение = СоглашениеПоСкладу;
				Иначе
					ПолучитьУсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(ДокОбъект.Партнер);
					Если ЗначениеЗаполнено(ПолучитьУсловияЗакупокПоУмолчанию) Тогда
						ДокОбъект.Соглашение = ПолучитьУсловияЗакупокПоУмолчанию.Соглашение;
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
					Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
						ДокОбъект.Соглашение = СоглашениеРозница;
					Иначе
						ДокОбъект.Соглашение = СоглашениеОпт;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
					ДокОбъект.Соглашение = ПолучитьСоглашениеСПоставщиком(ДокОбъект.Контрагент, Истина, ДокОбъект.Организация);
				КонецЕсли;
				ЗаполнитьПоСоглашениюСПоставщиком(ДокОбъект);//заказ поставщику
			КонецЕсли;
			Если ИспользоватьДоговорыСПоставщиками Тогда
				Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация);
				Если Не ЗначениеЗаполнено(Договор) Тогда
					//только с клиентами создаёт ДокОбъект.Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Договор) Тогда
					Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация, , ДокОбъект.Контрагент);
				КонецЕсли;
				ДокОбъект.Договор = Договор;
				Если Не ЗначениеЗаполнено(Договор) И СоздаватьДоговоры Тогда
					НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					НовыйДоговор.ИнициализироватьСправочник();
					ЗаполнитьРеквизитыНовогоДоговора(НовыйДоговор, ДокОбъект.Контрагент);
					
					Если НЕ УТКазахстан Тогда
						НовыйДоговор.СтавкаНДС = НДСВДоговореКлиента;
						Если НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
							Попытка
								НовыйДоговор.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
							Исключение
							КонецПопытки;
						КонецЕсли;
						Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДСОпределяетсяВДокументе") <> Неопределено Тогда
							НовыйДоговор.НалогообложениеНДСОпределяетсяВДокументе = Истина; //НалогообложениеНДС = НалогообложениеНДСПоступление;
						КонецЕсли;
					Иначе
						НовыйДоговор.СтавкаНДС = ?(НДСВДоговореКлиента = Перечисления.СтавкиНДС.БезНДС, Справочники["СтавкиНДС"]["БезНДС"], Справочники["СтавкиНДС"]["НДС12"]);
					КонецЕсли;
					НовыйДоговор.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
					НовыйДоговор.ПорядокРасчетов = ПорядокРасчетовЗаказПоставщику;
					НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
					НовыйДоговор.Комментарий = "(СоздатьЗаказыПоставщикам) авт. создан при обмене с ABCP "+ТекущаяДата()+", поставщик "+СокрЛП(НовыйДоговор.Контрагент);
					Если НЕ УТ111 И НЕ УТ112 И НЕ УТ113 Тогда //И НЕ (УТ114 И (Подверсия3=3 ИЛИ Подверсия3=1)) Тогда //в 11.4.3 этого реквизита нет
						НовыйДоговор.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
					КонецЕсли;
					НовыйДоговор.Записать();
					ДокОбъект.Договор = НовыйДоговор.Ссылка;
					ТекстСообщения = "По заявке "+СтрокаЗаявки.НомерЗаявки+" создан новый договор с поставщиком: "+СокрЛП(НовыйДоговор.Контрагент);
					ЗаписьВЛог(ТекстСообщения,3);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
					Если ЕслиРеквизитДоговораПорядокОплаты Тогда
						ДокОбъект.ПорядокОплаты = ДокОбъект.Договор.ПорядокОплаты;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(ДокОбъект.ПорядокРасчетов) Тогда
						ДокОбъект.ПорядокРасчетов = ДокОбъект.Договор.ПорядокРасчетов;
					КонецЕсли;
					Если ЗначениеЗаполнено(ДокОбъект.Соглашение) И ДокОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов Тогда
						Если ЕстьРеквизитДоговораНалогообложениеНДС Тогда
							Если ЗначениеЗаполнено(ДокОбъект.Договор.НалогообложениеНДС) Тогда
								ДокОбъект.НалогообложениеНДС = ДокОбъект.Договор.НалогообложениеНДС;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Не ЗначениеЗаполнено(ДокОбъект.ПорядокРасчетов) Тогда
						ДокОбъект.ПорядокРасчетов = ПорядокРасчетовЗаказПоставщику;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ДокОбъект.РегистрироватьЦеныПоставщика = РегистрироватьЦеныПоставщика;
			МаксимальныйКодСтроки = 0;
			Для Каждого СтрокаТовара Из НайденныеСтрокиЗаказ Цикл
				Если СписокСтатусов.НайтиПоЗначению(СтрокаТовара.КодСтатусаСайт) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаТовара.КодСтатусаСайт = КодСтатусаОтказ И НеЗагружатьОтказы Тогда
					Продолжить;//не загружаем отказы
				КонецЕсли;
				ДокОбъект.ДатаПервогоПоступления = Мин(ДокОбъект.ДатаПервогоПоступления, ДокОбъект.Дата+СтрокаТовара.deadline*3600);
				ДокОбъект.ДатаПоступления = Макс(ДокОбъект.ДатаПоступления, СтрокаЗаявки.ДатаЗаявки+Макс(СтрокаТовара.deadline,СтрокаТовара.deadlineMax)*3600);
				ДокОбъект.ЖелаемаяДатаПоступления = Макс(ДокОбъект.ЖелаемаяДатаПоступления, СтрокаЗаявки.ДатаЗаявки+Макс(СтрокаТовара.deadline,СтрокаТовара.deadlineMax)*3600);
				
				СтрокаДокумента = ДокОбъект.Товары.Добавить();
				СтрокаДокумента.Номенклатура = СтрокаТовара.Номенклатура;
				Если НаименованиеХарактеристики<>"" И СтрокаДокумента.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
					СтрокаДокумента.Характеристика = ПолучитьХарактеристикуНоменклатуры(СтрокаДокумента.Номенклатура);
				КонецЕсли;
				СтрокаДокумента.ДатаПоступления = СтрокаЗаявки.ДатаЗаявки+СтрокаТовара.deadlineMax*3600;
				КодСтатусаСайт = СтрокаТовара.КодСтатусаСайт;
				Если КодСтатусаСайт = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(КодСтатусаСайт) <> Неопределено Или (СтрокаТовара.Количество = 0) Тогда
					СтрокаДокумента.Отменено = Истина;
					СтрокаДокумента.ПричинаОтмены = НайтиДобавитьПричинуОтменыЗаказПоставщику(СтрокаТовара.commentAnswer);
				КонецЕсли;
				СтрокаДокумента.Количество = СтрокаТовара.Количество;
				СтрокаДокумента.КоличествоУпаковок = СтрокаТовара.Количество;
				СтрокаДокумента.Цена = СтрокаТовара.ЦенаЗакупки;
				Если СтрокаДокумента.Цена = 0 Тогда
					СтрокаДокумента.Цена = 0.01;//чтобы проводилось
				КонецЕсли;
				СтрокаДокумента.Сумма = СтрокаТовара.ЦенаЗакупки * СтрокаТовара.Количество;
				//СтрокаДокумента.Склад = ДокОбъект.Склад;
				Если ЗаполненСкладПоставщику = Ложь Тогда
					Если ЗначениеЗаполнено(СкладВПоступлении) Тогда
						СтрокаДокумента.Склад = СкладВПоступлении;
					Иначе
						СтрокаДокумента.Склад = СтрокаТовара.Склад;
						Если (НЕ ДокОбъект.Склад.ЭтоГруппа) И (СтрокаДокумента.Склад<>ДокОбъект.Склад) Тогда
							ГруппаСкладов = СтрокаДокумента.Склад.Родитель;
							Если ЗначениеЗаполнено(ГруппаСкладов) Тогда
								ДокОбъект.Склад = ГруппаСкладов;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтрокаДокумента.Склад = СкладПоставщику;
				КонецЕсли;
				ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтрокаДокумента, ДокОбъект.Договор);
				СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
					СтрокаДокумента.ДатаОтгрузки = Макс(СтрокаЗаявки.ДатаЗаявки, СтрокаЗаявки.ДатаЗаявки+Макс(СтрокаТовара.deadline,СтрокаТовара.deadlineMax)*3600);
					ДокОбъект.ДатаОтгрузки = Макс(ДокОбъект.ДатаОтгрузки, СтрокаДокумента.ДатаОтгрузки);
				Иначе
					ДокОбъект.ДатаПоступления = Макс(СтрокаЗаявки.ДатаЗаявки, СтрокаЗаявки.ДатаЗаявки+Макс(СтрокаТовара.deadline,СтрокаТовара.deadlineMax)*3600);
					ДокОбъект.ЖелаемаяДатаПоступления = ДокОбъект.ДатаПоступления;
				КонецЕсли;
				//Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС И НЕ ЦенаВключаетНДСПриПокупке И СтрокаДокумента.СуммаНДС <> 0 Тогда
				//	СтрокаДокумента.Сумма = СтрокаДокумента.СуммаСНДС - СтрокаДокумента.СуммаНДС;
				//	Если СтрокаДокумента.Количество<>0 Тогда
				//		СтрокаДокумента.Цена = СтрокаДокумента.Сумма/СтрокаДокумента.Количество;
				//	КонецЕсли;
				//КонецЕсли;
				СтрокаДокумента.КодСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
				Если СтрокаТовара.ИдентификаторНоменклатуры > МаксимальныйКодСтроки Тогда
					МаксимальныйКодСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
				КонецЕсли;
				Если УТ114 Тогда
					СтрокаДокумента.Подразделение = ДокОбъект.Подразделение;//Подразделение-получатель работ или услуг
				КонецЕсли;
				Если ЗначениеЗаполнено(Назначение) Тогда
					СтрокаДокумента.Назначение = Назначение;
					//Если ЕстьРеквизитОбособленно Тогда //в заказе поставщику нет пока
					//	СтрокаДокумента.Обособленно = Истина;//в 11.5.9 появилось
					//КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				ДокОбъект.ДатаПоступления = ДокОбъект.ДатаОтгрузки;
				ДокОбъект.ЖелаемаяДатаПоступления = ДокОбъект.ДатаОтгрузки;
			КонецЕсли;
			//определяем, что вставлять в шапку - склад, или группу складов
			Если НЕ ЗначениеЗаполнено(СкладВПоступлении) Тогда
				ВТ = ДокОбъект.Товары.Выгрузить(,"Склад");
				СтрокВДокументе = ВТ.Количество();
				ВТ.Свернуть("Склад",);
				Если ВТ.Количество() = 1 Тогда
					ДокОбъект.Склад = ВТ[0].Склад;
				Иначе
					Если ДокОбъект.Склад.ЭтоГруппа Тогда
					Иначе
						времГруппа = ВТ[0].Склад.Родитель;
						Если ЗначениеЗаполнено(времГруппа) И времГруппа.ЭтоГруппа Тогда
							ДокОбъект.Склад = времГруппа;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//не записываем новый заказ поставщику, скорее всего, там была отказная позиция, которую мы пробросили
			Если Док = Неопределено И ДокОбъект.Товары.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если УТ111 Или УТ114 Тогда
				ДокОбъект.МаксимальныйКодСтроки = МаксимальныйКодСтроки;
			Конецесли;
			Если НЕ УТ111 Тогда
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
					ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
					Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
						СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
						ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
					КонецЕсли;
				Иначе
					Попытка
						Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
							Если НЕ id15051 Тогда
								Если УТ113 Или УТ115 Или (УТ114 И (Подверсия3 > 5)) Тогда
									Попытка
										ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
									Исключение
									КонецПопытки;
								ИначеЕсли НЕ УТ111 Тогда
									ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
										ДокОбъект,
										ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления"),
										ДокОбъект.ЖелаемаяДатаПоступления,
										ДокОбъект.Товары.Итог("Сумма"),
										0);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			ДокументПроведен = Ложь;
			
			ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
			ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
				ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
			Попытка
				ДокОбъект.Записать(РежимЗаписиДок);
				ДокументПроведен = Истина;
				ТекстСообщения = "идентификатор заявки:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", поставщик: "+ЭлементПоставщик.Значение+", проведен " +СокрЛП(ДокОбъект);
				ЗаписьВЛог(ТекстСообщения,3);
			Исключение
				ТекстСообщения = "Не удалось провести "+СокрЛП(ДокОбъект)+" "+ОписаниеОшибки();
				ЗаписьВЛог(ТекстСообщения,5,Истина);
				ДокОбъект.Записать();
			КонецПопытки;
			Для Каждого СтрокаТовара Из НайденныеСтрокиЗаказ Цикл
				СтрокаТовара.ЗаказПоставщику = ДокОбъект.Ссылка;
			КонецЦикла;		
			Если РегистрироватьЦеныНоменклатуры Тогда
				Если ДокОбъект.Товары.Количество() > 0 Тогда
					СоздатьУстановкуЦенНоменклатуры(ДокОбъект.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //СоздатьЗаказыПоставщикам

Процедура СоздатьПоступленияТоваровУслуг()
	//сначала ищем, вдруг уже есть поступления по этим заказам - ищем по документу основанию и поставщику
	//сортируем заявки по поставщику, чтобы создавать несколько поступлений, если разные поставщики в одном документе
	//вносим сегодняшней датой
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено И НЕ УТКазахстан Тогда
		ЕстьВариантПриемкиТоваров = Ложь;
		ВариантПриемкиТоваров = "";
	Иначе
		ЕстьВариантПриемкиТоваров = Истина;
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	Если УТ114 И НЕ УТКазахстан Тогда 
		Если Метаданные.Документы.ПриобретениеТоваровУслуг.Реквизиты.Найти("ВариантПриемкиТоваров") = Неопределено Тогда
			ЕстьВариантПриемкиТоваров = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если УТ111 Тогда
		ИспользоватьСоглашенияСПоставщиками = Ложь;
		ИспользоватьДоговорыСПоставщиками = Ложь;
	Иначе
		ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
		ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	КонецЕсли;
	
	Попытка
		ИспользоватьГрафикиОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	Исключение
		ИспользоватьГрафикиОплаты = Ложь;
	КонецПопытки;
	СоответствиеНалогообложениеНДСПоступление = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаСкладов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.НалогообложениеНДСПоступление) Тогда
			СоответствиеНалогообложениеНДСПоступление.Вставить(ТекСтрока.Контрагент, ТекСтрока.НалогообложениеНДСПоступление);
		Иначе
			СоответствиеНалогообложениеНДСПоступление.Вставить(ТекСтрока.Контрагент, НалогообложениеНДСПоступление);
		КонецЕсли;
	КонецЦикла;
	СтруктураПоискаЗаявки = Новый Структура("НомерЗаявки");
	
	СтруктураПоискаПозицийПоставщика = Новый Структура("НомерЗаявки");
	СтруктураПоискаПозицийПоставщика.Вставить("Поставщик");
	
	СписокСтатусов = Новый СписокЗначений;//список статусов, при которых создается поступление
	Структура = Новый Структура("СоздаватьПоступление", Истина);
	НайденныеСтроки = ТаблицаСтатусов.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СписокСтатусов.Добавить(НайденнаяСтрока.КодСтатуса);
	КонецЦикла;
	Если ТипыПлатежей.Количество() = 0 Тогда
		ЗаполнятьПоТипамПлатежей = Ложь;
	Иначе
		ЗаполнятьПоТипамПлатежей = Истина;
		СоответствиеОрганизацииПоТипуПлатежа = Новый Соответствие;
		//СоответствиеСкладаПоТипуПлатежа = Новый Соответствие;
		Для Каждого ТекСтрока Из ТипыПлатежей Цикл
			Если ТекСтрока.id > 0 Тогда
				Если ЗначениеЗаполнено(ТекСтрока.ОрганизацияДляПоставщика) Тогда
					СоответствиеОрганизацииПоТипуПлатежа.Вставить(ТекСтрока.id, ТекСтрока.ОрганизацияДляПоставщика);
				КонецЕсли;
				//Если ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
				//	СоответствиеСкладаПоТипуПлатежа.Вставить(ТекСтрока.id, ТекСтрока.Склад);
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Если Не НеЗагружатьОтказы И ЗначениеЗаполнено(КодСтатусаОтказ) Тогда
	//	СписокСтатусов.Добавить(КодСтатусаОтказ);
	//	//МассивЗагружаемыхСтатусов.Добавить(КодСтатусаОтказ);
	//КонецЕсли;
	Если СписокСтатусов.Количество() = 0 Тогда//не создаём поступления, нет галочек
		Возврат;
	КонецЕсли;
	
	СоответствиеВариантыОбеспеченияПоСтатусам = Новый Соответствие;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если ЗначениеЗаполнено(СтрокаСтатуса.ВариантОбеспечения) Тогда
			СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.ВариантОбеспечения);
		Иначе
			Если УТ111 Тогда
				СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.СоСклада);
			Иначе
				Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
					СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.Требуется);
				ИначеЕсли Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("УдалитьТребуется")<> Неопределено Тогда
					СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.УдалитьТребуется);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокПоставщиков = Новый СписокЗначений;
	//в приобретении несколько заказов поставщику, поэтому номер входящего документа может быть разный
	Если ОдноПоступлениеВДеньПоПоставщику Тогда
		ЗапросБезЗаказаПоставщику = Новый Запрос;
		//так как теперь можно будет приходовать по нескольким поступлениям
		ЗапросБезЗаказаПоставщику.Текст = "ВЫБРАТЬ ПЕРВЫЕ 20
		                                  |	ПриобретениеТоваровУслугТовары.Ссылка КАК Ссылка,
		                                  |	ПриобретениеТоваровУслугТовары.Ссылка.Дата КАК Дата,
		                                  |	ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента
		                                  |ИЗ
		                                  |	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		                                  |ГДЕ
		                                  |	ПриобретениеТоваровУслугТовары.Ссылка.Контрагент = &Поставщик
		                                  |	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента В(&НомераВходящегоДокумента)
		                                  |	И ПриобретениеТоваровУслугТовары.Ссылка.Дата >= &Дата
		                                  |	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента <> &ПустойНомер
		                                  |	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента";
		Массив = ТаблицаЗаявок.ВыгрузитьКолонку("НомерЗаявки");
		НомераВходящегоДокумента = Новый Массив;
		Для Каждого Элемент Из Массив Цикл
			НомераВходящегоДокумента.Добавить(Формат(Элемент, "ЧГ=0"));
		КонецЦикла;
		ЗапросБезЗаказаПоставщику.УстановитьПараметр("НомераВходящегоДокумента", НомераВходящегоДокумента);
		
		ЗапросСЗаказомПоставщику = Новый Запрос;
		ЗапросСЗаказомПоставщику.Текст = "ВЫБРАТЬ ПЕРВЫЕ 20
		                                 |	ПриобретениеТоваровУслугТовары.Ссылка КАК Ссылка,
		                                 |	ПриобретениеТоваровУслугТовары.Ссылка.Дата КАК Дата,
		                                 |	ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента
		                                 |ИЗ
		                                 |	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		                                 |ГДЕ
		                                 |	ПриобретениеТоваровУслугТовары.Ссылка.Контрагент = &Поставщик
		                                 |	И ПриобретениеТоваровУслугТовары.Ссылка.ЗаказПоставщику В(&ЗаказыПоставщику)
		                                 |	И ПриобретениеТоваровУслугТовары.Ссылка.Дата >= &Дата";
		Массив = ТаблицаНоменклатуры.ВыгрузитьКолонку("ЗаказПоставщику");
		ЗаказыПоставщику = Новый Массив;
		Для Каждого Элемент Из Массив Цикл
			Если ЗначениеЗаполнено(Элемент) Тогда
				Если ЗаказыПоставщику.Найти(Элемент) = Неопределено Тогда
					ЗаказыПоставщику.Добавить(Элемент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЗапросСЗаказомПоставщику.УстановитьПараметр("ЗаказыПоставщику", ЗаказыПоставщику);
					   //|	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента <> &ПустойНомер";
					   //|	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
	Иначе
		ЗапросБезЗаказаПоставщику = Новый Запрос;
		//так как теперь можно будет приходовать по нескольким поступлениям
		ЗапросБезЗаказаПоставщику.Текст = "ВЫБРАТЬ ПЕРВЫЕ 20
		                                  |	ПриобретениеТоваровУслугТовары.Ссылка КАК Ссылка,
		                                  |	ПриобретениеТоваровУслугТовары.Ссылка.Дата КАК Дата,
		                                  |	ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента
		                                  |ИЗ
		                                  |	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		                                  |ГДЕ
		                                  |	ПриобретениеТоваровУслугТовары.Ссылка.Контрагент = &Поставщик
		                                  |	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
		                                  |	И ПриобретениеТоваровУслугТовары.Ссылка.Дата >= &Дата
		                                  |	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента <> &ПустойНомер
		                                  |	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента";
		
		ЗапросСЗаказомПоставщику = Новый Запрос;
		ЗапросСЗаказомПоставщику.Текст = "ВЫБРАТЬ ПЕРВЫЕ 20
		                                 |	ПриобретениеТоваровУслугТовары.Ссылка КАК Ссылка,
		                                 |	ПриобретениеТоваровУслугТовары.Ссылка.Дата КАК Дата,
		                                 |	ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента
		                                 |ИЗ
		                                 |	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		                                 |ГДЕ
		                                 |	ПриобретениеТоваровУслугТовары.Ссылка.Контрагент = &Поставщик
		                                 |	И ПриобретениеТоваровУслугТовары.Ссылка.ЗаказПоставщику = &ЗаказПоставщику
		                                 |	И ПриобретениеТоваровУслугТовары.Ссылка.Дата >= &Дата
		                                 |	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента";//если не указать, тогда поступления emex затираются
					   //|	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента <> &ПустойНомер";
					   //|	И ПриобретениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
	КонецЕсли;
	ЗапросПриобретениеСегодняшнее = Новый Запрос;
	ЗапросПриобретениеСегодняшнее.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                              |	ПриобретениеТоваровУслугТовары.Ссылка КАК Ссылка,
	                              |	ПриобретениеТоваровУслугТовары.Ссылка.Дата КАК Дата
	                              |ИЗ
	                              |	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	                              |ГДЕ
	                              |	ПриобретениеТоваровУслугТовары.Ссылка.Контрагент = &Поставщик
	                              |	И ПриобретениеТоваровУслугТовары.Ссылка.Дата >= &Дата";
	
	//или в метаданных проверяем
	Если Метаданные.Документы.Найти("ПриобретениеТоваровУслуг") = Неопределено Тогда
	//Если НЕ УТКазахстан И (УТ111 Или УТ113 Или УТ113 Или ВерсияУТ = "3.2.3.18") Тогда //3.2.3.18 - старая УТ казахстан
		ЗапросБезЗаказаПоставщику.Текст = СтрЗаменить(ЗапросБезЗаказаПоставщику.Текст, "ПриобретениеТоваровУслуг", "ПоступлениеТоваровУслуг");
		ЗапросСЗаказомПоставщику.Текст = СтрЗаменить(ЗапросСЗаказомПоставщику.Текст, "ПриобретениеТоваровУслуг", "ПоступлениеТоваровУслуг");
		ЗапросПриобретениеСегодняшнее.Текст = СтрЗаменить(ЗапросПриобретениеСегодняшнее.Текст, "ПриобретениеТоваровУслуг", "ПоступлениеТоваровУслуг");
		ЕстьПриобретение = Ложь;
	Иначе
		ЕстьПриобретение = Истина;
	КонецЕсли;
	НачалоЭтогоДня = НачалоДня(ТекущаяДата());
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли; 
		//Если Не СтрокаЗаявки.Изменена Тогда//надо или и в заказах поставщикам раскомменировать или оставить всё закомментированным пока
		//	Продолжить;
		//КонецЕсли;
		Если ФильтрПоЗаявке<>0 И СтрокаЗаявки.НомерЗаявки <> ФильтрПоЗаявке Тогда //если принудительно загружаем заявку, то заново всё создаём или находим
			Продолжить;
		КонецЕсли;
		//Если СписокИзмененныхЗаявок.НайтиПоЗначению(СтрокаЗаявки.ЗаказКлиента) = Неопределено Тогда
		//КонецЕсли;
		//выбираем из позиций номенклатуры поставщиков
		СписокПоставщиков.Очистить();
		СтруктураПоискаЗаявки.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		СтрокиНоменклатурыБезСтатусов = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
		СтрокиНоменклатуры = Новый Массив;//в этом массиве отобранные позиции номенклатуры
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатурыБезСтатусов Цикл
			Если СписокСтатусов.НайтиПоЗначению(СтрокаНоменклатуры.КодСтатуса) <> Неопределено Тогда
				Если НеСоздаватьЛишниеЗаказыПоставщикам Тогда //заказы на наши склады не создают поступления
					Если МассивВыгружаемыхСкладов.Найти(СтрокаНоменклатуры.distributorId) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
				Если ЗначениеЗаполнено(СтрокаНоменклатуры.Поставщик) Тогда
					Если СписокПоставщиков.НайтиПоЗначению(СтрокаНоменклатуры.Поставщик) = Неопределено Тогда
						//СписокПоставщиков.Добавить(СтрокаНоменклатуры.Поставщик, Формат(СтрокаНоменклатуры.distributorId,"ЧГ=0"));
						СписокПоставщиков.Добавить(СтрокаНоменклатуры.Поставщик, СтрокаНоменклатуры.distributorId);
					КонецЕсли;
				Иначе
					Продолжить;//
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СписокПоставщиков.Количество() = 0 Тогда //у этой заявки нет поставщиков или они не заполнены, не создаем заказ поставщику
			Продолжить;
		КонецЕсли;
		Для Каждого ПоставщикИзСписка Из СписокПоставщиков Цикл
			СтруктураПоискаПозицийПоставщика.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
			СтруктураПоискаПозицийПоставщика.Поставщик = ПоставщикИзСписка.Значение;
			СтрокиНоменклатурыБезСтатусов = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаПозицийПоставщика);
			Если СтрокиНоменклатурыБезСтатусов.Количество() = 0 Тогда //поставщика отобрали, но по нему почему-то нет позиций
				Продолжить;
			КонецЕсли;
			СтрокиНоменклатуры = Новый Массив;
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатурыБезСтатусов Цикл
				Если СписокСтатусов.НайтиПоЗначению(СтрокаНоменклатуры.КодСтатуса) <> Неопределено Тогда
					СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
				КонецЕсли;
			КонецЦикла;
			НайденныйДокумент = Неопределено;
			МассивУжеПоступивших = Новый Массив;
			Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
				Если (СтрокаЗаявки.Закрыта) Тогда
					Продолжить;
				КонецЕсли;
				ЗаказПоставщику = СтрокиНоменклатуры[0].ЗаказПоставщику;
				//ЗапросСЗаказомПоставщику.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);//есть массив с заказами, а этот параметр не используется
				//ЗаказыПоставщику = Новый Массив;
				//ЗаказыПоставщику.Добавить(ЗаказПоставщику);
				ЗапросСЗаказомПоставщику.УстановитьПараметр("Поставщик", ПоставщикИзСписка.Значение);
				Если ОдноПоступлениеВДеньПоПоставщику Тогда
					ЗапросСЗаказомПоставщику.УстановитьПараметр("Дата", НачалоДня(СтрокаЗаявки.ДатаЗаявки-СмещениеЧасовогоПояса*3600));
				Иначе
					ЗапросСЗаказомПоставщику.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки-СмещениеЧасовогоПояса*3600);
				КонецЕсли;
				ЗапросСЗаказомПоставщику.УстановитьПараметр("ПустойНомер", "");
				ЗапросСЗаказомПоставщику.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
				ЗапросСЗаказомПоставщику.УстановитьПараметр("НомерВходящегоДокумента", Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"));
				Результат = ЗапросСЗаказомПоставщику.Выполнить();
			Иначе
				ЗапросБезЗаказаПоставщику.УстановитьПараметр("НомерВходящегоДокумента", Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"));
				//ЗаписьВЛог("ищем поступление без заявки покупателя, по № "+СтрокаЗаявки.НомерЗаявки);
				ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
				ЗапросБезЗаказаПоставщику.УстановитьПараметр("Поставщик", ПоставщикИзСписка.Значение);
				Если ОдноПоступлениеВДеньПоПоставщику Тогда
					ЗапросБезЗаказаПоставщику.УстановитьПараметр("Дата", НачалоДня(СтрокаЗаявки.ДатаЗаявки-СмещениеЧасовогоПояса*3600));
				Иначе
					ЗапросБезЗаказаПоставщику.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки-СмещениеЧасовогоПояса*3600);
				КонецЕсли;
				ЗапросБезЗаказаПоставщику.УстановитьПараметр("ПустойНомер", "");
				Результат = ЗапросБезЗаказаПоставщику.Выполнить();
			КонецЕсли;
		
			ОрганизацияОтличается = Ложь;
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Если ОдноПоступлениеВДеньПоПоставщику Тогда
					Пока Выборка.Следующий() Цикл
						НайденныйДокумент = Выборка.Ссылка;
						Если Выборка.Дата < НачалоЭтогоДня Тогда
							Для Каждого СтрокаДокумента Из Выборка.Ссылка.Товары Цикл
								Если МассивУжеПоступивших.Найти(СтрокаДокумента.КодСтроки) = Неопределено Тогда
									МассивУжеПоступивших.Добавить(СтрокаДокумента.КодСтроки);
								КонецЕсли;
							КонецЦикла;
						Иначе
							НайденныйДокумент = Выборка.Ссылка;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Выборка.Следующий();
					НайденныйДокумент = Выборка.Ссылка;
				КонецЕсли;
				Сопоставлено = 0;
				Если МассивУжеПоступивших.Количество() > 0 И МассивУжеПоступивших.Количество() = СтрокиНоменклатуры.Количество() Тогда
					Сопоставлено = 0;
					Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
						Если МассивУжеПоступивших.Найти(СтрокаНоменклатуры.ИдентификаторНоменклатуры) <> Неопределено Тогда
							Сопоставлено = Сопоставлено + 1;
						КонецЕсли;
					КонецЦикла;
					//всё поставлено, поэтому новое не создаём
					Если МассивУжеПоступивших.Количество() = Сопоставлено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ОдноПоступлениеВДеньПоПоставщику И ЗначениеЗаполнено(НайденныйДокумент) Тогда
					Если НайденныйДокумент.Дата < НачалоЭтогоДня Тогда
						НайденныйДокумент = Неопределено;
					КонецЕсли;
				КонецЕсли;				
				Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
					//проверяем сумму
					СуммаПоНоменклатуре = 0;
					Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
						Если МассивУжеПоступивших.Найти(СтрокаНоменклатуры.ИдентификаторНоменклатуры) = Неопределено Тогда
							СуммаПоНоменклатуре = СуммаПоНоменклатуре + СтрокаНоменклатуры.ЦенаЗакупки * СтрокаНоменклатуры.Количество;
						КонецЕсли;
					КонецЦикла;
					Если ЗначениеЗаполнено(ЗаказПоставщику) И (НЕ ЗначениеЗаполнено(НайденныйДокумент) Или НайденныйДокумент.Организация <> ЗаказПоставщику.Организация) Тогда
						ОрганизацияОтличается = Истина;
					КонецЕсли; 
					Если ОрганизацияОтличается = Ложь И (СтрокиНоменклатуры.Количество() = НайденныйДокумент.Товары.Количество()) И (СуммаПоНоменклатуре = НайденныйДокумент.Товары.Итог("Сумма")) И ФильтрПоЗаявке = 0 Тогда //будем считать, что ничего не поменялось, поэтому документ не трогаем
						Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
							СтрокаНоменклатуры.ПоступлениеТоваровУслуг = НайденныйДокумент;
							//!!! здесь надо создать приходный ордер на товары
						КонецЦикла;
						Если НЕ ОдноПоступлениеВДеньПоПоставщику Тогда//если одно поступление в день, то не так считаем
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ОдноПоступлениеВДеньПоПоставщику Тогда
					//по этому поставщику в этот день может быть поступление по другому заказу, его надо найти
					ЗапросПриобретениеСегодняшнее.УстановитьПараметр("Дата", НачалоЭтогоДня);
					ЗапросПриобретениеСегодняшнее.УстановитьПараметр("Поставщик", ПоставщикИзСписка.Значение);
					Результат = ЗапросПриобретениеСегодняшнее.Выполнить();
					Если Не Результат.Пустой() Тогда
						Выборка = Результат.Выбрать();
						Выборка.Следующий();
						НайденныйДокумент = Выборка.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
			//не нашли - создаем, или нашли, заново заполняем
			Если НайденныйДокумент = Неопределено Тогда
				//ЗаписьВЛог("Не найдено поступление "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"));
				Если ЕстьПриобретение Тогда
					ДокОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
				Иначе
					ДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				КонецЕсли;
				Если НЕ УТ111 И НЕ УТ112 И НЕ УТ113 Тогда
					Если ЕстьВариантПриемкиТоваров Тогда //И Подверсия3 <> 1 Тогда
						ДокОбъект.ВариантПриемкиТоваров = ВариантПриемкиТоваров;
					КонецЕсли;
					Если НЕ УТ115 Тогда
						Попытка
							ДокОбъект.Курс = 1;
							ДокОбъект.Кратность = 1;
						Исключение
							сообщить("В документе приобретения не найден реквизит «Курс»"); //в 11.5 КурсЧислитель и КурсЗнаменатель //Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
						КонецПопытки;
					Иначе
						Попытка
							ДокОбъект.КурсЧислитель = 1;
							ДокОбъект.КурсЗнаменатель = 1;
						Исключение
							сообщить("В документе приобретения не найден реквизит «Курс числитель»"); //в 11.5 КурсЧислитель и КурсЗнаменатель //Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
						КонецПопытки;
						
					КонецЕсли;
					ДокОбъект.Подразделение = СтрокаЗаявки.Подразделение;
				КонецЕсли;
				ДокОбъект.НомерВходящегоДокумента = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
				ДокОбъект.ДатаВходящегоДокумента = СтрокаЗаявки.ДатаЗаявки;
				//ДокОбъект.Дата = ТекущаяДата();//СтрокаЗаявки.ДатаЗаявки;
				//ДокОбъект.Дата = СтрокаЗаявки.dateUpdated;//если загрузка за большой период, лучше ставить дату последнего обновления
				ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновленияПозиций;//по дате последнего изменения статуса позиции
				ДокОбъект.Согласован = Истина;
				ДокОбъект.БанковскийСчетОрганизации = БанковскийСчет;
				ДокОбъект.Организация = СтрокаЗаявки.Организация;
				врем = ОрганизацияПоИсходномуПоставщику.Получить(СтрокиНоменклатуры[0].ИсходныйdistributorId);
				Если Отладка И ФильтрПоЗаявке>0 Тогда
					сообщить("Исходный distributorId "+СтрокиНоменклатуры[0].ИсходныйdistributorId+", организация: "+врем);
				КонецЕсли;
				Если ЗначениеЗаполнено(врем) Тогда
					ДокОбъект.Организация = врем;
				КонецЕсли;
				ДокОбъект.Контрагент = ПоставщикИзСписка.Значение;
				Если ОрганизацияПоТипуОплаты Тогда
					Если ЗаполнятьПоТипамПлатежей И СтрокаЗаявки.paymentTypeId>0 Тогда
						ОрганизацияИзТипаПлатежа = СоответствиеОрганизацииПоТипуПлатежа.Получить(СтрокаЗаявки.paymentTypeId);
						Если ОрганизацияИзТипаПлатежа <> Неопределено Тогда
							ДокОбъект.Организация = ОрганизацияИзТипаПлатежа;
							Если Отладка И ФильтрПоЗаявке>0 Тогда
								сообщить("Тип платежа "+СтрокаЗаявки.paymentTypeId+", организация: "+ОрганизацияИзТипаПлатежа);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ОрганизацияВПоступлении) Тогда
					ДокОбъект.Организация = ОрганизацияВПоступлении;
				КонецЕсли;
				ДокОбъект.НалогообложениеНДС = СоответствиеНалогообложениеНДСПоступление.Получить(ДокОбъект.Контрагент);
				Если Не ЗначениеЗаполнено(ДокОбъект.НалогообложениеНДС) Тогда
					ДокОбъект.НалогообложениеНДС = НалогообложениеНДСПоступление;
				КонецЕсли;
				Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
					ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				Иначе
					ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				КонецЕсли;
				ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПокупке;//всегда должно стоять
				Если УТ113 Или УТ114 Тогда
					ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
				КонецЕсли;
				Если УТ111 Тогда
					ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;//??? зависит от настроек
				Иначе
					ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
				КонецЕсли;
				//ДокОбъект.ЗакупкаПодДеятельность = НалогообложениеНДСПоступление;
			Иначе
				//мы вчерашние поступившие нашли, но сегодня мы должны создать новое поступление
				Если ОдноПоступлениеВДеньПоПоставщику Тогда
					ЗапросПриобретениеСегодняшнее.УстановитьПараметр("Дата", НачалоЭтогоДня);
					ЗапросПриобретениеСегодняшнее.УстановитьПараметр("Поставщик", ПоставщикИзСписка.Значение);
					Результат = ЗапросПриобретениеСегодняшнее.Выполнить();
					Если Не Результат.Пустой() Тогда
						Выборка = Результат.Выбрать();
						Выборка.Следующий();
						НайденныйДокумент = Выборка.Ссылка;
					КонецЕсли;
					ЗаписьВЛог("Найдено одно поступление в день для заявки "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"),2);
				Иначе
					ЗаписьВЛог("Найдено поступление к заявке "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"),2);
				КонецЕсли;
				Если НеОбновлятьЗагруженныеПоступления Тогда
					Продолжить;
				КонецЕсли;
				ДокОбъект = НайденныйДокумент.ПолучитьОбъект();
				Если ДокОбъект.Дата > СтрокаЗаявки.ДатаОбновления Тогда
					ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновления;
				КонецЕсли;
				Если ДокОбъект.Дата<СтрокаЗаявки.ДатаЗаявки Тогда
					ДокОбъект.Дата = СтрокаЗаявки.ДатаЗаявки + 1;
				КонецЕсли;
				
				
				Если УТ114 Тогда
					Если ЕстьВариантПриемкиТоваров Тогда //И Подверсия3 <> 1 Тогда
						ДокОбъект.ВариантПриемкиТоваров = ВариантПриемкиТоваров;
					КонецЕсли;
				КонецЕсли;
				СтрокаНоменклатуры.ПоступлениеТоваровУслуг = НайденныйДокумент.Ссылка;
				Если НЕ ОдноПоступлениеВДеньПоПоставщику Тогда
					ДокОбъект.Товары.Очистить();//если не совпадает, всё заново перезаполняем
				Иначе
					//если одно поступление в день, то удаляем только строки с текущими позициями номеклатуры
					СтруктураДляУдаленияСтрок = Новый Структура("КодСтроки");
					Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
						СтруктураДляУдаленияСтрок.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
						СтрокиДляУдаления = ДокОбъект.Товары.НайтиСтроки(СтруктураДляУдаленияСтрок);
						Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
							ДокОбъект.Товары.Удалить(СтрокаДляУдаления);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			//ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки
			Если ЗначениеЗаполнено(ЗаказПоставщику)  Тогда //если делаем поступление без заказов
				ДокОбъект.ЗаказПоставщику = ЗаказПоставщику;//а если несколько заказов ниже очищаем
				ДокОбъект.ПоступлениеПоЗаказам = Истина;
				Если ОрганизацияОтличается Тогда
					ДокОбъект.Организация = ЗаказПоставщику.Организация;
				КонецЕсли; 
			Иначе
				ДокОбъект.ЗаказПоставщику = "";
				ДокОбъект.ПоступлениеПоЗаказам = Ложь;
			КонецЕсли;
			Если НЕ УТ111 Тогда
				ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
				Если ЗначениеЗаполнено(СпособДоставки) Тогда
					ДокОбъект.СпособДоставки = СпособДоставки;
				КонецЕсли;
			КонецЕсли;
			Если УТ114 И Подверсия3 < 6 Тогда
				ДокОбъект.ДатаПлатежа = ДокОбъект.Дата + 3600*24;
			КонецЕсли;
			ДокОбъект.Комментарий = СтрокаЗаявки.Комментарий;
			ДокОбъект.Валюта = Валюта;
			Если ЦеныЗакупкиВРублях Тогда//поступление
				ДокОбъект.Валюта = Рубли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаЗакупки) Тогда
				ДокОбъект.Валюта = СтрокаЗаявки.ВалютаЗакупки;
			КонецЕсли;
			Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
				ДокОбъект.Валюта = Валюта;
			КонецЕсли;
			
			ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
			Если ЗначениеЗаполнено(СкладВПоступлении) Тогда
				ДокОбъект.Склад = СкладВПоступлении;
			Иначе
				Если ЗначениеЗаполнено(СтрокаЗаявки.Склад) Тогда
					ДокОбъект.Склад = СтрокаЗаявки.Склад;
				Иначе
					ДокОбъект.Склад = Склад;
				КонецЕсли;
			КонецЕсли;
			Если УТ113 Или УТ114 Тогда
				Если ЗначениеЗаполнено(СтрокаЗаявки.Подразделение) Тогда
					ДокОбъект.Подразделение = СтрокаЗаявки.Подразделение;
				Иначе
					ДокОбъект.Подразделение = Подразделение;
				КонецЕсли;
			КонецЕсли;
			ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			ДокОбъект.Контрагент = ПоставщикИзСписка.Значение;
			ДокОбъект.РегистрироватьЦеныПоставщика = РегистрироватьЦеныПоставщика;
			ДокОбъект.Партнер = ДокОбъект.Контрагент.Партнер;
			Если ИспользоватьСоглашенияСПоставщиками Тогда
				врем = СоглашениеПоИсходномуПоставщику.Получить(СтрокиНоменклатуры[0].ИсходныйdistributorId);
				Если ЗначениеЗаполнено(врем) Тогда
					Если Отладка И ФильтрПоЗаявке>0 Тогда
						сообщить("Исходный distributorId "+СтрокиНоменклатуры[0].ИсходныйdistributorId+", соглашение: "+врем);
					КонецЕсли;
					СоглашениеПоСкладу = врем;
				Иначе
					СоглашениеПоСкладу = СоответствиеСоглашениеПоСкладу.Получить(СтрокиНоменклатуры[0].distributorId);
				КонецЕсли;
				Если СоглашениеПоСкладу <> Неопределено Тогда
					ДокОбъект.Соглашение = СоглашениеПоСкладу;
				Иначе
					ПолучитьУсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(ДокОбъект.Партнер);
					Если ЗначениеЗаполнено(ПолучитьУсловияЗакупокПоУмолчанию) Тогда
						ДокОбъект.Соглашение = ПолучитьУсловияЗакупокПоУмолчанию.Соглашение;
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
					Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
						ДокОбъект.Соглашение = СоглашениеРозница;
					Иначе
						ДокОбъект.Соглашение = СоглашениеОпт;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
					ДокОбъект.Соглашение = ПолучитьСоглашениеСПоставщиком(ДокОбъект.Контрагент,,ДокОбъект.Организация);
				КонецЕсли;
				ЗаполнитьПоСоглашениюСПоставщиком(ДокОбъект);//заказ поставщику
			КонецЕсли;
			Если ИспользоватьДоговорыСПоставщиками Тогда
				ДокОбъект.Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация);
				Если Не ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
					ДокОбъект.Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект,ДокОбъект.ХозяйственнаяОперация,,,ДокОбъект.Контрагент);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ДокОбъект.Договор) И СоздаватьДоговоры Тогда
					НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					НовыйДоговор.ИнициализироватьСправочник();
					ЗаполнитьРеквизитыНовогоДоговора(НовыйДоговор, ДокОбъект.Контрагент);
					
					НовыйДоговор.Наименование = "Поставки";
					НовыйДоговор.Организация = ДокОбъект.Организация;
					НовыйДоговор.Подразделение = Подразделение;
					Если ОрганизацияПоТипуОплаты Тогда
						Если ЗаполнятьПоТипамПлатежей И СтрокаЗаявки.paymentTypeId>0 Тогда
							ОрганизацияИзТипаПлатежа = СоответствиеОрганизацииПоТипуПлатежа.Получить(СтрокаЗаявки.paymentTypeId);
							Если ОрганизацияИзТипаПлатежа <> Неопределено Тогда
								НовыйДоговор.Организация = ОрганизацияИзТипаПлатежа;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОрганизацияВПоступлении) Тогда
						НовыйДоговор.Организация = ОрганизацияВПоступлении;
					КонецЕсли;
					
					НовыйДоговор.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
					НовыйДоговор.ПорядокРасчетов = ПорядокРасчетовЗаказПоставщику;
					НовыйДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
					НовыйДоговор.Комментарий = "(СоздатьПоступленияТоваровУслуг) авт. создан при обмене с ABCP "+ТекущаяДата()+", поставщик "+СокрЛП(НовыйДоговор.Контрагент);
					Если НЕ УТ111 И НЕ УТ112 И НЕ УТ113 Тогда //И НЕ (УТ114 И (Подверсия3=3 ИЛИ Подверсия3=1)) Тогда //в 11.4.3 этого реквизита нет
						НовыйДоговор.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
					КонецЕсли;
					НовыйДоговор.Записать();
					ДокОбъект.Договор = НовыйДоговор.Ссылка;
					ТекстСообщения = "создан с поставщиком:	"+СокрЛП(НовыйДоговор.Контрагент);
					ЗаписьВЛог(ТекстСообщения,3);
				КонецЕсли;
				Если НЕ УТКазахстан Тогда
					Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
						Если УТ113 ИЛИ УТ114 Тогда
							ДокОбъект.ПорядокОплаты = ДокОбъект.Договор.ПорядокОплаты;
						КонецЕсли;
						ДокОбъект.ПорядокРасчетов = ДокОбъект.Договор.ПорядокРасчетов;
					Иначе
						ДокОбъект.ПорядокРасчетов = ПорядокРасчетовЗаказПоставщику;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ДокОбъект.Согласован = Истина;
			
			Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
				ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Иначе
				ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			КонецЕсли;
			ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПокупке;//всегда должно стоять
			Если УТ113 И Подверсия3 = 4 Тогда ДокОбъект["ДатаПлатежа"] = ДокОбъект.Дата; КонецЕсли;//11.3.4.21
			//раньше уже удаляли ДокОбъект.Товары.Очистить();
			НС = 0;
			Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
				ТаблицаЗаказаПокупателя = СтрокаЗаявки.ЗаказКлиента.Товары.Выгрузить(,"Номенклатура, КодСтроки, НомерСтроки");
			Иначе
				ТаблицаЗаказаПокупателя = Неопределено;
			КонецЕсли;
			ЗаказДляИзменения = Неопределено;
			СтруктураДляЗаказа = Новый Структура("Номенклатура");
			СтруктураДляЗаказа.Вставить("НомерСтроки");
			СтруктураСвод = Новый Структура("Номенклатура");
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				Если МассивУжеПоступивших.Найти(СтрокаНоменклатуры.ИдентификаторНоменклатуры) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НС = НС + 1;
				СтрокаДокумента = ДокОбъект.Товары.Добавить();
				Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
					СтрокаДокумента.ЗаказПоставщику = ЗаказПоставщику;
				КонецЕсли;
				СтрокаДокумента.Количество = СтрокаНоменклатуры.Количество;
				Если СтрокаДокумента.Количество = 0 Тогда
					СтрокаДокумента.Количество = 0.01;
				КонецЕсли;
				СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество;
				//СтрокаДокумента.КодСтроки = СтрокаДокумента.НомерСтроки;
				СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				СтрокаДокумента.Склад = ДокОбъект.Склад;
				//СтрокаДокумента.Склад = СтрокаТовара.Склад;
				СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаЗакупки;
				Если СтрокаДокумента.Цена = 0 Тогда
					СтрокаДокумента.Цена = 0.01;
				КонецЕсли;
				СтрокаДокумента.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
				СтрокаДокумента.Сумма = СтрокаНоменклатуры.ЦенаЗакупки * СтрокаДокумента.Количество;
				ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтрокаДокумента, ДокОбъект.Договор);
				СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
				Если ИспользоватьСерииНоменклатуры Тогда
					СтрокаДокумента.Серия = НайтиДобавитьСериюНоменклатуры(СтрокаНоменклатуры);
					СтрокаДокумента.СтатусУказанияСерий = 14;//13;
				Иначе//Если КонстантаИспользоватьСерииНоменклатуры Тогда
					СтрокаДокумента.СтатусУказанияСерий = 0;
					СтрокаДокумента.Серия = "";
				КонецЕсли;
				Если УТ114 Тогда
					СтрокаДокумента.Подразделение = ДокОбъект.Подразделение;
				КонецЕсли;
				Если ТаблицаЗаказаПокупателя <> Неопределено Тогда
					//НайденнаяСтрока = ТаблицаЗаказаПокупателя.Найти(СтрокаНоменклатуры.Номенклатура,"Номенклатура");
					СтруктураДляЗаказа.Номенклатура = СтрокаНоменклатуры.Номенклатура;//если в одном документе одинаковая номенклатура, то пишем в разные строки
					СтруктураДляЗаказа.НомерСтроки = СтрокаНоменклатуры.НомерСтроки;
					НайденныеСтрокиЗаказа = ТаблицаЗаказаПокупателя.НайтиСтроки(СтруктураДляЗаказа);
					Если НайденныеСтрокиЗаказа.Количество()>0 Тогда
						НайденнаяСтрока = НайденныеСтрокиЗаказа[0];
						//СтрокаДокумента.КодСтроки = НайденнаяСтрока.КодСтроки;
						Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
							ЗаказДляИзменения = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
							СтрокаЗаказаКлиента = ЗаказДляИзменения.Товары[НайденнаяСтрока.НомерСтроки-1];
							Если НЕ СтрокаЗаказаКлиента.Отменено Тогда
								Если УТ111 Тогда
									СтрокаЗаказаКлиента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
								Иначе
									СтрокаЗаказаКлиента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
									//или какой-то другой статус
									ВариантОбеспечения = СоответствиеВариантыОбеспеченияПоСтатусам.Получить(СтрокаНоменклатуры.КодСтатуса);
									Если ЗначениеЗаполнено(ВариантОбеспечения) Тогда
										СтрокаЗаказаКлиента.ВариантОбеспечения = ВариантОбеспечения;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						//и в заказе клиента у позиции ставим статус "К отгрузке"
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ДокОбъект.СуммаВзаиморасчетов = ДокОбъект.Товары.Итог("Сумма");
			ДокОбъект.СуммаВзаиморасчетовПоЗаказу = ДокОбъект.Товары.Итог("Сумма");
			ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
			ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
				ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
			Попытка
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
					ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
					Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
						СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
						ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
					КонецЕсли;
				Иначе
					Если ИспользоватьГрафикиОплаты Тогда
						Если НЕ НеПерезаполнятьШапкуДокументов Или НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
							Если УТ114 И (Подверсия3 > 5) Тогда
								ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
							КонецЕсли;
						КонецЕсли;
					Иначе
						СуммаЗаказано = ДокОбъект.Товары.Итог("Сумма");
						СуммаЗалогаЗаТару = 0;
						Если НЕ НеПерезаполнятьШапкуДокументов Или НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
							Если УТ115 Или (УТ114 И (Подверсия3 > 5)) Тогда
								ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
							ИначеЕсли НЕ УТ111 Тогда
								Если УТ114 И (Подверсия3 > 5) Тогда
									ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
										ДокОбъект,
										ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
										ДокОбъект.Дата,//обычно пустая
										СуммаЗаказано,
										СуммаЗалогаЗаТару);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				ДокОбъект.Записать(РежимЗаписиДок);
			Исключение
				ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),6,Истина);
				ДокОбъект.Записать();
			КонецПопытки;
 			Если РегистрироватьЦеныАвтоматическогоПоступления И ЗначениеЗаполнено(ВидЦены) Тогда //у
				Если ЗначениеЗаполнено(ВидЦеныПродажи) И (ВидЦены<>ВидЦеныПродажи) Тогда
					СоздатьУстановкуЦенНоменклатурыЗакупкиИПродажи(ДокОбъект.Ссылка, СтрокиНоменклатуры);
				Иначе
					СоздатьУстановкуЦенНоменклатуры(ДокОбъект.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			Если ДокОбъект.Проведен И НЕ ЗаказДляИзменения = Неопределено Тогда
				Попытка
					ОтгрузитьИлиОтменено = 0;
					Для Каждого СтрокаЗаказа Из ЗаказДляИзменения.Товары Цикл
						//или доставка, тоже проверять
						Если СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Или СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
							ОтгрузитьИлиОтменено = ОтгрузитьИлиОтменено + 1;
						КонецЕсли;
					КонецЦикла;
					Если ЗаказДляИзменения.Товары.Количество() = ОтгрузитьИлиОтменено Тогда
						ЗаказДляИзменения.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
						
						Если НЕ УТ115 Тогда
							ЗаказДляИзменения.ЖелаемаяДатаОтгрузки = ДокОбъект.Дата;//или из реализации
						КонецЕсли;
						ЗаказДляИзменения.Записать(РежимЗаписиДок);
					КонецЕсли;
				Исключение
					ЗаписьВЛог("Не удалось изменить статус «К отгрузке» в документе: "+ДокОбъект+" "+ОписаниеОшибки(),6,Истина);
					//ЗаказДляИзменения.Записать();
				КонецПопытки;
			КонецЕсли;
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				СтрокаНоменклатуры.ПоступлениеТоваровУслуг = ДокОбъект.Ссылка;
			КонецЦикла;
			
			Если ИспользоватьОрдерныеСклады И Склад.ИспользоватьОрдернуюСхемуПриПоступлении Тогда
				ПриходныйОрдерНаТовары = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
				ДанныеЗаполнения = Новый Структура("Склад, Помещение, ЗонаПриемки, СкладскаяОперация, Отправитель, ЗакрыватьГрафикПоступления, ДатаВходящегоДокумента, НомерВходящегоДокумента, Распоряжение");
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДокОбъект.Ссылка);
				ДанныеЗаполнения.Отправитель = ДокОбъект.Контрагент.Партнер;
				ДанныеЗаполнения.Распоряжение = ДокОбъект.Ссылка; 
				//ДанныеЗаполнения.ДатаПоступления = ДокОбъект.Дата; - должна быть пустой
				ДанныеЗаполнения.ЗакрыватьГрафикПоступления = Истина;
				ДанныеЗаполнения.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
				ПриходныйОрдерНаТовары.Заполнить(ДанныеЗаполнения);
				ПриходныйОрдерНаТовары.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
				Если Склад.ИспользоватьСкладскиеПомещения Тогда
					ПриходныйОрдерНаТовары.Помещение = Помещение;
				КонецЕсли;
				НС = 0;
				ЗаписьВЛог("Строки приходного ордера на	номенклатуру	исп.упаковки	набор упаковок	количество	штрих-код",3);
				Для Каждого СтрокаДокумента Из ДокОбъект.Товары Цикл
					СтрокаОрдера = ПриходныйОрдерНаТовары.Товары[НС];
					ЗаполнитьЗначенияСвойств(СтрокаОрдера, СтрокаДокумента, "КоличествоУпаковок,Количество");
					НС = НС + 1;
					ТекстСообщения = ""+НС+	"	"+СтрокаОрдера.Номенклатура+"	"+СтрокаОрдера.Номенклатура.ИспользоватьУпаковки+"	"+СтрокаОрдера.Номенклатура.НаборУпаковок+"	"+СтрокаОрдера.Количество+"	"+СтрокаОрдера.Штрихкод;
					ЗаписьВЛог(ТекстСообщения,3);
				КонецЦикла;
				Если ПриходныйОрдерНаТовары.Склад.ИспользоватьСкладскиеПомещения Тогда
					ПриходныйОрдерНаТовары.Помещение = Помещение;
				КонецЕсли;
				ПриходныйОрдерНаТовары.Отправитель = ДокОбъект.Контрагент.Партнер;//ПриходныйОрдерНаТовары.Склад;
				ПриходныйОрдерНаТовары.Дата = ДокОбъект.Дата;
				ПриходныйОрдерНаТовары.НомерВходящегоДокумента = ДокОбъект.НомерВходящегоДокумента;
				ПриходныйОрдерНаТовары.ДатаВходящегоДокумента = ДокОбъект.ДатаВходящегоДокумента;
				Попытка
					ПриходныйОрдерНаТовары.Записать(РежимЗаписиДок);
				Исключение
					ЗаписьВЛог("Не удалось провести документ: "+ПриходныйОрдерНаТовары+" "+ОписаниеОшибки(),6,Истина);
					ПриходныйОрдерНаТовары.Записать();
				КонецПопытки;
				
				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
					СтрокаНоменклатуры.ПриходныйОрдерНаТовары = ПриходныйОрдерНаТовары.Ссылка;
				КонецЦикла;
			КонецЕсли;
			ЗаписьВЛог("Записано "+ДокОбъект.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " клиенту «"+СтрокаЗаявки.Контрагент+"» и поставщику «"+ПоставщикИзСписка+"»",3);
		КонецЦикла;
	КонецЦикла;
	//создаем при необходимости с/ф
КонецПроцедуры //СоздатьПоступленияТоваровУслуг

Процедура СоздатьОрдераНаПоступление()
	Если НЕ ИспользоватьОрдерныеСклады Тогда
		Возврат;
	КонецЕсли;
	//сначала ищем, вдруг уже есть поступления по этим заказам - ищем по документу основанию и поставщику
	//сортируем заявки по поставщику, чтобы создавать несколько поступлений, если разные поставщики в одном документе
	//вносим сегодняшней датой
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено И НЕ УТКазахстан Тогда
		ЕстьВариантПриемкиТоваров = Ложь;
		ВариантПриемкиТоваров = "";
	Иначе
		ЕстьВариантПриемкиТоваров = Истина;
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	Если УТ114 И НЕ УТКазахстан Тогда
		Если Метаданные.Документы.ПриобретениеТоваровУслуг.Реквизиты.Найти("ВариантПриемкиТоваров") = Неопределено Тогда
			ЕстьВариантПриемкиТоваров = Ложь;
		КонецЕсли;
	КонецЕсли;
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	СоответствиеНалогообложениеНДСПоступление = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаСкладов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.НалогообложениеНДСПоступление) Тогда
			СоответствиеНалогообложениеНДСПоступление.Вставить(ТекСтрока.Контрагент, ТекСтрока.НалогообложениеНДСПоступление);
		Иначе
			СоответствиеНалогообложениеНДСПоступление.Вставить(ТекСтрока.Контрагент, НалогообложениеНДСПоступление);
		КонецЕсли;
	КонецЦикла;
	СтруктураПоискаЗаявки = Новый Структура("НомерЗаявки");
	
	СтруктураПоискаПозицийПоставщика = Новый Структура("НомерЗаявки");
	СтруктураПоискаПозицийПоставщика.Вставить("Поставщик");
	
	СписокСтатусов = Новый СписокЗначений;//список статусов, при которых создается ордер на поступление
	Структура = Новый Структура("СоздаватьПриходныйОрдер", Истина);
	НайденныеСтроки = ТаблицаСтатусов.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СписокСтатусов.Добавить(НайденнаяСтрока.КодСтатуса);
	КонецЦикла;
	//Если Не НеЗагружатьОтказы И ЗначениеЗаполнено(КодСтатусаОтказ) Тогда
	//	СписокСтатусов.Добавить(КодСтатусаОтказ);
	//	//МассивЗагружаемыхСтатусов.Добавить(КодСтатусаОтказ);
	//КонецЕсли;
	
	СоответствиеВариантыОбеспеченияПоСтатусам = Новый Соответствие;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если ЗначениеЗаполнено(СтрокаСтатуса.ВариантОбеспечения) Тогда
			СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.ВариантОбеспечения);
		Иначе
			Если УТ111 Тогда
				СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.СоСклада);
			Иначе
				Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
					СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.Требуется);
				ИначеЕсли Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("УдалитьТребуется")<> Неопределено Тогда
					СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.УдалитьТребуется);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//сначала ищем, вдруг уже есть поступления по этим заказам - ищем по документу основанию и поставщику
	//сортируем заявки по поставщику, чтобы создавать несколько поступлений, если разные поставщики в одном документе
	//вносим сегодняшней датой
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено И НЕ УТКазахстан Тогда
		ЕстьВариантПриемкиТоваров = Ложь;
		ВариантПриемкиТоваров = "";
	Иначе
		ЕстьВариантПриемкиТоваров = Истина;
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	Если УТ114 И НЕ УТКазахстан Тогда
		Если Метаданные.Документы.ПриобретениеТоваровУслуг.Реквизиты.Найти("ВариантПриемкиТоваров") = Неопределено Тогда
			ЕстьВариантПриемкиТоваров = Ложь;
		КонецЕсли;
	КонецЕсли;
	СтруктураПоискаЗаявки = Новый Структура("НомерЗаявки");
	
	СтруктураПоискаПозицийПоставщика = Новый Структура("НомерЗаявки");
	СтруктураПоискаПозицийПоставщика.Вставить("Поставщик");
	
	СписокСтатусов = Новый СписокЗначений;//список статусов, при которых создается поступление
	Структура = Новый Структура("СоздаватьПоступление", Истина);
	НайденныеСтроки = ТаблицаСтатусов.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СписокСтатусов.Добавить(НайденнаяСтрока.КодСтатуса);
	КонецЦикла;
	//Если Не НеЗагружатьОтказы И ЗначениеЗаполнено(КодСтатусаОтказ) Тогда
	//	СписокСтатусов.Добавить(КодСтатусаОтказ);
	//	//МассивЗагружаемыхСтатусов.Добавить(КодСтатусаОтказ);
	//КонецЕсли;
	
	СоответствиеВариантыОбеспеченияПоСтатусам = Новый Соответствие;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если ЗначениеЗаполнено(СтрокаСтатуса.ВариантОбеспечения) Тогда
			СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.ВариантОбеспечения);
		Иначе
			Если УТ111 Тогда
				СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.СоСклада);
			Иначе
				Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
					СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.Требуется);
				ИначеЕсли Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("УдалитьТребуется")<> Неопределено Тогда
					СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.УдалитьТребуется);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокПоставщиков = Новый СписокЗначений;
	ЗапросБезЗаказаПоставщику = Новый Запрос;
	ЗапросБезЗаказаПоставщику.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                               |	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка
	                               |ИЗ
	                               |	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	                               |ГДЕ
	                               |	ПриходныйОрдерНаТоварыТовары.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
	                               |	И ПриходныйОрдерНаТоварыТовары.Ссылка.Дата >= &Дата
	                               |	И ПриходныйОрдерНаТоварыТовары.Ссылка.НомерВходящегоДокумента <> &ПустойНомер
	                               |	И ПриходныйОрдерНаТоварыТовары.Ссылка.Отправитель = &Отправитель";
	ЗапросСЗаказомПоставщику = Новый Запрос;
	ЗапросСЗаказомПоставщику.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                              |	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка
	                              |ИЗ
	                              |	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	                              |ГДЕ
	                              |	ПриходныйОрдерНаТоварыТовары.Ссылка.Распоряжение = &ЗаказКлиента
	                              |	И ПриходныйОрдерНаТоварыТовары.Ссылка.Дата >= &Дата
	                              |	И ПриходныйОрдерНаТоварыТовары.Ссылка.Отправитель = &Отправитель";
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли; 
		Если ФильтрПоЗаявке<>0 И СтрокаЗаявки.НомерЗаявки <> ФильтрПоЗаявке Тогда //если принудительно загружаем заявку, то заново всё создаём или находим
			Продолжить;
		КонецЕсли;
		//Если СписокИзмененныхЗаявок.НайтиПоЗначению(СтрокаЗаявки.ЗаказКлиента) = Неопределено Тогда
		//КонецЕсли;
		//выбираем из позиций номенклатуры поставщиков
		СписокПоставщиков.Очистить();
		СтруктураПоискаЗаявки.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		СтрокиНоменклатурыБезСтатусов = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
		СтрокиНоменклатуры = Новый Массив;//в этом массиве отобранные позиции номенклатуры
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатурыБезСтатусов Цикл
			Если СписокСтатусов.НайтиПоЗначению(СтрокаНоменклатуры.КодСтатуса) <> Неопределено Тогда
				Если НеСоздаватьЛишниеЗаказыПоставщикам Тогда //заказы на наши склады не создают поступления
					Если МассивВыгружаемыхСкладов.Найти(СтрокаНоменклатуры.distributorId) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
				Если ЗначениеЗаполнено(СтрокаНоменклатуры.Поставщик) Тогда
					Если СписокПоставщиков.НайтиПоЗначению(СтрокаНоменклатуры.Поставщик) = Неопределено Тогда
						//СписокПоставщиков.Добавить(СтрокаНоменклатуры.Поставщик, Формат(СтрокаНоменклатуры.distributorId,"ЧГ=0"));
						СписокПоставщиков.Добавить(СтрокаНоменклатуры.Поставщик, СтрокаНоменклатуры.distributorId);
					КонецЕсли;
				Иначе
					Продолжить;//
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СписокПоставщиков.Количество() = 0 Тогда //у этой заявки нет поставщиков или они не заполнены, не создаем заказ поставщику
			Продолжить;
		КонецЕсли;
		Для Каждого ПоставщикИзСписка Из СписокПоставщиков Цикл
			СтруктураПоискаПозицийПоставщика.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
			СтруктураПоискаПозицийПоставщика.Поставщик = ПоставщикИзСписка.Значение;
			СтрокиНоменклатурыБезСтатусов = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаПозицийПоставщика);
			Если СтрокиНоменклатурыБезСтатусов.Количество() = 0 Тогда //поставщика отобрали, но по нему почему-то нет позиций
				Продолжить;
			КонецЕсли;
			СтрокиНоменклатуры = Новый Массив;
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатурыБезСтатусов Цикл
				Если СписокСтатусов.НайтиПоЗначению(СтрокаНоменклатуры.КодСтатуса) <> Неопределено Тогда
					СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
				ЗапросСЗаказомПоставщику.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
				ЗапросСЗаказомПоставщику.УстановитьПараметр("Поставщик", ПоставщикИзСписка.Значение);
				ЗапросСЗаказомПоставщику.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки);
				ЗапросСЗаказомПоставщику.УстановитьПараметр("ПустойНомер", "");
				Результат = ЗапросСЗаказомПоставщику.Выполнить();
			Иначе
				ЗапросБезЗаказаПоставщику.УстановитьПараметр("НомерВходящегоДокумента", Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"));
				//ЗаписьВЛог("ищем поступление без заявки покупателя, по № "+СтрокаЗаявки.НомерЗаявки);
				ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
				ЗапросБезЗаказаПоставщику.УстановитьПараметр("Поставщик", ПоставщикИзСписка.Значение);
				ЗапросБезЗаказаПоставщику.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки);
				ЗапросБезЗаказаПоставщику.УстановитьПараметр("ПустойНомер", "");
				Результат = ЗапросБезЗаказаПоставщику.Выполнить();
			КонецЕсли;
			НайденныйДокумент = Неопределено;
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				НайденныйДокумент = Выборка.Ссылка;
				//ЗаписьВЛог("По заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + ", клиент «"+СтрокаЗаявки.Контрагент+"», поставщик «"+ПоставщикИзСписка+"» найдено поступление "+НайденныйДокумент);
				//проверяем сумму
				СуммаПоНоменклатуре = 0;
				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
					СуммаПоНоменклатуре = СуммаПоНоменклатуре + СтрокаНоменклатуры.ЦенаЗакупки * СтрокаНоменклатуры.Количество;
				КонецЦикла;
				Если (СтрокиНоменклатуры.Количество() = НайденныйДокумент.Товары.Количество()) И (СуммаПоНоменклатуре = НайденныйДокумент.Товары.Итог("Сумма")) Тогда //будем считать, что ничего не поменялось, поэтому документ не трогаем
					Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
						СтрокаНоменклатуры.ПоступлениеТоваровУслуг = НайденныйДокумент;
						//!!! здесь надо создать приходный ордер на товары
					КонецЦикла;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//не нашли - создаем, или нашли, заново заполняем
			
			Если НайденныйДокумент = Неопределено Тогда
				//ЗаписьВЛог("Не найдено поступление "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"));
				Если УТ114 Тогда
					ДокОбъект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
					//ДокОбъект.Курс = 1;
					//ДокОбъект.Кратность = 1;
					//ДокОбъект.Подразделение = СтрокаЗаявки.Подразделение;
				Иначе
					ДокОбъект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
				КонецЕсли;
				ДокОбъект.НомерВходящегоДокумента = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
				ДокОбъект.ДатаВходящегоДокумента = СтрокаЗаявки.ДатаЗаявки;
				//ДокОбъект.Дата = ТекущаяДата();//СтрокаЗаявки.ДатаЗаявки;
				//ДокОбъект.Дата = СтрокаЗаявки.dateUpdated;//если загрузка за большой период, лучше ставить дату последнего обновления
				ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновленияПозиций;//по дате последнего изменения статуса позиции
				ДокОбъект.Отправитель = ПоставщикИзСписка.Значение.Партнер;
				//ДокОбъект.ЗакупкаПодДеятельность = НалогообложениеНДСПоступление;
			Иначе
				ЗаписьВЛог("Найден приходный ордер на товары к заявке "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"),2);
				Если НеОбновлятьЗагруженныеПоступления Тогда
					Продолжить;
				КонецЕсли;
				ДокОбъект = НайденныйДокумент.ПолучитьОбъект();
				Если НЕ ОдноПоступлениеВДеньПоПоставщику Тогда
					ДокОбъект.Товары.Очистить();//если не совпадает, всё заново перезаполняем
				Иначе
					//если одно поступление в день, то удаляем только строки с текущими позициями номеклатуры
					СтруктураДляУдаленияСтрок = Новый Структура("КодСтроки");
					Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
						СтруктураДляУдаленияСтрок.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
						СтрокиДляУдаления = ДокОбъект.Товары.НайтиСтроки(СтруктураДляУдаленияСтрок);
						Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
							ДокОбъект.Товары.Удалить(СтрокаДляУдаления);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			ДокОбъект.Распоряжение = СтрокаЗаявки.ЗаказКлиента;
			ДокОбъект.Комментарий = СтрокаЗаявки.Комментарий;
			Если ЗначениеЗаполнено(СкладВПоступлении) Тогда
				ДокОбъект.Склад = СкладВПоступлении;
			Иначе
				Если ЗначениеЗаполнено(СтрокаЗаявки.Склад) Тогда
					ДокОбъект.Склад = СтрокаЗаявки.Склад;
				Иначе
					ДокОбъект.Склад = Склад;
				КонецЕсли;
			КонецЕсли;
			Если Склад.ИспользоватьСкладскиеПомещения Тогда
				ДокОбъект.Помещение = Помещение;
			КонецЕсли;
			ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			ДокОбъект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
			ДокОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
			
			//ДокОбъект.Товары.Очистить();
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				НС = НС + 1;
				СтрокаДокумента = ДокОбъект.Товары.Добавить();
				СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				СтрокаДокумента.ДокументОтгрузки = СтрокаЗаявки.ЗаказКлиента;
				СтрокаДокумента.Количество = СтрокаНоменклатуры.Количество;
				СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество;
				СтрокаДокумента.Комментарий = СокрЛП(ПоставщикИзСписка.Значение);
				Если ИспользоватьСерииНоменклатуры Тогда
					СтрокаДокумента.Серия = НайтиДобавитьСериюНоменклатуры(СтрокаНоменклатуры);
					СтрокаДокумента.СтатусУказанияСерий = 14;//13;
				Иначе//Если КонстантаИспользоватьСерииНоменклатуры Тогда
					СтрокаДокумента.СтатусУказанияСерий = 0;
					СтрокаДокумента.Серия = "";
				КонецЕсли;
				//Если ТаблицаЗаказаПокупателя <> Неопределено Тогда
				//	//НайденнаяСтрока = ТаблицаЗаказаПокупателя.Найти(СтрокаНоменклатуры.Номенклатура,"Номенклатура");
				//	СтруктураДляЗаказа.Номенклатура = СтрокаНоменклатуры.Номенклатура;//если в одном документе одинаковая номенклатура, то пишем в разные строки
				//	СтруктураДляЗаказа.НомерСтроки = СтрокаНоменклатуры.НомерСтроки;
				//	НайденныеСтрокиЗаказа = ТаблицаЗаказаПокупателя.НайтиСтроки(СтруктураДляЗаказа);
				//	Если НайденныеСтрокиЗаказа.Количество()>0 Тогда
				//		НайденнаяСтрока = НайденныеСтрокиЗаказа[0];
				//		//СтрокаДокумента.КодСтроки = НайденнаяСтрока.КодСтроки;
				//		Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
				//			ЗаказДляИзменения = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
				//			СтрокаЗаказаКлиента = ЗаказДляИзменения.Товары[НайденнаяСтрока.НомерСтроки-1];
				//			Если НЕ СтрокаЗаказаКлиента.Отменено Тогда
				//				Если УТ111 Тогда
				//					СтрокаЗаказаКлиента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
				//				Иначе
				//					СтрокаЗаказаКлиента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				//					//или какой-то другой статус
				//					ВариантОбеспечения = СоответствиеВариантыОбеспеченияПоСтатусам.Получить(СтрокаНоменклатуры.КодСтатуса);
				//					Если ЗначениеЗаполнено(ВариантОбеспечения) Тогда
				//						СтрокаЗаказаКлиента.ВариантОбеспечения = ВариантОбеспечения;
				//					КонецЕсли;
				//				КонецЕсли;
				//			КонецЕсли;
				//		КонецЕсли;
				//		//и в заказе клиента у позиции ставим статус "К отгрузке"
				//	КонецЕсли;
				//КонецЕсли;
			КонецЦикла;
			ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
				ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
			Попытка
				ДокОбъект.Записать(РежимЗаписиДок);
			Исключение
				ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),6,Истина);
				ДокОбъект.Записать();
			КонецПопытки;
			//Если ДокОбъект.Проведен И НЕ ЗаказДляИзменения = Неопределено Тогда
			//	Попытка
			//		ЗаказДляИзменения.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
			//		ЗаказДляИзменения.ЖелаемаяДатаОтгрузки = ДокОбъект.Дата;//или из реализации
			//		ЗаказДляИзменения.Записать(РежимЗаписиДок);
			//	Исключение
			//		ЗаписьВЛог("Не удалось изменить статус «К отгрузке» в документе: "+ДокОбъект+" "+ОписаниеОшибки(),6,Истина);
			//		//ЗаказДляИзменения.Записать();
			//	КонецПопытки;
			//КонецЕсли;
				//ДанныеЗаполнения = Новый Структура("Склад, Помещение, ЗонаПриемки, СкладскаяОперация, Отправитель, ЗакрыватьГрафикПоступления, ДатаВходящегоДокумента, НомерВходящегоДокумента, Распоряжение");
				//ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДокОбъект.Ссылка);
				//ДанныеЗаполнения.Отправитель = ДокОбъект.Контрагент.Партнер;
				//ДанныеЗаполнения.Распоряжение = ДокОбъект.Ссылка; 
				////ДанныеЗаполнения.ДатаПоступления = ДокОбъект.Дата; - должна быть пустой
				//ДанныеЗаполнения.ЗакрыватьГрафикПоступления = Истина;
				//ПриходныйОрдерНаТовары.Заполнить(ДанныеЗаполнения);
			ЗаписьВЛог("Записано "+ДокОбъект.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " клиенту «"+СтрокаЗаявки.Контрагент+"» и поставщику «"+ПоставщикИзСписка+"»",3);
		КонецЦикла;//Для Каждого ПоставщикИзСписка Из СписокПоставщиков Цикл
	КонецЦикла;
КонецПроцедуры //СоздатьОрдераНаПоступление

Функция ИзменитьВремяСоздания(ПоДате) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УстановкаЦенНоменклатуры.Ссылка,
		|	УстановкаЦенНоменклатуры.Дата
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		|ГДЕ
		|	УстановкаЦенНоменклатуры.Дата МЕЖДУ &НачДата И &КонДата";
	
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ПоДате));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ПоДате));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НачалоДня(ПоДате)+1;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НаДату = Дата(1,1,1);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаДату = Макс(НаДату, ВыборкаДетальныеЗаписи.Дата + 1);
		//Возврат ВыборкаДетальныеЗаписи.Дата + 1;
	КонецЦикла;
	Возврат НаДату;
КонецФункции

Процедура СоздатьУстановкуЦенНоменклатурыЗакупкиИПродажи(ДокументОснование, СтрокиНоменклатуры) Экспорт
	ДокументУстановкаЦен = Неопределено;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ОдинВидЦен = Истина;
	Иначе		
		ОдинВидЦен = Ложь;
	КонецЕсли; 
	Если ДокументОснование <> Неопределено Тогда //вдруг уже было создано
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	УстановкаЦенНоменклатуры.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		               |ГДЕ
		               |	УстановкаЦенНоменклатуры.ДокументОснование = &ДокументОснование";
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Если НеРегистрироватьДешевыеЦены Тогда //количество строк не всегда будет совпадать с документом основанием
				Возврат;
			КонецЕсли;
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			//ещё надо проверить, если 2 вида цен заполняется, тогда строк будет в 2 раза больше
			СтрокВУстановкеЦен = Выборка.Ссылка.Товары.Количество();
			Если ОдинВидЦен = Ложь Тогда
				Если ЗначениеЗаполнено(ВидЦеныПродажи) Тогда
					СтрокВУстановкеЦен = СтрокВУстановкеЦен / 2;
				КонецЕсли;
			КонецЕсли; 
			Если ДокументОснование.Товары.Количество() = СтрокВУстановкеЦен Тогда
				Возврат;
			КонецЕсли;
			ДокументУстановкаЦен = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	ЦенаЗакупочная = ВидЦены;//ЦенаЗакупочная;
	//НачатьТранзакцию();
	Если ДокументУстановкаЦен = Неопределено Тогда
		//создается установка цен номенклатуры после поступления
		НаДату = ИзменитьВремяСоздания(ДокументОснование.Дата);
		Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		Если НЕ ДокументОснование = Неопределено Тогда
			Док.ДокументОснование = ДокументОснование;
		КонецЕсли;
		Док.Дата = НаДату;
		Док.Согласован = Истина;
		Док.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	Иначе
		Док = ДокументУстановкаЦен.ПолучитьОбъект();
	КонецЕсли;
	Док.ВидыЦен.Очистить();
	НовСтрока = Док.ВидыЦен.Добавить();
	НовСтрока.ВидЦены = ЦенаЗакупочная;
	Если ОдинВидЦен = Ложь Тогда
		Если ЗначениеЗаполнено(ВидЦеныПродажи) Тогда
			НовСтрока = Док.ВидыЦен.Добавить();
			НовСтрока.ВидЦены = ВидЦеныПродажи;
		КонецЕсли;
	КонецЕсли;
	Док.Товары.Очистить();
	Массив = Новый Массив;
	МассивНоменклатуры = Новый Массив;
	ПроверятьЦены = Ложь;
	Структура = Новый Структура("Номенклатура,ВидЦены");
	Если НеРегистрироватьДешевыеЦены Тогда //Если новая цена дешевле текущей, то не регистрировать её
		//получаем текущие цены из СтрокиНоменклатуры
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			МассивНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
		Запрос.УстановитьПараметр("НаДату", НаДату);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
		Иначе
			ПроверятьЦены = Истина;
			ТаблицаЦен = Результат.Выгрузить();
		КонецЕсли;
	КонецЕсли;
	Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
		Если СтрокаНоменклатуры.ЦенаПродажи < 0.02 Тогда
			Продолжить;
		КонецЕсли;
		Если Массив.Найти(СтрокаНоменклатуры.Номенклатура) = Неопределено Тогда
			Массив.Добавить(СтрокаНоменклатуры.Номенклатура);
			РегистрироватьЦену = Истина;
			Если ПроверятьЦены Тогда
				Структура.ВидЦены = ВидЦены;
				Структура.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				НСтроки = ТаблицаЦен.НайтиСтроки(Структура);
				Для Каждого НСтрока Из НСтроки Цикл
					Если СтрокаНоменклатуры.ЦенаПродажи < НСтрока.Цена Тогда
						РегистрироватьЦену = Ложь;
						Прервать;
						//Продолжить;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если РегистрироватьЦену Тогда
				НовСтрока = Док.Товары.Добавить();
				НовСтрока.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				НовСтрока.ВидЦены = ВидЦены;
				НовСтрока.Цена = СтрокаНоменклатуры.ЦенаЗакупки;
			КонецЕсли;
			Если ОдинВидЦен Тогда
				Продолжить;
			КонецЕсли; 
			Если ЗначениеЗаполнено(ВидЦеныПродажи) Тогда
				РегистрироватьЦену = Истина;
				Если ПроверятьЦены Тогда
					Структура.ВидЦены = ВидЦеныПродажи;
					Структура.Номенклатура = СтрокаНоменклатуры.Номенклатура;
					НСтроки = ТаблицаЦен.НайтиСтроки(Структура);
					Для Каждого НСтрока Из НСтроки Цикл
						Если СтрокаНоменклатуры.ЦенаПродажи < НСтрока.Цена Тогда
							РегистрироватьЦену = Ложь;
							Прервать;
							//Продолжить;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если РегистрироватьЦену Тогда
					НовСтрока = Док.Товары.Добавить();
					НовСтрока.Номенклатура = СтрокаНоменклатуры.Номенклатура;
					НовСтрока.ВидЦены = ВидЦеныПродажи;
					НовСтрока.Цена = СтрокаНоменклатуры.ЦенаПродажи;
				КонецЕсли;			
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	НСтроки = Док.Товары.НайтиСтроки(Новый Структура("Цена", 0));
	Для Каждого НСтрока Из НСтроки Цикл
		Док.Товары.Удалить(НСтрока);
	КонецЦикла; 
	Если Док.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Док.Комментарий = "авт. создано из модуля обмена с УТ 11 "+ТекущаяДата()+" "+СокрЛП(ДокументОснование);
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = "Создана и проведена установка цен номенклатуры по ценам: "+ЦенаЗакупочная+", "+ВидЦеныПродажи+", "+Док.Ссылка+" по поступлению "+ДокументОснование;
		ЗаписьВЛог(ТекстСообщения,1);
	Исключение
		Док.Записать();
		ТекстСообщения = "Создана, но не проведена установка цен номенклатуры по ценам: "+ЦенаЗакупочная+", "+ВидЦеныПродажи+", "+Док.Ссылка+" по поступлению "+ДокументОснование;
		ЗаписьВЛог(ТекстСообщения,1);
	КонецПопытки;
	//Объект.УстановкаЦенНоменклатуры = Док.Ссылка;
	//ЗафиксироватьТранзакцию();
КонецПроцедуры

//создаем документ "Установка цен номенклатуры", чтобы руками не делать
Процедура СоздатьУстановкуЦенНоменклатуры(ДокументОснование) Экспорт
	ДокументУстановкаЦен = Неопределено;
	Если ДокументОснование <> Неопределено Тогда //вдруг уже было создано
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	УстановкаЦенНоменклатуры.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		               |ГДЕ
		               |	УстановкаЦенНоменклатуры.ДокументОснование = &ДокументОснование";
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Если НеРегистрироватьДешевыеЦены Тогда //количество строк не всегда будет совпадать с документом основанием
				Возврат;
			КонецЕсли;
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			//ещё надо проверить, если 2 вида цен заполняется, тогда строк будет в 2 раза больше
			СтрокВУстановкеЦен = Выборка.Ссылка.Товары.Количество();
			//в этой процедуре только один вид цен заполняется
			//Если ЗначениеЗаполнено(ВидЦеныПродажи) Тогда
			//	СтрокВУстановкеЦен = СтрокВУстановкеЦен / 2;
			//КонецЕсли;
			Если ДокументОснование.Товары.Количество() = СтрокВУстановкеЦен Тогда
				Возврат;
			КонецЕсли;
			ДокументУстановкаЦен = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	//создается установка цен номенклатуры после поступления
	ЦенаЗакупочная = ВидЦены;//ЦенаЗакупочная;
	//НачатьТранзакцию();
	Если ДокументУстановкаЦен = Неопределено Тогда
		НаДату = ИзменитьВремяСоздания(ДокументОснование.Дата);
		Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		Если НЕ ДокументОснование = Неопределено Тогда
			Док.ДокументОснование = ДокументОснование;
		КонецЕсли;
		Док.Дата = НаДату;
		Док.Согласован = Истина;
		Док.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	Иначе
		Док = ДокументУстановкаЦен.ПолучитьОбъект();
	КонецЕсли;
	Док.ВидыЦен.Очистить();
	НовСтрока = Док.ВидыЦен.Добавить();
	НовСтрока.ВидЦены = ЦенаЗакупочная;
	//Если ЗначениеЗаполнено(ВидЦеныПродажи) Тогда
	//	НовСтрока = Док.ВидыЦен.Добавить();
	//	НовСтрока.ВидЦены = ВидЦеныПродажи;
	//КонецЕсли;
	Док.Товары.Очистить();
	Массив = Новый Массив;
	МассивНоменклатуры = Новый Массив;
	ПроверятьЦены = Ложь;
	Структура = Новый Структура("Номенклатура,ВидЦены");
	Структура.ВидЦены = ЦенаЗакупочная;
	Если НеРегистрироватьДешевыеЦены Тогда //Если новая цена дешевле текущей, то не регистрировать её
		//получаем текущие цены из СтрокиНоменклатуры
		Для Каждого СтрокаНоменклатуры Из ДокументОснование.Товары Цикл
			МассивНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		               |	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
		Запрос.УстановитьПараметр("НаДату", НаДату);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
		Иначе
			ПроверятьЦены = Истина;
			ТаблицаЦен = Результат.Выгрузить();
		КонецЕсли;
	КонецЕсли;
	Для Каждого ТекСтрока Из ДокументОснование.Товары Цикл
		Если ТекСтрока.Цена < 0.02 Тогда
			Продолжить;
		КонецЕсли;
		Если Массив.Найти(ТекСтрока.Номенклатура) = Неопределено Тогда
			Массив.Добавить(ТекСтрока.Номенклатура);
			РегистрироватьЦену = Истина;
			Если ПроверятьЦены Тогда
				Структура.Номенклатура = ТекСтрока.Номенклатура;
				НСтроки = ТаблицаЦен.НайтиСтроки(Структура);
				Для Каждого НСтрока Из НСтроки Цикл
					Если ТекСтрока.Цена < НСтрока.Цена Тогда
						РегистрироватьЦену = Ложь;
						Прервать;
						//Продолжить;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если РегистрироватьЦену Тогда
				НовСтрока = Док.Товары.Добавить();
				НовСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НовСтрока.ВидЦены = ЦенаЗакупочная;
				НовСтрока.Цена = ТекСтрока.Цена;
				Массив.Добавить(ТекСтрока.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Док.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Док.Комментарий = "после автоматического поступления создан из модуля обмена с УТ 11 "+ТекущаяДата();
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = "Создана и проведена установка цен номенклатуры по виду цены ("+ЦенаЗакупочная+")"+Док.Ссылка+" по поступлению "+ДокументОснование;
		ЗаписьВЛог(ТекстСообщения,1);
	Исключение
		Док.Записать();
		ТекстСообщения = "Создана, но не проведена установка цен номенклатуры по виду цены ("+ЦенаЗакупочная+")"+Док.Ссылка+" по поступлению "+ДокументОснование;
		ЗаписьВЛог(ТекстСообщения,1);
	КонецПопытки;
	//Объект.УстановкаЦенНоменклатуры = Док.Ссылка;
	//ЗафиксироватьТранзакцию();
КонецПроцедуры


Процедура СоздатьРеализацииТоваровУслуг() Экспорт
	
	//++абс+
	ОднаРеализацияВДеньПоКлиенту = Истина;
	
	
	
	Лев7 = Лев(АдресСервиса, 7);
	Если Лев7 = "id20243"  Тогда id20243 = Истина; Иначе id20243 = Ложь; КонецЕсли;
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ЕстьКурсЧислитель = Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Найти("КурсЧислитель") <> Неопределено;
	Если УТ111 Тогда
		ИспользоватьРасширенныеВозможностиЗаказаКлиента = Ложь;
		ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = Ложь;
	Иначе
		ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
		ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	КонецЕсли;
	МассивСтатусовСоздаватьРеализацию = Новый Массив;
	ЕстьСтрокаСтатусаСоздаватьЗаявкуПокупателя = Ложь;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если СтрокаСтатуса.СоздаватьРеализацию Тогда
			МассивСтатусовСоздаватьРеализацию.Добавить(СтрокаСтатуса.КодСтатуса);
			Если СтрокаСтатуса.СоздаватьЗаявкуПокупателя Тогда
				ЕстьСтрокаСтатусаСоздаватьЗаявкуПокупателя = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Если НеЗагружатьОтказы = Ложь Тогда
	//	МассивСтатусовСоздаватьРеализацию.Добавить(КодСтатусаОтказ);
	//КонецЕсли;
	Если МассивСтатусовСоздаватьРеализацию.Количество() = 0 Тогда//не создаём реализации, нет галочек
		Возврат;
	КонецЕсли;
	Если НЕ УТ115 Тогда
		ВариантОплатыПоУмолчанию = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
	Иначе
		ВариантОплатыПоУмолчанию = Неопределено;
	КонецЕсли;
	Попытка
		ИспользоватьГрафикиОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	Исключение
		ИспользоватьГрафикиОплаты = Ложь;
	КонецПопытки;

	
	СтруктураПоискаЗаявки = Новый Структура("НомерЗаявки");
	ОдинСтатус = Ложь;
	Если МассивСтатусовСоздаватьРеализацию.Количество() = 1 Тогда
		ОдинСтатус = Истина;
		СтруктураПоискаЗаявки.Вставить("КодСтатуса", МассивСтатусовСоздаватьРеализацию[0]);
	КонецЕсли;
	СоответствиеВидЦеныПоСкладу = Новый Соответствие;
	
	//СтруктураПоискаПозиций = Новый Структура("НомерЗаявки");
	//СтруктураПоискаПозиций.Вставить("Контрагент");
	СписокПоставщиков = Новый СписокЗначений;
	
	ЗапросОстатков = Новый Запрос;
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		ЗапросОстатков.Текст = "ВЫБРАТЬ
		                       |	РаспределениеЗапасов.Номенклатура КАК Ссылка,
		                       |	СУММА(РаспределениеЗапасов.ВНаличии) - СУММА(РаспределениеЗапасов.Резерв) КАК Наличие,
		                       |	СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
		                       |	СУММА(РаспределениеЗапасов.Свободно) КАК Свободно,
		                       |	СУММА(РаспределениеЗапасов.Резерв) КАК Резерв
		                       |ИЗ
		                       |	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		                       |ГДЕ
		                       |	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		                       |	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		                       |	И РаспределениеЗапасов.Склад = &Склад
		                       |	И РаспределениеЗапасов.Номенклатура В(&Номенклатура)
		                       |
		                       |СГРУППИРОВАТЬ ПО
		                       |	РаспределениеЗапасов.Номенклатура";
	Иначе
		ЗапросОстатков.Текст = "ВЫБРАТЬ
		               |	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
		               |	СвободныеОстаткиОстатки.ВНаличииОстаток КАК Наличие
		               |ИЗ
		               |	РегистрНакопления.СвободныеОстатки.Остатки(
		               |			&НаДату,
		               |			Склад = &Склад
		               |				И Номенклатура В (&Номенклатура)) КАК СвободныеОстаткиОстатки";
	КонецЕсли;
	//так как теперь можно будет выдавать по нескольким реализациям
	ЗапросБезЗаказаКлиента = Новый Запрос;
	ЗапросБезЗаказаКлиента.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	                               |	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	                               |	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
	                               |	РеализацияТоваровУслугТовары.Ссылка.Проведен КАК Проведен
	                               |ИЗ
	                               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                               |ГДЕ
	                               |	РеализацияТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
	                               |	И РеализацияТоваровУслугТовары.Ссылка.ОснованиеДата = &ОснованиеДата
	                               |	И РеализацияТоваровУслугТовары.Ссылка.ОснованиеНомер = &ОснованиеНомер
	                               |	И РеализацияТоваровУслугТовары.Ссылка.Дата >= &Дата
	                               |	И РеализацияТоваровУслугТовары.Ссылка.ОснованиеНомер <> &ПустойНомер
	                               |	И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";
	//если база битая, может не найти ссылки
	ЗапросСЗаказомКлиента = Новый Запрос;
	ЗапросСЗаказомКлиента.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	                              |	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	                              |	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
	                              |	РеализацияТоваровУслугТовары.Ссылка.Проведен КАК Проведен
	                              |ИЗ
	                              |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                              |ГДЕ
	                              |	РеализацияТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
	                              |	И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = &ЗаказКлиента
	                              |	И РеализацияТоваровУслугТовары.Ссылка.Дата >= &Дата
	                              |	И РеализацияТоваровУслугТовары.Ссылка.ОснованиеНомер <> &ПустойНомер
	                              |	И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Если УТ111 Тогда
		ЗапросБезЗаказаКлиента.Текст = СтрЗаменить(ЗапросБезЗаказаКлиента.Текст, ".Основание", ".Доверенность");
		ЗапросСЗаказомКлиента.Текст = СтрЗаменить(ЗапросСЗаказомКлиента.Текст, ".Основание", ".Доверенность");
	КонецЕсли;
	ЗапросРеализацияСегодняшняя = Новый Запрос;
	//ЗапросРеализацияСегодняшняя.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//                                    |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	//                                    |	РеализацияТоваровУслуг.Ссылка.Дата КАК Дата,
	//                                    |	РеализацияТоваровУслуг.Проведен КАК Проведен
	//                                    |ИЗ
	//                                    |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//                                    |ГДЕ
	//                                    |	РеализацияТоваровУслуг.Контрагент = &Контрагент
	//                                    |	И РеализацияТоваровУслуг.Дата >= &Дата";
	
	ЗапросРеализацияСегодняшняя.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                                    |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	                                    |	РеализацияТоваровУслуг.Ссылка.Дата КАК Дата,
	                                    |	РеализацияТоваровУслуг.Проведен КАК Проведен
	                                    |ИЗ
	                                    |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                                    |ГДЕ
	                                    |	РеализацияТоваровУслуг.Контрагент = &Контрагент
	                                    |	И РеализацияТоваровУслуг.Дата > &Дата
	                                    |	И РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
	                                    |
	                                    |УПОРЯДОЧИТЬ ПО
	                                    |	Дата УБЫВ";

	
	НачалоЭтогоДня = НачалоДня(ТекущаяДата());
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда //нет документа покупателя - нет основания для заказа поставщику
			БезЗаказаКлиента = Истина;
		Иначе
			БезЗаказаКлиента = Ложь;
		КонецЕсли;
		
		Если СписокИзмененныхЗаявок.НайтиПоЗначению(СтрокаЗаявки.ЗаказКлиента) = Неопределено Тогда
			Если ФильтрПоЗаявке<>0 И СтрокаЗаявки.НомерЗаявки <> ФильтрПоЗаявке Тогда //если принудительно загружаем заявку, то заново всё создаём или находим
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтруктураПоискаЗаявки.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		СтрокиНоменклатурыЗаказа = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
		РеализацияБезПозиций = Ложь;
		СтрокиНоменклатуры = Новый Массив;
		СуммаДокумента = 0; 
		
		Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиНоменклатурыЗаказа Цикл
			Если МассивСтатусовСоздаватьРеализацию.Найти(СтрокаНоменклатурыЗаказа.КодСтатуса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаНоменклатурыЗаказа.Сумма = 0 Тогда
				Продолжить;//отказная позиция
			КонецЕсли;
			// ++ Алексей
			//Если СтрокаНоменклатурыЗаказа.КоличествоДо = 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			// -- Алексей
			СтрокиНоменклатуры.Добавить(СтрокаНоменклатурыЗаказа);
			СуммаДокумента = СуммаДокумента + СтрокаНоменклатурыЗаказа.Количество * СтрокаНоменклатурыЗаказа.ЦенаПродажи;
		КонецЦикла;
		
		//СтруктураПоискаЗаявки.КодСтатуса = КодСтатуса;
		СуммаРеализации = 0;
		Если ОдинСтатус Тогда
			СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				СуммаРеализации = СуммаРеализации + СтрокаНоменклатуры.Количество * СтрокаНоменклатуры.ЦенаПродажи;
			КонецЦикла;
		Иначе
			СтрокиНоменклатурыЗаказа = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
			СтрокиНоменклатуры = Новый Массив;
			Если СтрокиНоменклатурыЗаказа.Количество() = 0 Тогда //по заказу отобрали, но по нему нет позиций в этом статусе
				//Продолжить;
			Иначе
				Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиНоменклатурыЗаказа Цикл
					Если МассивСтатусовСоздаватьРеализацию.Найти(СтрокаНоменклатурыЗаказа.КодСтатуса) = Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					// ++ Алексей
					//Если СтрокаНоменклатурыЗаказа.КоличествоДо = 0 Тогда
					//	Продолжить;
					//КонецЕсли;
					// -- Алексей
					СтрокиНоменклатуры.Добавить(СтрокаНоменклатурыЗаказа);
					СуммаРеализации = СуммаРеализации + СтрокаНоменклатурыЗаказа.Количество * СтрокаНоменклатурыЗаказа.ЦенаПродажи;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ЗаказБезПозиций = Ложь;//чтобы из реализации удалить позиции, которых нет в заказе, при его изменении
		Если СтрокиНоменклатуры.Количество() = 0 Тогда //контрагента отобрали, но по нему почему-то нет позиций
			ЗаказБезПозиций = Истина;//это удаленные из заказа позиции, а в реализации они остались
		КонецЕсли;
		НайденныйДокумент = Неопределено;
		МассивУжеОтгруженных = Новый Массив;
		Если БезЗаказаКлиента Тогда
			ЗапросБезЗаказаКлиента.УстановитьПараметр("ОснованиеДата", НачалоДня(СтрокаЗаявки.ДатаЗаявки));
			ЗапросБезЗаказаКлиента.УстановитьПараметр("Дата", НачалоДня(СтрокаЗаявки.ДатаЗаявки));
			ЗапросБезЗаказаКлиента.УстановитьПараметр("ОснованиеНомер", Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0"));
			ЗапросБезЗаказаКлиента.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
			ЗапросБезЗаказаКлиента.УстановитьПараметр("Контрагент", СтрокаЗаявки.Контрагент);
			//не делать, нам надо собрать уже отгруженные позиции
			ЗапросБезЗаказаКлиента.УстановитьПараметр("ПустойНомер", "");
			Результат = ЗапросБезЗаказаКлиента.Выполнить();
		Иначе
			ЗапросСЗаказомКлиента.УстановитьПараметр("ОснованиеДата", НачалоДня(СтрокаЗаявки.ДатаЗаявки));
			ЗапросСЗаказомКлиента.УстановитьПараметр("ОснованиеНомер", Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0"));
			ЗапросСЗаказомКлиента.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
			ЗапросСЗаказомКлиента.УстановитьПараметр("Контрагент", СтрокаЗаявки.Контрагент);
			ЗапросСЗаказомКлиента.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки);
			//не делать, нам надо собрать уже отгруженные позиции
			ЗапросСЗаказомКлиента.УстановитьПараметр("ПустойНомер", "");
			Результат = ЗапросСЗаказомКлиента.Выполнить();
		КонецЕсли;
		
		//++абс+
		ТЧРазница = Новый ТаблицаЗначений;
		ТЧРазница.Колонки.Добавить("Номенклатура");
		ТЧРазница.Колонки.Добавить("Количество");  
		ЗапросТЧРеал = Новый Запрос;
		ЗапросТЧРеал.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = &ЗаказСсылка
		|	И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И НЕ РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры = &ТипНоменклатурыУслуга
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугТовары.Номенклатура";
		ЗапросТЧРеал.УстановитьПараметр("ЗаказСсылка", СтрокаЗаявки.ЗаказКлиента);
		ЗапросТЧРеал.УстановитьПараметр("ТипНоменклатурыУслуга", Перечисления.ТипыНоменклатуры.Услуга);
		РЗ = ЗапросТЧРеал.Выполнить();
		Если Не РЗ.Пустой() Тогда
			//создаем еще реал, и проверяем статусы
			ТЧРеал = РЗ.Выгрузить();
			ТЧРазница.Очистить();
			Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиНоменклатурыЗаказа Цикл 
				// ++ Алексей
				//Если СтрокаНоменклатурыЗаказа.КоличествоДо = 0 Тогда
				//	Продолжить;
				//КонецЕсли;
				// -- Алексей
				Если Не МассивСтатусовСоздаватьРеализацию.Найти(СтрокаНоменклатурыЗаказа.КодСтатуса) = Неопределено Тогда
					НайдСтрокаТЧРеал = ТЧРеал.Найти(СтрокаНоменклатурыЗаказа.Номенклатура, "Номенклатура");
					Если НайдСтрокаТЧРеал= Неопределено Тогда
						//добавляем полностью кол-во
						НовСтр = ТЧРазница.Добавить();
						НовСтр.Номенклатура = СтрокаНоменклатурыЗаказа.Номенклатура;
						НовСтр.Количество = СтрокаНоменклатурыЗаказа.Количество;               
					Иначе
						ДобавляемоеКолво = СтрокаНоменклатурыЗаказа.Количество - НайдСтрокаТЧРеал.Количество;
						
						Если ДобавляемоеКолво > 0 Тогда
							НовСтр = ТЧРазница.Добавить();
							НовСтр.Номенклатура = СтрокаНоменклатурыЗаказа.Номенклатура;
							НовСтр.Количество = ДобавляемоеКолво;
							НовСтр.Количество = СтрокаНоменклатурыЗаказа.Количество;               
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
		Иначе
			//добавляем все
			Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиНоменклатурыЗаказа Цикл
				// ++ Алексей
				//Если СтрокаНоменклатурыЗаказа.КоличествоДо = 0 Тогда
				//	Продолжить;
				//КонецЕсли;
				// -- Алексей
				Если Не МассивСтатусовСоздаватьРеализацию.Найти(СтрокаНоменклатурыЗаказа.КодСтатуса) = Неопределено Тогда
					//добавляем полностью кол-во
					НовСтр = ТЧРазница.Добавить();
					НовСтр.Номенклатура = СтрокаНоменклатурыЗаказа.Номенклатура;
					НовСтр.Количество = СтрокаНоменклатурыЗаказа.Количество;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//++абс-
		
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Если ОднаРеализацияВДеньПоКлиенту Тогда
				Пока Выборка.Следующий() Цикл
					НайденныйДокумент = Выборка.Ссылка;
					Для Каждого СтрокаДокумента Из Выборка.Ссылка.Товары Цикл 
						Если МассивУжеОтгруженных.Найти(СтрокаДокумента.КодСтроки) = Неопределено Тогда
							МассивУжеОтгруженных.Добавить(СтрокаДокумента.КодСтроки);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			Иначе
				Выборка.Следующий();
				НайденныйДокумент = Выборка.Ссылка;
				Если НеПроводитьДокументы = Ложь И НЕ (Выборка.Проведен) Тогда
					Попытка
						Если СтрокаЗаявки.ЗаказКлиента.Согласован = Ложь Тогда
							Об = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
							Об.Согласован = Истина;
							Об.Записать(РежимЗаписиДокумента.Проведение);
						КонецЕсли;
					Исключение
						ЗаписьВЛог(ОписаниеОшибки());
					КонецПопытки;
					Попытка
						Об = НайденныйДокумент.ПолучитьОбъект();
						СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, Об);
						Об.Записать(РежимЗаписиДокумента.Проведение);
						НайденныйДокумент = Выборка.Ссылка;
					Исключение
						ЗаписьВЛог(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			Если МассивУжеОтгруженных.Количество() > 0 И МассивУжеОтгруженных.Количество() = СтрокиНоменклатуры.Количество() Тогда
				Сопоставлено = 0;
				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
					Если МассивУжеОтгруженных.Найти(СтрокаНоменклатуры.ИдентификаторНоменклатуры) <> Неопределено Тогда
						Сопоставлено = Сопоставлено + 1;
					КонецЕсли;
				КонецЦикла;
				
				//переделать на разницу заказ и реал
				//всё отгружено, поэтому новое не создаём
				
				//++абс+
				Если МассивУжеОтгруженных.Количество() = Сопоставлено И ТЧРазница.Количество() = 0 Тогда
					//Если МассивУжеОтгруженных.Количество() = Сопоставлено Тогда
					Продолжить;
				КонецЕсли;
				
				
				//НайденныйДокумент = Неопределено;
				
				
			КонецЕсли;
			
			//++абс+ добавить проверку на кол-во, может быть не всегда 1
			НайденныйДокумент = Неопределено;
			
			Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
				Если ОднаРеализацияВДеньПоКлиенту Тогда
					ЗаписьВЛог("Найдена одна реализация в день для заявки "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"),2);
				Иначе
					ЗаписьВЛог("Найдена реализация к заявке "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", "+СокрЛП(НайденныйДокумент),2);
				Конецесли;
				Если НеОбновлятьЗагруженныеРеализации Тогда
					Продолжить;
				КонецЕсли;
				//ЗаписьВЛог("По заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + ", клиент «"+СтрокаЗаявки.Контрагент+"», найдена реализация "+НайденныйДокумент);
				СуммаПоНоменклатуре = 0;
				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
					Если МассивУжеОтгруженных.Найти(СтрокаНоменклатуры.ИдентификаторНоменклатуры) = Неопределено Тогда
						СуммаПоНоменклатуре = СуммаПоНоменклатуре + СтрокаНоменклатуры.ЦенаПродажи * СтрокаНоменклатуры.Количество;
					КонецЕсли;
				КонецЦикла;
				Если ФильтрПоЗаявке = 0 И ЗначениеЗаполнено(НайденныйДокумент) И (СтрокиНоменклатуры.Количество() = НайденныйДокумент.Товары.Количество()) И (СуммаПоНоменклатуре = НайденныйДокумент.Товары.Итог("Сумма")) Тогда //будем считать, что ничего не поменялось, поэтому документ не трогаем
					//будем считать, что ничего не поменялось, поэтому документ не трогаем
					Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
						СтрокаНоменклатуры.РеализацияТоваровУслуг = НайденныйДокумент;
					КонецЦикла;
					Если НЕ НайденныйДокумент.Проведен Тогда
						//меняем статусы в заказе клиента, вдруг не поменялись на "Отгружено"
						Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
							ОбЗаказ = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
							НадоЗаписать = Ложь;
							Если ОбЗаказ.Согласован = Ложь Тогда
								ОбЗаказ.Согласован = Истина;
								НадоЗаписать = Истина;
							КонецЕсли;
							Структура = Новый Структура("КодСтроки");
							Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
								Структура.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
								НайденныеСтроки = ОбЗаказ.Товары.НайтиСтроки(Структура);
								Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
									Если НайденнаяСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
										НайденнаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
										НадоЗаписать = Истина;
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							Если НадоЗаписать Тогда
								Попытка
									ОбЗаказ.Записать(РежимЗаписиДокумента.Проведение);
								Исключение
									ЗаписьВЛог("Не удалось провести с изменённым вариантом обеспечения: "+СтрокаЗаявки.ЗаказКлиента+" "+ОписаниеОшибки());
									ОбЗаказ.Записать();
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
						Об = НайденныйДокумент.ПолучитьОбъект();
						Попытка  
							СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, Об);
							Об.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							ЗаписьВЛог("Не удалось провести: "+НайденныйДокумент+" "+ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			Иначе
				НайденныйДокумент = Неопределено;
			КонецЕсли;
		Иначе
			//если часть была отдана вчера, это надо корректно обрабатывать
			Если ОднаРеализацияВДеньПоКлиенту Тогда
				
				//++абс+  //измениим НачалоЭтогоДня на дату последней реализации
				НайденныйДокумент = Неопределено;
				
				//ЗапросПоследняяРеал = Новый Запрос;
				//ЗапросПоследняяРеал.Текст = 
				//"ВЫБРАТЬ ПЕРВЫЕ 1
				//|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
				//|	РеализацияТоваровУслуг.Дата КАК Дата
				//|ИЗ
				//|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				//|ГДЕ
				//|	РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
				//|	И РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
				//|
				//|УПОРЯДОЧИТЬ ПО
				//|	Дата УБЫВ";
				//ЗапросПоследняяРеал.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
				//РезультатЗапросаПоследняяРеал = ЗапросПоследняяРеал.Выполнить();
				//ВыборкаПоследняяРеал = РезультатЗапросаПоследняяРеал.Выбрать();
				//ДатаПоследняяРеал = Неопределено;
				//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				//	ДатаПоследняяРеал = ВыборкаПоследняяРеал.Дата;
				//КонецЦикла;
				//
				//ЗапросРеализацияСегодняшняя.УстановитьПараметр("Дата", ДатаПоследняяРеал);
				////ЗапросРеализацияСегодняшняя.УстановитьПараметр("Дата", НачалоЭтогоДня);
				//ЗапросРеализацияСегодняшняя.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
				////++абс-
				//
				//ЗапросРеализацияСегодняшняя.УстановитьПараметр("Контрагент", СтрокаЗаявки.Контрагент);
				//
				//
				//Результат = ЗапросРеализацияСегодняшняя.Выполнить();
				//Если Не Результат.Пустой() Тогда
				//	Выборка = Результат.Выбрать();
				//	Выборка.Следующий();
				//	НайденныйДокумент = Выборка.Ссылка;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НайденныйДокумент = Неопределено И ЗаказБезПозиций Тогда //в заказе нет позиций и не найдено никакой реализации, поэтому ничего не создаем
			Продолжить;
		КонецЕсли;
		//не нашли - создаем, или нашли, заново заполняем
		Если НайденныйДокумент = Неопределено Тогда
			ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			//ДокОбъект.Заполнить();
			Если ОднаРеализацияВДеньПоКлиенту Тогда
				ДокОбъект.Дата = ТекущаяДата();
			Иначе
				ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновленияПозиций;//ДатаОбновления;//- а то возвраты  некорректные будут ТекущаяДата();//ЗаказКлиента.Дата;
			КонецЕсли;
			ДокОбъект.Комментарий = "Авт. создан "+ТекущаяДата();
			Если id20243 Тогда
				ДокОбъект.Комментарий = "Д сайт "+Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0");
			КонецЕсли;
			//ДокОбъект.Организация = Организация;//Розница;
			ДокОбъект.Организация = СтрокаЗаявки.Организация;
		Иначе
			//мы вчерашние отгруженные нашли, но сегодня мы должны создать новую реализацию
			Если ОднаРеализацияВДеньПоКлиенту Тогда
				//++абс+
				//ЗапросРеализацияСегодняшняя.УстановитьПараметр("Дата", НачалоЭтогоДня);
				//ЗапросРеализацияСегодняшняя.УстановитьПараметр("Контрагент", СтрокаЗаявки.Контрагент);
				//Результат = ЗапросРеализацияСегодняшняя.Выполнить();
				//Если Не Результат.Пустой() Тогда
				//	Выборка = Результат.Выбрать();
				//	Выборка.Следующий();
				//	НайденныйДокумент = Выборка.Ссылка;
				//КонецЕсли;
				
				
			КонецЕсли;
			ДокОбъект = НайденныйДокумент.ПолучитьОбъект();
			Если ДокОбъект.Дата > СтрокаЗаявки.ДатаОбновления Тогда
				ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновленияПозиций;
			КонецЕсли;
			Если ДокОбъект.Организация <> СтрокаЗаявки.Организация Тогда
				ДокОбъект.Организация = СтрокаЗаявки.Организация;
			КонецЕсли; 
			
			//++абс+ удаляем все
			//Если НЕ ОднаРеализацияВДеньПоКлиенту Тогда
			ДокОбъект.Товары.Очистить();//если не совпадает, всё заново перезаполняем
			//Иначе 
			//	
			//	//++абс+
			//	
			//	//если одна реализация в день, то удаляем только строки с текущими позициями номеклатуры заказа, так  в нём могут быть другие
			//	СтруктураДляУдаленияСтрок = Новый Структура("КодСтроки");
			//	Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			//		СтруктураДляУдаленияСтрок.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
			//		СтрокиДляУдаления = ДокОбъект.Товары.НайтиСтроки(СтруктураДляУдаленияСтрок);
			//		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			//			ДокОбъект.Товары.Удалить(СтрокаДляУдаления);
			//		КонецЦикла;
			//	КонецЦикла;
			//КонецЕсли;
			ДокОбъект.Комментарий = "Авт. изменен "+ТекущаяДата();
			Если id20243 Тогда
				ДокОбъект.Комментарий = "Д сайт "+Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0");
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		ДокОбъект.Валюта = Валюта;
		Если ЦеныПродажиВРублях Тогда//реализация
			ДокОбъект.Валюта = Рубли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаПродажи) Тогда
			ДокОбъект.Валюта = СтрокаЗаявки.ВалютаПродажи;
		КонецЕсли;
		Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
			ДокОбъект.Валюта = Валюта;
		КонецЕсли;
		ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
		Если НЕ УТ111 Тогда
			ДокОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокОбъект.ПорядокРасчетов) Тогда
			ДокОбъект.ПорядокРасчетов = ПорядокРасчетов;
		КонецЕсли;
		Если УТ114 И Подверсия3 < 6 Тогда
			ДокОбъект.ДатаПлатежа = ДокОбъект.Дата;
		КонецЕсли;
		Если УТ111 Тогда
			ДокОбъект.ДоверенностьДата = НачалоДня(СтрокаЗаявки.ДатаЗаявки);
			ДокОбъект.ДоверенностьНомер = Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0");
		Иначе
			ДокОбъект.ОснованиеДата = НачалоДня(СтрокаЗаявки.ДатаЗаявки);
			ДокОбъект.ОснованиеНомер = Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0");
		КонецЕсли;
		ДокОбъект.Основание = "Заказ № " + Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0") + " от "+Дата(СтрокаЗаявки.ДатаЗаявки);
		ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;//РеглУчет;//РеализацияКлиенту
		//теперь заполняем табличную часть
		ДокОбъект.Партнер = СтрокаЗаявки.Контрагент.Партнер;
		ДокОбъект.Контрагент = СтрокаЗаявки.Контрагент;
		Если ИспользоватьСоглашенияСКлиентами Тогда
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокОбъект.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
			Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
				ДокОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
				Если СтрокаЗаявки.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					ДокОбъект.Соглашение = СоглашениеРозница;
				Иначе
					ДокОбъект.Соглашение = СоглашениеОпт;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьПоСоглашениюСКлиентом(ДокОбъект);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
			ДокОбъект.Соглашение = ПолучитьСоглашениеСКлиентом(ДокОбъект.Контрагент, ДокОбъект.Организация);
			Если ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
				ЗаполнитьПоСоглашениюСКлиентом(ДокОбъект);
			КонецЕсли;
		КонецЕсли;
		//СтруктураОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(ДокОбъект.Организация, ДокОбъект.Дата);
		Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
			ДокОбъект.Руководитель = СтрокаЗаявки.ЗаказКлиента.Руководитель;
			ДокОбъект.ГлавныйБухгалтер = СтрокаЗаявки.ЗаказКлиента.ГлавныйБухгалтер;
		КонецЕсли;
		
		Если ИспользоватьДоговорыСКлиентами Тогда
			ДокОбъект.Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация, ДокОбъект.Валюта);
			Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
				Если УТ113 Или УТ114 Тогда
					ДокОбъект.ПорядокОплаты = ДокОбъект.Договор.ПорядокОплаты;
				КонецЕсли;
				ДокОбъект.ПорядокРасчетов = ДокОбъект.Договор.ПорядокРасчетов;
				Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
					Договор = ДокОбъект.Договор;
					Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДСОпределяетсяВДокументе") <> Неопределено Тогда
						Если Договор.НалогообложениеНДСОпределяетсяВДокументе = Ложь Тогда
							ДокОбъект.НалогообложениеНДС = Договор.НалогообложениеНДС;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДокОбъект.ПорядокРасчетов = ПорядокРасчетовЗаказПоставщику;
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.Организация = СтрокаЗаявки.Организация;
		Если БанковскийСчет.Владелец = СтрокаЗаявки.Организация Тогда
			ДокОбъект.БанковскийСчетОрганизации = БанковскийСчет;
		Иначе
			ДокОбъект.БанковскийСчетОрганизации = "";
		КонецЕсли; 
		ДокОбъект.СкидкиРассчитаны = Истина;
		ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
		Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		Иначе
			//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		КонецЕсли;
		ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПродаже;//всегда должно стоять, иначе реализция некорректно создаётся
		Если НЕ БезЗаказаКлиента Тогда
			ДокОбъект.ЗаказКлиента = СтрокаЗаявки.ЗаказКлиента;
			ДокОбъект.РеализацияПоЗаказам = Истина;
			ДокОбъект.НалогообложениеНДС = СтрокаЗаявки.ЗаказКлиента.НалогообложениеНДС;
		КонецЕсли;
		Если НЕ УТ111 Тогда
			ДокОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		КонецЕсли;
		Если УТ113 Или УТ114 Тогда
			ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
		//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
		//ДокОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная
		ДокОбъект.Согласован = Истина;
		ТаблицаЗаказаПокупателя = СтрокаЗаявки.ЗаказКлиента.Товары.Выгрузить(,"Номенклатура, КодСтроки");
		ДокОбъект.Подразделение = СтрокаЗаявки.Подразделение;
		Если ЗначениеЗаполнено(СтрокаЗаявки.Склад) Тогда
			ДокОбъект.Склад = СтрокаЗаявки.Склад;
		Иначе
			ДокОбъект.Склад = Склад;
		КонецЕсли;
		//реализация
		//ДокОбъект.СтруктурнаяЕдиница = ДокОбъект.Контрагент.ОсновнойБанковскийСчет;
		Если id20243 И ПроверятьНаличиеНашихПозиций Тогда
			МассивНоменклатуры = Новый Массив;
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				МассивНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);
			КонецЦикла;
			ЗапросОстатков.УстановитьПараметр("НаДату", ДокОбъект.Дата+10);
			ЗапросОстатков.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
			ЗапросОстатков.УстановитьПараметр("Склад", ДокОбъект.Склад);
			Результат = ЗапросОстатков.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Соответствие = Новый Соответствие;
				Пока Выборка.Следующий() Цикл
					Соответствие.Вставить(Выборка.Ссылка, Выборка.Наличие);
				КонецЦикла;
				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
					СтрокаНоменклатуры.Наличие = Соответствие.Получить(СтрокаНоменклатуры.Номенклатура);
				КонецЦикла;
			КонецЕсли;
			ПереченьПозиций = "";
			НС = 0;
			КодСтатусаОтказныхПозиций = Формат(КодСтатусаОтказ, "ЧГ=0");
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				Если СтрокаНоменклатуры.Наличие<СтрокаНоменклатуры.Количество И СтрокаНоменклатуры.КодСтатуса<>КодСтатусаОтказ Тогда
					Если Отладка Тогда 
						сообщить("Заявка "+СтрокаЗаявки.НомерЗаявки+"Не хватает на складе "+СтрокаНоменклатуры.Номенклатура+", в наличии "+СтрокаНоменклатуры.Наличие);
					КонецЕсли;
					Если СтавитьВОтказЕслиНетНаличияНашихПозиций Тогда
						НС = НС + 1;
						ФорматНС = Формат(НС,"ЧГ=0");
						ПереченьПозиций = ПереченьПозиций + "&order[positions]["+ФорматНС+"][id]="+Формат(СтрокаНоменклатуры.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+ФорматНС+"][statusCode]="+КодСтатусаОтказныхПозиций;//+"&order[positions]["+ФорматНС+"][comment]="+Комментарий;
					КонецЕсли;						
					//СтрокаНоменклатуры.ВариантОбеспечения = ВариантОбеспеченияНеСНаличия;
				КонецЕсли;
			КонецЦикла;
			Если ПереченьПозиций <> "" Тогда
				ЗаписьВЛог("СоздатьРеализацииТоваровУслуг");
				ОбновитьСтатусЗаявки(СтрокаЗаявки.НомерЗаявки, ПереченьПозиций, КодСтатусаОтказныхПозиций,,Истина);
			КонецЕсли;
		КонецЕсли;
		
		//реализация
		Если НЕ УТ111 Тогда
			Если СтрокаЗаявки.АдресДоставки = "Самовывоз" Тогда
				ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
			Иначе
				ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
				Если ЗначениеЗаполнено(СтрокаЗаявки.СпособДоставки) Тогда
					ДокОбъект.СпособДоставки = СтрокаЗаявки.СпособДоставки;
				Иначе
					Если ЗначениеЗаполнено(СпособДоставки) Тогда
						ДокОбъект.СпособДоставки = СпособДоставки;
					КонецЕсли;
					//ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;//в заказах поставщику самовывоз
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаЗаявки.ЗонаДоставки) Тогда
					ДокОбъект.ЗонаДоставки = СтрокаЗаявки.ЗонаДоставки;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаЗаявки.ПеревозчикПартнер) Тогда
					ДокОбъект.ПеревозчикПартнер = СтрокаЗаявки.ПеревозчикПартнер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.АдресДоставки = СтрокаЗаявки.АдресДоставки + " по заявке № "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" от "+СтрокаЗаявки.ДатаЗаявки;
		//уже раньше удалили ДокОбъект.Товары.Очистить();
		НС = 0;
		Если НЕ БезЗаказаКлиента Тогда
			ДокЗаявка = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();//в заявке меняем статус обеспечения на "Отгрузить"
		КонецЕсли;
		НадоПерепровестиЗаявку = Ложь;
		СтруктураТоваровЗаявки = Новый Структура("Номенклатура");
		ПерваяСтрока = Истина;
		Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
			ТоварыЗаявки = СтрокаЗаявки.ЗаказКлиента.Товары.Выгрузить();
			Структура = Новый Структура("Номенклатура,Количество");
		Иначе
			ТоварыЗаявки = "";
		КонецЕсли;
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			
			//++абс+
			НайдСтрокаТЧРазница = ТЧРазница.Найти(СтрокаНоменклатуры.Номенклатура, "Номенклатура");
			Если НайдСтрокаТЧРазница = Неопределено Тогда
				Продолжить;			
			КонецЕсли;			
			Если МассивУжеОтгруженных.Найти(СтрокаНоменклатуры.ИдентификаторНоменклатуры) <> Неопределено И НайдСтрокаТЧРазница = Неопределено Тогда
				//Если МассивУжеОтгруженных.Найти(СтрокаНоменклатуры.ИдентификаторНоменклатуры) <> Неопределено Тогда
				//++абс-
				Продолжить;
			КонецЕсли;
			СтруктураТоваровЗаявки.Номенклатура = СтрокаНоменклатуры.Номенклатура; 

			Если НЕ БезЗаказаКлиента Тогда
				СтрокиНоменклатурыЗаявки = ДокЗаявка.Товары.НайтиСтроки(СтруктураТоваровЗаявки);
				Для Каждого СтрокаНоменклатурыЗаявки Из СтрокиНоменклатурыЗаявки Цикл
					//Если УТ111 Тогда
					//	Если НЕ СтрокаНоменклатурыЗаявки.Отменено И СтрокаНоменклатурыЗаявки.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.СоСклада Тогда
					//		СтрокаНоменклатурыЗаявки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
					//		НадоПерепровестиЗаявку = Истина;
					//		Прервать;
					//	КонецЕсли;
					//Иначе
					Если НЕ СтрокаНоменклатурыЗаявки.Отменено И СтрокаНоменклатурыЗаявки.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
						СтрокаНоменклатурыЗаявки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
						НадоПерепровестиЗаявку = Истина;
						//Прервать;
					КонецЕсли;
					//КонецЕсли;
				КонецЦикла;
				Если НадоПерепровестиЗаявку Тогда
					Попытка
						ДокЗаявка.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ЗаписьВЛог("Не удалось провести с изменённым вариантом обеспечения2: "+СтрокаЗаявки.ЗаказКлиента+" "+ОписаниеОшибки());
						ДокЗаявка.Записать();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			
			
			//
			////меняем статусы в заказе клиента, вдруг не поменялись на "Отгружено"
			//Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
			//	ОбЗаказ = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
			//	НадоЗаписать = Ложь;
			//	Если ОбЗаказ.Согласован = Ложь Тогда
			//		ОбЗаказ.Согласован = Истина;
			//		НадоЗаписать = Истина;
			//	КонецЕсли;
			//	Структура = Новый Структура("КодСтроки");
			//	Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			//		Структура.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
			//		НайденныеСтроки = ОбЗаказ.Товары.НайтиСтроки(Структура);
			//		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			//			Если НайденнаяСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			//				НайденнаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			//				НадоЗаписать = Истина;
			//			КонецЕсли;
			//		КонецЦикла;
			//	КонецЦикла;
			//	Если НадоЗаписать Тогда
			//		Попытка
			//			ОбЗаказ.Записать(РежимЗаписиДокумента.Проведение);
			//		Исключение
			//			ЗаписьВЛог("Не удалось провести с изменённым вариантом обеспечения: "+СтрокаЗаявки.ЗаказКлиента+" "+ОписаниеОшибки());
			//			ОбЗаказ.Записать();
			//		КонецПопытки;
			//	КонецЕсли;
			//КонецЕсли;
					
			СтрокаДокумента = ДокОбъект.Товары.Добавить();
			СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
			СтрокаДокумента.Склад = СтрокаНоменклатуры.Склад;
			Если ПерваяСтрока И ЗначениеЗаполнено(СтрокаНоменклатуры.Склад) Тогда
				ДокОбъект.Склад = СтрокаНоменклатуры.Склад;
				ПерваяСтрока = Ложь;
			КонецЕсли;
			Если (НЕ ДокОбъект.Склад.ЭтоГруппа) И (СтрокаДокумента.Склад<>ДокОбъект.Склад) Тогда
				ГруппаСкладов = СтрокаДокумента.Склад.Родитель;
				Если ЗначениеЗаполнено(ГруппаСкладов) Тогда
					ДокОбъект.Склад = ГруппаСкладов;
				КонецЕсли;
			КонецЕсли;
			
			//++абс+ дописать проверку на кол-во
			//Если Не НайдСтрокаТЧРазница = Неопределено Тогда
			
			
			СтрокаДокумента.Количество = ?(НайдСтрокаТЧРазница = Неопределено, СтрокаНоменклатуры.Количество, НайдСтрокаТЧРазница.Количество);//СтрокаНоменклатуры.Количество; //++абс+
			Если СтрокаДокумента.Количество = 0 Тогда
				СтрокаДокумента.Количество = 1;
			КонецЕсли;
			СтрокаДокумента.КоличествоУпаковок = ?(НайдСтрокаТЧРазница = Неопределено, СтрокаНоменклатуры.Количество, НайдСтрокаТЧРазница.Количество);//СтрокаНоменклатуры.Количество; //++абс+
			Если ЦенаИзСправочника Тогда
				ЦенаНоменклатуры = ПолучитьЦенуНоменклатуры(СтрокаНоменклатуры.Номенклатура, ДокОбъект.Дата);
				Если ЦенаНоменклатуры = 0 Тогда
					СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаПродажи;
				Иначе
					СтрокаДокумента.Цена = ЦенаНоменклатуры;
					Если ПроизвольныйВидЦеныВЗаказе Тогда
						СтрокаДокумента.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
					Иначе
						СтрокаДокумента.ВидЦены = ВидЦены;
					КонецЕсли;
				Конецесли;
			Иначе
				СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаПродажи;
			КонецЕсли;
			Если СтрокаДокумента.Цена = 0 Тогда
				СтрокаДокумента.Цена = 0.01;
			КонецЕсли;
			Если СтрокаДокумента.Цена = 0.01 Тогда
				ЗаполнитьЗначенияСвойств(Структура,СтрокаДокумента);
				НСтроки = ТоварыЗаявки.НайтиСтроки(Структура);
				Для Каждого НСтрока Из НСтроки Цикл
					СтрокаДокумента.Цена = НСтрока.Цена;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			СтрокаДокумента.Сумма = СтрокаДокумента.Цена*СтрокаДокумента.Количество;
			СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
			Если НЕ ПроизвольныйВидЦеныВЗаказе Тогда
				ВидЦеныПоСкладу = СоответствиеВидЦеныПоСкладу.Получить(СтрокаНоменклатуры.distributorId);
				Если ВидЦеныПоСкладу <> Неопределено Тогда
					СтрокаДокумента.ВидЦены = ВидЦеныПоСкладу;
				КонецЕсли;
			КонецЕсли;
			СоглашениеПоСкладу = СоответствиеСоглашениеПоСкладу.Получить(СтрокаНоменклатуры.distributorId);
			Если СоглашениеПоСкладу <> Неопределено Тогда
				ДокОбъект.Соглашение = СоглашениеПоСкладу;
			КонецЕсли;
			ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, СтрокаДокумента, ДокОбъект.Договор);
			Если СтрокаСтатуса.СоздаватьЗаявкуПокупателя Тогда
				СтрокаДокумента.ЗаказКлиента = СтрокаЗаявки.ЗаказКлиента;
			КонецЕсли;
			//СтрокаДокумента.КодСтроки = СтрокаДокумента.НомерСтроки;
			СтрокаДокумента.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
			Если ИспользоватьСерииНоменклатуры Тогда
				СтрокаДокумента.Серия = НайтиДобавитьСериюНоменклатуры(СтрокаНоменклатуры);
				СтрокаДокумента.СтатусУказанияСерий = 14;
			Иначе
				СтрокаДокумента.Серия = "";
				СтрокаДокумента.СтатусУказанияСерий = 0;
			КонецЕсли;
			
			// ++ Алексей
				ТЧРазница.Удалить(НайдСтрокаТЧРазница);	
			// -- Алексей
		КонецЦикла;
		
		Если СтрокаЗаявки.СтоимостьДоставки>0 Тогда 
			Если НЕ ЗначениеЗаполнено(СтрокаЗаявки.УслугаДоставки) Тогда
				СтрокаЗаявки.УслугаДоставки = УслугаДоставки;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаявки.УслугаДоставки) Тогда
				
				//++абс+ проверка на доставку в других реал.
				ЗапросДост = Новый Запрос;
				ЗапросДост.Текст = "ВЫБРАТЬ
				|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
				|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|ГДЕ
				|	РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = &ЗаказСсылка
				|	И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
				|	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура
				|
				|СГРУППИРОВАТЬ ПО
				|	РеализацияТоваровУслугТовары.Номенклатура";
				ЗапросДост.УстановитьПараметр("ЗаказСсылка", СтрокаЗаявки.ЗаказКлиента);
				//ЗапросДост.УстановитьПараметр("ТипНоменклатурыУслуга", Перечисления.ТипыНоменклатуры.Услуга);
				ЗапросДост.УстановитьПараметр("Номенклатура", СтрокаЗаявки.УслугаДоставки);
				
				ТЗДост = ЗапросДост.Выполнить();
				Если ТЗДост.Пустой() Тогда
					
					
					//++абс-
					
					
					СтруктураДоставка = Новый Структура("Номенклатура", СтрокаЗаявки.УслугаДоставки);
					СтрокиСДоставкой = ДокОбъект.Товары.НайтиСтроки(СтруктураДоставка);
					Если СтрокиСДоставкой.Количество() = 0 Тогда
						СтрокаДокумента = ДокОбъект.Товары.Добавить();
						СтрокаДокумента.Номенклатура = СтрокаЗаявки.УслугаДоставки;//услуга
						СтрокаДокумента.Количество = 1;
						СтрокаДокумента.КоличествоУпаковок = 1;
						СтрокаДокумента.ВидЦены = ВидЦены;
						СтрокаДокумента.Цена = СтрокаЗаявки.СтоимостьДоставки;
						СтрокаДокумента.Сумма = СтрокаЗаявки.СтоимостьДоставки;
						СтрокаДокумента.СуммаСНДС = СтрокаЗаявки.СтоимостьДоставки;
						СтрокаДокумента.Склад = Склад;
						Если СтрокаСтатуса.СоздаватьЗаявкуПокупателя Тогда
							СтрокаДокумента.ЗаказКлиента = СтрокаЗаявки.ЗаказКлиента;
						КонецЕсли;
						ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтрокаДокумента, ДокОбъект.Договор);
					КонецЕсли;
					
					//++абс+
				КонецЕсли;
				//++абс+
				
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.СуммаВзаиморасчетов = ДокОбъект.Товары.Итог("Сумма");
		ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
		ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
			ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		Если УТ114 И Подверсия3 < 6 Тогда
			ДокОбъект.ДатаПлатежа = ДокОбъект.Дата;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) И ДокОбъект.Товары.Количество() = 0 Тогда
			//создали новый документ, а в нём ничего нет, он не нужен
			Продолжить;
		КонецЕсли;
		Если НЕ УТ115 Тогда
			ДокОбъект.ДатаРаспоряжения = ДокОбъект.Дата;
		КонецЕсли;
		Если ДокОбъект.Товары.Количество() = 0 И НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
			ЗаписьВЛог("В новом документе нет строк, не сохраняем "+ДокОбъект,1);//реализация
			Продолжить;
		КонецЕсли;
		ЖелаемаяДатаОтгрузки = ДокОбъект.Дата;
		Если ЕстьКурсЧислитель Тогда
			ДокОбъект.КурсЧислитель = 1;
			ДокОбъект.КурсЗнаменатель = 1;
		КонецЕсли;
		Если Лев(АдресСервиса,9) = "abcp48094" Тогда
			ДокОбъект.ФормаОплаты = "";
			ДокОбъект.Согласован = Истина;
			ДокОбъект.Касса = Касса;
			ДокОбъект.БанковскийСчетОрганизации = БанковскийСчет;
			ДокОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
			ДокОбъект.УдалитьПорядокОплаты = Перечисления.УдалитьПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
		Если ИспользоватьГрафикиОплаты Тогда
			Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				//ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
				//ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
				//Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
				СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
				ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
				Для Каждого СтрокаТаблицы Из ДокОбъект.ЭтапыГрафикаОплаты Цикл
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВариантОплаты) Тогда
						СтрокаТаблицы.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВариантОтсчета) Тогда
						СтрокаТаблицы.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
						СтрокаТаблицы.Заказ = ДокОбъект.ЗаказКлиента;
					КонецЕсли;
					Если СтрокаТаблицы.ПроцентПлатежа = 0 Тогда
						СтрокаТаблицы.ПроцентПлатежа = 100;
					КонецЕсли;
					Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
						СтрокаТаблицы.СуммаВзаиморасчетов = СуммаОплатыПоДокументу;
					КонецЕсли;
				КонецЦикла;
				//КонецЕсли;
			Иначе
				Если НЕ НеПерезаполнятьШапкуДокументов Или НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
					ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если (НЕ БезЗаказаКлиента) И НадоПерепровестиЗаявку Тогда
			Попытка
				СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, ДокОбъект);
				ДокОбъект.Записать(РежимЗаписиДок);
			Исключение
				ДокОбъект.Записать();
				ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);//реализация
			КонецПопытки;
		КонецЕсли;		
		//СтрокиДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДатаОбновленияСтатусаABCP.Ссылка));
		//Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
		//	СтрокаДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.Добавить();
		//Иначе
		//	СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
		//КонецЕсли;
		//СтрокаДополнительныеРеквизиты.Свойство = ДатаОбновленияСтатусаABCP.Ссылка;
		//СтрокаДополнительныеРеквизиты.Значение = ТекущаяДата();
		//СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = ТекущаяДата();
		ДокОбъект.Согласован = Истина;
		Если ДокОбъект.Товары.Количество() = 0 Тогда
			Попытка
				ЗаписьВЛог("В документе нет строк, отпроводим "+ДокОбъект,1);
				СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, ДокОбъект);
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ДокОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ДокОбъект.Записать();
				ЗаписьВЛог("Не удалось отпровести пустой документ (проверьте, очищены движения или нет): "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
			КонецПопытки;
		Иначе
			ДокументЗаписан = Ложь;
			Попытка                   
				СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, ДокОбъект);
				ДокОбъект.Записать(РежимЗаписиДок);
				ДокументЗаписан = Истина;
			Исключение
				ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
			КонецПопытки;
			Если НЕ ДокументЗаписан Тогда
				Попытка 
					СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, ДокОбъект);
					ДокОбъект.Записать();
				Исключение
					сообщить(ОписаниеОшибки());
					ДокОбъект.ОбменДанными.Загрузка = Истина;
					ДокОбъект.Записать();
					//ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		МассивСозданныхРеализаций.Добавить(ДокОбъект.Ссылка);
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
		МенеджерЗаписи.Свойство = ДатаОбновленияСтатусаABCP;
		МенеджерЗаписи.Значение = ТекущаяДата();
		МенеджерЗаписи.Записать();
		Если СчетФактураПоРеализации И ДокОбъект.Проведен Тогда
			СоздатьСчетФактураВыданный(ДокОбъект, СтрокаЗаявки);
		КонецЕсли;
		
		КодСледующегоСтатуса = СтрокаСтатуса.КодСледующегоСтатуса;
		Если КодСледующегоСтатуса<>0 Тогда
			КодСледующегоСтатусаСтрокой = Формат(КодСледующегоСтатуса,"ЧГ=0");
			ПереченьПозиций = "";
			ПереченьПозицийСтрокой = "";
			НС = 0;
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				НС = НС + 1;
				ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(СтрокаНоменклатуры.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСледующегоСтатусаСтрокой;
				ПереченьПозицийСтрокой = ПереченьПозицийСтрокой + ", "+Формат(СтрокаНоменклатуры.ИдентификаторНоменклатуры,"ЧГ=0"); 
			КонецЦикла;
			Если НС > 0 Тогда
				ОбновитьСтатусЗаявки(СтрокаЗаявки.НомерЗаявки, ПереченьПозиций, КодСледующегоСтатусаСтрокой,,Истина);
				ТекстСообщения = "изменены статусы из реализации:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", на "+КодСледующегоСтатусаСтрокой+": "+ПереченьПозицийСтрокой;
				ЗаписьВЛог(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		Если ИспользоватьОрдерныеСклады И ЗначениеЗаполнено(ДокОбъект.Склад) И НЕ ДокОбъект.Склад.ЭтоГруппа И ДокОбъект.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
			РасходныйОрдер = СоздатьРасходныйОрдерНаТовары(ДокОбъект.Ссылка, СтрокаСтатуса.Приоритет);
			Если СтрокаСтатуса.СоздаватьОтбор Тогда
				СоздатьОтборИзЯчеек(РасходныйОрдер, СтрокаСтатуса.СтатусОтбора);
			КонецЕсли;
		КонецЕсли;
		
		//чтобы в списке заказов был закрыт
		//Если (НеУчитыватьЗакрытыеЗаказыПокупателя И (СтрокаЗаявки.ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт) Или (ЗакрытЗаказКлиентаИзРегистра(СтрокаЗаявки.ЗаказКлиента)))) Тогда
		//в етд почему-то не работает
		//Если СтрокаСтатуса.СоздаватьЗаявкуПокупателя И НЕ СтрокаЗаявки.Закрыта Тогда
		//	Если (НЕ БезЗаказаКлиента) И (СтрокаЗаявки.ЗаказКлиента.Статус <> Перечисления.СтатусыЗаказовКлиентов.Закрыт) И (НЕ НеЗакрыватьЗаказыПокупателей) Тогда
		//		СтрокДокумента = ДокОбъект.Товары.Количество();
		//		Для Каждого ТекСтрока Из ДокОбъект.Товары Цикл
		//			Если ТекСтрока.Номенклатура = УслугаДоставки Тогда
		//				СтрокДокумента = СтрокДокумента - 1;
		//			КонецЕсли;
		//		КонецЦикла;
		//		Если СтрокДокумента = 0 Тогда
		//			Об = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
		//			Об.ЖелаемаяДатаОтгрузки = ДокОбъект.Дата;//ставим фактическую дату отгрузки
		//			Попытка
		//				Об.Записать();
		//				ЗаписьВЛог("У заявки: "+Об.Ссылка+" все позиции или отгружены или отменены, изменился статус на «"+СокрЛП(СтрокаЗаявки.ЗаказКлиента.Статус)+"»",0,Истина);
		//			Исключение
		//				ЗаписьВЛог("Не удалось изменить статус на «Закрыт» у заявки: "+Об.Ссылка+" "+ОписаниеОшибки(),5,Истина);
		//			КонецПопытки;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		ЗаписьВЛог("Записана "+ДокОбъект.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " клиент «"+СтрокаЗаявки.Контрагент+"»",3);
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			СтрокаНоменклатуры.РеализацияТоваровУслуг = ДокОбъект.Ссылка;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры //СоздатьРеализацииТоваровУслуг


Процедура СоздатьСчетФактураВыданный(ДокОбъект, СтрокаЗаявки = Неопределено)
	//СФ = Документы.СчетФактураВыданный.СоздатьДокумент();
	//СФ.Заполнить(ДанныеЗаполнения);
	//СФ.Записать();
	//СФ.ЗаполнитьПараметрыСчетаФактурыПоОснованию(
	//ЗаполнитьПоДокументуОснованию

	//ЕстьСчетаФактурыКОформлению = Документы.СчетФактураВыданный.ЕстьСчетаФактурыКОформлению(ДокОбъект.Ссылка);
	//Если есть, то ничего не создаём
	//СчетФактураВыданный = Документы.СчетФактураВыданный.СоздатьДокументНаОсновании(ДокОбъект.Ссылка);
	//Результат = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Основание, СтруктураОтбора);
	//РеквизитыСФ = УчетНДСВызовСервера.РеквизитыСчетаФактурыДляИсправленияСобственнойОшибки(
	//РеквизитыСФ = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреВыданном(Документ, СтруктураОтбора);
КонецПроцедуры //СоздатьСчетФактураВыданный

Процедура СоздатьЧекиККМВместоРеализации()
	МассивСтатусов = Новый Массив;
	//наверное, не надо добавлять КодСтатусаОтказ, по отказам ничего не будет создаваться
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если СтрокаСтатуса.СоздаватьЧекККМ Тогда
			МассивСтатусов.Добавить(СтрокаСтатуса.КодСтатуса);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтатусов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока50 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(50));
	НомерПлатежногоДокумента = НайтиДобавитьСвойствоДокумента("НомерПлатежногоДокумента", ТипИдентификатораСтрока50);//Номер платежного документа - в платежных документах
	ТипИдентификатораЧисло = Новый ОписаниеТипов(Новый Массив, , ,Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ИдентификаторКонтрагентаВДокументеОплаты = НайтиДобавитьСвойствоДокумента("Идентификатор контрагента в документе оплаты", ТипИдентификатораЧисло);
	НомерЗаказаВДокументеОплаты = НайтиДобавитьСвойствоДокумента("Номер заказа в документе оплаты", ТипИдентификатораЧисло);
	
	СтруктураПоискаЗаявки = Новый Структура("НомерЗаявки");
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли; 
		Если СписокИзмененныхЗаявок.НайтиПоЗначению(СтрокаЗаявки.ЗаказКлиента) = Неопределено Тогда
			Если ФильтрПоЗаявке<>0 И СтрокаЗаявки.НомерЗаявки <> ФильтрПоЗаявке Тогда //если принудительно загружаем заявку, то заново всё создаём или находим
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтруктураПоискаЗаявки.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		СтрокиНоменклатурыЗаказа = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
		ЗаказБезПозиций = Ложь;
		СтрокиНоменклатуры = Новый Массив;
		СуммаДокумента = 0;
		Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиНоменклатурыЗаказа Цикл
			Если МассивСтатусов.Найти(СтрокаНоменклатурыЗаказа.КодСтатуса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаНоменклатурыЗаказа.Сумма = 0 Тогда
				Продолжить;//отказная позиция
			КонецЕсли;
			СтрокиНоменклатуры.Добавить(СтрокаНоменклатурыЗаказа);
			СуммаДокумента = СуммаДокумента + СтрокаНоменклатурыЗаказа.Количество * СтрокаНоменклатурыЗаказа.ЦенаПродажи;
		КонецЦикла;
		Если СтрокиНоменклатуры.Количество() = 0 Тогда //контрагента отобрали, но по нему почему-то нет позиций
			ЗаказБезПозиций = Истина;
			Продолжить;//а может быть, это удаленные позиции, а в реализации они остались
		КонецЕсли;
		paymentNumber = СтрокаЗаявки.НомерЗаявки;
		createDateTime = СтрокаЗаявки.ДатаЗаявки;
		Док = НайтиЧек(paymentNumber, createDateTime, paymentNumber);
		Если ЗначениеЗаполнено(Док) Тогда
			Если СтрокиНоменклатуры.Количество() = Док.Товары.Количество() И СуммаДокумента = Док.Товары.Итог("Сумма") И ФильтрПоЗаявке = 0 Тогда
				Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиНоменклатурыЗаказа Цикл
					СтрокаНоменклатурыЗаказа.ЧекККМ = Док.Ссылка;
				КонецЦикла;
				Продолжить;//считаем, что документ не изменился
			КонецЕсли;
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.Товары.Очистить();
			ДокОбъект.ОплатаПлатежнымиКартами.Очистить();
		Иначе
			ДокОбъект = Документы.ЧекККМ.СоздатьДокумент();
		КонецЕсли;
		СостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(КассаККМ);
		//ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены,,"Кассир");
		Если ИспользоватьТранзакции Тогда НачатьТранзакцию(); КонецЕсли;
		//Если ТекСтрока.paymentTypeCode = 2 ИЛИ (ТекСтрока.paymentTypeCode = 1 И НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал)) Тогда //Код типа платежа: 0 - Безналичный, 1 - Электронный, 2 - Наличный
		Если СтрокаЗаявки.paymentType = "Наличный" Тогда
			НаличнаяОплата = Истина;
		Иначе
			НаличнаяОплата = Ложь;
		КонецЕсли;
		//НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
		
		//ДокОбъект.Заполнить(Неопределено);
		ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновления;
		ДокОбъект.Организация = Организация;
		Если СтрокаЗаявки.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ДокОбъект.Организация = ОрганизацияРозница;
		КонецЕсли;
		ДокОбъект.Валюта = Валюта;
		Если ЦеныПродажиВРублях Тогда//чек ККМ
			ДокОбъект.Валюта = Рубли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаПродажи) Тогда
			ДокОбъект.Валюта = СтрокаЗаявки.ВалютаПродажи;
		КонецЕсли;
		Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
			ДокОбъект.Валюта = Валюта;
		КонецЕсли;
		ДокОбъект.ВидЦены = ВидЦены;//или надо вид цены продажи
		ДокОбъект.КассаККМ = КассаККМ;
		ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
		ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПродаже;
		//Если ИспользоватьСоглашенияСКлиентами Тогда
		//	Соглашение = Неопределено;
		//	УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(СтрокаЗаявки.Контрагент.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
		//	Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
		//		Соглашение = УсловияПродажПоУмолчанию.Соглашение;
		//	КонецЕсли;
		//	Если ЗначениеЗаполнено(Соглашение) Тогда
		//		Если ЗаполнятьОрганизациюПоСоглашению И ЗначениеЗаполнено(Соглашение.Организация) Тогда
		//			ДокОбъект.Организация = ДокОбъект.Соглашение.Организация;
		//		КонецЕсли;
		//		ДокОбъект.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;
		//	КонецЕсли;
		//	//в соглашении может быть менеджер возможно его тоже стоит заполнять
		//КонецЕсли;
		//ДокОбъект.ОтложенДо = ТекущаяДата() + 1;//ДокОбъект.Дата;
		ДокОбъект.Партнер = СтрокаЗаявки.Контрагент.Партнер;
		ДокОбъект.Комментарий = СтрокаЗаявки.Комментарий+" заявка № "+Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0")+" от "+СтрокаЗаявки.ДатаЗаявки;
		ДокОбъект.КассоваяСмена = СостояниеКассовойСмены.КассоваяСмена;
		ДокОбъект.Склад = Склад;
		//ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован;//.Отложен
		ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.Отложен;//отложен без резервирования потом вроде должен РМК открываться
		ДокОбъект.Кассир = Пользователи.ТекущийПользователь();
		Если НаличнаяОплата Тогда
			ДокОбъект.ПолученоНаличными = СуммаДокумента;//СтрокаЗаявки.СуммаЗаявки;
			ДокОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
		Иначе
			ДокОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
		КонецЕсли;
		Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиНоменклатурыЗаказа Цикл
			Если МассивСтатусов.Найти(СтрокаНоменклатурыЗаказа.КодСтатуса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаНоменклатурыЗаказа.Сумма = 0 Тогда
				Продолжить;//отказная позиция
			КонецЕсли;
			СтрокаДокумента = ДокОбъект.Товары.Добавить();
			СтрокаДокумента.Номенклатура = СтрокаНоменклатурыЗаказа.Номенклатура;
			СтрокаДокумента.КоличествоУпаковок = 1;
			СтрокаДокумента.Количество = СтрокаНоменклатурыЗаказа.Количество;
			СтрокаДокумента.Сумма = СтрокаНоменклатурыЗаказа.Сумма;
			СтрокаДокумента.Цена = СтрокаНоменклатурыЗаказа.ЦенаПродажи;
			СтрокаДокумента.Продавец = ДокОбъект.Кассир;
			ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, СтрокаДокумента);
		КонецЦикла;
		ДокОбъект.СуммаДокумента = СуммаДокумента;
		Если НаличнаяОплата Тогда
			ДокОбъект.ПолученоНаличными = ДокОбъект.СуммаДокумента;
		КонецЕсли;
		Попытка
			Если СостояниеКассовойСмены.СменаОткрыта Тогда
				ДокОбъект.Записать(РежимЗаписиДок); 
				ДокументПроведен = Истина;
				ЗаписьВЛог("Проведен "+СокрЛП(ДокОбъект)+" по заявке № "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" "+СтрокаЗаявки.paymentType+" " +СтрокаЗаявки.ДатаЗаявки,1,Истина);
			Иначе
				ДокОбъект.Записать(); 
				ЗаписьВЛог("Не открыта кассовая смена, не проведен "+СокрЛП(ДокОбъект)+" по заявке № "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" "+СтрокаЗаявки.paymentType+" " +СтрокаЗаявки.ДатаЗаявки,1,Истина);
			КонецЕсли;
		Исключение
			ДокОбъект.Записать();
			ЗаписьВЛог("Не удалось провести "+СокрЛП(ДокОбъект)+ОписаниеОшибки(),5,Истина);
		КонецПопытки;
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
		МенеджерЗаписи.Свойство = НомерЗаказаВДокументеОплаты.Ссылка;
		МенеджерЗаписи.Значение = СтрокаЗаявки.НомерЗаявки;
		МенеджерЗаписи.Записать();
		
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
		МенеджерЗаписи.Свойство = ИдентификаторКонтрагентаВДокументеОплаты.Ссылка;
		МенеджерЗаписи.Значение = СтрокаЗаявки.ИдентификаторКонтрагента;
		МенеджерЗаписи.Записать();
		Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиНоменклатурыЗаказа Цикл
			Если МассивСтатусов.Найти(СтрокаНоменклатурыЗаказа.КодСтатуса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНоменклатурыЗаказа.ЧекККМ = ДокОбъект.Ссылка;
		КонецЦикла;
		Если ИспользоватьТранзакции Тогда ЗафиксироватьТранзакцию(); КонецЕсли;
		//учетбеззабот.рф/bukhgalteriya-3-0/main/bukhgalteriya-3-0/onlain-kassy-chast-2-pechat-chekov-v-1s
		//пробить чек
		//ПробитьЧек(ДокОбъект.Ссылка);
	КонецЦикла;//Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
КонецПроцедуры//СоздатьЧекиККМВместоРеализации

Функция ПолучитьРеализациюДляВозврата(СтрокаЗаявки, СтрокаНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Дата >= &Дата
		|	И РеализацияТоваровУслугТовары.ЗаказКлиента = &ЗаказКлиента
		|	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки);
	Запрос.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаНоменклатуры.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ССылка;
	КонецЦикла;
	//если не находит, то, возможно, в этом статусе не стоит галочка, где "Реализация"	
	Возврат Неопределено;

КонецФункции


Процедура СоздатьВозвратыОтКлиентов() Экспорт
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	МассивСтатусов = Новый Массив;
	//наверное, не надо добавлять КодСтатусаОтказ, по отказам ничего не будет создаваться
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если НеЗагружатьОтказы и СтрокаСтатуса.КодСтатуса = КодСтатусаОтказ Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаСтатуса.СоздаватьВозвратОтКлиента Тогда
			МассивСтатусов.Добавить(СтрокаСтатуса.КодСтатуса);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтатусов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка,
	               |	ВозвратТоваровОтКлиента.ДокументРеализации КАК ДокументРеализации
	               |ИЗ
	               |	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	               |ГДЕ
	               |	ВозвратТоваровОтКлиента.ДокументРеализации = &ДокументРеализации
	               |	И ВозвратТоваровОтКлиента.Дата >= &Дата
	               |	И ВозвратТоваровОтКлиента.ПометкаУдаления = ЛОЖЬ";//++абс+ добавил условие пометка удаления
	СтруктураПоискаЗаявки = Новый Структура("НомерЗаявки");
	
	

	
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл	
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли;
		
				
		СтруктураПоискаЗаявки.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		СтрокиЗаявки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
		Если СтрокиЗаявки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокиНоменклатуры = Новый Массив;//сюда отбираем позиции, по которым отказ, чтобы другие не вернуть
		ДокументРеализации = Неопределено;
		Для Каждого СтрокаНоменклатуры Из СтрокиЗаявки Цикл
			Если МассивСтатусов.Найти(СтрокаНоменклатуры.КодСтатуса) <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаНоменклатуры.РеализацияТоваровУслуг) Тогда //чтобы и статус был, и документ реализации тоже
					СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
				Иначе //могли сделать реализацию из 1С, поэтому её надо найти
					СтрокаНоменклатуры.РеализацияТоваровУслуг = ПолучитьРеализациюДляВозврата(СтрокаЗаявки, СтрокаНоменклатуры);
					Если ЗначениеЗаполнено(СтрокаНоменклатуры.РеализацияТоваровУслуг) Тогда //чтобы и статус был, и документ реализации тоже
						СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.РеализацияТоваровУслуг) Тогда
				ДокументРеализации = СтрокаНоменклатуры.РеализацияТоваровУслуг;
			КонецЕсли;
		КонецЦикла;
		Если СтрокиНоменклатуры.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		
		//++абс+ не нужно, уже есть цикл реал
		//Если ДокументРеализации = Неопределено Тогда
		//	//если нет реализации, то нельзя сделать возврать
		//	Продолжить;
		//КонецЕсли;
		
		СтрокиНоменклатурыТЗ = Новый ТаблицаЗначений;
		//СтрокиНоменклатурыТЗ.Колонки.Добавить("СтрокаНоменклатуры");
		СтрокиНоменклатурыТЗ.Колонки.Добавить("ВозвратОстаток");
		 // ++ Алксей
		СтрокиНоменклатурыТЗ.Колонки.Добавить("Номенклатура");
		СтрокиНоменклатурыТЗ.Колонки.Добавить("Количество");
		СтрокиНоменклатурыТЗ.Колонки.Добавить("Склад");
		СтрокиНоменклатурыТЗ.Колонки.Добавить("СтатусСайт");
		СтрокиНоменклатурыТЗ.Колонки.Добавить("ЦенаПродажи");
		СтрокиНоменклатурыТЗ.Колонки.Добавить("ИдентификаторНоменклатуры");
		СтрокиНоменклатурыТЗ.Колонки.Добавить("dateUpdated"); 
		
		Для Каждого ТекСтрока Из СтрокиНоменклатуры Цикл
			ЗаполнитьЗначенияСвойств(СтрокиНоменклатурыТЗ.Добавить(), ТекСтрока);
		КонецЦикла;
		
		// -- Алксей
		
		//ТЗВозвратов = 
		
		//ТаблицаРезультат = Новый ТаблицаЗначений;
		//Для каждого ИмяКолонки Из МассивИменКолонок Цикл
		//	ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);
		//КонецЦикла; 
		
		// Создадим пустые строки таблицы
		//Для Н=1 По СтрокиНоменклатуры.Количество() Цикл
		//	СтрокиНоменклатурыТЗ.Добавить();
		//КонецЦикла; 
		//СтрокиНоменклатурыТЗ.ЗагрузитьКолонку(СтрокиНоменклатуры, "СтрокаНоменклатуры");
		Для Каждого СтрокаСтрокиНоменклатурыТЗ Из СтрокиНоменклатурыТЗ Цикл
			
			КолвоВВозвратахПоНоменклатуреВЦелом = 0;
			
			ЗапросОстВозвр = Новый Запрос;
			ЗапросОстВозвр.Текст = 
			"ВЫБРАТЬ
			|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
			|	СУММА(ЕСТЬNULL(ВозвратТоваровОтКлиентаТовары.Количество, 0)) КАК Количество
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
			|ГДЕ
			|	ВозвратТоваровОтКлиентаТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
			|	И ВЫРАЗИТЬ(ВозвратТоваровОтКлиентаТовары.Ссылка.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента = &ЗаказКлиента
			|	И ВозвратТоваровОтКлиентаТовары.Номенклатура = &Номенклатура
			|	И ВозвратТоваровОтКлиентаТовары.КодСтроки = &КодСтроки
			|
			|СГРУППИРОВАТЬ ПО
			|	ВозвратТоваровОтКлиентаТовары.Номенклатура";
			
			ЗапросОстВозвр.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
			ЗапросОстВозвр.УстановитьПараметр("Номенклатура", СтрокаСтрокиНоменклатурыТЗ.Номенклатура);
			ЗапросОстВозвр.УстановитьПараметр("КодСтроки", СтрокаСтрокиНоменклатурыТЗ.ИдентификаторНоменклатуры);
			//ЗапросОстВозвр.УстановитьПараметр("Проведен", Проведен);
			
			РезультатЗапросаОстВозвр = ЗапросОстВозвр.Выполнить();
			
			ТЗРезультатЗапросаОстВозвр = РезультатЗапросаОстВозвр.Выгрузить();
			Если ТЗРезультатЗапросаОстВозвр.Количество()> 0 Тогда
				КолвоВВозвратахПоНоменклатуреВЦелом = ТЗРезультатЗапросаОстВозвр[0].Количество;
				//Если ВыборкаДетальныеЗаписиОстВозвр.Следующий() Тогда 
				//	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписиОстВозвр.Количество) Тогда
				//		КолвоВВозвратахПоНоменклатуреВЦелом = ВыборкаДетальныеЗаписиОстВозвр.Количество;
				//	КонецЕсли;
				//КонецЕсли;	
			КонецЕсли;
			СтрокаСтрокиНоменклатурыТЗ.ВозвратОстаток = СтрокаСтрокиНоменклатурыТЗ.Количество - КолвоВВозвратахПоНоменклатуреВЦелом;
			
			ЗаписьВЛог("СтрокаСтрокиНоменклатурыТЗ.ВозвратОстаток "+СтрокаСтрокиНоменклатурыТЗ.Номенклатура +" "+СтрокаСтрокиНоменклатурыТЗ.ВозвратОстаток);
		
		КонецЦикла;	
		
		//++абс+ по каждой реализации проходим и проверяем если ли такая ном-ра в ней для возврата
		ЗапросРеал = Новый Запрос;
		ЗапросРеал.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
		|	И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = &ЗаказКлиента
		|	И РеализацияТоваровУслугТовары.Номенклатура В (&Номенклатура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияТоваровУслуг.Дата";
		ЗапросРеал.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
		// ++ Алексей                 
		МассивНоменклатур = Новый Массив;
		Для Каждого ТекущаяСтрокаДляВозврата ИЗ СтрокиНоменклатурыТЗ Цикл
			МассивНоменклатур.Добавить(ТекущаяСтрокаДляВозврата.Номенклатура);
		КонецЦикла;
		ЗапросРеал.УстановитьПараметр("Номенклатура", МассивНоменклатур);
		// -- Алексей
		РезультатЗапросаРеал = ЗапросРеал.Выполнить();
		ВыборкаДетальныеЗаписиРеал = РезультатЗапросаРеал.Выбрать();
		
		Пока ВыборкаДетальныеЗаписиРеал.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписиРеал.Ссылка;
		
		

		
		//++абс-

		ДокументРеализации = ВыборкаДетальныеЗаписиРеал.Ссылка; //++абс+ 
		
		Запрос.УстановитьПараметр("ДокументРеализации", ВыборкаДетальныеЗаписиРеал.Ссылка);//ДокументРеализации); //++абс+ заменил
		Запрос.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки-СмещениеЧасовогоПояса*3600);
		//Запрос.УстановитьПараметр("Дата", ДокументРеализации.Дата);
		Результат = Запрос.Выполнить();
		//++абс+ каждый новый возщврат отдельно
		//Если Не Результат.Пустой() Тогда
		//	Выборка = Результат.Выбрать();
		//	Выборка.Следующий();
		//	ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		//	Если СтрокаЗаявки.Изменена = Ложь Тогда
		//		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
		//			СтрокаНоменклатуры.ВозвратТоваровОтПокупателя = ДокОбъект.Ссылка;
		//		КонецЦикла;
		//		Продолжить;
		//	КонецЕсли;
		//Иначе
			ДокОбъект = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
		//КонецЕсли;
		//ДокОбъект.Дата = ДокументРеализации.Дата+1;//ТекущаяДата();
		ДокОбъект.Дата = СтрокаЗаявки.dateUpdated+1;
		ДокОбъект.ДокументРеализации = ДокументРеализации;
		//сообщить(ДокОбъект.Дата);
		ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		ДокОбъект.Партнер = СтрокаЗаявки.Контрагент.Партнер;
		ДокОбъект.Контрагент = СтрокаЗаявки.Контрагент;
		Если ИспользоватьСоглашенияСКлиентами Тогда
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокОбъект.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
			Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
				ДокОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
				Если СтрокаЗаявки.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					ДокОбъект.Соглашение = СоглашениеРозница;
				Иначе
					ДокОбъект.Соглашение = СоглашениеОпт;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
				Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Валюта) Тогда
					ДокОбъект.Валюта = ДокОбъект.Соглашение.Валюта;
				КонецЕсли;
				Если ЗаполнятьОрганизациюПоСоглашению Тогда
					Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Организация) Тогда
						ДокОбъект.Организация = ДокОбъект.Соглашение.Организация;
					КонецЕсли;
					ДокОбъект.ЦенаВключаетНДС = ДокОбъект.Соглашение.ЦенаВключаетНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ИспользоватьДоговорыСКлиентами Тогда
			ДокОбъект.Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект, Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		КонецЕсли;

		
		Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено И НЕ УТКазахстан Тогда
			ДокОбъект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
		КонецЕсли;
		Попытка
			ДокОбъект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
		Исключение
		КонецПопытки;
		ДокОбъект.Покупатель = СокрЛП(СтрокаЗаявки.Контрагент);
		ДокОбъект.ДокументРеализации = ДокументРеализации;
		//ДокОбъект.Магазин = Магазин;
		ДокОбъект.Склад = ДокументРеализации.Склад;//в реализации может быть группа складов, поэтому при заполнении таблицы перевыбираем
		ДокОбъект.Организация = ДокументРеализации.Организация;
		ДокОбъект.Подразделение = ДокументРеализации.Подразделение;
		ДокОбъект.Валюта = Валюта;
		Если ЦеныПродажиВРублях Тогда//возврат от клиента
			ДокОбъект.Валюта = Рубли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаПродажи) Тогда
			ДокОбъект.Валюта = СтрокаЗаявки.ВалютаПродажи;
		КонецЕсли;
		Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
			ДокОбъект.Валюта = Валюта;
		КонецЕсли;
		Если УТ113 Или УТ114 Тогда
			ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
		//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
		ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
		//Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		//	ДокОбъект.ЦенаВключаетНДС = Истина;
		//Иначе
		//	ДокОбъект.ЦенаВключаетНДС = Ложь;
		//КонецЕсли;
		ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПродаже;//возврат от клиентов
		ДокОбъект.ДокументРеализации = ДокументРеализации;
		ДокОбъект.НомерВходящегоДокумента = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
		ДокОбъект.ДатаВходящегоДокумента = СтрокаЗаявки.ДатаЗаявки;
		ДокОбъект.Комментарий = ""+ДокОбъект.НомерВходящегоДокумента+" от "+ДокОбъект.ДатаВходящегоДокумента;
		ДокОбъект.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства;
		//++абс+
		//ДокОбъект.Товары.Очистить();//или сравнивать, надо записывать или нет
		НС = 0;
		ТоварыРеализации = ДокументРеализации.Товары.Выгрузить();
		Структура = Новый Структура("Номенклатура");
		
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатурыТЗ Цикл //СтрокиНоменклатуры Цикл //++абс+ заменил на таблицу значений
			
			//++абс+ проверять если ли в этой реал. эти позиции для возврата, если нет то пропускаем и 
			Если СтрокаНоменклатуры.ВозвратОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			//СтрокаТЗНоменклатуры.ВозвратОстаток = 0;
			//проверить хватает ли в реал.
			МожноСписать = 0;
			Стр = Новый Структура("Номенклатура", СтрокаНоменклатуры.Номенклатура);
			// ++ Алексей
			//Стр.Вставить("КодСтроки", СтрокаНоменклатуры.ИдентификаторНоменклатуры);
			// -- Алексей
			
			НайдСтрокиРеал = ВыборкаДетальныеЗаписиРеал.Ссылка.Товары.НайтиСтроки(Стр);
			Для Каждого сРеал Из НайдСтрокиРеал Цикл
				МожноСписать = МожноСписать + сРеал.Количество;	
			КонецЦикла;
			КолвоСписываем = Мин(МожноСписать,СтрокаНоменклатуры.ВозвратОстаток);
			СтрокаНоменклатуры.ВозвратОстаток = СтрокаНоменклатуры.ВозвратОстаток - КолвоСписываем;
			
			Если КолвоСписываем = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			////добавим 1 строку в СтрокиНоменклатурыТЗ, если не списали в 0
			//Если ВозвратОстаток> 0 Тогда
			//	 НовСтрТЗ =  СтрокиНоменклатурыТЗ.Добавить();
			//	 НовСтрТЗ.СтрокаНоменклатуры = СтрокаТЗНоменклатуры.СтрокаНоменклатуры;
			//	 НовСтрТЗ.ВозвратОстаток = ВозвратОстаток;
			//КонецЕсли;	
			
			                        
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.Склад) Тогда
				ДокОбъект.Склад = СтрокаНоменклатуры.Склад;
			КонецЕсли; 
			СтрокаДокумента = ДокОбъект.Товары.Добавить();
			ДокОбъект.ПричинаВозврата = СтрокаНоменклатуры.СтатусСайт;
			СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
			Если НаименованиеХарактеристики<>"" И СтрокаДокумента.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
				СтрокаДокумента.Характеристика = ПолучитьХарактеристикуНоменклатуры(СтрокаДокумента.Номенклатура);
			КонецЕсли;
			СтрокаДокумента.Количество = КолвоСписываем;//++абс+//СтрокаНоменклатуры.Количество; 
			СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество;//++абс+СтрокаНоменклатуры.Количество;
			Если СтрокаДокумента.Количество = 0 Тогда
				СтрокаДокумента.Количество = 1;
				СтрокаДокумента.КоличествоУпаковок = 1;
			КонецЕсли;
			СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаПродажи;
			Если СтрокаДокумента.Цена = 0 Тогда
				Структура.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				НСтроки = ТоварыРеализации.НайтиСтроки(Структура);
				Для Каждого НСтрока Из НСтроки Цикл
					СтрокаДокумента.Цена = НСтрока.Цена;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			СтрокаДокумента.Сумма = СтрокаНоменклатуры.ЦенаПродажи*СтрокаДокумента.Количество;//++абс+СтрокаНоменклатуры.Количество;
			СтрокаДокумента.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
			Если СтрокаДокумента.Цена = 0 Тогда
				СтрокаДокумента.Цена = 0.01;//иначе возврат не проводится
			КонецЕсли;
			СтрокаДокумента.Сумма = СтрокаДокумента.Цена * СтрокаДокумента.Количество;
			СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
			ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, СтрокаДокумента);
			Если НалогообложениеНДСРеализация = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
				ДокОбъект.ПокупательНеПлательщикНДС = Ложь;
			Иначе
				ДокОбъект.ПокупательНеПлательщикНДС = Истина;
			КонецЕсли;
			СтрокаДокумента.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;
			СтрокаДокумента.ДокументРеализации = ДокументРеализации;
			Если ИспользоватьСерииНоменклатуры Тогда
				СтрокаДокумента.Серия = НайтиДобавитьСериюНоменклатуры(СтрокаНоменклатуры);
				СтрокаДокумента.СтатусУказанияСерий = 14;//13;
			Иначе//Если КонстантаИспользоватьСерииНоменклатуры Тогда
				СтрокаДокумента.СтатусУказанияСерий = 0;
				СтрокаДокумента.Серия = "";
			КонецЕсли;
			ДокОбъект.Дата = Макс(ДокОбъект.Дата,СтрокаНоменклатуры.dateUpdated)+1;
			//сообщить("Из строк: "+ДокОбъект.Дата+" "+СтрокаНоменклатуры.dateUpdated);
		КонецЦикла;
		ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
		
		ДокОбъект.РасшифровкаПлатежа.Очистить();
		РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
		//или не заполнять Заказ?
		Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
			РасшифровкаПлатежа.УдалитьЗаказ = СтрокаЗаявки.ЗаказКлиента;
			Если НЕ ЗначениеЗаполнено(РасшифровкаПлатежа.УдалитьЗаказ) И ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
				РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Ссылка;
			КонецЕсли;
		Иначе
			РасшифровкаПлатежа.Заказ = СтрокаЗаявки.ЗаказКлиента;
			Если НЕ ЗначениеЗаполнено(РасшифровкаПлатежа.Заказ) И ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
				РасшифровкаПлатежа.Заказ = ДокОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
		РасшифровкаПлатежа.Сумма = ДокОбъект.СуммаДокумента;
		РасшифровкаПлатежа.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
		РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
		
		//ВидыЗапасов, наверное, сами заполняются
		//ДокументРеализации
		//СпособОпределенияСебестоимости
		//Количество = 1
		//КоличествоПоРНПТ = 0
		//СуммаСНДС = 1525
		//СтавкаНДС = БезНДС
		//СуммаНДС = 0
		//<ВидЗапасовОтгрузки
		//<ДокументРеализации
		//<ИдентификаторСтроки
		//АналитикаУчетаНоменклатуры = 35d3e315
		//Себестоимость = 0
		//СебестоимостьБезНДС = 0
		//СебестоимостьРегл = 0
		//СебестоимостьПР = 0
		//СебестоимостьВР = 0
		//СпособОпределенияСебестоимости = ИзДокументаПродажи
		//АналитикаУчетаНоменклатурыОтгрузки = 35d3e315
		//КоличествоУпаковок = 1
		
		
		//сообщить("Перед записью: "+ДокОбъект.Дата);
		ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
			ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Если ДокОбъект.Товары.Количество()> 0 Тогда //++абс+
			Попытка
				ДокОбъект.Записать(РежимЗаписиДок);
			Исключение
				ДокОбъект.Записать();
				ТекстСообщения = "Не удалось провести "+СокрЛП(ДокОбъект)+" "+ОписаниеОшибки();
				ЗаписьВЛог(ТекстСообщения,5,Истина);
			КонецПопытки;
			//сообщить("После записи: "+ДокОбъект);
			ЗаписьВЛог("Создан "+ДокОбъект.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " клиент «"+СтрокаЗаявки.Контрагент+"»",3);
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				СтрокаНоменклатуры.ВозвратТоваровОтПокупателя = ДокОбъект.Ссылка;
			КонецЦикла;
		КонецЕсли;
		//сообщить("Документ: "+ДокОбъект); 
		
	//++абс+  цикл по реал
	КонецЦикла;           
	//++абс-
		
	КонецЦикла;
КонецПроцедуры//СоздатьВозвратыОтКлиентов


//Процедура СоздатьВозвратыОтКлиентов()
//	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
//	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
//	МассивСтатусов = Новый Массив;
//	//наверное, не надо добавлять КодСтатусаОтказ, по отказам ничего не будет создаваться
//	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
//		Если НеЗагружатьОтказы и СтрокаСтатуса.КодСтатуса = КодСтатусаОтказ Тогда
//			Продолжить;
//		КонецЕсли;
//		Если СтрокаСтатуса.СоздаватьВозвратОтКлиента Тогда
//			МассивСтатусов.Добавить(СтрокаСтатуса.КодСтатуса);
//		КонецЕсли;
//	КонецЦикла;
//	Если МассивСтатусов.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//	               |	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка,
//	               |	ВозвратТоваровОтКлиента.ДокументРеализации КАК ДокументРеализации
//	               |ИЗ
//	               |	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
//	               |ГДЕ
//	               |	ВозвратТоваровОтКлиента.ДокументРеализации = &ДокументРеализации
//	               |	И ВозвратТоваровОтКлиента.Дата >= &Дата";
//	СтруктураПоискаЗаявки = Новый Структура("НомерЗаявки");
//	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл	
//		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
//			Продолжить;
//		КонецЕсли; 
//		СтруктураПоискаЗаявки.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
//		СтрокиЗаявки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
//		Если СтрокиЗаявки.Количество() = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		СтрокиНоменклатуры = Новый Массив;//сюда отбираем позиции, по которым отказ, чтобы другие не вернуть
//		ДокументРеализации = Неопределено;
//		Для Каждого СтрокаНоменклатуры Из СтрокиЗаявки Цикл
//			Если МассивСтатусов.Найти(СтрокаНоменклатуры.КодСтатуса) <> Неопределено Тогда
//				Если ЗначениеЗаполнено(СтрокаНоменклатуры.РеализацияТоваровУслуг) Тогда //чтобы и статус был, и документ реализации тоже
//					СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
//				Иначе //могли сделать реализацию из 1С, поэтому её надо найти
//					СтрокаНоменклатуры.РеализацияТоваровУслуг = ПолучитьРеализациюДляВозврата(СтрокаЗаявки, СтрокаНоменклатуры);
//					Если ЗначениеЗаполнено(СтрокаНоменклатуры.РеализацияТоваровУслуг) Тогда //чтобы и статус был, и документ реализации тоже
//						СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//			Если ЗначениеЗаполнено(СтрокаНоменклатуры.РеализацияТоваровУслуг) Тогда
//				ДокументРеализации = СтрокаНоменклатуры.РеализацияТоваровУслуг;
//			КонецЕсли;
//		КонецЦикла;
//		Если СтрокиНоменклатуры.Количество() = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		Если ДокументРеализации = Неопределено Тогда
//			//если нет реализации, то нельзя сделать возврать
//			Продолжить;
//		КонецЕсли;
//		Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
//		Запрос.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки-СмещениеЧасовогоПояса*3600);
//		//Запрос.УстановитьПараметр("Дата", ДокументРеализации.Дата);
//		Результат = Запрос.Выполнить();
//		Если Не Результат.Пустой() Тогда
//			Выборка = Результат.Выбрать();
//			Выборка.Следующий();
//			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
//			Если СтрокаЗаявки.Изменена = Ложь Тогда
//				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
//					СтрокаНоменклатуры.ВозвратТоваровОтПокупателя = ДокОбъект.Ссылка;
//				КонецЦикла;
//				Продолжить;
//			КонецЕсли;
//		Иначе
//			ДокОбъект = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
//		КонецЕсли;
//		//ДокОбъект.Дата = ДокументРеализации.Дата+1;//ТекущаяДата();
//		ДокОбъект.Дата = СтрокаЗаявки.dateUpdated+1;
//		ДокОбъект.ДокументРеализации = ДокументРеализации;
//		//сообщить(ДокОбъект.Дата);
//		ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
//		ДокОбъект.Партнер = СтрокаЗаявки.Контрагент.Партнер;
//		ДокОбъект.Контрагент = СтрокаЗаявки.Контрагент;
//		Если ИспользоватьСоглашенияСКлиентами Тогда
//			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокОбъект.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
//			Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
//				ДокОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
//			КонецЕсли;
//			Если Не ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
//				Если СтрокаЗаявки.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
//					ДокОбъект.Соглашение = СоглашениеРозница;
//				Иначе
//					ДокОбъект.Соглашение = СоглашениеОпт;
//				КонецЕсли;
//			КонецЕсли;
//			Если ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
//				Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Валюта) Тогда
//					ДокОбъект.Валюта = ДокОбъект.Соглашение.Валюта;
//				КонецЕсли;
//				Если ЗаполнятьОрганизациюПоСоглашению Тогда
//					Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Организация) Тогда
//						ДокОбъект.Организация = ДокОбъект.Соглашение.Организация;
//					КонецЕсли;
//					ДокОбъект.ЦенаВключаетНДС = ДокОбъект.Соглашение.ЦенаВключаетНДС;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//		Если ИспользоватьДоговорыСКлиентами Тогда
//			ДокОбъект.Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект, Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
//		КонецЕсли;

//		
//		Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено И НЕ УТКазахстан Тогда
//			ДокОбъект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
//		КонецЕсли;
//		Попытка
//			ДокОбъект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
//		Исключение
//		КонецПопытки;
//		ДокОбъект.Покупатель = СокрЛП(СтрокаЗаявки.Контрагент);
//		ДокОбъект.ДокументРеализации = ДокументРеализации;
//		//ДокОбъект.Магазин = Магазин;
//		ДокОбъект.Склад = ДокументРеализации.Склад;//в реализации может быть группа складов, поэтому при заполнении таблицы перевыбираем
//		ДокОбъект.Организация = ДокументРеализации.Организация;
//		ДокОбъект.Подразделение = ДокументРеализации.Подразделение;
//		ДокОбъект.Валюта = Валюта;
//		Если ЦеныПродажиВРублях Тогда//возврат от клиента
//			ДокОбъект.Валюта = Рубли;
//		КонецЕсли;
//		Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаПродажи) Тогда
//			ДокОбъект.Валюта = СтрокаЗаявки.ВалютаПродажи;
//		КонецЕсли;
//		Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
//			ДокОбъект.Валюта = Валюта;
//		КонецЕсли;
//		Если УТ113 Или УТ114 Тогда
//			ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
//		КонецЕсли;
//		//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
//		ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
//		//Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
//		//	ДокОбъект.ЦенаВключаетНДС = Истина;
//		//Иначе
//		//	ДокОбъект.ЦенаВключаетНДС = Ложь;
//		//КонецЕсли;
//		ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПродаже;//возврат от клиентов
//		ДокОбъект.ДокументРеализации = ДокументРеализации;
//		ДокОбъект.НомерВходящегоДокумента = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
//		ДокОбъект.ДатаВходящегоДокумента = СтрокаЗаявки.ДатаЗаявки;
//		ДокОбъект.Комментарий = ""+ДокОбъект.НомерВходящегоДокумента+" от "+ДокОбъект.ДатаВходящегоДокумента;
//		ДокОбъект.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства;
//		ДокОбъект.Товары.Очистить();//или сравнивать, надо записывать или нет
//		НС = 0;
//		ТоварыРеализации = ДокументРеализации.Товары.Выгрузить();
//		Структура = Новый Структура("Номенклатура");
//		
//		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
//			Если ЗначениеЗаполнено(СтрокаНоменклатуры.Склад) Тогда
//				ДокОбъект.Склад = СтрокаНоменклатуры.Склад;
//			КонецЕсли; 
//			СтрокаДокумента = ДокОбъект.Товары.Добавить();
//			ДокОбъект.ПричинаВозврата = СтрокаНоменклатуры.СтатусСайт;
//			СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
//			Если НаименованиеХарактеристики<>"" И СтрокаДокумента.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
//				СтрокаДокумента.Характеристика = ПолучитьХарактеристикуНоменклатуры(СтрокаДокумента.Номенклатура);
//			КонецЕсли;
//			СтрокаДокумента.Количество = СтрокаНоменклатуры.Количество;
//			СтрокаДокумента.КоличествоУпаковок = СтрокаНоменклатуры.Количество;
//			Если СтрокаДокумента.Количество = 0 Тогда
//				СтрокаДокумента.Количество = 1;
//				СтрокаДокумента.КоличествоУпаковок = 1;
//			КонецЕсли;
//			СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаПродажи;
//			Если СтрокаДокумента.Цена = 0 Тогда
//				Структура.Номенклатура = СтрокаНоменклатуры.Номенклатура;
//				НСтроки = ТоварыРеализации.НайтиСтроки(Структура);
//				Для Каждого НСтрока Из НСтроки Цикл
//					СтрокаДокумента.Цена = НСтрока.Цена;
//					Прервать;
//				КонецЦикла;
//			КонецЕсли;
//			СтрокаДокумента.Сумма = СтрокаНоменклатуры.ЦенаПродажи*СтрокаНоменклатуры.Количество;
//			СтрокаДокумента.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
//			Если СтрокаДокумента.Цена = 0 Тогда
//				СтрокаДокумента.Цена = 0.01;//иначе возврат не проводится
//			КонецЕсли;
//			СтрокаДокумента.Сумма = СтрокаДокумента.Цена * СтрокаДокумента.Количество;
//			СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
//			ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, СтрокаДокумента);
//			Если НалогообложениеНДСРеализация = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
//				ДокОбъект.ПокупательНеПлательщикНДС = Ложь;
//			Иначе
//				ДокОбъект.ПокупательНеПлательщикНДС = Истина;
//			КонецЕсли;
//			СтрокаДокумента.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;
//			СтрокаДокумента.ДокументРеализации = ДокументРеализации;
//			Если ИспользоватьСерииНоменклатуры Тогда
//				СтрокаДокумента.Серия = НайтиДобавитьСериюНоменклатуры(СтрокаНоменклатуры);
//				СтрокаДокумента.СтатусУказанияСерий = 14;//13;
//			Иначе//Если КонстантаИспользоватьСерииНоменклатуры Тогда
//				СтрокаДокумента.СтатусУказанияСерий = 0;
//				СтрокаДокумента.Серия = "";
//			КонецЕсли;
//			ДокОбъект.Дата = Макс(ДокОбъект.Дата,СтрокаНоменклатуры.dateUpdated)+1;
//			//сообщить("Из строк: "+ДокОбъект.Дата+" "+СтрокаНоменклатуры.dateUpdated);
//		КонецЦикла;
//		ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
//		
//		ДокОбъект.РасшифровкаПлатежа.Очистить();
//		РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
//		//или не заполнять Заказ?
//		Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
//			РасшифровкаПлатежа.УдалитьЗаказ = СтрокаЗаявки.ЗаказКлиента;
//			Если НЕ ЗначениеЗаполнено(РасшифровкаПлатежа.УдалитьЗаказ) И ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
//				РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Ссылка;
//			КонецЕсли;
//		Иначе
//			РасшифровкаПлатежа.Заказ = СтрокаЗаявки.ЗаказКлиента;
//			Если НЕ ЗначениеЗаполнено(РасшифровкаПлатежа.Заказ) И ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
//				РасшифровкаПлатежа.Заказ = ДокОбъект.Ссылка;
//			КонецЕсли;
//		КонецЕсли;
//		РасшифровкаПлатежа.Сумма = ДокОбъект.СуммаДокумента;
//		РасшифровкаПлатежа.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
//		РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
//		
//		//ВидыЗапасов, наверное, сами заполняются
//		//ДокументРеализации
//		//СпособОпределенияСебестоимости
//		//Количество = 1
//		//КоличествоПоРНПТ = 0
//		//СуммаСНДС = 1525
//		//СтавкаНДС = БезНДС
//		//СуммаНДС = 0
//		//<ВидЗапасовОтгрузки
//		//<ДокументРеализации
//		//<ИдентификаторСтроки
//		//АналитикаУчетаНоменклатуры = 35d3e315
//		//Себестоимость = 0
//		//СебестоимостьБезНДС = 0
//		//СебестоимостьРегл = 0
//		//СебестоимостьПР = 0
//		//СебестоимостьВР = 0
//		//СпособОпределенияСебестоимости = ИзДокументаПродажи
//		//АналитикаУчетаНоменклатурыОтгрузки = 35d3e315
//		//КоличествоУпаковок = 1
//		
//		
//		//сообщить("Перед записью: "+ДокОбъект.Дата);
//		ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
//		Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
//			ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
//		КонецЕсли;
//		Попытка
//			ДокОбъект.Записать(РежимЗаписиДок);
//		Исключение
//			ДокОбъект.Записать();
//			ТекстСообщения = "Не удалось провести "+СокрЛП(ДокОбъект)+" "+ОписаниеОшибки();
//			ЗаписьВЛог(ТекстСообщения,5,Истина);
//		КонецПопытки;
//		//сообщить("После записи: "+ДокОбъект);
//		ЗаписьВЛог("Создан "+ДокОбъект.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " клиент «"+СтрокаЗаявки.Контрагент+"»",3);
//		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
//			СтрокаНоменклатуры.ВозвратТоваровОтПокупателя = ДокОбъект.Ссылка;
//		КонецЦикла;
//		//сообщить("Документ: "+ДокОбъект);
//	КонецЦикла;
//КонецПроцедуры//СоздатьВозвратыОтКлиентов

Процедура СоздатьВозвратыПоставщику()
	МассивСтатусов = Новый Массив;
	//наверное, не надо добавлять КодСтатусаОтказ, по отказам ничего не будет создаваться
	СоответствиеСкладаСтатусу = Новый Соответствие;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если СтрокаСтатуса.СоздаватьВозвратПоставщику Тогда
			МассивСтатусов.Добавить(СтрокаСтатуса.КодСтатуса);
			Если ЗначениеЗаполнено(СтрокаСтатуса.СкладПолучатель) Тогда
				СоответствиеСкладаСтатусу.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.СкладПолучатель);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если МассивСтатусов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если УТ111 Тогда
		ИспользоватьСоглашенияСПоставщиками = Ложь;
	Иначе
		ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	КонецЕсли;
	Если УТ111 Тогда
		ИспользоватьДоговорыСПоставщиками = Ложь;
	Иначе
		ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	КонецЕсли;
	Запрос = Новый Запрос;
	//ТекстБезПоступления = "ВЫБРАТЬ ПЕРВЫЕ 1
	//               |	ВозвратТоваровПоставщику.Ссылка КАК Ссылка
	//               |ИЗ
	//               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	//               |ГДЕ
	//               |	ВозвратТоваровПоставщику.ДокументПоступления.ЗаказПоставщику.ДокументОснование = &ЗаказКлиента
	//               |	И ВозвратТоваровПоставщику.Дата >= &Дата
	//               |	И ВозвратТоваровПоставщику.Контрагент = &Контрагент";
	//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//               |	ВозвратТоваровПоставщику.Ссылка КАК Ссылка
	//               |ИЗ
	//               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	//               |ГДЕ
	//               |	ВозвратТоваровПоставщику.ДокументПоступления.ЗаказПоставщику.ДокументОснование = &ЗаказКлиента
	//               |	И ВозвратТоваровПоставщику.Дата >= &Дата
	//               |	И ВозвратТоваровПоставщику.Контрагент = &Контрагент";
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВозвратТоваровПоставщику.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.ОснованиеДата = &ОснованиеДата
				   |	И ВозвратТоваровПоставщику.ОснованиеНомер = &ОснованиеНомер
	               //|	И ВозвратТоваровПоставщику.Дата >= &Дата
	               |	И ВозвратТоваровПоставщику.Контрагент = &Контрагент";
	Если НЕ УТ114 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриобретениеТоваровУслуг", "ПоступлениеТоваровУслуг");
	КонецЕсли;
	СтруктураПоискаЗаявки = Новый Структура("НомерЗаявки");
	МассивПоставщиков = Новый Массив;
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл	
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли; 
		СтруктураПоискаЗаявки.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		СтрокиЗаявки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
		Если СтрокиЗаявки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокиНоменклатуры = Новый Массив;//сюда отбираем позиции, по которым отказ, чтобы другие не вернуть
		Для Каждого СтрокаНоменклатуры Из СтрокиЗаявки Цикл
			//Если МассивСтатусов.Найти(СтрокаНоменклатуры.КодСтатуса) <> Неопределено И ЗначениеЗаполнено(СтрокаНоменклатуры.ПоступлениеТоваровУслуг) Тогда //чтобы и статус был, и документ реализации тоже
			Если МассивСтатусов.Найти(СтрокаНоменклатуры.КодСтатуса) <> Неопределено Тогда //поступление могли сделать по другому
				СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
				Если МассивПоставщиков.Найти(СтрокаНоменклатуры.Поставщик) = Неопределено Тогда
					МассивПоставщиков.Добавить(СтрокаНоменклатуры.Поставщик);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СтрокиНоменклатуры.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		//ДокументПоступления = СтрокиНоменклатуры[0].ПоступлениеТоваровУслуг;
		
		Для Каждого ПоставщикИзМассива Из МассивПоставщиков Цикл
			Запрос.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
			//Запрос.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки);
			Запрос.УстановитьПараметр("ОснованиеДата", НачалоДня(СтрокаЗаявки.ДатаЗаявки));
			Запрос.УстановитьПараметр("ОснованиеНомер", Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"));
			Запрос.УстановитьПараметр("Контрагент", ПоставщикИзМассива);
			Запрос.УстановитьПараметр("ПустойНомер", "");
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Иначе
				ДокОбъект = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
			КонецЕсли;
			Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено И НЕ УТКазахстан Тогда
				ДокОбъект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
			КонецЕсли;
			ДокОбъект.Товары.Очистить();//или сравнивать, надо записывать или нет
			НС = 0;
			ДокументПоступления = Неопределено;
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				Если СтрокаНоменклатуры.Поставщик <> ПоставщикИзМассива Тогда
					Продолжить;
				КонецЕсли;
				Если МассивВыгружаемыхСкладов.Найти(СтрокаНоменклатуры.distributorId)<>Неопределено Тогда//если продавали с наличия, возврата поставщику не может быть
					Продолжить;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаНоменклатуры.ПоступлениеТоваровУслуг) Тогда
					//Продолжить;//могли по другому создать
				КонецЕсли;
				Если ДокументПоступления = Неопределено Тогда
					ДокументПоступления = СтрокаНоменклатуры.ПоступлениеТоваровУслуг;
					//ДокОбъект.Дата = ДокументПоступления.Дата+1;//ТекущаяДата();
					ДокОбъект.Дата = СтрокаЗаявки.dateUpdated+3;//а то возврат поставщику раньше возврата покупателя
					ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
					ДокОбъект.Партнер = ПоставщикИзМассива.Партнер;
					ДокОбъект.Контрагент = ПоставщикИзМассива;
					Если ИспользоватьДоговорыСПоставщиками Тогда
						Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
						Если НЕ ЗначениеЗаполнено(Договор) Тогда
							Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, , ДокОбъект.Контрагент);
						КонецЕсли;
						ДокОбъект.Договор = Договор;
					КонецЕсли;
					ДокОбъект.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ОставитьВКачествеАванса;
					ДокОбъект.Подразделение = ДокументПоступления.Подразделение;
					Если ИспользоватьСоглашенияСПоставщиками Тогда
						ПолучитьУсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(ДокОбъект.Партнер);
						Если ЗначениеЗаполнено(ПолучитьУсловияЗакупокПоУмолчанию) Тогда
							ДокОбъект.Соглашение = ПолучитьУсловияЗакупокПоУмолчанию.Соглашение;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
							Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
								ДокОбъект.Соглашение = СоглашениеРозница;
							Иначе
								ДокОбъект.Соглашение = СоглашениеОпт;
							КонецЕсли;
						КонецЕсли;
						Если ЗаполнятьОрганизациюПоСоглашению И ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
							Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Организация) Тогда
								ДокОбъект.Организация = ДокОбъект.Соглашение.Организация;
							КонецЕсли;
							ДокОбъект.ЦенаВключаетНДС = ДокОбъект.Соглашение.ЦенаВключаетНДС;
						КонецЕсли;
						ЗаполнитьПоСоглашениюСПоставщиком(ДокОбъект,,Истина);//возврат поставщику
					КонецЕсли;
					
					ДокОбъект.ОснованиеДата = СтрокаЗаявки.ДатаЗаявки;
					ДокОбъект.ОснованиеНомер = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
					ДокОбъект.ДокументПоступления = ДокументПоступления;
					ДокОбъект.Склад = ДокументПоступления.Склад;
					ДокОбъект.Организация = ДокументПоступления.Организация;
					Если Не ЗначениеЗаполнено(ДокОбъект.Организация) Тогда
						ДокОбъект.Организация = СтрокаЗаявки.Организация;
					КонецЕсли;
					ДокОбъект.Валюта = Валюта;
					Если ЦеныЗакупкиВРублях Тогда//возврат поставщику
						ДокОбъект.Валюта = Рубли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаЗакупки) Тогда
						ДокОбъект.Валюта = СтрокаЗаявки.ВалютаЗакупки;
					КонецЕсли;
					Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
						ДокОбъект.Валюта = Валюта;
					КонецЕсли;
					Если УТ113 Или УТ114 Тогда
						ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
					КонецЕсли;
					////ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
					ДокОбъект.НалогообложениеНДС = НалогообложениеНДСПоступление;
					ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПокупке;//возврат поставщику
					ДокОбъект.ОснованиеНомер = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
					ДокОбъект.ОснованиеДата = СтрокаЗаявки.ДатаЗаявки;
					ДокОбъект.Комментарий = ""+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" от "+СтрокаЗаявки.ДатаЗаявки;
				КонецЕсли;
				
				СтрокаДокумента = ДокОбъект.Товары.Добавить();
				//ДокОбъект.ПричинаВозврата = СтрокаНоменклатуры.СтатусСайт;
				СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				СтрокаДокумента.Количество = СтрокаНоменклатуры.Количество;
				СтрокаДокумента.КоличествоУпаковок = СтрокаНоменклатуры.Количество;
				СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаЗакупки;
				СтрокаДокумента.Сумма = СтрокаНоменклатуры.ЦенаЗакупки*СтрокаНоменклатуры.Количество;
				СтрокаДокумента.ИдентификаторСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
				Если СтрокаДокумента.Цена = 0 Тогда
					СтрокаДокумента.Цена = 0.01;//иначе возврат не проводится
				КонецЕсли;
				Если СтрокаДокумента.Количество = 0 Тогда
					СтрокаДокумента.Количество = 1;
					СтрокаДокумента.КоличествоУпаковок = 1;
				КонецЕсли;
				СтрокаДокумента.Сумма = СтрокаДокумента.Цена * СтрокаДокумента.Количество;
				СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
				ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСПоступление, СтрокаДокумента);
				СтрокаДокумента.ДокументПоступления = ДокументПоступления;
				Если ИспользоватьСерииНоменклатуры Тогда
					СтрокаДокумента.Серия = НайтиДобавитьСериюНоменклатуры(СтрокаНоменклатуры);
					СтрокаДокумента.СтатусУказанияСерий = 14;//13;
				Иначе//Если КонстантаИспользоватьСерииНоменклатуры Тогда
					СтрокаДокумента.СтатусУказанияСерий = 0;
					СтрокаДокумента.Серия = "";
				КонецЕсли;
				ДокОбъект.Дата = Макс(ДокОбъект.Дата,СтрокаНоменклатуры.dateUpdated+3);
				Если Не ЗначениеЗаполнено(ДокОбъект.Склад) Тогда
					ДокОбъект.Склад = СтрокаНоменклатуры.Склад; 
				КонецЕсли;
				СкладПоСтатусу = СоответствиеСкладаСтатусу.Получить(СтрокаНоменклатуры.КодСтатуса);
				Если ЗначениеЗаполнено(СкладПоСтатусу) Тогда
					ДокОбъект.Склад = СкладПоСтатусу;
				КонецЕсли;
			КонецЦикла;
			Если ДокОбъект.Товары.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
			
			ДокОбъект.РасшифровкаПлатежа.Очистить();
			РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
			Если УТ115 Тогда
				РасшифровкаПлатежа.УдалитьЗаказ = СтрокаЗаявки.ЗаказКлиента;
				Если НЕ ЗначениеЗаполнено(РасшифровкаПлатежа.УдалитьЗаказ) И ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
					РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Ссылка;
				КонецЕсли;
			Иначе
				РасшифровкаПлатежа.Заказ = СтрокаЗаявки.ЗаказКлиента;
				Если НЕ ЗначениеЗаполнено(РасшифровкаПлатежа.Заказ) Тогда
					РасшифровкаПлатежа.Заказ = ДокОбъект.Ссылка;
				КонецЕсли;
			КонецЕсли;
			РасшифровкаПлатежа.Сумма = ДокОбъект.СуммаДокумента;
			РасшифровкаПлатежа.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
			РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
			
			ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
				ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
			Попытка
				ДокОбъект.Записать(РежимЗаписиДок);
			Исключение
				ДокОбъект.Записать();
				ТекстСообщения = "Не удалось провести "+СокрЛП(ДокОбъект)+" "+ОписаниеОшибки();
				ЗаписьВЛог(ТекстСообщения,5,Истина);
			КонецПопытки;
			ЗаписьВЛог("Создан "+ДокОбъект.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " клиент «"+СтрокаЗаявки.Контрагент+"»",3);
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				Если СтрокаНоменклатуры.Поставщик = ПоставщикИзМассива Тогда
					СтрокаНоменклатуры.ВозвратТоваровПоставщику = ДокОбъект.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //СоздатьВозвратыПоставщику

Функция ОбъектМодифицирован(Объект, ПроверятьТабличныеЧасти = Истина, ПроверятьСтандартные = Истина) 
    
    Ссылка = Объект.Ссылка;
    Метаданное = Ссылка.Метаданные();
    
    Для каждого Реквизит из Метаданное.Реквизиты Цикл
        Если Объект[Реквизит.Имя] <> Ссылка[Реквизит.Имя] Тогда
            Возврат Истина;
        КонецЕсли;
    КонецЦикла;
    
    Если ПроверятьСтандартные Тогда
    Для каждого Реквизит из Метаданное.СтандартныеРеквизиты Цикл
        Если Объект[Реквизит.Имя] <> Ссылка[Реквизит.Имя] Тогда
            Возврат Истина;
        КонецЕсли;
    КонецЦикла;
    КонецЕсли;
    
    
    Если ПроверятьТабличныеЧасти Тогда
        Для каждого ТЧ из Метаданное.ТабличныеЧасти Цикл
            
            Если Объект[ТЧ.Имя].Количество() <> Ссылка[ТЧ.Имя].Количество() Тогда
                Возврат Истина;
            КонецЕсли;
                        
            Для Индекс = 0 по Объект[ТЧ.Имя].Количество()-1 Цикл
                ОбъектСтрокаТЧ = Объект[ТЧ.Имя][Индекс];
                СсылкаСтрокаТЧ = Ссылка[ТЧ.Имя][Индекс];
                Для каждого РеквизитТЧ из ТЧ.Реквизиты Цикл
                    Если ОбъектСтрокаТЧ[РеквизитТЧ.Имя] <> СсылкаСтрокаТЧ[РеквизитТЧ.Имя] Тогда
                        Возврат Истина;
                    КонецЕсли;
                КонецЦикла;
            КонецЦикла;
            
        КонецЦикла;        
    КонецЕсли;
    
    Возврат Ложь;
    
КонецФункции

Функция СоздатьРасходныйОрдерНаТовары(ДокументРеализации, Приоритет = Неопределено) Экспорт
	//Реализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		ЗаписьВЛог("Расходный ордер на товары можно создать только после создания реализации",1,Ложь);
		Возврат Неопределено;
	КонецЕсли;
	ДокОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.ДатаОтгрузки = ДокОбъект.Дата;
	ДокОбъект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.НайтиПоКоду("Отгрузка");
	ДокОбъект.Комментарий = "Создан автоматически "+ДокОбъект.Дата;
	ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.ОтгружаемыеТовары.Очистить();
	ДокОбъект.Получатель = ДокументРеализации.Контрагент.Партнер;
	ДокОбъект.Склад = ДокументРеализации.Склад;
	ДокОбъект.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
	ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;
	Если ЗначениеЗаполнено(Приоритет) Тогда
		ДокОбъект.Приоритет = Приоритет;
	Иначе
		ДокОбъект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	КонецЕсли;

	ДокОбъект.ТоварыПоРаспоряжениям.Очистить();
	Для Каждого СтрокаНоменклатуры Из ДокументРеализации.Товары Цикл
		СтрокаОтгружаемыеТовары = ДокОбъект.ОтгружаемыеТовары.Добавить();
		СтрокаОтгружаемыеТовары.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		СтрокаОтгружаемыеТовары.Количество = СтрокаНоменклатуры.Количество;
		СтрокаОтгружаемыеТовары.КоличествоУпаковок = СтрокаНоменклатуры.Количество;
		СтрокаОтгружаемыеТовары.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		
		СтрокаТоварыПоРаспоряжениям = ДокОбъект.ТоварыПоРаспоряжениям.Добавить();
		СтрокаТоварыПоРаспоряжениям.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		СтрокаТоварыПоРаспоряжениям.Количество = СтрокаНоменклатуры.Количество;
		СтрокаТоварыПоРаспоряжениям.Распоряжение = СтрокаНоменклатуры.ЗаказКлиента;
		СтрокаТоварыПоРаспоряжениям.Распоряжение = ДокументРеализации;
	КонецЦикла;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗаписьВЛог("Статус "+ДокОбъект.Статус+", проведен документ: "+ДокОбъект,5,Истина);
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Статус "+ДокОбъект.Статус+", не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),5,Истина);
	КонецПопытки;
	ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗаписьВЛог("Статус "+ДокОбъект.Статус+", проведен документ: "+ДокОбъект,5,Истина);
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Статус "+ДокОбъект.Статус+", не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),5,Истина);
	КонецПопытки;
	Возврат ДокОбъект.Ссылка;
КонецФункции

Процедура СоздатьОтборИзЯчеек(РасходныйОрдерНаТовары, СтатусОтбора = Неопределено)
	Если НЕ ЗначениеЗаполнено(РасходныйОрдерНаТовары) Тогда
		ЗаписьВЛог("Документ отбора можно создать только после расходного одера на товары",5,Ложь);
		Возврат;
	КонецЕсли;
	ДокОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.ДатаНачалаВыполнения = ДокОбъект.Дата;
	ДокОбъект.ДатаОкончанияВыполнения = ДокОбъект.Дата;
	ДокОбъект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.НайтиПоКоду("Отгрузка");
	ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
	ДокОбъект.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.Распоряжение = РасходныйОрдерНаТовары;
	ДокОбъект.Склад = РасходныйОрдерНаТовары.Склад;
	Если ЗначениеЗаполнено(СтатусОтбора) Тогда
		ДокОбъект.Статус = СтатусОтбора;
		ДокОбъект.Комментарий = СокрЛП(СтатусОтбора)+", создан автоматически "+ДокОбъект.Дата;;
	Иначе
		ДокОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
		ДокОбъект.Комментарий = "Создан автоматически "+ДокОбъект.Дата;;
	КонецЕсли;
	ДокОбъект.ТоварыОтбор.Очистить();
	
	Помещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
	Распоряжение = РасходныйОрдерНаТовары;
	Склад = РасходныйОрдерНаТовары.Склад;
	Менеджер = Новый МенеджерВременныхТаблиц;	
	СкладыСервер.ОстаткиТоваровКОтбору(Менеджер, Распоряжение, Склад, Помещение);	
	СтруктураВозврата = СкладыСервер.ОтобратьТоварИзЯчеек(Менеджер,Склад,Помещение);	
	Менеджер.Закрыть();	
	ДокОбъект.ТоварыОтбор.Очистить();
	Для Каждого СтрокаТаблицыОшибок Из СтруктураВозврата.ТаблицаОшибок Цикл
		Если СтрокаТаблицыОшибок.Количество > 0 Тогда	
			НоваяСтрока = ДокОбъект.ТоварыОтбор.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыОшибок);		
			Если НоваяСтрока.КоличествоУпаковок = 0 Тогда
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			КонецЕсли;		
		КонецЕсли;	
	КонецЦикла;
	Для Каждого СтрокаТаблицыРезультатов из СтруктураВозврата.ТаблицаРезультатов Цикл	
		Если СтрокаТаблицыРезультатов.Количество > 0 Тогда		
			НоваяСтрока = ДокОбъект.ТоварыОтбор.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРезультатов);		
		КонецЕсли;	
	КонецЦикла;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
	КонецПопытки;
	ОтборРазмещениеТоваров = ДокОбъект.Ссылка;	
КонецПроцедуры

Процедура СоздатьПеремещенияТоваров()
	МассивСтатусов = Новый Массив;
	//наверное, не надо добавлять КодСтатусаОтказ, по отказам ничего не будет создаваться
	СкладОтправитель = Неопределено;
	СкладПолучатель = Неопределено;
	СкладОтправительПоСтатусу = Новый Соответствие;
	СкладПолучательПоСтатусу = Новый Соответствие;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если НеЗагружатьОтказы и СтрокаСтатуса.КодСтатуса = КодСтатусаОтказ Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаСтатуса.СоздаватьПеремещение Тогда
			МассивСтатусов.Добавить(СтрокаСтатуса.КодСтатуса);
			Если ЗначениеЗаполнено(СтрокаСтатуса.СкладОтправитель) Тогда
				СкладОтправительПоСтатусу.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.СкладОтправитель);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСтатуса.СкладПолучатель) Тогда
				СкладПолучательПоСтатусу.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.СкладПолучатель);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если МассивСтатусов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если МассивСтатусов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//ДокументОснование - это приобретение, на основании него делаем, а лучше в комментарии номер заказа пишем
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПеремещениеТоваров.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	ПеремещениеТоваров.ДатаРаспоряжения >= &Дата И ПеремещениеТоваров.Комментарий Подобно &НомерЗаявки";
	               //|	И ПеремещениеТоваров.ДокументОснование = &ДокументОснование";
	//НомерЗаказа
	СтруктураПоискаЗаявки = Новый Структура("НомерЗаявки");
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл	
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли; 
		СтруктураПоискаЗаявки.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		СтрокиЗаявки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
		Если СтрокиЗаявки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СкладПоступления = Неопределено;
		СтрокиНоменклатуры = Новый Массив;//сюда отбираем позиции, по которым отказ, чтобы другие не вернуть
		//ДокументРеализации = Неопределено;
		Для Каждого СтрокаНоменклатуры Из СтрокиЗаявки Цикл
			Если МассивСтатусов.Найти(СтрокаНоменклатуры.КодСтатуса) <> Неопределено Тогда
				//Если ЗначениеЗаполнено(СтрокаНоменклатуры.ПоступлениеТоваровУслуг) Тогда //чтобы и статус был, и документ поступления тоже
					СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
				//Иначе //могли сделать поступление из 1С, поэтому её надо найти
				//	СтрокаНоменклатуры.ПоступлениеТоваровУслуг = ПолучитьРеализациюДляВозврата(СтрокаЗаявки, СтрокаНоменклатуры);
				//	Если ЗначениеЗаполнено(СтрокаНоменклатуры.ПоступлениеТоваровУслуг) Тогда //чтобы и статус был, и документ поступления тоже
				//		СтрокиНоменклатуры.Добавить(СтрокаНоменклатуры);
				//	КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.ПоступлениеТоваровУслуг) Тогда
				ДокументПоступления = СтрокаНоменклатуры.ПоступлениеТоваровУслуг;
				СкладПоступления = ДокументПоступления.Склад;
			КонецЕсли;
		КонецЦикла;
		Если СтрокиНоменклатуры.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		//пока закомментируем, логику отлаживать будем
		//Если ДокументПоступления = Неопределено Тогда
		//	//если нет поступления, то нельзя сделать перемещение
		//	Продолжить;
		//КонецЕсли;
		//Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступления);
		Запрос.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки);
		Запрос.УстановитьПараметр("НомерЗаявки", Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+"%");
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Если СтрокаЗаявки.Изменена = Ложь Тогда
				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
					СтрокаНоменклатуры.ПеремещениеТоваров = Выборка.Ссылка;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъект.Товары.Очистить();
		Иначе
			ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
			ДокОбъект.Заполнить(Неопределено);
			//ДокОбъект.Дата = СтрокаЗаявки.dateUpdated+1;//+СмещениеЧасовогоПояса*3600;
			//ДокОбъект.Дата = СтрокаЗаявки.dateUpdated+5;//+СмещениеЧасовогоПояса*3600;
			ДокОбъект.Дата = СтрокаЗаявки.dateUpdated;//+СмещениеЧасовогоПояса*3600;
			//здесь одни и те же даты
			//Для Каждого СтрокаТовара Из СтрокиНоменклатуры Цикл
			//	Если ЗначениеЗаполнено(СтрокаТовара.dateUpdated) Тогда
			//		ДокОбъект.Дата = СтрокаТовара.dateUpdated;
			//		//ДокОбъект.Дата = Макс(ДокОбъект.Дата, СтрокаТовара.dateUpdated+5);
			//		Прервать;
			//	КонецЕсли; 
			//КонецЦикла;
			//ДокОбъект.Дата = ДокументРеализации.Дата+1;//ТекущаяДата();
			ДокОбъект.ДатаРаспоряжения = ДокОбъект.Дата;
		КонецЕсли;
		ДокОбъект.ДокументОснование = ДокументПоступления;
		ДокОбъект.Организация = Организация;
		ДокОбъект.ОрганизацияПолучатель = Организация;
		ДокОбъект.Комментарий = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
		ДокОбъект.ВидЦены = ВидЦены;
		
		Для Каждого СтрокаТовара Из СтрокиНоменклатуры Цикл
			НовСтрока = ДокОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовара, "Номенклатура, Количество");
			НовСтрока.КоличествоУпаковок = НовСтрока.Количество;
			Если ЗначениеЗаполнено(СкладПоступления) Тогда
				ДокОбъект.СкладОтправитель = СкладПоступления;
			Иначе
				СкладОтправитель = СкладОтправительПоСтатусу.Получить(СтрокаТовара.КодСтатуса);
				Если ЗначениеЗаполнено(СкладОтправитель) Тогда
					ДокОбъект.СкладОтправитель = СкладОтправитель;
				КонецЕсли;
			КонецЕсли; 
			СкладПолучатель = СкладПолучательПоСтатусу.Получить(СтрокаТовара.КодСтатуса);
			Если ЗначениеЗаполнено(СкладПолучатель) Тогда
				ДокОбъект.СкладПолучатель = СкладПолучатель;
			КонецЕсли;
		КонецЦикла;
		Если СкладОтправитель = Неопределено Или СкладПолучатель = Неопределено Тогда
			сообщить("Заполните в статусах перемещения товаров склад отправитель и склад-получатель");
		КонецЕсли;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДок);
		Исключение
			ДокОбъект.Записать();
			ТекстСообщения = "Не удалось провести "+СокрЛП(ДокОбъект)+" "+ОписаниеОшибки();
			ЗаписьВЛог(ТекстСообщения,5,Истина);
		КонецПопытки;
		//сообщить("После записи: "+ДокОбъект);
		ЗаписьВЛог("Создан "+ДокОбъект.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " клиент «"+СтрокаЗаявки.Контрагент+"»",3);
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			СтрокаНоменклатуры.ПеремещениеТоваров = ДокОбъект.Ссылка;
		КонецЦикла;
		//сообщить("Документ: "+ДокОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВозвратОтПокупателя(СтрокаЗаявки, СтрокаТовара)
	//при автоматической загрузке не используется
	Если Не ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда //заказа не было, значит и всей цепочки не было
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	ЕстьЦены = Ложь;
	//ищем реализацию по этой заявке и по этой позиции, а потом возврат
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РеализацияТоваровУслугТовары.Ссылка,
	               |	РеализацияТоваровУслугТовары.Количество,
	               |	РеализацияТоваровУслугТовары.Цена,
	               |	РеализацияТоваровУслугТовары.Сумма
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура
	               |	И РеализацияТоваровУслугТовары.ЗаказКлиента = &ЗаказКлиента
	               |	И РеализацияТоваровУслугТовары.Ссылка.Дата >= &Дата";
				   //|	И РеализацияТоваровУслугТовары.ЗаказКлиента.НомерПоДаннымКлиента = &НомерПоДаннымКлиента
				   //|	И РеализацияТоваровУслугТовары.ЗаказКлиента.ДатаПоДаннымКлиента = &ДатаПоДаннымКлиента";
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТовара.Номенклатура);
	Запрос.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
	Запрос.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки);
	Запрос.УстановитьПараметр("ПустойНомер", "");
	//Запрос.УстановитьПараметр("НомерПоДаннымКлиента", Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"));
	//Запрос.УстановитьПараметр("ДатаПоДаннымКлиента", НачалоДня(СтрокаЗаявки.ДатаЗаявки));
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВыборкаРеализация = Результат.Выбрать();
		ВыборкаРеализация.Следующий();
		ДокументРеализации = ВыборкаРеализация.Ссылка;
		СтрокаТовара.РеализацияТоваровУслуг = ВыборкаРеализация.Ссылка;
		ЕстьЦены = Истина;
	Иначе
		ДокументРеализации = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		Возврат;//если не было документа реализации, тогда и возвращать нечего
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументРеализации) Тогда
		ЗаписьВЛог("Возврат от покупателя не создан, не найдена реализация по номенклатуре "+СтрокаТовара.Номенклатура+" и заявке "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" "+СтрокаЗаявки.ЗаказКлиента,1); 
		Возврат;//если продажи не было, то нельзя вернуть товар от покупателя
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВозвратТоваровОтКлиентаТовары.Ссылка,
	               |	ВозвратТоваровОтКлиентаТовары.ДокументРеализации,
	               |	ВозвратТоваровОтКлиентаТовары.Количество,
	               |	ВозвратТоваровОтКлиентаТовары.Цена,
	               |	ВозвратТоваровОтКлиентаТовары.Сумма
	               |ИЗ
	               |	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	               |ГДЕ
	               |	ВозвратТоваровОтКлиентаТовары.Номенклатура = &Номенклатура
	               |	И ВозвратТоваровОтКлиентаТовары.ДокументРеализации = &ДокументРеализации
	               |	И ВозвратТоваровОтКлиентаТовары.Ссылка.Дата >= &Дата";
	//               |	И ВозвратТоваровОтКлиентаТовары.ДокументРеализации.ЗаказКлиента = &ЗаказКлиента";
	//ДокОбъект.НомерВходящегоДокумента = СтрокаЗаявки.НомерЗаявки;
	//ДокОбъект.ДатаВходящегоДокумента = СтрокаЗаявки.ДатаЗаявки;
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТовара.Номенклатура);
	Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
	Запрос.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки);
	//Запрос.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ДокОбъект = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
		ДокОбъект.Дата = ДокументРеализации.Дата+1;//ТекущаяДата();
	КонецЕсли;
	//ДокОбъект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.НайтиПоНаименованию("Возврат от покупателя");
	//Если Не ЗначениеЗаполнено(ДокОбъект.АналитикаХозяйственнойОперации) Тогда
	//	АХО = Справочники.АналитикаХозяйственныхОпераций.СоздатьЭлемент();
	//	АХО.Наименование = "Возврат от покупателя";
	//	АХО.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя;
	//	АХО.Записать();
	//	ДокОбъект.АналитикаХозяйственнойОперации = АХО.Ссылка;
	//КонецЕсли;
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено И НЕ УТКазахстан Тогда
		ДокОбъект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
	ДокОбъект.Партнер = СтрокаЗаявки.Контрагент.Партнер;
	ДокОбъект.Контрагент = СтрокаЗаявки.Контрагент;
	ДокОбъект.Покупатель = СокрЛП(СтрокаЗаявки.Контрагент);
	ДокОбъект.ДокументРеализации = ДокументРеализации;
	//ДокОбъект.Магазин = Магазин;
	ДокОбъект.Склад = ДокументРеализации.Склад;
	ДокОбъект.Организация = Организация;
	Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ДокОбъект.Организация = ОрганизацияРозница;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗаявки.Организация) Тогда
		ДокОбъект.Организация = СтрокаЗаявки.Организация;
	Конецесли;
	ДокОбъект.Валюта = Валюта;
	Если ЦеныПродажиВРублях Тогда//возврат от покупателя
		ДокОбъект.Валюта = Рубли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаПродажи) Тогда
		ДокОбъект.Валюта = СтрокаЗаявки.ВалютаПродажи;
	КонецЕсли;
	Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
		ДокОбъект.Валюта = Валюта;
	КонецЕсли;
	Если УТ113 Или УТ114 Тогда
		ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;
	//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
	ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
	//Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
	//	ДокОбъект.ЦенаВключаетНДС = Истина;
	//Иначе
	//	ДокОбъект.ЦенаВключаетНДС = Ложь;
	//КонецЕсли;
	ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПродаже;//всегда должно стоять, возврат от клиента
	ДокОбъект.ДокументРеализации = ДокументРеализации;
	ДокОбъект.НомерВходящегоДокумента = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
	ДокОбъект.ДатаВходящегоДокумента = СтрокаЗаявки.ДатаЗаявки;
	ДокОбъект.Товары.Очистить();
	НС = 0;
	//Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
		СтрокаДокумента = ДокОбъект.Товары.Добавить();
		ДокОбъект.ПричинаВозврата = СтрокаТовара.СтатусСайт;
		СтрокаДокумента.Номенклатура = СтрокаТовара.Номенклатура;
		СтрокаДокумента.Количество = СтрокаТовара.Количество;
		СтрокаДокумента.КоличествоУпаковок = СтрокаТовара.Количество;
		СтрокаДокумента.Цена = СтрокаТовара.ЦенаПродажи;
		СтрокаДокумента.Сумма = СтрокаТовара.ЦенаПродажи*СтрокаТовара.Количество;
		СтрокаДокумента.КодСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
		Если СтрокаТовара.ЦенаПродажи = 0 И ЕстьЦены Тогда
			СтрокаДокумента.Цена = ВыборкаРеализация.Цена;
			СтрокаДокумента.Сумма = ВыборкаРеализация.Сумма;
		КонецЕсли;
		Если СтрокаДокумента.Цена = 0 Тогда
			СтрокаДокумента.Цена = 0.01;//иначе возврат не проводится
		КонецЕсли;
		Если СтрокаДокумента.Количество = 0 Тогда
			СтрокаДокумента.Количество = 1;
			СтрокаДокумента.КоличествоУпаковок = 1;
		КонецЕсли;
		Если СтрокаДокумента.Сумма = 0 Тогда
			СтрокаДокумента.Сумма = СтрокаДокумента.Цена * СтрокаДокумента.Количество;
		КонецЕсли;
		СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
		ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, СтрокаДокумента);
		Если НалогообложениеНДСРеализация = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			ДокОбъект.ПокупательНеПлательщикНДС = Ложь;
		Иначе
			ДокОбъект.ПокупательНеПлательщикНДС = Истина;
		КонецЕсли;
		СтрокаДокумента.ДокументРеализации = ДокументРеализации;
		Если ИспользоватьСерииНоменклатуры Тогда
			СтрокаДокумента.Серия = НайтиДобавитьСериюНоменклатуры(СтрокаДокумента);
			СтрокаДокумента.СтатусУказанияСерий = 14;//13;
		Иначе//Если КонстантаИспользоватьСерииНоменклатуры Тогда
		//Если КонстантаИспользоватьСерииНоменклатуры Тогда
			СтрокаДокумента.СтатусУказанияСерий = 0;
			СтрокаДокумента.Серия = "";
		КонецЕсли;
	//КонецЦикла;
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
		ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДок);
	Исключение
		ДокОбъект.Записать();
		сообщить("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки());
	КонецПопытки;
	ЗаписьВЛог("Создан возврат "+ДокОбъект.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " клиент «"+СтрокаЗаявки.Контрагент+"», номенклатура "+СтрокаТовара.Номенклатура,3);
	//Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
		СтрокаТовара.ВозвратТоваровОтПокупателя = ДокОбъект.Ссылка;
	//КонецЦикла;
	
	//и сразу делаем возврат поставщику на основании поступления
	
КонецПроцедуры //СоздатьВозвратОтПокупателя

Процедура СоздатьВозвратПоставщику(СтрокаЗаявки, СтрокаТовара)
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(СтрокаТовара.ПоступлениеТоваровУслуг) Тогда
		ДокументОснование = СтрокаТовара.ПоступлениеТоваровУслуг;
	КонецЕсли;
	ЕстьЦены = Ложь;
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПоступлениеТоваровУслугТовары.Ссылка,
		               |	ПоступлениеТоваровУслугТовары.Ссылка.ЗаказПоставщику КАК ЗаказПоставщику,
		               |	ПоступлениеТоваровУслугТовары.Количество,
		               |	ПоступлениеТоваровУслугТовары.Цена,
		               |	ПоступлениеТоваровУслугТовары.Сумма
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		               |ГДЕ
		               |	ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура
		               |	И ПоступлениеТоваровУслугТовары.Ссылка.ЗаказПоставщику.ДокументОснование = &ЗаказКлиента
		               |	И ПоступлениеТоваровУслугТовары.Ссылка.Дата >= &Дата
		               |	И ПоступлениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента <> &ПустойНомер";
		Если УТ114 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровУслуг", "ПриобретениеТоваровУслуг");
		КонецЕсли;
		Запрос.УстановитьПараметр("Номенклатура", СтрокаТовара.Номенклатура);
		Запрос.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
		Запрос.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки);
		Запрос.УстановитьПараметр("ПустойНомер", "");
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ВыборкаПоступление = Результат.Выбрать();
			ВыборкаПоступление.Следующий();
			ЕстьЦены = Истина;
			ДокументОснование = ВыборкаПоступление.Ссылка;
			СтрокаТовара.ПоступлениеТоваровУслуг = ДокументОснование;
		Иначе
			Если УТ114 Тогда
				ДокументОснование = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка();
			Иначе
				ДокументОснование = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		ЗаписьВЛог("Возврат поставщику не создан, не найдено поступление по номенклатуре "+СтрокаТовара.Номенклатура+" и заявке "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" "+СтрокаЗаявки.ЗаказКлиента,1); 
		Возврат;//поступления не было, значит и возвращать нечего
	КонецЕсли;
	//ищем реализацию по этой заявке и по этой позиции, а потом возврат
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВозвратТоваровПоставщикуТовары.Ссылка,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументПоступления КАК ДокументПоступления
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	               |ГДЕ
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура = &Номенклатура
	               |	И ВозвратТоваровПоставщикуТовары.Ссылка.ДокументПоступления = &ДокументПоступления";
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТовара.Номенклатура);
	Запрос.УстановитьПараметр("ДокументПоступления", СтрокаТовара.ПоступлениеТоваровУслуг);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументПоступления = Выборка.ДокументПоступления;
	Иначе
		ДокОбъект = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
		ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновления+3;//ТекущаяДата();
		ДокументПоступления = СтрокаТовара.ПоступлениеТоваровУслуг;
	КонецЕсли;
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") = Неопределено И НЕ УТКазахстан Тогда
		ДокОбъект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
	//ДокОбъект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.НайтиПоНаименованию("Возврат поставщику");
	//Если Не ЗначениеЗаполнено(ДокОбъект.АналитикаХозяйственнойОперации) Тогда
	//	АХО = Справочники.АналитикаХозяйственныхОпераций.СоздатьЭлемент();
	//	АХО.Наименование = "Возврат поставщику";
	//	АХО.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоставщику;
	//	АХО.Записать();
	//	ДокОбъект.АналитикаХозяйственнойОперации = АХО.Ссылка;
	//КонецЕсли;
	ДокОбъект.Валюта = Валюта;
	Если ЦеныЗакупкиВРублях Тогда//возврат поставщику
		ДокОбъект.Валюта = Рубли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаЗакупки) Тогда
		ДокОбъект.Валюта = СтрокаЗаявки.ВалютаЗакупки;
	КонецЕсли;
	Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
		ДокОбъект.Валюта = Валюта;
	КонецЕсли;
	//ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
	Если УТ113 Или УТ114 Тогда
		ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;
	//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
	ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
	//Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
	//	ДокОбъект.ЦенаВключаетНДС = Истина;
	//Иначе
	//	ДокОбъект.ЦенаВключаетНДС = Ложь;
	//КонецЕсли;
	ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПокупке;//всегда должно стоять, возврат поставщику
	ДокОбъект.ОснованиеДата = СтрокаЗаявки.ДатаЗаявки;
	ДокОбъект.ОснованиеНомер = СтрокаЗаявки.НомерЗаявки;
	ДокОбъект.Партнер = СтрокаЗаявки.Контрагент.Партнер;
	ДокОбъект.Контрагент = СтрокаЗаявки.Контрагент;
	ДокОбъект.БанковскийСчетОрганизации = БанковскийСчет;
	//ДокОбъект.Магазин = Магазин;
	ДокОбъект.Склад = ДокументПоступления.Склад;
	ДокОбъект.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ОставитьВКачествеАванса;
	ДокОбъект.АдресДоставки = СтрокаЗаявки.АдресДоставки;
	//возврат поставщику
	Если НЕ УТ111 Тогда
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		Если ЗначениеЗаполнено(СпособДоставки) И СтрокаЗаявки.АдресДоставки<>"Самовывоз" Тогда
			ДокОбъект.СпособДоставки = СпособДоставки;
		КонецЕсли;
	КонецЕсли;
	//НовЗаявка.methodCost
	ДопДоставка = СокрЛП(СтрокаЗаявки.methodName+" "+СтрокаЗаявки.methodType);
	Если ДопДоставка = "" Тогда
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = СтрокаЗаявки.АдресДоставки;
	Иначе
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = ДопДоставка+Символы.ПС+СтрокаЗаявки.АдресДоставки;
	КонецЕсли;
	ДокОбъект.Организация = Организация;
	Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ДокОбъект.Организация = ОрганизацияРозница;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗаявки.Организация) Тогда
		ДокОбъект.Организация = СтрокаЗаявки.Организация;
	Конецесли;
	ДокОбъект.ДокументПоступления = ДокументПоступления;
	ДокОбъект.Товары.Очистить();
	НС = 0;
	ТаблицаТоваровДокумента = СтрокаЗаявки.ЗаказКлиента.Товары.Выгрузить();//чтобы, даже если есть отказ - оставлять цену и количество, чтобы документ перепроводился
	//Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
		СтрокаДокумента = ДокОбъект.Товары.Добавить();
		СтрокаДокумента.Номенклатура = СтрокаТовара.Номенклатура;
		СтрокаДокумента.Количество = СтрокаТовара.Количество;
		СтрокаДокумента.КоличествоУпаковок = СтрокаТовара.Количество;
		СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		СтрокаДокумента.Цена = СтрокаТовара.ЦенаПродажи;
		СтрокаДокумента.Сумма = СтрокаТовара.ЦенаПродажи*СтрокаТовара.Количество;
		СтрокаДокумента.ДокументПоступления = ДокументПоступления;
		СтрокаДокумента.ИдентификаторСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
		Если СтрокаДокумента.Цена = 0 Тогда
			ЗаписьВЛог(""+ДокументПоступления+"	"+СтрокаТовара.Номенклатура+" нулевая цена !!!");
			СтрокаДокумента.Цена = СтрокаТовара.ЦенаЗакупки;
		КонецЕсли;
		Если СтрокаДокумента.Цена = 0 Тогда
			Если ЕстьЦены Тогда
				СтрокаДокумента.Цена = ВыборкаПоступление.Цена;
				СтрокаДокумента.Сумма = ВыборкаПоступление.Сумма;
			КонецЕсли;
			Если СтрокаДокумента.Цена = 0 Тогда
				НайденнаяСтрока = ТаблицаТоваровДокумента.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					СтрокаДокумента.Цена = НайденнаяСтрока.Цена;
					СтрокаДокумента.Сумма = НайденнаяСтрока.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаДокумента.Цена = 0 Тогда
			СтрокаДокумента.Цена = 0.01;//иначе возврат не проводится
		КонецЕсли;
		Если СтрокаДокумента.Количество = 0 Тогда
			СтрокаДокумента.Количество = 1;
			СтрокаДокумента.КоличествоУпаковок = 1;
		КонецЕсли;
		Если ИспользоватьСерииНоменклатуры Тогда
			СтрокаДокумента.СтатусУказанияСерий = 14;
			СтрокаДокумента.Серия = "";
		Иначе//Если КонстантаИспользоватьСерииНоменклатуры Тогда
			СтрокаДокумента.СтатусУказанияСерий = 0;
			СтрокаДокумента.Серия = "";
		КонецЕсли;
		СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
		ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСПоступление, СтрокаДокумента);
	//КонецЦикла;
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
		ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДок);
	Исключение
		ДокОбъект.Записать();
		сообщить("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки());
	КонецПопытки;
	ЗаписьВЛог("Создан возврат "+ДокОбъект.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " клиент «"+СтрокаЗаявки.Контрагент+"», номенклатура "+СтрокаТовара.Номенклатура,3);
	//Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
		СтрокаТовара.ВозвратТоваровПоставщику = ДокОбъект.Ссылка;
	//КонецЦикла;
	
	//и сразу делаем возврат поставщику на основании поступления
	
КонецПроцедуры //СоздатьВозвратПоставщику

Функция ПреобразоватьИзСтрокиВДату(ДС, НеУчитыватьСмещение = Ложь)
	Если ДС = "0000-00-00 00:00:00" Или ДС = Неопределено Тогда
		Возврат Дата(0001,01,01,0,0,0);
	КонецЕсли;
	Если СмещениеЧасовогоПояса = 0 Или НеУчитыватьСмещение = Истина Тогда
		Возврат Дата(Лев(ДС,4), Сред(ДС,6,2), Сред(ДС,9,2), Сред(ДС,12,2), Сред(ДС,15,2), Сред(ДС,18,2));
	Иначе
		Возврат Дата(Лев(ДС,4), Число(Сред(ДС,6,2)), Сред(ДС,9,2), Сред(ДС,12,2), Сред(ДС,15,2), Сред(ДС,18,2))+СмещениеЧасовогоПояса*3600;
	КонецЕсли;
КонецФункции

Функция НайтиДобавитьПроизводитель(НаименованиеПроизводителя, Создавать = Истина, СообщатьОСоздании=Ложь) Экспорт
	Если СокрЛП(НаименованиеПроизводителя) = "" Тогда
		Возврат Справочники.Производители.ПустаяСсылка();
	КонецЕсли;
	Если СоответствиеПроизводителей = Неопределено Тогда
		СоответствиеПроизводителей = Новый Соответствие;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Производители.Ссылка КАК Ссылка,
		               |	Производители.Наименование КАК Наименование
		               |ИЗ
		               |	Справочник.Производители КАК Производители
		               |ГДЕ
		               |	Производители.ПометкаУдаления = ЛОЖЬ
		               |	И Производители.Наименование <> """"";
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СоответствиеПроизводителей.Вставить(Выборка.Наименование, Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ПроизводительПоСоответствию = СоответствиеПроизводителей.Получить(НаименованиеПроизводителя);
	Если ЗначениеЗаполнено(ПроизводительПоСоответствию) Тогда
		Возврат ПроизводительПоСоответствию;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Производители.Ссылка КАК Ссылка,
		           |	Производители.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Производители КАК Производители
	               |ГДЕ
	               |	Производители.Наименование = &Наименование
	               |	И Производители.ПометкаУдаления = Ложь";
	Запрос.УстановитьПараметр("Наименование", НаименованиеПроизводителя);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СоответствиеПроизводителей.Вставить(Выборка.Наименование, Выборка.Ссылка);
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Если НЕ Создавать Тогда
		Возврат Справочники.Производители.ПустаяСсылка();
	КонецЕсли;
	//УстановитьПривилегированныйРежим(Истина);
	//а если это синоним бренда
	Если ИспользоватьСинонимыБрендов Тогда
		НайденныеСтроки = СинонимыБрендов.НайтиСтроки(Новый Структура("Синоним", НаименованиеПроизводителя));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.Бренд) Тогда
				Возврат НайденнаяСтрока.Бренд;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НовыйПроизводитель = Справочники.Производители.СоздатьЭлемент();
	НовыйПроизводитель.Наименование = НаименованиеПроизводителя;
	Если Лев(АдресСервиса, 5) = "mxcar" Тогда
		НовыйПроизводитель.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	Попытка
		НовыйПроизводитель.Записать();
	Исключение
		СинхронизироватьТолькоПоАртикулу = Истина;
		Возврат Справочники.Производители.ПустаяСсылка();
	КонецПопытки;
	Если СообщатьОСоздании Тогда
		сообщить("Создан производитель:	"+НаименованиеПроизводителя);
	КонецЕсли;
	//УстановитьПривилегированныйРежим(Ложь);
	Возврат НовыйПроизводитель.Ссылка;	
КонецФункции

Функция НайтиДобавитьПроизводительАВЗ(НаименованиеПроизводителя, Создавать = Истина, СообщатьОСоздании=Ложь) Экспорт
	Если НаименованиеПроизводителя = "" Тогда
		Возврат Справочники.Производители.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	АВЗ_БрендыЗапчастей.Ссылка
	               |ИЗ
	               |	Справочник.АВЗ_БрендыЗапчастей КАК АВЗ_БрендыЗапчастей
	               |ГДЕ
	               |	АВЗ_БрендыЗапчастей.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", НаименованиеПроизводителя);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Если НЕ Создавать Тогда
		Возврат Справочники.Производители.ПустаяСсылка();
	КонецЕсли;
	//УстановитьПривилегированныйРежим(Истина);
	//а если это синоним бренда
	//Если ИспользоватьСинонимыБрендов Тогда
	//	НайденныеСтроки = СинонимыБрендов.НайтиСтроки(Новый Структура("Синоним", НаименованиеПроизводителя));
	//	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	//		Если ЗначениеЗаполнено(НайденнаяСтрока.Бренд) Тогда
	//			Возврат НайденнаяСтрока.Бренд;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	НовыйПроизводитель = Справочники["АВЗ_БрендыЗапчастей"].СоздатьЭлемент();
	НовыйПроизводитель.Наименование = НаименованиеПроизводителя;
	НовыйПроизводитель.Записать();
	Если СообщатьОСоздании Тогда
		сообщить("Создан производитель:	"+НаименованиеПроизводителя);
	КонецЕсли;
	//УстановитьПривилегированныйРежим(Ложь);
	Возврат НовыйПроизводитель.Ссылка;	
КонецФункции

Функция НайтиДобавитьМарку(НаименованиеПроизводителя, Создавать = Истина) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Марки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Марки КАК Марки
	               |ГДЕ
	               |	Марки.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", НаименованиеПроизводителя);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Если НЕ Создавать Тогда
		Возврат Справочники.Марки.ПустаяСсылка();
	КонецЕсли;
	НовыйПроизводитель = Справочники.Марки.СоздатьЭлемент();
	НовыйПроизводитель.Наименование = НаименованиеПроизводителя;
	НовыйПроизводитель.Записать();
	Возврат НовыйПроизводитель.Ссылка;	
КонецФункции

Функция НайтиДобавитьГруппуНоменклатуры(Производитель, Создавать = Истина)
	Если НеСоздаватьПапкиНоменклатуры Тогда
		Возврат ГруппаНовойНоменклатуры;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Номенклатура.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Наименование = &Производитель
	               |	И Номенклатура.ЭтоГруппа = Истина";
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Если Не Создавать Тогда
		Возврат Неопределено;
	КонецЕсли;
	НоменклатураГруппа = Справочники.Номенклатура.СоздатьГруппу();
	Если ЗначениеЗаполнено(ГруппаНовойНоменклатуры) Тогда
		НоменклатураГруппа.Родитель = ГруппаНовойНоменклатуры;
	КонецЕсли;
	НоменклатураГруппа.Наименование = Производитель;
	НоменклатураГруппа.Записать();
	Возврат НоменклатураГруппа.Ссылка;	
КонецФункции

//В УТ 11.5 СправочникСтавкаНДС = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(ПеречислениеСтавкаНДС);
// Получение элемента справочника СтавкиНДС по перечислению СтавкиНДС
//
// Параметры:
//	ПеречислениеСтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Значение ставки НДС.
//	ТипНалогообложенияНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС, в рамках которого нужно найти ставку. 
//	                                                       Если Неопределено, то ставка получается по налогообложению ПродажаОблагаетсяНДС
// Возвращаемое значение:
//	СправочникСсылка.СтавкиНДС - Соответствующая перечислению ставка НДС.
//
Функция СтавкаНДСПоЗначениюПеречисления(ПеречислениеСтавкаНДС, ТипНалогообложенияНДС = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС.ТипыНалогообложенияНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ссылка.ПеречислениеСтавкаНДС = &ПеречислениеСтавкаНДС
		|	И СтавкиНДС.ТипНалогообложенияНДС = &ТипНалогообложенияНДС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.ПеречислениеСтавкаНДС = &ПеречислениеСтавкаНДС
		|	И &НалогообложениеНеУказано";
	
	Запрос.УстановитьПараметр("ПеречислениеСтавкаНДС", ПеречислениеСтавкаНДС);
	Если ТипНалогообложенияНДС = Неопределено Тогда
		Запрос.УстановитьПараметр("ТипНалогообложенияНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		Запрос.УстановитьПараметр("НалогообложениеНеУказано", Истина);
	Иначе
		Запрос.УстановитьПараметр("ТипНалогообложенияНДС", ТипНалогообложенияНДС);
		Запрос.УстановитьПараметр("НалогообложениеНеУказано", Ложь);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СтавкаНДС
	КонецЕсли;
	
	Возврат Справочники["СтавкиНДС"].ПустаяСсылка();
	
КонецФункции

Функция НайтиДобавитьНоменклатуруПоАртикулу(Артикул, Производитель, Знач Позиция, НаименованиеНоменклатуры = "", Создавать = Истина, ПереданныйНомерЗаказа = "", Марка = Неопределено, Вес = 0) Экспорт
	//!!! не забыть ПоискПоКодуНоменклатуры
	//надо искать по марке (Производителю) и артикулу
	//из артикула убираем все - / \
	//ищем по нашему коду номенклатуры
	//возможно, надо учитывать, наш это склад или нет
	Лев7 = Лев(АдресСервиса, 7);
	Если Лев7 = "id26207"  Тогда id26207 = Истина; Иначе id26207 = Ложь; КонецЕсли;
	Если Лев7 = "id14833"  Тогда id14833 = Истина; Иначе id14833 = Ложь; КонецЕсли;
	Если Лев7 = "id36235"  Тогда id36235 = Истина; Иначе id36235 = Ложь; КонецЕсли;//id36235 = Ложь;
	Если Лев7 = "id14985"  Тогда id14985 = Истина; Иначе id14985 = Ложь; КонецЕсли;
	Если Лев7 = "id11945" Тогда id11945 = Истина; Иначе id11945 = Ложь; КонецЕсли;
	Если Лев7 = "id34201" Тогда id34201 = Истина; Иначе id34201 = Ложь; КонецЕсли;
	Если Лев7 = "id35090" Тогда id35090 = Истина; Иначе id35090 = Ложь; КонецЕсли;
	Если Лев7 = "id34582" Тогда id34582 = Истина; Иначе id34582 = Ложь; КонецЕсли;
	Если Лев7 = "id17496" Тогда id17496 = Истина; Иначе id17496 = Ложь; КонецЕсли;
	//Если Лев7 = "id19566"  Тогда id19566 = Истина; Иначе id19566 = Ложь; КонецЕсли;//у них серии, надо искать без серий, но у них вид номенклатуры с сериями,
	//поэтому не подойдёт Номенклатура.ВидНоменклатуры.ИспользоватьСерии = Ложь может быть искать по остаткам серий товаров - регистр накопления ДвиженияСерийТоваров //НастройкаИспользованияСерий
	Если Лев7 = "id14544"  Тогда
		id14544 = Истина;
		Если НЕ ЗначениеЗаполнено(ГруппаНовойНоменклатуры) Тогда
			//сообщить("Выберите группу для создания номенклатуры");
			ВызватьИсключение "Выберите группу для создания номенклатуры";
		КонецЕсли;
	Иначе
		id14544 = Ложь;
	КонецЕсли;
	
	Если ПоискПоКодуНоменклатуры И Позиция<>Неопределено И Позиция.Свойство("articleCode") Тогда
		Если Позиция.articleCode <> Неопределено И Позиция.articleCode <> "" Тогда
			Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(Позиция.articleCode));
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Если Отладка И ФильтрПоЗаявке>0 Тогда
					сообщить(" Нашли по коду поставщика "+Позиция.articleCode+"	"+Номенклатура.Ссылка+"	"+Номенклатура.Код);
				КонецЕсли;
				Возврат Номенклатура.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Артикул = "" Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Артикул", СокрЛП(Артикул));
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Если ЗначениеЗаполнено(СвойствоАртикул) Тогда
		Запрос.УстановитьПараметр("Свойство", СвойствоАртикул);
		Запрос.УстановитьПараметр("Значение", СокрЛП(Артикул));
		Если СокрЛП(СвойствоАртикул.ТипЗначения) = "Строка" Тогда
		Иначе //"Дополнительное значение"
			ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(СокрЛП(Артикул), Истина, , СвойствоАртикул);
			//ищем в значениях свойств объектов
			Если Отладка Тогда
				сообщить("Ищем по значению свойства: "+ЗначениеСвойства);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
			Иначе
				ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
				ЗначениеСвойства.Владелец = СвойствоАртикул;
				ЗначениеСвойства.Наименование = СокрЛП(Артикул);
				ЗначениеСвойства.Записать();
				ЗначениеСвойства = ЗначениеСвойства.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ТекстЗапросаПоСвойствуИПроизводителю = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.Артикул КАК Артикул,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.Производитель КАК Производитель,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.ВидНоменклатуры КАК ВидНоменклатуры,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.НаборУпаковок КАК НаборУпаковок,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.СкладскаяГруппа КАК СкладскаяГруппа,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.СтавкаНДС КАК СтавкаНДС,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.ГруппаДоступа КАК ГруппаДоступа,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
	                                       |	ВЫБОР
	                                       |		КОГДА НоменклатураДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	                                       |			ТОГДА 1
	                                       |		ИНАЧЕ 0
	                                       |	КОНЕЦ КАК ПометкаУдаления,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.Наименование КАК Наименование,
	                                       |	НоменклатураДополнительныеРеквизиты.Ссылка.ТипНоменклатуры КАК ТипНоменклатуры
	                                       |ИЗ
	                                       |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	                                       |ГДЕ
	                                       |	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
	                                       |	И НоменклатураДополнительныеРеквизиты.Ссылка.Производитель = &Производитель
	                                       |	И НоменклатураДополнительныеРеквизиты.Значение = &Значение
	                                       |
	                                       |УПОРЯДОЧИТЬ ПО
	                                       |	ПометкаУдаления";
	//|	И (ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Значение КАК СТРОКА(50))) = &Значение
	ТекстЗапросаПоАртикулуИПроизводителю = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	                                       |	Номенклатура.Ссылка КАК Ссылка,
	                                       |	Номенклатура.Производитель КАК Производитель,
	                                       |	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	                                       |	Номенклатура.НаборУпаковок КАК НаборУпаковок,
	                                       |	Номенклатура.СкладскаяГруппа КАК СкладскаяГруппа,
	                                       |	Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	                                       |	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	                                       |	Номенклатура.ГруппаДоступа КАК ГруппаДоступа,
	                                       |	Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
	                                       |	ВЫБОР
	                                       |		КОГДА Номенклатура.ПометкаУдаления
	                                       |			ТОГДА 1
	                                       |		ИНАЧЕ 0
	                                       |	КОНЕЦ КАК ПометкаУдаления,
	                                       |	Номенклатура.Наименование КАК Наименование,
	                                       |	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	                                       |ИЗ
	                                       |	Справочник.Номенклатура КАК Номенклатура
	                                       |ГДЕ
	                                       |	Номенклатура.Артикул = &Артикул
	                                       |	И Номенклатура.Производитель = &Производитель
	                                       |
	                                       |УПОРЯДОЧИТЬ ПО
	                                       |	ПометкаУдаления";
	Если id26207 = Истина Тогда
		ТекстЗапросаПоАртикулуИПроизводителю = СтрЗаменить(ТекстЗапросаПоАртикулуИПроизводителю, "Номенклатура.Производитель КАК", "Номенклатура.АВЗ_БрендЗапчасти КАК");
	КонецЕсли;
	Если id34582 = Истина Тогда
		ТекстЗапросаПоАртикулуИПроизводителю = СтрЗаменить(ТекстЗапросаПоАртикулуИПроизводителю, "Номенклатура.Артикул = &Артикул", "(Номенклатура.Артикул = &Артикул Или Номенклатура.кам_АртикулABCP = &Артикул)");
		ТекстЗапросаПоАртикулуИПроизводителю = СтрЗаменить(ТекстЗапросаПоАртикулуИПроизводителю, "Номенклатура.Производитель = &Производитель", "(Номенклатура.Производитель = &Производитель Или Номенклатура.кам_ПроизводительABCP = &ПроизводительСтрокой)");
		ПроизводительСтрокой = СокрЛП(Производитель);
		Если ПроизводительСтрокой = "" Тогда
			ПроизводительСтрокой = "Noname";
		КонецЕсли;
		Запрос.УстановитьПараметр("ПроизводительСтрокой", ПроизводительСтрокой);
	КонецЕсли;
	Если id14544 Тогда
		//ТекстЗапросаПоАртикулуИПроизводителю = СтрЗаменить(ТекстЗапросаПоАртикулуИПроизводителю, "Номенклатура.Артикул", "Номенклатура.ИДАЗЧ");
		ТекстЗапросаПоАртикулуИПроизводителю = СтрЗаменить(ТекстЗапросаПоАртикулуИПроизводителю, "Номенклатура.Артикул = &Артикул", "(Номенклатура.Артикул = &Артикул Или Номенклатура.АртикулДляПоиска = &Артикул)");
	КонецЕсли;
	ЕстьАртикулДляПоиска = Метаданные.Справочники.Номенклатура.Реквизиты.Найти("АртикулДляПоиска");
	Если ЕстьАртикулДляПоиска <> Неопределено Тогда
		ТекстЗапросаПоАртикулуИПроизводителю = СтрЗаменить(ТекстЗапросаПоАртикулуИПроизводителю, "Номенклатура.Артикул = &Артикул", "(Номенклатура.Артикул = &Артикул Или Номенклатура.АртикулДляПоиска = &Артикул)");
	КонецЕсли;
	Если Пользователь = "api@id9135" Тогда
		ТекстЗапросаПоАртикулуИПроизводителю = СтрЗаменить(ТекстЗапросаПоАртикулуИПроизводителю, "Номенклатура.Артикул", "Номенклатура.АртикулПроизводителя");
	КонецЕсли;
	ТекстЗапросаПоАртикулуИМарке = СтрЗаменить(ТекстЗапросаПоАртикулуИПроизводителю, "Производитель", "Марка");
	Если id14985 Тогда
		ТекстЗапросаПоАртикулуИПроизводителю = СтрЗаменить(ТекстЗапросаПоАртикулуИПроизводителю, "Номенклатура.Артикул = &Артикул", "Номенклатура.Артикул = &Артикул И Номенклатура.ПометкаУдаления = Ложь");
	КонецЕсли;
	ТекстЗапросаПоАртикулу = СтрЗаменить(ТекстЗапросаПоАртикулуИПроизводителю, "И Номенклатура.Производитель = &Производитель", "");
	НашлиПоСвойству = Ложь;
	Если ЗначениеЗаполнено(СвойствоАртикул) Тогда
		Если СинхронизироватьТолькоПоАртикулу Тогда
			ТекстЗапросаПоСвойствуИПроизводителю = СтрЗаменить(ТекстЗапросаПоСвойствуИПроизводителю, "И НоменклатураДополнительныеРеквизиты.Ссылка.Производитель = &Производитель", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапросаПоСвойствуИПроизводителю;
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			НашлиПоСвойству = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ id17496 И НЕ НашлиПоСвойству Тогда
		Если Производитель <> Неопределено Тогда
			Запрос.Текст = ТекстЗапросаПоАртикулуИПроизводителю;
		ИначеЕсли Марка <> Неопределено Тогда
			Запрос.Текст = ТекстЗапросаПоАртикулуИМарке;
		Иначе
			Запрос.Текст = ТекстЗапросаПоАртикулу;
			Спр = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Артикул);
			Если ЗначениеЗаполнено(Спр) Тогда
				Возврат Спр.Ссылка;
			КонецЕсли;
		КонецЕсли;
		Если ПроизводительВБренде И Марка <> Неопределено Тогда
			Запрос.Текст = ТекстЗапросаПоАртикулуИМарке;
		КонецЕсли;
		Запрос.УстановитьПараметр("Марка", Марка);
		Результат = Запрос.Выполнить();
	КонецЕсли;
	Если НЕ id17496 И Результат.Пустой() Тогда
		Если СинхронизироватьТолькоПоАртикулу Тогда
			Спр = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Артикул);
			Если ЗначениеЗаполнено(Спр) Тогда
				Возврат Спр.Ссылка;
			КонецЕсли;
			Запрос.Текст = ТекстЗапросаПоАртикулу;
			Результат = Запрос.Выполнить();
		КонецЕсли;
	КонецЕсли;
	Об = Справочники.Номенклатура.ПустаяСсылка();
	Если Не Результат.Пустой() Тогда
		#Область ДозаполнениеРеквизитовНоменклатуры
		Если Отладка И ЗначениеЗаполнено(СвойствоАртикул) Тогда
			Выборка = Результат.Выбрать();
			НС = 0;
			//сообщить(Запрос.Текст);
			Пока Выборка.Следующий() Цикл
				НС = НС + 1;
				//сообщить(Выборка.ЗначениеАртикула);
				сообщить(""+НС+"	"+Выборка.Ссылка.Код+"	"+Выборка.Ссылка+"	"+Выборка.Ссылка.Артикул+"	"+Выборка.ПометкаУдаления);
			КонецЦикла;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		НадоЗаписать = Ложь;
		//Если НЕ ПроизводительВБренде И ЗначениеЗаполнено(Производитель) И НЕ ЗначениеЗаполнено(Выборка.Производитель) Тогда
		//	Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//		Об = Выборка.Ссылка.ПолучитьОбъект();
		//	КонецЕсли;
		//	Об.Производитель = Производитель;
		//	НадоЗаписать = Истина;
		//КонецЕсли;
		//Если id14985 Тогда
		//	Номенклатура = Выборка.Ссылка;
		//	Если Найти(Номенклатура.НаименованиеПолное, Артикул)>0 Тогда
		//		Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//			Об = Выборка.Ссылка.ПолучитьОбъект();
		//		КонецЕсли;
		//		Об.НаименованиеПолное = СокрЛП(СтрЗаменить(Об.НаименованиеПолное, СокрЛП(Артикул)+",",""));
		//		НадоЗаписать = Истина;
		//	КонецЕсли;
		//	Попытка
		//		Если Номенклатура.НаименованиеДляСайта = "" Тогда
		//			Если Позиция <> Неопределено Тогда
		//				Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//					Об = Выборка.Ссылка.ПолучитьОбъект();
		//				КонецЕсли;
		//				Об.НаименованиеДляСайта = Позиция.description;//Об.НаименованиеПолное;
		//				НадоЗаписать = Истина;
		//			КонецЕсли;
		//		КонецЕсли;
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;
		//Если id36235 Тогда
		//	Номенклатура = Выборка.Ссылка;
		//	Если Номенклатура.АртикулДляПоиска = "" Тогда
		//		Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//			Об = Выборка.Ссылка.ПолучитьОбъект();
		//		КонецЕсли;
		//		Если Позиция<>Неопределено И Позиция.Свойство("numberFix") Тогда
		//			Об.АртикулДляПоиска = Позиция["numberFix"];
		//		КонецЕсли;
		//		НадоЗаписать = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		//Если УТ113 Или УТ114 Тогда
		//	Если НЕ ЗначениеЗаполнено(Выборка.ВариантОформленияПродажи) Тогда
		//		Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//			Об = Выборка.Ссылка.ПолучитьОбъект();
		//		КонецЕсли;
		//		Об.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		//		НадоЗаписать = Истина;
		//	КонецЕсли;
		//КонецЕсли;

		//Если ЗначениеЗаполнено(ГруппаДоступа) И НЕ ЗначениеЗаполнено(Выборка.ГруппаДоступа) Тогда
		//	Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//		Об = Выборка.Ссылка.ПолучитьОбъект();
		//	КонецЕсли;
		//	Об.ГруппаДоступа = ГруппаДоступа;
		//	НадоЗаписать = Истина;
		//КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(Выборка.ВидНоменклатуры) И ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		//	Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//		Об = Выборка.Ссылка.ПолучитьОбъект();
		//	КонецЕсли;
		//	Об.ВидНоменклатуры = ВидНоменклатуры;
		//	НадоЗаписать = Истина;
		//КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(Выборка.ТипНоменклатуры) Тогда
		//	Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//		Об = Выборка.Ссылка.ПолучитьОбъект();
		//	КонецЕсли;
		//	Об.ТипНоменклатуры = ВидНоменклатуры.ТипНоменклатуры;
		//	НадоЗаписать = Истина;
		//КонецЕсли;
		//Если УТКазахстан Тогда
		//	Если ИзменятьНДСВНоменклатуре И Выборка.СтавкаНДС <> ОсновнаяСтавкаНДС Тогда
		//		Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//			Об = Выборка.Ссылка.ПолучитьОбъект();
		//		КонецЕсли;
		//		Если УТКазахстан Тогда
		//			Об.СтавкаНДС = ?(ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Справочники["СтавкиНДС"]["БезНДС"], Справочники["СтавкиНДС"]["НДС12"]);
		//		КонецЕсли;
		//		НадоЗаписать = Истина;
		//	КонецЕсли;
		//Иначе
		//	Если ИзменятьНДСВНоменклатуре И НЕ ЗначениеЗаполнено(Выборка.СтавкаНДС) Тогда
		//		Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//			Об = Выборка.Ссылка.ПолучитьОбъект();
		//		КонецЕсли;
		//		Об.СтавкаНДС = ОсновнаяСтавкаНДС;
		//		Если УТ115 И Не ЗначениеЗаполнено(Об.СтавкаНДС) Тогда //в УТ 11.5 это справочник
		//			//ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС
		//			//СправочникСтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(ОсновнаяСтавкаНДС);
		//			СправочникСтавкаНДС = СтавкаНДСПоЗначениюПеречисления(ОсновнаяСтавкаНДС);
		//			Об.СтавкаНДС = СправочникСтавкаНДС;
		//			Если Отладка Тогда
		//				сообщить(""+Выборка.Ссылка+"	"+СправочникСтавкаНДС);
		//			КонецЕсли;
		//		КонецЕсли;
		//		НадоЗаписать = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		//Если id11945 И Позиция<> Неопределено И Производитель <> Неопределено И СокрЛП(Выборка.Наименование) = СокрЛП(Производитель) Тогда
		//	Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//		Об = Выборка.Ссылка.ПолучитьОбъект();
		//	КонецЕсли;
		//	Об.Наименование = СокрЛП(Производитель) + " " + СокрЛП(Позиция.description);
		//	НадоЗаписать = Истина;
		//КонецЕсли;
		ИндивидуальныеУпаковкиСозданы = Ложь;
		//Если id36235 И ЗначениеЗаполнено(ВидНоменклатуры) И (ВидНоменклатуры.ИспользоватьУпаковки = Истина) И (ВидНоменклатуры.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры) Тогда
		//	Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда//для каждой номенклатуры делаем свой набор упаковок
		//		Об = Выборка.Ссылка.ПолучитьОбъект();
		//	КонецЕсли;
		//	Если Об.ИспользоватьУпаковки = Ложь Тогда
		//		Об.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
		//		Об.ИспользоватьУпаковки = Истина;
		//		ТекстСообщения = ""+Выборка.Ссылка+" в существующую добавлено «использовать упаковки»";
		//		ЗаписьВЛог(ТекстСообщения);
		//		НадоЗаписать = Истина;
		//		Спр = Справочники.УпаковкиЕдиницыИзмерения.Выбрать(,Об.Ссылка);
		//		Если Спр.Следующий() Тогда
		//		Иначе
		//			Спр = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		//			//Спр.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		//			Спр.Владелец = Об.Ссылка;
		//			Спр.ЕдиницаИзмерения = Об.ЕдиницаИзмерения;
		//			Спр.КоличествоУпаковок = 1;
		//			Спр.Числитель = 1;
		//			Спр.Знаменатель = 1;
		//			Спр.Наименование = Спр.ЕдиницаИзмерения.Наименование;
		//			//Спр.СкладскаяГруппа = Справочники.СкладскиеГруппыУпаковок.СкладскаяГруппаУпаковокПоУмолчанию();
		//			Спр.Безразмерная = Истина;
		//			Спр.СкладскаяГруппа = СкладскаяГруппа;
		//			Спр.Вес = 0.001;
		//			Попытка
		//				Если ЗначениеЗаполнено(Позиция) И Позиция.weight <> "0" Тогда
		//					Спр.Вес = Число(Позиция.weight);
		//				КонецЕсли;
		//			Исключение
		//			КонецПопытки;
		//			Попытка
		//				Если ЗначениеЗаполнено(Позиция) И Позиция.volume <> "0" Тогда
		//					Спр.Объем = Число(Позиция.volume);
		//				КонецЕсли;
		//			Исключение
		//			КонецПопытки;
		//			Спр.Типоразмер = Типоразмер;
		//			ЕдиницаДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
		//			Спр.ГлубинаЕдиницаИзмерения = ЕдиницаДлины;
		//			Спр.ШиринаЕдиницаИзмерения  = ЕдиницаДлины;
		//			Спр.ВысотаЕдиницаИзмерения  = ЕдиницаДлины;
		//			Спр.ОбъемЕдиницаИзмерения   = Константы.ЕдиницаИзмеренияОбъема.Получить();
		//			Спр.ВесЕдиницаИзмерения     = Константы.ЕдиницаИзмеренияВеса.Получить();
		//			Спр.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
		//			Спр.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
		//			Спр.Записать();
		//			ТекстСообщения = ""+Выборка.Ссылка+" в существующую добавлена «упаковка единица измерения» "+Спр.Ссылка;
		//			ЗаписьВЛог(ТекстСообщения);
		//		КонецЕсли;
		//	КонецЕсли;
		//	ИндивидуальныеУпаковкиСозданы = Истина;
		//КонецЕсли;
		
		//при создании всё сделали, а тут может двоить
		//Если ИспользоватьОрдерныеСклады Тогда
		//	Если (НЕ ЗначениеЗаполнено(Выборка.НаборУпаковок) Или НЕ Выборка.ИспользоватьУпаковки) И ЗначениеЗаполнено(НаборУпаковок) Тогда
		//		Если ЗначениеЗаполнено(НаборУпаковок) Тогда //общий для всех набор упаковок
		//			Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//				Об = Выборка.Ссылка.ПолучитьОбъект();
		//			КонецЕсли;
		//			Об.ИспользоватьУпаковки = Истина;
		//			Об.НаборУпаковок = НаборУпаковок;
		//			ТекстСообщения = ""+Выборка.Ссылка+" в существующую добавлен общий набор упаковок "+НаборУпаковок;
		//			ЗаписьВЛог(ТекстСообщения);
		//			НадоЗаписать = Истина;
		//		Иначе
		//			Если НЕ ИндивидуальныеУпаковкиСозданы Тогда
		//				//для каждой номенклатуры делаем свой набор упаковок
		//				Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//					Об = Выборка.Ссылка.ПолучитьОбъект();
		//				КонецЕсли;
		//				Об.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
		//				Об.ИспользоватьУпаковки = Истина;
		//				ТекстСообщения = ""+Выборка.Ссылка+" в существующую добавлено «использовать упаковки»";
		//				ЗаписьВЛог(ТекстСообщения);
		//				НадоЗаписать = Истина;
		//				Спр = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		//				//Спр.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		//				Спр.Владелец = Об.Ссылка;
		//				Спр.ЕдиницаИзмерения = Об.ЕдиницаИзмерения;
		//				Спр.КоличествоУпаковок = 1;
		//				Спр.Числитель = 1;
		//				Спр.Знаменатель = 1;
		//				Спр.Наименование = Спр.ЕдиницаИзмерения.Наименование;
		//				//Спр.СкладскаяГруппа = Справочники.СкладскиеГруппыУпаковок.СкладскаяГруппаУпаковокПоУмолчанию();
		//				Спр.Безразмерная = Истина;
		//				Спр.СкладскаяГруппа = СкладскаяГруппа;
		//				Спр.Вес = 0.001;
		//				Спр.Типоразмер = Типоразмер;
		//				ЕдиницаДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
		//				Спр.ГлубинаЕдиницаИзмерения = ЕдиницаДлины;
		//				Спр.ШиринаЕдиницаИзмерения  = ЕдиницаДлины;
		//				Спр.ВысотаЕдиницаИзмерения  = ЕдиницаДлины;
		//				Спр.ОбъемЕдиницаИзмерения   = Константы.ЕдиницаИзмеренияОбъема.Получить();
		//				Спр.ВесЕдиницаИзмерения     = Константы.ЕдиницаИзмеренияВеса.Получить();
		//				Спр.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
		//				Спр.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
		//				Спр.Записать();
		//				ТекстСообщения = ""+Выборка.Ссылка+" в существующую добавлена «упаковка единица измерения» "+Спр.Ссылка;
		//				ЗаписьВЛог(ТекстСообщения);
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		//	Если (НЕ ЗначениеЗаполнено(Выборка.СкладскаяГруппа)) И (ЗначениеЗаполнено(СкладскаяГруппа)) Тогда
		//		Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
		//			Об = Выборка.Ссылка.ПолучитьОбъект();
		//		КонецЕсли;
		//		Об.СкладскаяГруппа = СкладскаяГруппа;
		//		ТекстСообщения = ""+Выборка.Ссылка+" в существующую добавлена складская группа "+Об.СкладскаяГруппа;
		//		ЗаписьВЛог(ТекстСообщения);
		//		НадоЗаписать = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		Если НадоЗаписать Тогда
			Попытка
				Об.Записать();
			Исключение
				ТекстСообщения = "Не удалось записать номенклатуру"+Артикул+" "+Производитель;
				ЗаписьВЛог(ТекстСообщения, Истина);
			КонецПопытки;
		КонецЕсли;
		Возврат Выборка.Ссылка;
		#КонецОбласти
	Иначе
		Если Не Создавать Тогда
			//сообщить("не создавать "+Артикул);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	#Область Поискid9652
	//ищем по свойству в доп.реквизитах
	Если id9652 = Неопределено Тогда
		id9652 = Ложь;
	Конецесли;
	Если id9652 Тогда
		//не ищет, как надо
		Свойство1 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Brand Number (Товар)");
		Свойство2 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Brand Name (Товар)");
		//сообщить(Свойство1);
		//сообщить(Свойство2);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Номенклатура.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.Свойство = &Свойство1
		               |	И Номенклатура.Значение = &Артикул
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НоменклатураДополнительныеРеквизиты.Ссылка
		               |ИЗ
		               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		               |ГДЕ
		               |	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство2
		               |	И НоменклатураДополнительныеРеквизиты.Значение = &Производитель
		               |	И НоменклатураДополнительныеРеквизиты.Ссылка В
		               |			(ВЫБРАТЬ
		               |				ВТ.Ссылка
		               |			ИЗ
		               |				ВТ)";
		Запрос.УстановитьПараметр("Свойство1", Свойство1);
		Запрос.УстановитьПараметр("Свойство2", Свойство2);
		АртикулСсылка = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(СтрЗаменить(СокрЛП(Артикул)," ",""));
		ПроизводительСтрокой = СокрЛП(Производитель);
		ПроизводительСсылка = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ПроизводительСтрокой);
		Если ЗначениеЗаполнено(АртикулСсылка) И ЗначениеЗаполнено(ПроизводительСсылка) Тогда
			Запрос.УстановитьПараметр("Артикул", АртикулСсылка);//там значение, оно не подходит
			Запрос.УстановитьПараметр("Производитель", ПроизводительСсылка);//там значение, оно не подходит
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Возврат Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(АртикулСсылка) И ИспользоватьСинонимыБрендов Тогда
			Структура = Новый Структура("Наименование", СокрЛП(Производитель));//ABCP возвращает эталонный бренд, по нему ищем наши синонимы
			НайденныеСтроки = СинонимыБрендов.НайтиСтроки(Структура);
			МассивСинонимов = Новый Массив;
			Префикс = "";
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(НайденнаяСтрока.СвойствоБренд) Тогда
					МассивСинонимов.Добавить(НайденнаяСтрока.СвойствоБренд);
					Если Префикс = "" Тогда
						Префикс = НайденнаяСтрока.Префикс+"-";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если МассивСинонимов.Количество() > 0 Тогда
				Запрос.Текст = "ВЫБРАТЬ
		               |	Номенклатура.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.Свойство = &Свойство1
		               |	И Номенклатура.Значение = &Артикул
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НоменклатураДополнительныеРеквизиты.Ссылка
		               |ИЗ
		               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		               |ГДЕ
		               |	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство2
		               |	И НоменклатураДополнительныеРеквизиты.Значение В (&МассивСинонимов)
		               |	И НоменклатураДополнительныеРеквизиты.Ссылка В
		               |			(ВЫБРАТЬ
		               |				ВТ.Ссылка
		               |			ИЗ
		               |				ВТ)";
				Запрос.УстановитьПараметр("Артикул", АртикулСсылка);//там значение, оно не подходит
				Запрос.УстановитьПараметр("МассивСинонимов", МассивСинонимов);
				Результат = Запрос.Выполнить();
				Если НЕ Результат.Пустой() Тогда
					ВыборкаДетальныеЗаписи = Результат.Выбрать();
					ВыборкаДетальныеЗаписи.Следующий();
					Возврат ВыборкаДетальныеЗаписи.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	#КонецОбласти
	//если не нашли по артикулу, то удаляем из него - / \ | № ! . , * ( ) и пробелы и ищем заново
	АртикулБезИзменений = Артикул;
	Если НЕ СинхронизироватьНоменклатуру Тогда
		Если ПереданныйНомерЗаказа = "" Тогда
			Добавка = "";
		Иначе
			Добавка = "Заказ "+СокрЛП(ПереданныйНомерЗаказа)+", ";
			//ставим эти позиции в отказ
			//кому-то делал, уже неактуально
			//НС = 1;
			//ПереченьПозиций = "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(Число(Позиция.id),"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+Формат(КодСтатусаОтказ, "ЧГ=0");
			//ОбновитьСтатусЗаявки(ПереданныйНомерЗаказа, ПереченьПозиций, КодСтатусаОтказ,,Истина);
		КонецЕсли;
			
		//ТекстСообщения = Добавка+"Не найдена номенклатура: наименование """+СокрЛП(Позиция.description)+""", артикул "+Артикул+" в производителе """+СокрЛп(Производитель)+"""";
		ТекстСообщения = Добавка+"Не найдена номенклатура: артикул "+Артикул+" в производителе """+СокрЛп(Производитель)+"""";//а то из формы вызывается, а такой позиции нет
		
		ЗаписьВЛог(ТекстСообщения,,Истина);
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	Если НЕ Создавать Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	
	Если Вес = 0 Тогда
		Попытка
			Если ЗначениеЗаполнено(Позиция) И Позиция.weight <> "0" Тогда
				Вес = Число(Позиция.weight);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Вес <> 0 Тогда
		ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			Номенклатура.ВесЕдиницаИзмерения = ЕдиницаИзмеренияВеса;
			ВесСтрокой = Формат(Вес,"ЧРД=.; ЧГ=0");
			//Разрядность = Найти(ВесСтрокой,".");
			//Если Разрядность > 0 Тогда
			//	Дробь = Сред(ВесСтрокой, Разрядность+1);
			//	Разрядность = СтрДлина(Дробь);
			//КонецЕсли;
			КоличествоРазрядов = Макс(СтрДлина(ВесСтрокой%1)-2,0);
			Если КоличествоРазрядов<4 Тогда
				Номенклатура.ВесЗнаменатель = 1;
				Номенклатура.ВесЧислитель = Вес;
			Иначе
				Номенклатура.ВесЗнаменатель = 1000;//если после запятой больше 3 знаков,
				Номенклатура.ВесЧислитель = Вес*1000;
			КонецЕсли;
			Номенклатура.ВесИспользовать = Истина;
		КонецЕсли;
	КонецЕсли;
	Номенклатура.ВестиУчетПоГТД = ВестиУчетПоГТД;
	Номенклатура.Производитель = Производитель;
	Если Не ЗначениеЗаполнено(Номенклатура.Производитель) Тогда
		Номенклатура.Производитель = НайтиДобавитьПроизводитель(СокрЛП(Производитель));
	КонецЕсли;
	Если ПроизводительВБренде И ЗначениеЗАполнено(Марка) Тогда
		Номенклатура.Марка = Марка;
	КонецЕсли;
	Если id14544 Тогда
		Номенклатура.СостояниеТовара = Перечисления.СостоянияНоменклатуры.Новый;
		Номенклатура.ВалютаУчета = Валюта;
	КонецЕсли;
	Номенклатура.Родитель = НайтиДобавитьГруппуНоменклатуры(СокрЛП(Производитель));
	Номенклатура.ГруппаДоступа = ГруппаДоступа;
	Если УТ113 Или УТ114 Тогда
		Номенклатура.Качество = Перечисления.ГрадацииКачества.Новый;
		Номенклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета;
		Номенклатура.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	КонецЕсли;
	Если НаименованиеНоменклатуры = "" Тогда
		Наименование = Позиция.description;
		Если Наименование = "" Тогда
			Наименование = Позиция.comment;
			Если Наименование = "" Тогда
				Наименование = ""+Артикул+" "+СокрЛП(Производитель);
				ТекстСообщения = "Отсутствует наименование, комментарий """+СокрЛП(Позиция.comment)+""", артикул "+Артикул+" в производителе """+СокрЛп(Производитель)+"""";
				ЗаписьВЛог(ТекстСообщения,,Истина);
			КонецЕсли;
		КонецЕсли;
		НаименованиеНоменклатуры = Наименование;
	Иначе
		Наименование = НаименованиеНоменклатуры;
	КонецЕсли;
	Артикул = СтрЗаменить(Артикул, "&lt;", "<");
	Артикул = СтрЗаменить(Артикул, "&rt;", ">");
	Если id34582 = Истина Тогда
		Номенклатура.кам_АртикулABCP = Артикул;
		ПроизводительСтрокой = СокрЛП(Производитель);
		Номенклатура.кам_ПроизводительABCP = ПроизводительСтрокой;
	КонецЕсли;
	Номенклатура.Наименование = Наименование;
	Номенклатура.НаименованиеПолное = Наименование;
	Если id14985 Тогда
		Номенклатура.НаименованиеПолное = СокрЛП(НаименованиеНоменклатуры)+", "+СокрЛП(Производитель);
		Если Найти(Номенклатура.НаименованиеПолное, Артикул)>0 Тогда
			Номенклатура.НаименованиеПолное = СокрЛП(СтрЗаменить(Об.НаименованиеПолное, СокрЛП(Артикул)+",",""));
		КонецЕсли;
		Если Позиция <> Неопределено Тогда
			Попытка
				Номенклатура.НаименованиеДляСайта = Позиция.description;//Об.НаименованиеПолное;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если id34201 Тогда
		врем = СокрЛП(Производитель) + " " + СокрЛП(Артикул) + " " + СокрЛП(Наименование);
		Наименование = врем;
		Номенклатура.НаименованиеПолное = Наименование;
		Номенклатура.Наименование = Наименование;
	КонецЕсли;
	Если id11945 Тогда
		врем = СокрЛП(Производитель) + " " + СокрЛП(Наименование);
		Наименование = врем;
		Номенклатура.НаименованиеПолное = Наименование;
		Номенклатура.Наименование = Наименование;
	КонецЕсли;
	Если ДобавлятьПроизводителяВПолноеНаименованиеНоменклатуры Тогда
		Если id14833 Тогда
			Номенклатура.Наименование = СокрЛП(Номенклатура.Наименование)+" "+СокрЛП(Производитель);
		Иначе
			врем = Номенклатура.Наименование;
			Номенклатура.Наименование = врем+" "+СокрЛП(Производитель);
			Если Номенклатура.НаименованиеПолное = "" Тогда
				Номенклатура.НаименованиеПолное = Номенклатура.Наименование;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Номенклатура.Наименование = Номенклатура.НаименованиеПолное;
	КонецЕсли;
	Если ДобавлятьАртикулВПолноеНаименованиеНоменклатуры Тогда
		врем = СокрЛП(Номенклатура.Наименование);
		Если ДобавлятьАртикулПослеНаименования Тогда
			Номенклатура.Наименование = врем + " " + СокрЛП(Артикул);
		Иначе
			Номенклатура.Наименование = СокрЛП(Артикул) + ", " + врем;
		КонецЕсли;
	КонецЕсли;
	Если НЕ id14985 Тогда
		Номенклатура.НаименованиеПолное = Номенклатура.Наименование;
	КонецЕсли;
	//меняем полное и неполное наименование
	Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар"); 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автозапчасти"); 
	КонецЕсли;
	Номенклатура.ВидНоменклатуры = ВидНоменклатуры;//если не заполнить, то будет ошибка при выборе обеспечения в заказе клиента "УчитыватьОстаткиСерий"
	Номенклатура.ТипНоменклатуры = ВидНоменклатуры.ТипНоменклатуры;
	Если КодПоставщикаУслуг <> 0 И ЗначениеЗаполнено(Позиция) Тогда
		Если Число(Позиция.distributorId) = КодПоставщикаУслуг Тогда
			Номенклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга"); 
			Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		КонецЕсли;
	КонецЕсли;
	Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	Если ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры;
	КонецЕсли;
	Номенклатура.ВариантОформленияПродажи = Номенклатура.ВидНоменклатуры.ВариантОформленияПродажи; 
	Номенклатура.ГруппаДоступа = Номенклатура.ВидНоменклатуры.ГруппаДоступа; 
	Номенклатура.ГруппаФинансовогоУчета = Номенклатура.ВидНоменклатуры.ГруппаФинансовогоУчета; 
	//РаботаСНоменклатуройУТ.СоздатьНоменклатуру
	//РаботаСНоменклатуройПереопределяемый.СоздатьНоменклатуру
	//УпаковкиЕдиницыИзмерения могут быть подчинены справочникам: Номенклатура или НаборУпаковок
	Если ЗначениеЗаполнено(СкладскаяГруппа) Тогда
		Номенклатура.СкладскаяГруппа = СкладскаяГруппа;
		//ТекстСообщения = ""+Номенклатура+", в реквизит «складская группа» установлено значение: "+СкладскаяГруппа;
		//ЗаписьВЛог(ТекстСообщения);
	КонецЕсли;
	Если НЕ УТ111 Тогда
		Номенклатура.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");
		Номенклатура.ЕдиницаДляОтчетов = Номенклатура.ЕдиницаИзмерения;
		//Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти("ЕдиницаИзмеренияТНВЭД") <> Неопределено Тогда
		//	Номенклатура.ЕдиницаИзмеренияТНВЭД = Номенклатура.ЕдиницаИзмерения;
		//КонецЕсли;
		
		//непонятно, при обмене с Бухгалтерией, какая-то единица измерения не выгружается
		//Если ЗначениеЗаполнено(ВидНоменклатуры) И (ВидНоменклатуры.ИспользоватьУпаковки = Ложь) Тогда
		//	Спр = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		//	Если НЕ ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		//		Номенклатура.Записать();
		//	КонецЕсли;
		//	Спр.Владелец = Номенклатура.Ссылка;
		//	Спр.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");
		//	Спр.КоличествоУпаковок = 1;
		//	Спр.Числитель = 1;
		//	Спр.Знаменатель = 1;
		//	Спр.Наименование = Спр.ЕдиницаИзмерения.Наименование;
		//	Спр.Безразмерная = Истина;
		//	Спр.СкладскаяГруппа = СкладскаяГруппа;
		//	Спр.Вес = 0.001;
		//	Попытка
		//		Если ЗначениеЗаполнено(Позиция) И Позиция.weight <> "0" Тогда
		//			Спр.Вес = Число(Позиция.weight);
		//		КонецЕсли;
		//	Исключение
		//	КонецПопытки;
		//	Спр.Типоразмер = Типоразмер;
		//	ЕдиницаДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
		//	Спр.ГлубинаЕдиницаИзмерения = ЕдиницаДлины;
		//	Спр.ШиринаЕдиницаИзмерения  = ЕдиницаДлины;
		//	Спр.ВысотаЕдиницаИзмерения  = ЕдиницаДлины;
		//	Спр.ОбъемЕдиницаИзмерения   = Константы.ЕдиницаИзмеренияОбъема.Получить();
		//	Спр.ВесЕдиницаИзмерения     = Константы.ЕдиницаИзмеренияВеса.Получить();
		//	Спр.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
		//	Спр.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
		//	Спр.Записать();
		//	Номенклатура.ЕдиницаИзмерения = Спр.Ссылка;
		//	Номенклатура.ЕдиницаДляОтчетов = Спр.Ссылка;
		//	Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти("ЕдиницаИзмеренияТНВЭД") <> Неопределено Тогда
		//		Номенклатура.ЕдиницаИзмеренияТНВЭД = Спр.Ссылка;
		//	КонецЕсли;
		//КонецЕсли;
	Иначе
		Номенклатура.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду("796");
	КонецЕсли;
	Номенклатура.Артикул = Артикул;
	Если id36235 Тогда
	//Если ЕстьАртикулДляПоиска <> Неопределено Тогда
		Номенклатура.АртикулДляПоиска = Артикул;
		Если Позиция<>Неопределено И Позиция.Свойство("numberFix") Тогда
			Номенклатура.АртикулДляПоиска = Позиция["numberFix"];
		КонецЕсли;
	КонецЕсли;
	Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти("КодДляПоиска") <> Неопределено Тогда
		Номенклатура.КодДляПоиска = Артикул;//здесь 1С хранит код номенклатуры в справочнике без ведущих нулей,лучше не использовать
	КонецЕсли;
	Если Пользователь = "api@id9135" Тогда //fixauto
		Номенклатура.АртикулПроизводителя = Артикул;
	КонецЕсли;
	//Номенклатура.ВестиУчетПоГТД = Истина;
	Спр = Неопределено;
	ИндивидуальныеУпаковкиСозданы = Ложь;
	Если ЗначениеЗаполнено(ВидНоменклатуры) И (ВидНоменклатуры.ИспользоватьУпаковки = Истина) Тогда
		Если (ВидНоменклатуры.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры) Тогда
			//для каждой номенклатуры делаем свой набор упаковок
			//Если Об = Справочники.Номенклатура.ПустаяСсылка() Тогда
			//	Об = Выборка.Ссылка.ПолучитьОбъект();
			//КонецЕсли;
			Номенклатура.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
			Номенклатура.ИспользоватьУпаковки = Истина;
			Спр = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
			//Спр.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Если НЕ ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
				Номенклатура.Записать();
			КонецЕсли;
			Спр.Владелец = Номенклатура.Ссылка;
			Спр.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
			Спр.КоличествоУпаковок = 1;
			Спр.Числитель = 1;
			Спр.Знаменатель = 1;
			Спр.Наименование = Спр.ЕдиницаИзмерения.Наименование;
			//Спр.СкладскаяГруппа = Справочники.СкладскиеГруппыУпаковок.СкладскаяГруппаУпаковокПоУмолчанию();
			Спр.Безразмерная = Истина;
			Спр.СкладскаяГруппа = СкладскаяГруппа;
			Спр.Вес = 0.001;
			Попытка
				Если ЗначениеЗаполнено(Позиция) И Позиция.weight <> "0" Тогда
					Спр.Вес = Число(Позиция.weight);
				КонецЕсли;
			Исключение
			КонецПопытки;
			Спр.Типоразмер = Типоразмер;
			ЕдиницаДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
			Спр.ГлубинаЕдиницаИзмерения = ЕдиницаДлины;
			Спр.ШиринаЕдиницаИзмерения  = ЕдиницаДлины;
			Спр.ВысотаЕдиницаИзмерения  = ЕдиницаДлины;
			Спр.ОбъемЕдиницаИзмерения   = Константы.ЕдиницаИзмеренияОбъема.Получить();
			Спр.ВесЕдиницаИзмерения     = Константы.ЕдиницаИзмеренияВеса.Получить();
			Спр.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
			Спр.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
			Спр.Записать();
			ИндивидуальныеУпаковкиСозданы = Истина;
		КонецЕсли;			
	КонецЕсли;
	Если НЕ ВидНоменклатуры.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		Если ЗначениеЗаполнено(НаборУпаковок) Тогда //общий для всех набор упаковок
			Номенклатура.ИспользоватьУпаковки = Истина;
			Номенклатура.НаборУпаковок = НаборУпаковок;
		КонецЕсли;
	КонецЕсли;
	#Область ОрдерныеСклады
	Если ИспользоватьОрдерныеСклады Тогда
		Если ЗначениеЗаполнено(НаборУпаковок) Тогда //общий для всех набор упаковок
			Номенклатура.ИспользоватьУпаковки = Истина;
			Номенклатура.НаборУпаковок = НаборУпаковок;
			Запрос = Новый Запрос;
			ЗАпрос.Текст = "ВЫБРАТЬ
			               |	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
			               |ГДЕ
			               |	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
			               |	И УпаковкиЕдиницыИзмерения.ПометкаУдаления = Ложь";
			Запрос.УстановитьПараметр("Владелец", НаборУпаковок);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Спр = Выборка.Ссылка;
		Иначе
			//для каждой номенклатуры делаем свой набор упаковок
			Номенклатура.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
			Номенклатура.ИспользоватьУпаковки = Истина;
			ТекстСообщения = ""+Номенклатура+" добавлено «использовать упаковки»";
			ЗаписьВЛог(ТекстСообщения);
			Номенклатура.Записать();
			Спр = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
			//Спр.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Спр.Владелец = Номенклатура.Ссылка;
			Спр.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
			Спр.КоличествоУпаковок = 1;
			Спр.Числитель = 1;
			Спр.Знаменатель = 1;
			Спр.Наименование = Спр.ЕдиницаИзмерения.Наименование;
			//Спр.СкладскаяГруппа = Справочники.СкладскиеГруппыУпаковок.СкладскаяГруппаУпаковокПоУмолчанию();
			Спр.Безразмерная = Истина;
			Спр.СкладскаяГруппа = СкладскаяГруппа;
			Спр.Вес = 0.001;
			Попытка
				Если ЗначениеЗаполнено(Позиция) И Позиция.weight <> "0" Тогда
					Спр.Вес = Число(Позиция.weight);
				КонецЕсли;
			Исключение
			КонецПопытки;
			Спр.Типоразмер = Типоразмер;
			ЕдиницаДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
			Спр.ГлубинаЕдиницаИзмерения = ЕдиницаДлины;
			Спр.ШиринаЕдиницаИзмерения  = ЕдиницаДлины;
			Спр.ВысотаЕдиницаИзмерения  = ЕдиницаДлины;
			Спр.ОбъемЕдиницаИзмерения   = Константы.ЕдиницаИзмеренияОбъема.Получить();
			Спр.ВесЕдиницаИзмерения     = Константы.ЕдиницаИзмеренияВеса.Получить();
			Спр.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
			Спр.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
			Спр.Записать();
			ТекстСообщения = ""+Номенклатура+" добавлен подчиненный элемент справочника «упаковка единица измерения»: "+Спр.Ссылка;
			ЗаписьВЛог(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	Если НЕ УТКазахстан Тогда
		Если НалогообложениеНДСПоступление = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			Номенклатура.СтавкаНДС = ОсновнаяСтавкаНДС;
		Иначе
			Если id35090 Тогда
				Номенклатура.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			Иначе
				Номенклатура.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
		КонецЕсли;
		Если УТ115 И Не ЗначениеЗаполнено(Номенклатура.СтавкаНДС) Тогда //в УТ 11.5 это справочник
			//ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС
			//СправочникСтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(ОсновнаяСтавкаНДС);
			СправочникСтавкаНДС = СтавкаНДСПоЗначениюПеречисления(ОсновнаяСтавкаНДС);
			Номенклатура.СтавкаНДС = СправочникСтавкаНДС;
			//Если Отладка Тогда
			//	сообщить(""+Выборка.Ссылка+"	"+СправочникСтавкаНДС);
			//КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
			Номенклатура.ТипНоменклатуры = Номенклатура.ВидНоменклатуры.ТипНоменклатуры;
			Если НЕ УТ111 Тогда
				Если ЗначениеЗаполнено(ВидНоменклатуры.СтавкаНДС) Тогда
					Номенклатура.СтавкаНДС = ВидНоменклатуры.СтавкаНДС;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВидНоменклатуры.ИспользоватьУпаковки) Тогда
				Номенклатура.ИспользоватьУпаковки = ВидНоменклатуры.ИспользоватьУпаковки;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВидНоменклатуры.НаборУпаковок) Тогда
				Номенклатура.НаборУпаковок = ВидНоменклатуры.НаборУпаковок;
			КонецЕсли;
			Если ВидНоменклатуры.ВестиУчетПоГТД Тогда
				Номенклатура.ВестиУчетПоГТД = ВидНоменклатуры.ВестиУчетПоГТД;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Номенклатура.СтавкаНДС = ?(ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС, Справочники["СтавкиНДС"]["БезНДС"], Справочники["СтавкиНДС"]["НДС12"]);
	КонецЕсли;
	//Номенклатура.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг; 
	//Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	//Номенклатура.ДополнительныеСвойства
	Если ЗначениеЗаполнено(Позиция) Тогда
		Если НЕ Заказы20 Тогда
			Дополнение = " входящая "+Формат(Позиция.priceIn, "ЧРГ=''")+", на сайте "+Формат(Позиция.priceOut, "ЧРГ=''");
			Если id36235 Тогда
				Номенклатура.Описание = "создана: "+ТекущаяДата(); 
			Иначе
				Номенклатура.Описание = СокрЛП(Позиция.distributorName)+", ид. на сайте "+Формат(Позиция.id, "ЧГ=0")+", цена "+Дополнение+", артикул "+АртикулБезИзменений+", создана: "+ТекущаяДата(); 
			КонецЕсли;
		Иначе
			Номенклатура.Описание = СокрЛП(Позиция.distributorName)+", ид. на сайте "+Формат(Позиция.id, "ЧГ=0")+", цена "+Дополнение+", артикул "+АртикулБезИзменений+", создана: "+ТекущаяДата(); 
		КонецЕсли;
	Конецесли;

	#Область Добавитьid9652
	Если id9652 Тогда
		Номенклатура.КодДляПоиска = Артикул;
		//Номенклатура.Артикул = Лев(СокрЛП(Производитель), 3)+"-"+СокрЛП(Артикул);//ниже по другому сделано
		Номенклатура.Качество = Перечисления.ГрадацииКачества.Новый;
		ЗаписьВЛог("Добавляем в новую номенклатуру доп. реквизиты: "+Артикул+" и "+ПроизводительСтрокой);
		//добавляем эти свойства в дополнительные реквизиты
		//Свойство1 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Brand Number (Товар)");
		//Свойство2 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Brand Name (Товар)");
		СтрокаДР = Номенклатура.ДополнительныеРеквизиты.Добавить();
		Запрос.Текст = "ВЫБРАТЬ
		                |	ЗначенияСвойствОбъектов.Ссылка
		                |ИЗ
		                |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		                |ГДЕ
		                |	ЗначенияСвойствОбъектов.Наименование = &Наименование
		                |	И ЗначенияСвойствОбъектов.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Свойство1);
		Запрос.УстановитьПараметр("Наименование", Артикул);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			ЗначениеСвойства.Владелец = Свойство1;
			ЗначениеСвойства.Наименование = СокрЛП(Артикул);
			ЗначениеСвойства.Записать();
			ЗначениеСвойства = ЗначениеСвойства.Ссылка;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЗначениеСвойства = Выборка.Ссылка;
		КонецЕсли;
		СтрокаДР.Значение = ЗначениеСвойства;
		СтрокаДР.Свойство = Свойство1;
		СтрокаДР.ТекстоваяСтрока = СокрЛП(Свойство1);
		
		Запрос.УстановитьПараметр("Владелец", Свойство2);
		Запрос.УстановитьПараметр("Наименование", ПроизводительСтрокой);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			ЗначениеСвойства.Владелец = Свойство2;
			ЗначениеСвойства.Наименование = ПроизводительСтрокой;
			ЗначениеСвойства.Записать();
			ЗначениеСвойства = ЗначениеСвойства.Ссылка;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЗначениеСвойства = Выборка.Ссылка;
		КонецЕсли;
		СтрокаДР = Номенклатура.ДополнительныеРеквизиты.Добавить();
		СтрокаДР.Значение = ЗначениеСвойства;
		СтрокаДР.Свойство = Свойство2;
		СтрокаДР.ТекстоваяСтрока = СокрЛП(Свойство2);
		Если ИспользоватьСинонимыБрендов Тогда
			Структура = Новый Структура("СвойствоБренд", ЗначениеСвойства);
			НайденныеСтроки = СинонимыБрендов.НайтиСтроки(Структура);
			Если НайденныеСтроки.Количество()>0 Тогда
				Если ЗначениеЗаполнено(НайденныеСтроки[0].Префикс) Тогда
					Номенклатура.Артикул = СокрЛП(Лев(НайденныеСтроки[0].Префикс,3))+"-"+Артикул;
				КонецЕсли;
			Иначе
				Номенклатура.Артикул = Лев(СокрЛП(ЗначениеСвойства),3)+"-"+Артикул;
				ЗаписьВЛог("Не найден префикс по синониму бренда, делаем сами: "+Номенклатура.Артикул);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	#КонецОбласти
	Если НеОтключатьРегистрациюНоменклатуры = Ложь Тогда
		Номенклатура.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		//в некоторых конфигурациях и такое есть ЗагрузкаСБитрикс24
	КонецЕсли;
	Если ЗначениеЗаполнено(СвойствоАртикул) Тогда
		НовСтрока = Номенклатура.ДополнительныеРеквизиты.Добавить();
		НовСтрока.Свойство = СвойствоАртикул;
		Если СокрЛП(СвойствоАртикул.ТипЗначения) = "Строка" Тогда
			НовСтрока.Значение = Артикул;
		Иначе
			НовСтрока.Значение = ЗначениеСвойства;
		КонецЕсли;
		НовСтрока.ТекстоваяСтрока = Артикул;
	КонецЕсли;
	Если Лев7 = "id16505" Или id34582 = Истина Тогда
		Номенклатура.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	Попытка
		Номенклатура.ОбособленнаяЗакупкаПродажа = ОбособленнаяЗакупкаПродажа; //в УТ115 может по-другому называться
	Исключение
	КонецПопытки;
	Попытка
		Номенклатура.Записать();
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		сообщить(ТекстСообщения);
		#Если Клиент Тогда
			сообщить("Ошибка создания номенклатуры: "+Артикул+"	"+Производитель);
			сообщить(ТекстСообщения);
		#КонецЕсли
		ЗаписьВЛог(ТекстСообщения);//если контроль по сочетанию реквизитов включен и что-то намудрили, перестаёт обработка работать
		Возврат Неопределено;
	КонецПопытки;
	Если НаименованиеХарактеристики<>"" И Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		НоваяХарактеристика.Владелец = Номенклатура.Ссылка;
		НоваяХарактеристика.Наименование = НаименованиеХарактеристики;
		НоваяХарактеристика.НаименованиеПолное = НаименованиеХарактеристики;
		НоваяХарактеристика.ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
		НоваяХарактеристика.Записать();
	КонецЕсли;
	Если СоздаватьШтрихКодыУНовойНоменклатуры Тогда
		МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.Номенклатура = Номенклатура.Ссылка; 
		Если НЕ ЗначениеЗаполнено(НаборУпаковок) Тогда
			Если ИспользоватьОрдерныеСклады И Спр<>Неопределено Тогда
				МенеджерЗаписи.Упаковка = Спр.Ссылка;//Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
		КонецЕсли;
		МенеджерЗаписи.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13(); 
		МенеджерЗаписи.Записать();
		Если СоздаватьАртикулВШтрихКоде Тогда
			МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.Номенклатура = Номенклатура.Ссылка; 
			Если НЕ ЗначениеЗаполнено(НаборУпаковок) Тогда
				Если ИспользоватьОрдерныеСклады И Спр<>Неопределено Тогда
					МенеджерЗаписи.Упаковка = Спр.Ссылка;//Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
			МенеджерЗаписи.Штрихкод = Артикул; 
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	ТекстСообщения = "Создана номенклатура """+СокрЛП(Номенклатура)+""", артикул "+Артикул+" в производителе """+СокрЛп(Производитель)+""", установите цену: "+Дополнение;
	//сообщить(ТекстСообщения);
	ЗаписьВЛог(ТекстСообщения,-1,Истина);//много лишней информации не нужн
	Если Лев7 = "id16943"  Тогда
		НоменклатураОбъект = Номенклатура.Ссылка.ПолучитьОбъект(); //а то какие-то проблемы с единицами измерения при выгрузке в бухгалтерию
		НоменклатураОбъект.Записать();
		Возврат НоменклатураОбъект.Ссылка;
	Иначе
		Возврат Номенклатура.Ссылка;
	КонецЕсли;
КонецФункции //НайтиДобавитьНоменклатуруПоАртикулу

Функция НайтиЗаявку(НомерПоДаннымКлиента, ДатаПоДаннымКлиента = Неопределено, ПлатежныеДокументы = Ложь, ВариантОбеспеченияСводногоЗаказаСтрокой="", Сводный = Ложь) Экспорт
	Запрос = Новый Запрос;
	//Если СводныйЗаказКлиентаПоСтатусу И НЕ ПлатежныеДокументы Тогда
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	ЗаказКлиента.Ссылка КАК Ссылка
	//	               |ИЗ
	//	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	//	               |ГДЕ
	//	               |	ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	//	               |	И ЗаказКлиента.Дата МЕЖДУ &НачДата И &КонДата
	//	               |	И ЗаказКлиента.ПометкаУдаления = ЛОЖЬ
	//	               |	"+?(ВариантОбеспеченияСводногоЗаказаСтрокой<>"","И ЗаказКлиента.Комментарий ПОДОБНО &ВариантОбеспеченияСводногоЗаказаСтрокой","")+"
	//	               |	"+?(ТолькоСвоиСклады,"И ЗаказКлиента.Склад = &Склад","")+"
	//				   |	"+?(Сводный,"И ЗаказКлиента.Проведен = Истина","");
	//	Запрос.УстановитьПараметр("Склад", Склад);
	//	Запрос.УстановитьПараметр("ВариантОбеспеченияСводногоЗаказаСтрокой", ВариантОбеспеченияСводногоЗаказаСтрокой+"%");
	//	Если ДатаПоДаннымКлиента = Неопределено Тогда
	//		Запрос.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата()));
	//		Запрос.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата())+1);
	//	Иначе
	//		Запрос.УстановитьПараметр("НачДата", НачалоДня(ДатаПоДаннымКлиента));
	//		Если Сводный Тогда
	//			Запрос.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата())+1);
	//		Иначе
	//			Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаПоДаннымКлиента)+1);
	//		КонецЕсли;
	//	КонецЕсли;
	//Иначе
		Если НомерПоДаннымКлиента = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		//Если ДатаПоДаннымКлиента = Неопределено Тогда
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗаказКлиента.Ссылка КАК Ссылка
			               |ИЗ
			               |	Документ.ЗаказКлиента КАК ЗаказКлиента
			               |ГДЕ
			               |	ЗаказКлиента.НомерПоДаннымКлиента = &НомерПоДаннымКлиента
			               |	И ЗаказКлиента.Дата >= &Дата";
			Если ДатаПоДаннымКлиента = Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаказКлиента.Дата >= &Дата", "");
			Иначе
				//Запрос.УстановитьПараметр("Дата", ДатаПоДаннымКлиента-60);//иногда заходят и проводят чуть раньше
				Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаПоДаннымКлиента));//некоторые обработки могут время поменять
			КонецЕсли;
		//Иначе
		//	Запрос.Текст = "ВЫБРАТЬ
		//               |	ЗаказКлиента.Ссылка
		//               |ИЗ
		//               |	Документ.ЗаказКлиента КАК ЗаказКлиента
		//               |ГДЕ
		//               |	ЗаказКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		//               |	И ЗаказКлиента.НомерПоДаннымКлиента = &НомерПоДаннымКлиента
		//               |	И ЗаказКлиента.ДатаПоДаннымКлиента = &ДатаПоДаннымКлиента";
		//	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаПоДаннымКлиента));
		//	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаПоДаннымКлиента));
		//	Запрос.УстановитьПараметр("ДатаПоДаннымКлиента", НачалоДня(ДатаПоДаннымКлиента));
		//КонецЕсли;
		Запрос.УстановитьПараметр("НомерПоДаннымКлиента", Формат(НомерПоДаннымКлиента,"ЧГ=0"));
	//КонецЕсли;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		//сообщить("Не найден заказ "+НомерПоДаннымКлиента+" от "+ДатаПоДаннымКлиента);
		Если НумерацияЗаказовКакВABCP Тогда
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗаказКлиента.Ссылка КАК Ссылка
			               |ИЗ
			               |	Документ.ЗаказКлиента КАК ЗаказКлиента
			               |ГДЕ
			               |	ЗаказКлиента.Номер = &НомерПоДаннымКлиента
			               |	И ЗаказКлиента.Дата >= &Дата";
			Если ДатаПоДаннымКлиента = Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаказКлиента.Дата >= &Дата", "");
			Иначе
				Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаПоДаннымКлиента));//иногда заходят и проводят чуть раньше
			КонецЕсли;
			Запрос.УстановитьПараметр("НомерПоДаннымКлиента", Формат(НомерПоДаннымКлиента,"ЧГ=0"));
		КонецЕсли;
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

Функция НайтиЗаказПоставщику(ДокументОснование, Контрагент) //, НомерПоДаннымПоставщика, ДатаПоДаннымПоставщика, Контрагент)
	Запрос = Новый Запрос;
	//может быть, лучше документ-основание
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗаказПоставщику.Ссылка
	//               |ИЗ
	//               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	//               |ГДЕ
	//               |	ЗаказПоставщику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	//               |	И ЗаказПоставщику.НомерПоДаннымПоставщика = &НомерПоДаннымПоставщика
	//               |	И ЗаказПоставщику.ДатаПоДаннымПоставщика = &ДатаПоДаннымПоставщика
	//               |	И ЗаказПоставщику.Контрагент = &Контрагент";
	//Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаПоДаннымПоставщика));
	//Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаПоДаннымПоставщика));
	//Запрос.УстановитьПараметр("НомерПоДаннымПоставщика", Формат(НомерПоДаннымПоставщика,"ЧГ=0"));
	//Запрос.УстановитьПараметр("ДатаПоДаннымПоставщика", НачалоДня(ДатаПоДаннымПоставщика));
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	СводныйЗаказПоставщикуВДень = Ложь; //в табличной части заказа поставщику нет ссылки на заказ покупателя
	Если СводныйЗаказПоставщикуВДень Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказПоставщику.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		               |ГДЕ
		               |	ЗаказПоставщику.Дата МЕЖДУ &НачДата И &КонДата
		               |	И ЗаказПоставщику.Контрагент = &Контрагент
		               |	И ЗаказПоставщику.ПометкаУдаления = ЛОЖЬ
		               |	И ЗаказПоставщику.Статус <> &Статус";
		Запрос.УстановитьПараметр("НачДата", НачалоДня(ДокументОснование.Дата));
		Запрос.УстановитьПараметр("КонДата", КонецДня(ДокументОснование.Дата)+1);
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказПоставщику.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		               |ГДЕ
		               |	ЗаказПоставщику.ДокументОснование = &ДокументОснование
		               |	И ТИПЗНАЧЕНИЯ(ЗаказПоставщику.ДокументОснование) = ТИП(Документ.ЗаказКлиента)
		               |	И ЗаказПоставщику.Контрагент = &Контрагент
		               |	И ЗаказПоставщику.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

Функция НайтиПоступлениеТоваровУслуг(НомерПоДаннымПоставщика, ДатаПоДаннымПоставщика, Контрагент, ЗаказПоставщику)
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ПоступлениеТоваровУслуг.Ссылка
	//               |ИЗ
	//               |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//               |ГДЕ
	//               |	ПоступлениеТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	//               |	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента
	//               |	И ПоступлениеТоваровУслуг.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	//               |	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент";
	//Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаВходящегоДокумента));
	//Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаВходящегоДокумента));
	//Запрос.УстановитьПараметр("НомерПоДаннымПоставщика", Формат(НомерВходящегоДокумента,"ЧГ=0"));
	//Запрос.УстановитьПараметр("ДатаПоДаннымПоставщика", НачалоДня(ДатаВходящегоДокумента));
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	               |ГДЕ
	               |	ПоступлениеТоваров.ЗаказПоставщику = &ЗаказПоставщику";
	//!!! УТ114
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;//!!! может быть несколько поступлений?
	КонецЕсли;
КонецФункции

Функция НайтиРеализациюПоПоступлению(НомерПоДаннымПоставщика, ДатаПоДаннымПоставщика, Контрагент, ПоступлениеТоваровУслуг)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.ЗаказКлиента = &ПоступлениеТоваровУслуг";
	Запрос.УстановитьПараметр("ПоступлениеТоваровУслуг", ПоступлениеТоваровУслуг);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;//!!! может быть несколько поступлений?
	КонецЕсли;
КонецФункции

Функция НайтиРеализацию(ЗаказКлиента)
	сообщить("Используйте НайтиРеализациюПоЗаказуКлиента");
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//               |	РеализацияТоваровУслуг.Ссылка
	//               |ИЗ
	//               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//               |ГДЕ
	//               |	РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
	//               |	И РеализацияТоваровУслуг.Проведен = Истина";
	//Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	//Результат = Запрос.Выполнить();
	//Если Результат.Пустой() Тогда
	//	Возврат Документы.РеализацияТоваров.ПустаяСсылка();	
	//КонецЕсли;
	//Выборка = Результат.Выбрать();
	//Выборка.Следующий();
	//Возврат Выборка.Ссылка;
	//а если больше одной реализации?
КонецФункции

Функция НайтиРеализациюПоЗаказуКлиента(ЗаказКлиента)
	Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РеализацияТоваровУслугТовары.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();	
	КонецЕсли;
	СписокРеализаций = Новый СписокЗначений;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокРеализаций.Добавить(Выборка.Ссылка);
	КонецЦикла;
	//а если больше одной реализации?
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	               |	РеализацияТоваровУслугТовары.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента В(&Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслугТовары.Номенклатура,
	               |	РеализацияТоваровУслугТовары.Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СписокРеализаций);
	Результат = Запрос.Выполнить();
	ТаблицаТоваровРеализации = Новый ТаблицаЗначений;
	ТаблицаТоваровРеализации = Результат.Выгрузить();
	//Если ЗаказКлиента.НомерПоДаннымКлиента = "8916722" Тогда
	//	сообщить(ТаблицаТоваровРеализации.Количество());
	//КонецЕсли;	
	//сообщить(ЗаказКлиента.НомерПоДаннымКлиента);
	//сообщить(СписокРеализаций[0].Значение);
	Возврат СписокРеализаций[0].Значение;//чтобы не ломать логику, возвращаем первый документ
КонецФункции

Функция НайтиРасходныйОрдерНаТовары(РеализацияТоваровУслуг)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерНаТовары.Ссылка
	               |ИЗ
	               |	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	               |ГДЕ
	               |	РасходныйОрдерНаТовары.ДокументОснование.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", РеализацияТоваровУслуг);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Документы.РасходныйОрдерНаТовары.ПустаяСсылка();	
	КонецЕсли;
	СписокОрдеров = Новый СписокЗначений;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОрдеров.Добавить(Выборка.Ссылка);
	КонецЦикла;
	//а если больше одной реализации?
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерНаТоварыТовары.Номенклатура,
	               |	СУММА(РасходныйОрдерНаТоварыТовары.Количество) КАК Количество
	               |ИЗ
	               |	Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	               |ГДЕ
	               |	РасходныйОрдерНаТоварыТовары.Ссылка.ДокументОснование В(&Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходныйОрдерНаТоварыТовары.Номенклатура";
	Запрос.УстановитьПараметр("Ссылка", СписокОрдеров);
	Результат = Запрос.Выполнить();
	ТаблицаТоваровРасходногоОрдера = Новый ТаблицаЗначений;
	ТаблицаТоваровРасходногоОрдера = Результат.Выгрузить();
	//Если РеализацияТоваровУслуг.Номер = "***" Тогда
	//	сообщить(ТаблицаТоваровРасходногоОрдера.Количество());
	//КонецЕсли;	
	Возврат СписокОрдеров[0].Значение;//чтобы не ломать логику, возвращаем первый документ
КонецФункции

Функция НайтиПриходныйКассовыйОрдер(ЗаказКлиента)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Заказ
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	               |ГДЕ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Заказ.Товары.ЗаказКлиента = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Результат = Запрос.Выполнить();
	//должно быть право "Чтение ордеров на товары"
	Если Результат.Пустой() Тогда
		Возврат Документы.ПриходныйКассовыйОрдер.ПустаяСсылка();	
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции

Функция ЗаявкаНеИзменена(ДокСсылка, ДатаОбновления)
	Если ЗначениеЗаполнено(ФильтрПоЗаявке) Тогда //если мы загружаем одну заявку (для отладки), будем считать, что она всегда изменена
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеСведения.Значение КАК Значение,
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ЗаказКлиента).Проведен КАК Проведен
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект = &Объект
		|	И ДополнительныеСведения.Свойство = &Свойство";//ДополнительныеСведения.Объект ССЫЛКА Документ.ЗаказКлиента
	
	Запрос.УстановитьПараметр("Объект", ДокСсылка);
	Запрос.УстановитьПараметр("Свойство", dateUpdated);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НеПроводитьДокументы = Ложь И НЕ (Выборка.Проведен) Тогда
			Попытка
				Об = ДокСсылка.ПолучитьОбъект();
				Об.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если Выборка.Значение>=ДатаОбновления Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолучитьЦенуНоменклатуры(Номенклатура, НаДату)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Цена;
	КонецЦикла;
	
	Возврат 0;
КонецФункции

// Возможные статусы указания серий: 
// 0 - серии указывать не требуется (нет картинки) 
// первый указанный статус - количество по сериям не совпадает с количеством товаров или серии не указаны (красная картинка) 
// второй указанный статус - количество по сериям совпадает с количеством товаров (зеленая картинка) 
// третий указанный статус - серии не указаны, их можно указывать, а можно и не указывать (синяя картинка) 
// 1,2,21 - серии указываются справочно 
// 3,4,23 - по сериям учитываются остатки, серии указываются по факту отбора 
// 5,6,25 - по сериям учитываются остатки, серии указываются при планировании отбора, 
// заполняются по FEFO (используются только в документах отгрузки товаров) 
// 7,8,27 - по сериям учитываются остатки, серии указываются при планировании отбора 
// 9,10,11 - по сериям учитываются остатки, серии указываются при планировании отгрузки, 
// по сериям формируются движения по регистру СвободныеОстатки (как при приходе, так и при расходе) 
// 13,14,15 - по сериям учитывается себестоимость 

// 1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно) 
// 3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям) 
// 5 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям, серии заполняются по FEFO) 
// 7 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отбора) 
// 9 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отгрузки) 
// 13 - количество по сериям не совпадает с количеством товаров или серия не указана (учет себестоимости по сериям) 
// то выдается ошибка

Функция НайтиДобавитьСериюНоменклатуры(СтрокаТовара) Экспорт
	СправочникОбъект = Справочники.СерииНоменклатуры.СоздатьЭлемент();
	СправочникОбъект.ВидНоменклатуры = ВидНоменклатуры;
	СправочникОбъект.Номер = Формат(СтрокаТовара.ИдентификаторНоменклатуры,"ЧГ=0");
	//СправочникОбъект.ГоденДо =;
	СправочникОбъект.НомерКИЗГИСМ = СправочникОбъект.Номер;
	СправочникОбъект.Записать();
	Возврат СправочникОбъект.Ссылка;
КонецФункции

Функция ПолучитьХарактеристикуНоменклатуры(Владелец) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	СправочникОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	СправочникОбъект.Владелец = Владелец;
	СправочникОбъект.ВидНоменклатуры = ВидНоменклатуры;
	СправочникОбъект.Наименование = НаименованиеХарактеристики;
	СправочникОбъект.Записать();
	Возврат СправочникОбъект.Ссылка;

КонецФункции

Функция ПолучитьСоглашениеСКлиентом(Контрагент, ДокОбъект = Неопределено, ОрганизацияДляСоглашения = Неопределено) Экспорт
	Если СоглашениеПоСегменту Тогда //смотрим, какой у партнера сегмент, потом определяем, у какого типового соглашения этот сегмент
		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СегментыПартнеровПартнерыПоСегменту.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СегментыПартнеров.ПартнерыПоСегменту КАК СегментыПартнеровПартнерыПоСегменту
			|ГДЕ
			|	СегментыПартнеровПартнерыПоСегменту.Партнер = &Партнер";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Партнер", Контрагент.Партнер);	
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			МассивСегментов = Новый Массив;
			Пока Выборка.Следующий() Цикл
				МассивСегментов.Добавить(Выборка.Ссылка);
				Если Отладка Тогда
					ЗаписьВЛог("По контрагенту "+Контрагент+" найден сегмент "+Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СоглашенияСКлиентами.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
			|ГДЕ
			|	СоглашенияСКлиентами.Типовое = ИСТИНА
			|	И СоглашенияСКлиентами.СегментПартнеров В(&СегментПартнеров)";
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("СегментПартнеров", МассивСегментов);	
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				Если Отладка Тогда
					ЗаписьВЛог("По сегменту контрагента "+Контрагент+" найдено соглашение "+Выборка.Ссылка);
				КонецЕсли;
				Возврат Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Если Отладка И ФильтрПоЗаявке>0 Тогда
				ЗаписьВЛог("По контрагенту "+Контрагент+" не найден сегмент");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СоглашенияСКлиентами.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	НЕ СоглашенияСКлиентами.ПометкаУдаления
		|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|	И НЕ СоглашенияСКлиентами.Типовое
		|	И СоглашенияСКлиентами.Контрагент = &Контрагент
		|	И СоглашенияСКлиентами.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	СоглашенияСКлиентами.Номер";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Если ОрганизацияДляСоглашения <> Неопределено Тогда
		Запрос.УстановитьПараметр("Организация", ОрганизацияДляСоглашения);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СоглашенияСКлиентами.Организация = &Организация", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Если Отладка И ФильтрПоЗаявке>0 Тогда
	//		ЗаписьВЛог("По контрагенту "+Контрагент+" не найдено соглашение", , Истина);
	//	КонецЕсли;
	//КонецЕсли;	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Если ДокОбъект = Неопределено Тогда
		Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;
	Если СоздаватьИндивидуальныеСоглашения Тогда
		НовоеСоглашение = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
		НовоеСоглашение.Наименование = "Основное";
		НовоеСоглашение.Валюта = Валюта;
		Если НЕ УТКазахстан И НЕ УТ111 Тогда
			НовоеСоглашение.ВалютаВзаиморасчетов = Валюта;
		КонецЕсли;
		Если ЦеныПродажиВРублях Тогда//соглашение
			НовоеСоглашение.Валюта = Рубли;
		КонецЕсли;
		НовоеСоглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		НовоеСоглашение.ПорядокРасчетов = ПорядокРасчетов;
		НовоеСоглашение.Контрагент = ДокОбъект.Контрагент;
		НовоеСоглашение.Партнер = ДокОбъект.Партнер;
		НовоеСоглашение.Организация = ОрганизацияДляСоглашения;
		Если Не ЗначениеЗаполнено(ОрганизацияДляСоглашения) Тогда
			Если НовоеСоглашение.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				НовоеСоглашение.Организация = ОрганизацияРозница;
			Иначе
				НовоеСоглашение.Организация = Организация;
			КонецЕсли;
		КонецЕсли;
		Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		Иначе
			НовоеСоглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
		НовоеСоглашение.ЗаполнитьУсловияПродажПоУмолчанию();
		НовоеСоглашение.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
		НовоеСоглашение.ЦенаВключаетНДС = ЦенаВключаетНДСПриПродаже;
		НовоеСоглашение.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
		НовоеСоглашение.Комментарий = "авт.создано "+ТекущаяДата()+", по "+ДокОбъект;//.НомерВходящегоДокумента;
		НовоеСоглашение.Записать();
		Возврат НовоеСоглашение.Ссылка;
	КонецЕсли;
	Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();
КонецФункции

Функция ПолучитьСоглашениеСПоставщиком(Контрагент, СоздаватьСоглашение = Ложь, ОрганизацияДляСоглашения = Неопределено, СкладДляСоглашения = Неопределено) Экспорт
	Если Отладка И ФильтрПоЗаявке>0 Тогда
		сообщить("Контрагент = "+Контрагент+", ОрганизацияДляСоглашения = "+ОрганизацияДляСоглашения+", СкладДляСоглашения = "+СкладДляСоглашения);
	КонецЕсли;
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СоглашенияСПоставщиками.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|ГДЕ
		|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
		|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
		|	И СоглашенияСПоставщиками.Контрагент = &Контрагент
		|	И СоглашенияСПоставщиками.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	СоглашенияСПоставщиками.Номер";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Если ОрганизацияДляСоглашения <> Неопределено И ЗначениеЗаполнено(ОрганизацияДляСоглашения) Тогда
		Запрос.УстановитьПараметр("Организация", ОрганизацияДляСоглашения);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СоглашенияСПоставщиками.Организация = &Организация", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Если НЕ СоздаватьСоглашение Тогда
		Возврат Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
	КонецЕсли;
	НовоеСоглашение = Справочники.СоглашенияСПоставщиками.СоздатьЭлемент();//СоглашенияСПоставщиками
	//ИнициализироватьСправочник не экспортный метод, дублируем
	НовоеСоглашение.Менеджер = Пользователи.ТекущийПользователь();
	НовоеСоглашение.Статус = Перечисления.СтатусыСоглашенийСПоставщиками.Действует;
	НовоеСоглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	НовоеСоглашение.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
	Если ВерсияУТ <> "3.2.3.18" И НЕ УТ111 Тогда
		НовоеСоглашение.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	Если ЦеныЗакупкиВРублях Тогда//соглашение с поставщиком
		НовоеСоглашение.Валюта = Рубли;
	КонецЕсли;
	НовоеСоглашение.Организация = ОрганизацияДляСоглашения;
	Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") <> Неопределено И Метаданные.Справочники.СоглашенияСПоставщиками.Реквизиты.Найти("ВариантПриемкиТоваров") <> Неопределено Тогда
		НовоеСоглашение.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОрганизацияДляСоглашения) Тогда
		//НовоеСоглашение.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		Если НовоеСоглашение.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			НовоеСоглашение.Организация = ОрганизацияРозница;
		Иначе
			НовоеСоглашение.Организация = Организация;
		КонецЕсли;
	КонецЕсли;
	Если СкладДляСоглашения = Неопределено Тогда
		НовоеСоглашение.Склад = Склад;//ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	Иначе
		НовоеСоглашение.Склад = СкладДляСоглашения;
	КонецЕсли;
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
	Иначе
		НовоеСоглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;
	НовоеСоглашение.ЦенаВключаетНДС = ЦенаВключаетНДСПриПокупке;
	Если УТ114 Тогда
		НовоеСоглашение.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(НовоеСоглашение.ПорядокОплаты, НовоеСоглашение.ХозяйственнаяОперация);
	КонецЕсли;
	Если УТ113 Тогда
		НовоеСоглашение.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(НовоеСоглашение.ПорядокОплаты);
	КонецЕсли;
	Если УТ111 Тогда
		ИспользоватьДоговорыСПоставщиками = Ложь;
	Иначе
		ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	КонецЕсли;
	Если Не ИспользоватьДоговорыСПоставщиками Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
			ИЛИ НовоеСоглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			НовоеСоглашение.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		Иначе
			НовоеСоглашение.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
		КонецЕсли;
	Иначе
		НовоеСоглашение.ИспользуютсяДоговорыКонтрагентов = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПорядокРасчетовЗаказПоставщику) Тогда
		НовоеСоглашение.ПорядокРасчетов = ПорядокРасчетовЗаказПоставщику;
	КонецЕсли;
	НовоеСоглашение.Наименование = "Поставки";
	//НовоеСоглашение.Номер = "";
	НовоеСоглашение.Дата = ТекущаяДата();
	НовоеСоглашение.ДатаНачалаДействия = НовоеСоглашение.Дата;
	НовоеСоглашение.Контрагент = Контрагент.Ссылка;
	НовоеСоглашение.Партнер = Контрагент.Партнер;
	НовоеСоглашение.Комментарий = "(ПолучитьСоглашениеСПоставщиком) авт. создан при обмене с ABCP "+ТекущаяДата();
	НовоеСоглашение.Записать();
	Возврат НовоеСоглашение.Ссылка;
КонецФункции

Процедура ЗаполнитьПоСоглашениюСКлиентом(Знач ДокОбъект, ЗаполнятьРуководителя = Ложь) Экспорт
	Если ЗаполнятьРуководителя Тогда
		СтруктураОтветственныхЛиц = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(ДокОбъект.Организация, ДокОбъект.Дата);
		ДокОбъект.Руководитель = СтруктураОтветственныхЛиц.РуководительСсылка;
		ДокОбъект.ГлавныйБухгалтер = СтруктураОтветственныхЛиц.ГлавныйБухгалтерСсылка;
	КонецЕсли;

	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
		Соглашение = ДокОбъект.Соглашение;
		Если ЗначениеЗаполнено(Соглашение.ВалютаВзаиморасчетов) Тогда //соглашение важнее валюты поставщика
			ДокОбъект.Валюта = Соглашение.ВалютаВзаиморасчетов;
		КонецЕсли;
		ДокОбъект.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;
		Если ЗначениеЗаполнено(Соглашение.Менеджер) Тогда
			ДокОбъект.Менеджер = Соглашение.Менеджер;
		КонецЕсли;
		Если ЗначениеЗаполнено(Соглашение.ВидЦен) Тогда
			ВидЦены = Соглашение.ВидЦен;//чтобы в документе ставился вид цены из соглашения
		КонецЕсли;
		Если ЗначениеЗаполнено(Соглашение.ФормаОплаты) Тогда
			ДокОбъект.ФормаОплаты = Соглашение.ФормаОплаты;
		КонецЕсли;
		Если НЕ Соглашение.ИспользуютсяДоговорыКонтрагентов Тогда //если используются, то соглашение надо брать из договора
			Если ЗначениеЗаполнено(Соглашение.ПорядокРасчетов) Тогда
				ДокОбъект.ПорядокРасчетов = Соглашение.ПорядокРасчетов;
			КонецЕсли;
		КонецЕсли;
		Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		Иначе
			Если Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.Найти("ПорядокОплаты")<>Неопределено Тогда
				Попытка
					Если ЗначениеЗаполнено(Соглашение.ПорядокОплаты) Тогда
						ДокОбъект.ПорядокОплаты = Соглашение.ПорядокОплаты;
					КонецЕсли;
				Исключение
					ЗаписьВЛог("из соглашения не заполнен порядок оплаты: "+ДокОбъект);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		Если Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.Найти("ХозяйственнаяОперация")<>Неопределено Тогда
			Попытка
				Если ЗначениеЗаполнено(Соглашение.ХозяйственнаяОперация) Тогда
					ДокОбъект.ХозяйственнаяОперация = Соглашение.ХозяйственнаяОперация;
				КонецЕсли;
			Исключение
				ЗаписьВЛог("из соглашения не заполнена хозяйственная операция: "+ДокОбъект);
			КонецПопытки;
		КонецЕсли;
		Если НЕ УТ111 И ЗначениеЗаполнено(Соглашение.НаправлениеДеятельности) Тогда
			ДокОбъект.НаправлениеДеятельности = Соглашение.НаправлениеДеятельности;
		КонецЕсли;
		Если ЗаполнятьОрганизациюПоСоглашению Тогда
			Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Организация) Тогда
				ДокОбъект.Организация = ДокОбъект.Соглашение.Организация;
			КонецЕсли;
			ДокОбъект.ЦенаВключаетНДС = ДокОбъект.Соглашение.ЦенаВключаетНДС;
		КонецЕсли;
		Если ЗаполнятьСкладПоСоглашению Тогда
			Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Склад) Тогда
				ДокОбъект.Склад = ДокОбъект.Соглашение.Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоСоглашениюСПоставщиком(Знач ДокОбъект, ЗаполнятьСтатьяДвиженияДенежныхСредств = Ложь, ДокументВозврат = Ложь)
	Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
		ЕстьФормаОплаты = Истина;
		Если ДокументВозврат И Метаданные.Документы.ВозвратТоваровПоставщику.Реквизиты.Найти("ФормаОплаты") <> Неопределено Тогда
			ЕстьФормаОплаты = Истина;
		Иначе
			ЕстьФормаОплаты = Ложь;
		КонецЕсли;
		ЕстьПорядокРасчетов = Истина;
		Если ДокументВозврат И Метаданные.Документы.ВозвратТоваровПоставщику.Реквизиты.Найти("ПорядокРасчетов") <> Неопределено Тогда
			ЕстьПорядокРасчетов = Истина;
		Иначе
			ЕстьПорядокРасчетов = Ложь;
		КонецЕсли;
		Соглашение = ДокОбъект.Соглашение;
		Если Метаданные.Константы.Найти("ВариантПриемкиТоваров") <> Неопределено Тогда
			ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
			Если Не ЗначениеЗаполнено(Соглашение.ВариантПриемкиТоваров) Тогда
				Об = Соглашение.ПолучитьОбъект();
				Об.ВариантПриемкиТоваров = ВариантПриемкиТоваров;
				Об.Записать();
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;
		Если ЗначениеЗаполнено(Соглашение.Менеджер) Тогда
			ДокОбъект.Менеджер = Соглашение.Менеджер;
		КонецЕсли;
		Если ЗначениеЗаполнено(Соглашение.ФормаОплаты) И ЕстьФормаОплаты Тогда
			ДокОбъект.ФормаОплаты = Соглашение.ФормаОплаты;
		КонецЕсли;
		Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		Иначе
			Если ЗначениеЗаполнено(Соглашение.ПорядокОплаты) И НЕ УТКазахстан Тогда
				ДокОбъект.ПорядокОплаты = Соглашение.ПорядокОплаты;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьПорядокРасчетов И ЗначениеЗаполнено(Соглашение.ПорядокРасчетов) И НЕ УТКазахстан Тогда
			ДокОбъект.ПорядокРасчетов = Соглашение.ПорядокРасчетов;
		КонецЕсли;
		Если НЕ УТ111 И ЗначениеЗаполнено(Соглашение.НаправлениеДеятельности) Тогда
			ДокОбъект.НаправлениеДеятельности = Соглашение.НаправлениеДеятельности;
		КонецЕсли;
		Если ЗаполнятьСтатьяДвиженияДенежныхСредств И ЗначениеЗаполнено(Соглашение.СтатьяДвиженияДенежныхСредств) Тогда
			ДокОбъект.СтатьяДвиженияДенежныхСредств = Соглашение.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		Если ТипЗнч(ДокОбъект)<>Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
			ДокОбъект.РегистрироватьЦеныПоставщика = Соглашение.РегистрироватьЦеныПоставщика;
		КонецЕсли;
		ДокОбъект.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;
	КонецЕсли;
КонецПроцедуры

Функция ЗаполнитьВесВариантаОбеспечения()
	Соответствие = Новый Соответствие;
	//Соответствие.Вставить(Перечисления.ВариантыОбеспечения.НеТребуется, 1); //1 Не обеспечивать
	Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
		Соответствие.Вставить(Перечисления.ВариантыОбеспечения.Требуется, 2); //2 К обеспечению
	ИначеЕсли Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("УдалитьТребуется")<> Неопределено Тогда
		Соответствие.Вставить(Перечисления.ВариантыОбеспечения.УдалитьТребуется, 2); //2 К обеспечению
	КонецЕсли;
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
	Иначе
		Соответствие.Вставить(Перечисления.ВариантыОбеспечения.Обособленно, 3); //3 Обеспечивать обособленно
		Соответствие.Вставить(Перечисления.ВариантыОбеспечения.ИзЗаказов, 5); //5 Резервировать к дате
		Соответствие.Вставить(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно, 6); //6 Отгрузить обособленно
	КонецЕсли;
	Соответствие.Вставить(Перечисления.ВариантыОбеспечения.СоСклада, 4); //4 Резервировать на складе
	Соответствие.Вставить(Перечисления.ВариантыОбеспечения.Отгрузить, 7); //7 Отгрузить
	Соответствие.Вставить(Перечисления.ВариантыОбеспечения.НеТребуется, 8); //8 Это отмена
	Соответствие.Вставить(Неопределено,0);
	Соответствие.Вставить(Перечисления.ВариантыОбеспечения.ПустаяСсылка(),0);
	Возврат Соответствие;
КонецФункции

Функция ПолучитьТаблицуТоваровЗаказа(ДокСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.КодСтроки КАК КодСтроки,
		|	ЗаказКлиентаТовары.Цена КАК Цена,
		|	ЗаказКлиентаТовары.Количество КАК Количество,
		|	ЗаказКлиентаТовары.Номенклатура.Артикул КАК Артикул
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Возврат РезультатЗапроса.Выгрузить();	
КонецФункции

Функция ПолучитьТаблицуТоваровЗаказаПоставщику(ДокСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.КодСтроки КАК КодСтроки,
		|	ЗаказПоставщикуТовары.Цена КАК Цена,
		|	ЗаказПоставщикуТовары.Количество КАК Количество,
		|	ЗаказПоставщикуТовары.Номенклатура.Артикул КАК Артикул
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Возврат РезультатЗапроса.Выгрузить();	
КонецФункции

//из модуля "Доставка товаров"
Функция АдресаПолучателяИзКонтактнойИнформации(ПолучательОтправитель)
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК АдресДоставки,
		|	КонтактнаяИнформация.Вид.Представление КАК Вид,
		|	КонтактнаяИнформация.ЗначенияПолей КАК АдресДоставкиЗначенияПолей,
		|	&ЗонаДоставки КАК ЗонаДоставки
		|ИЗ
		|	&СправочникПолучательОтправительКонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &ПолучательОтправитель
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
	Запрос.УстановитьПараметр("ПолучательОтправитель", ПолучательОтправитель);
	Запрос.УстановитьПараметр("ЗонаДоставки", Справочники.ЗоныДоставки.ПустаяСсылка());
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СправочникПолучательОтправительКонтактнаяИнформация", "Справочник." + ПолучательОтправитель.Метаданные().Имя + ".КонтактнаяИнформация");
		Если ТипЗнч(ПолучательОтправитель) = Тип("СправочникСсылка.Партнеры") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗонаДоставки", "КонтактнаяИнформация.Ссылка.ЗонаДоставки");
		КонецЕсли;
	КонецЕсли;
	Попытка
		Результат = Запрос.Выполнить();
	Исключение
		Если Отладка Тогда
			сообщить(ОписаниеОшибки());
			сообщить(Запрос.Текст);
		КонецЕсли;
		ЗАписьВЛог("Не удалось получить адрес из контактной информации: "+ПолучательОтправитель,,Истина);
		Возврат Неопределено;
	КонецПопытки;
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат.Выгрузить();
КонецФункции

Процедура СоздатьЗаказыКлиентов(Тест = Ложь, СтрокаСтатусаДляКонтроля = "")
	Лев5 = Лев(АдресСервиса, 5);
	Лев6 = Лев(АдресСервиса, 6);
	Лев7 = Лев(АдресСервиса, 7);
	Если Лев7 = "id14833" Тогда id14833 = Истина; Иначе id14833 = Ложь;	КонецЕсли;
	Если Лев7 = "id15051" Тогда	id15051 = Истина; Иначе id15051 = Ложь; КонецЕсли;
	Если Лев5 = "mrcar" Тогда mrcar = Истина; Иначе mrcar = Ложь; КонецЕсли;
	Если Лев6 = "id6019" И Метаданные.Документы.ЗаказКлиента.Реквизиты.Найти("ДокументБезСкидки")<>Неопределено Тогда id6019 = Истина; Иначе id6019 = Ложь; КонецЕсли;
	Если Лев7 = "id26207"  Тогда id26207 = Истина; Иначе id26207 = Ложь; КонецЕсли;
	Если Лев7 = "id14544"  Тогда id14544 = Истина; Иначе id14544 = Ложь; КонецЕсли;
	Если Лев7 = "id14985"  Тогда id14985 = Истина; Иначе id14985 = Ложь; КонецЕсли;
	Если Лев7 = "id36235"  Тогда id36235 = Истина; Иначе id36235 = Ложь; КонецЕсли;
	Если Лев7 = "id41032"  Тогда id41032 = Истина; Иначе id41032 = Ложь; КонецЕсли;
	Если Лев7 = "id19225"  Тогда id19225 = Истина; Иначе id19225 = Ложь; КонецЕсли;
	Если Лев7 = "id17496"  Тогда id17496 = Истина; Иначе id17496 = Ложь; КонецЕсли;
	
	Если Лев(АдресСервиса, 9) = "abcp44546"  Тогда id44546 = Истина; Иначе id44546 = Ложь; КонецЕсли;
	
	ЕстьУчетЗамен = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.Найти("УчетЗамен_АртикулВЗаказе") <> Неопределено;
	ЕстьЦенаЗакупа = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.Найти("ЦенаЗакупа") <> Неопределено;
	ЕстьПоставщик = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.Найти("Поставщик") <> Неопределено;
	ЕстьПользовательВТабличнойЧасти = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.Найти("Пользователь") <> Неопределено;
	ЕстьProKod_СрокПоставки = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.Найти("ProKod_СрокПоставки") <> Неопределено;
	ЕстьСтатусИмя = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.Найти("СтатусИмя") <> Неопределено;
	ЕстьID = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.Найти("ID") <> Неопределено;
	ЕстьКолонкаОбособленно = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.Найти("Обособленно") <> Неопределено;
	
	СтруктураОтветственныхЛиц = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация, ТекущаяДата());//лучше вынести за цикл в самом начале, так как мало организаций, не надо каждый раз получать
	СтруктураОтветственныхЛицРозница = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(ОрганизацияРозница, ТекущаяДата());
	
	ПриоритетВысокий = Справочники.Приоритеты.НайтиПоНаименованию("Высокий");
	ПриоритетСредний = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	Попытка
		ИспользоватьГрафикиОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	Исключение
		ИспользоватьГрафикиОплаты = Ложь;
	КонецПопытки;
	СоответствиеВесВариантаОбеспечения = ЗаполнитьВесВариантаОбеспечения();
	//Если НЕ id14544 И Метаданные.РегистрыСведений.Найти("АналогиНоменклатуры") <> Неопределено Тогда
	//	ЕстьАналогиНоменклатуры = Истина;
	//Иначе
	//	ЕстьАналогиНоменклатуры = Ложь;
	//КонецЕсли;
	Если Метаданные.Справочники.Найти("СтатусыABCP") <> Неопределено Тогда
		ЕстьСправочникСтатусыABCP = Истина;
	Иначе
		ЕстьСправочникСтатусыABCP = Ложь;
	КонецЕсли;
	
	Если ТипыПлатежей.Количество() = 0 Тогда
		ЗаполнятьПоТипамПлатежей = Ложь;
	Иначе
		ЗаполнятьПоТипамПлатежей = Истина;
		//во время загрузки заявок ужде установили
		//СоответствиеОрганизацииПоТипуПлатежа = Новый Соответствие;
		СоответствиеСкладаПоТипуПлатежа = Новый Соответствие;
		Для Каждого ТекСтрока Из ТипыПлатежей Цикл
			Если ТекСтрока.id > 0 Тогда
				//Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				//	СоответствиеОрганизацииПоТипуПлатежа.Вставить(ТекСтрока.id, ТекСтрока.Организация);
				//КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
					СоответствиеСкладаПоТипуПлатежа.Вставить(ТекСтрока.id, ТекСтрока.Склад);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	МассивЗаказовДляПерепроведения = Новый Массив;

	//СтатусыABCPЗаказа = Новый ТаблицаЗначений;
	//СтатусыABCPЗаказа.Колонки.Добавить("НС", Новый ОписаниеТипов("Число"));
	//СтатусыABCPЗаказа.Колонки.Добавить("КодСтатуса", Новый ОписаниеТипов("Число"));
	//СтатусыABCPЗаказа.Колонки.Добавить("НаименованиеСтатуса", Новый ОписаниеТипов("Строка"));
	//СтатусыABCPЗаказа.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//СтатусыABCPЗаказа.Колонки.Добавить("ИдентификаторНоменклатуры", Новый ОписаниеТипов("Число"));
	//СтатусыABCPЗаказа.Колонки.Добавить("distributorId", Новый ОписаниеТипов("Число"));
	//СтатусыABCPЗаказа.Колонки.Добавить("distributorName", Новый ОписаниеТипов("Строка"));
	//СтатусыABCPЗаказа.Колонки.Добавить("distributorOrderId", Новый ОписаниеТипов("Число"));
	//СтатусыABCPЗаказа.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));//есть одинаковые позиции с разными статусами
	//СтатусыABCPЗаказа.Колонки.Добавить("routeId", Новый ОписаниеТипов("Число"));//Идентификатор маршрута склада с которого производится заказ.
	//СтатусыABCPЗаказа.Колонки.Добавить("supplierCode", Новый ОписаниеТипов("Число"));//Код поставки. Параметр из результатов search/article. Необходимо указывать при добавлении в заказ товаров от online-поставщиков для возможности дальнейшего перезаказа на сайте поставщика из ПУ.
	//СтатусыABCPЗаказа.Колонки.Добавить("deadline", Новый ОписаниеТипов("Число"));//Срок поставки в часах
	//СтатусыABCPЗаказа.Колонки.Добавить("deadlineMax", Новый ОписаниеТипов("Число"));//Гарантированный срок поставки в часах
	
	СоответствиеКодСледующегоСтатуса = Новый Соответствие;//чтобы у позиций можно было следующий статус выбирать, если он есть
	СоответствиеВариантОбеспечения = Новый Соответствие;//чтобы у позиций можно было вариант обеспечения устанавливать, если он есть
	СоответствиеСводныйЗаказКлиентаПоСтатусу = Новый Соответствие;//чтобы у позиций можно было сводный заказ делать, если он есть
	СоответствиеСтатусЗаказа = Новый Соответствие;//чтобы можно было выбрать статус всего заказа
	СоответствиеПриоритет = Новый Соответствие;//чтобы можно было выбрать статус всего заказа
	МассивСтатусовОтменено = Новый Массив;
	//МассивСтатусовСозданияЗаказа = Новый Массив; - массив отгружаемых статусов уже заполнен
	СоответствиеПричиныОтменыСтатусу = Новый Соответствие;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если СтрокаСтатуса.Отмена Тогда
			МассивСтатусовОтменено.Вставить(СтрокаСтатуса.КодСтатуса);
		КонецЕсли;
		СоответствиеСводныйЗаказКлиентаПоСтатусу.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.СводныйЗаказКлиентаПоСтатусу);
		Если ЗначениеЗаполнено(СтрокаСтатуса.КодСледующегоСтатуса) Тогда
			СоответствиеКодСледующегоСтатуса.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.КодСледующегоСтатуса);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаСтатуса.ПричинаОтмены) Тогда
			СоответствиеПричиныОтменыСтатусу.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.ПричинаОтмены);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаСтатуса.СтатусЗаказа) Тогда
			СоответствиеСтатусЗаказа.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.СтатусЗаказа);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаСтатуса.Приоритет) Тогда
			СоответствиеПриоритет.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.Приоритет);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСтатуса.ВариантОбеспечения) Тогда
			СоответствиеВариантОбеспечения.Вставить(СтрокаСтатуса.КодСтатуса, СтрокаСтатуса.ВариантОбеспечения);
		Иначе
			Если СтрокаСтатуса.КодСтатуса = КодСтатусаОтказ Или СтрокаСтатуса.Отмена Тогда
				СоответствиеВариантОбеспечения.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.НеТребуется);
			Иначе
				Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
					СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.Требуется);
				ИначеЕсли Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("УдалитьТребуется")<> Неопределено Тогда
					СоответствиеВариантыОбеспеченияПоСтатусам.Вставить(СтрокаСтатуса.КодСтатуса, Перечисления.ВариантыОбеспечения.УдалитьТребуется);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	ЗапросОстатков = Новый Запрос;
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		ЗапросОстатков.Текст = "ВЫБРАТЬ
		                       |	РаспределениеЗапасов.Номенклатура КАК Ссылка,
		                       |	СУММА(РаспределениеЗапасов.ВНаличии) - СУММА(РаспределениеЗапасов.Резерв) КАК Наличие,
		                       |	СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
		                       |	СУММА(РаспределениеЗапасов.Свободно) КАК Свободно,
		                       |	СУММА(РаспределениеЗапасов.Резерв) КАК Резерв
		                       |ИЗ
		                       |	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		                       |ГДЕ
		                       |	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		                       |	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		                       |	И РаспределениеЗапасов.Склад = &Склад
		                       |	И РаспределениеЗапасов.Номенклатура В(&Номенклатура)
		                       |
		                       |СГРУППИРОВАТЬ ПО
		                       |	РаспределениеЗапасов.Номенклатура";
	Иначе
		ЗапросОстатков.Текст = "ВЫБРАТЬ
		               |	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
		               |	СвободныеОстаткиОстатки.ВНаличииОстаток КАК Наличие
		               |ИЗ
		               |	РегистрНакопления.СвободныеОстатки.Остатки(
		               |			&НаДату,
		               |			Склад = &Склад
		               |				И Номенклатура В (&Номенклатура)) КАК СвободныеОстаткиОстатки";
	КонецЕсли;
	Если СтрокаСтатусаДляКонтроля = "" Тогда
		СводныйЗаказКлиентаПоСтатусу = Ложь;
		КодСледующегоСтатуса = 0;
		Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
			ВариантОбеспеченияСводногоЗаказа = Перечисления.ВариантыОбеспечения.Требуется;
		ИначеЕсли Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("УдалитьТребуется")<> Неопределено Тогда
			ВариантОбеспеченияСводногоЗаказа = Перечисления.ВариантыОбеспечения.УдалитьТребуется;
		КонецЕсли;
		//ВариантОбеспеченияСводногоЗаказа = Перечисления.ВариантыОбеспечения.Требуется;
	Иначе
		СводныйЗаказКлиентаПоСтатусу = Ложь;//СтрокаСтатусаДляКонтроля.СводныйЗаказКлиентаПоСтатусу;
		КодСледующегоСтатуса = СтрокаСтатусаДляКонтроля.КодСледующегоСтатуса;
		ВариантОбеспеченияСводногоЗаказа = СтрокаСтатусаДляКонтроля.ВариантОбеспечения;//делим сводные заказы по вариантам обеспечения
	КонецЕсли;
	СписокПозиций = Новый Массив;
	МассивПозицийКодСледующегоСтатуса = Новый Массив;
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	СтруктураПоиска = Новый Структура("НомерЗаявки");
	СтруктураПоискаСоСтатусом = Новый Структура("НомерЗаявки,КодСтатуса");
	СписокЗаявокДляОбновленияОстатков = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(СписокКонтрагентовДляОбновленияБаланса) Тогда
		СписокКонтрагентовДляОбновленияБаланса = Новый СписокЗначений;
	КонецЕсли;
	
	//меняем алгоритм - надо пройти по таблице номенклатуры и проверить, надо ли создавать заявки в этом статусе или нет
	//если надо то добавляем этот номер в список и перед тем, как найти, проверяем, есть ли она в списке
	
	//собрали статусы, в которых нужно создавать заявку покупателя
	МассивСтатусовСоздаватьЗаявкуПокупателя = Новый Массив;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если СтрокаСтатуса.СоздаватьЗаявкуПокупателя Тогда
			МассивСтатусовСоздаватьЗаявкуПокупателя.Добавить(СтрокаСтатуса.КодСтатуса);
		КонецЕсли;
	КонецЦикла;
	Если НеЗагружатьОтказы = Ложь Тогда
		МассивСтатусовСоздаватьЗаявкуПокупателя.Добавить(КодСтатусаОтказ);
	КонецЕсли;
	//теперь ищем заявки, в которых есть этот статус
	ВТ = ТаблицаНоменклатуры.Выгрузить(,"НомерЗаявки,КодСтатуса");//Колонки("НомерЗаявки,КодСтатуса");
	ВТ.Свернуть("НомерЗаявки,КодСтатуса");
	МассивНомеровЗаявок = Новый Массив;
	Для Каждого СтрокаВТ Из ВТ Цикл
		Если МассивСтатусовСоздаватьЗаявкуПокупателя.Найти(СтрокаВТ.КодСтатуса)<>Неопределено Тогда
			МассивНомеровЗаявок.Добавить(СтрокаВТ.НомерЗаявки);
		КонецЕсли;
	КонецЦикла;
	СоответствиеВидЦеныПоСкладу = Новый Соответствие;
	СоответствиеСоглашениеПоСкладу = Новый Соответствие;
	Для Каждого СтрокаСклада Из ТаблицаСкладов Цикл
		Если СтрокаСклада.Выгружать И ЗначениеЗаполнено(СтрокаСклада.Склад) Тогда
			Если ЗначениеЗаполнено(СтрокаСклада.ВидЦены) Тогда
				СоответствиеВидЦеныПоСкладу.Вставить(СтрокаСклада.ИдентификаторПоставщика, СтрокаСклада.ВидЦены);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСклада.Соглашение) Тогда
				СоответствиеСоглашениеПоСкладу.Вставить(СтрокаСклада.ИдентификаторПоставщика, СтрокаСклада.Соглашение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ВремВидЦены = ВидЦены;//если в соглашении другая цена, то временно перезаписываем реквизит, чтобы логику не ломать
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли; 
		Если (НеЗагружатьГостевыеЗаказы ИЛИ НеЗагружатьФизическихЛиц)И НЕ ЗначениеЗаполнено(СтрокаЗаявки.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		ВидЦены = ВремВидЦены;
		Если МассивНомеровЗаявок.Найти(СтрокаЗаявки.НомерЗаявки) = Неопределено Тогда
			Продолжить;//у этой заявки нет позиции со статусом с галочкой
		КонецЕсли;
		МассивОтгруженныхПозиций = Новый Массив;//чтобы заново не проверять по ним остатки
		СоответствиеВариантаОбеспеченияКодуСтроки = Новый Соответствие;//если документ очищается, чтобы запоминался//чтобы вариант обеспечения у уже загруженных позиций не поменялся. Кроме отказа!
		Если НЕ ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
			Док = НайтиЗаявку(СтрокаЗаявки.НомерЗаявки, Дата(СтрокаЗаявки.ДатаЗаявки));
		Иначе
			Док = СтрокаЗаявки.ЗаказКлиента;
		КонецЕсли;
		Если СтрокаЗаявки.НеСоздаватьЗаявкуПокупателя И НЕ СтрокаЗаявки.СоздаватьЗаявкуПокупателя Тогда
			//вдруг потом надо документы создавать, поэтому добавляем в список измененных заявок
			ЕстьОтказ = Ложь;
			//ЕстьПолучен = Ложь;
			Если ЗначениеЗаполнено(Док) Тогда
				Если СтрокаЗаявки.Закрыта Тогда
					ТекстСообщения = "Закрыт, не изменяем "+СокрЛП(Док);
					ЗаписьВЛог(ТекстСообщения,1);
					Продолжить;
				КонецЕсли;
				Если НЕ ЗаявкаНеИзменена(Док, СтрокаЗаявки.ДатаОбновления) Тогда
					СтрокаЗаявки.Изменена = Истина;
					Если СписокИзмененныхЗаявок.НайтиПоЗначению(Док.Ссылка) = Неопределено Тогда
						 СписокИзмененныхЗаявок.Добавить(Док.Ссылка);
					КонецЕсли;
					//проверить, есть отказ или нет
					СтруктураПоиска = Новый Структура("НомерЗаявки", СтрокаЗаявки.НомерЗаявки);
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
					Если Не НайденныеСтроки = Неопределено Тогда
						Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
							КодСтатусаСайт = СтрокаТовара.КодСтатусаСайт;
							Если КодСтатусаСайт = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(КодСтатусаСайт) <> Неопределено Тогда
								ЕстьОтказ = Истина;
							КонецЕсли;//на случай, если отказ и возврат - это одно и то же
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				Для Каждого СтрокаДокумента Из Док.Товары Цикл
					МассивОтгруженныхПозиций.Добавить(СтрокаДокумента.КодСтроки);
				КонецЦикла;
			КонецЕсли;
			Если НЕ ЕстьОтказ Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаСтатусаДляКонтроля<>"" Тогда
			Если НЕ СтрокаСтатусаДляКонтроля.СоздаватьЗаявкуПокупателя Тогда
				Если НЕ Док = Неопределено Тогда
					СтрокаЗаявки.ЗаказКлиента = Док.Ссылка;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Тест Тогда
			сообщить(Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" "+СокрЛП(СтрокаЗаявки.ДатаЗаявки));
			Продолжить;
		КонецЕсли;
		ЭтоНоваяЗаявка = Ложь;
		НомерЗаявкиСтрокой = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
		Если Док = Неопределено Тогда
			//ЗаписьВЛог("Не найдена заявка "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"));
			ДокОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
			СтрокаЗаявки.Изменена = Истина;
			Если id6019 Тогда ДокОбъект["ДокументБезСкидки"] = Истина; КонецЕсли;
			Если НумерацияЗаказовКакВABCP Тогда
				ДокОбъект.Номер = НомерЗаявкиСтрокой;
			КонецЕсли;
			Если СтрокаЗаявки.НоваяЗаявка Тогда
				ЭтоНоваяЗаявка = Истина;
			КонецЕсли;
			Если id15051 Тогда
				ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
			Иначе
				ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			КонецЕсли;
			ДокОбъект.ДатаСогласования = СтрокаЗаявки.ДатаОбновления;
			ДокОбъект.Валюта = Валюта;
			Если ЦеныПродажиВРублях Тогда//заказ клиенту
				ДокОбъект.Валюта = Рубли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаПродажи) Тогда
				ДокОбъект.Валюта = СтрокаЗаявки.ВалютаПродажи;
			КонецЕсли;
			Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
				ДокОбъект.Валюта = Валюта;
			КонецЕсли;
			ДокОбъект.СкидкиРассчитаны = Истина;
			ДокОбъект.Согласован = Истина;
			ДокОбъект.НомерПоДаннымКлиента = НомерЗаявкиСтрокой;
			ДокОбъект.Комментарий = СтрокаЗаявки.Комментарий;
			Если id14833 Тогда ДокОбъект.Комментарий = СтрокаЗаявки.Комментарий+" "+СтрокаЗаявки.ИмяПокупателя; КонецЕсли;
			Если ДокОбъект.Комментарий = "" И ОрганизацияПоТипуОплаты Тогда ДокОбъект.Комментарий = СтрокаЗаявки.ТипОплаты; КонецЕсли;
			Если id15051 Тогда ДокОбъект["зс_веб_Номер"] = Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"); ДокОбъект["зс_веб_СтатусЗаказа"] = Справочники.зс_СтатусыСтрокиЗаказа.ОтправленМенеджеру; КонецЕсли;
			ДокОбъект.ДатаПоДаннымКлиента = СтрокаЗаявки.ДатаЗаявки;
			ДокОбъект.СкидкиРассчитаны = Истина;
			ДокОбъект.ДатаСогласования = СтрокаЗаявки.ДатаОбновления;
			ДокОбъект.Контрагент = СтрокаЗаявки.Контрагент;
			Если Отладка Тогда
				сообщить(СтрокаЗаявки.Контрагент);
			КонецЕсли;
			Если id15051 Тогда ДокОбъект["зс_веб_ФИОРозничногоПокупателя"] = СокрЛП(СтрокаЗаявки.Контрагент); ДокОбъект["зс_веб_АдресЭлектроннойПочтыРозничногоПокупателя"] = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(СтрокаЗаявки.Контрагент, "Юридический"); ДокОбъект["зс_веб_ТелефонРозничногоПокупателя"] = ФормированиеПечатныхФорм.ПолучитьТелефонИзКонтактнойИнформации(СтрокаЗаявки.Контрагент); ДокОбъект["зс_веб_СтатусЗаказаКлиентаУДАЛИТЬ"] = Справочники.зс_ссз_СтатусыСтрокЗаказа.ОтправленМенеджеру; КонецЕсли;
			ДокОбъект.Организация = СтрокаЗаявки.Организация;
			Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				ДокОбъект.Организация = ОрганизацияРозница;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаявки.Организация) Тогда
				ДокОбъект.Организация = СтрокаЗаявки.Организация;
			Конецесли;
			Если ОрганизацияПоТипуОплаты Тогда
				Если СтрокаЗаявки.ТипОплаты = "Наличный" Тогда
					ДокОбъект.Организация = ОрганизацияРозница;
				Иначе
					ДокОбъект.Организация = Организация;
				КонецЕсли;
			КонецЕсли;
			Если ДокОбъект.Организация = ОрганизацияРозница Тогда
				ДокОбъект.БанковскийСчет = БанковскийСчетОрганизацииРозницаПоУмолчанию;
			Иначе
				ДокОбъект.БанковскийСчет = БанковскийСчетОрганизацииПоУмолчанию;
			КонецЕсли;
			ВремСчет = СоответствиеБанковскийСчетОрганизации.Получить(ДокОбъект.Организация);
			Если ВремСчет <> Неопределено Тогда
				ДокОбъект.БанковскийСчет = ВремСчет;
			КонецЕсли;
			ДокОбъект.ЗаполнитьУсловияПродажПоУмолчанию();//заполняем встроенными стредствами
			ДокОбъект.ПорядокРасчетов = ПорядокРасчетов;
			//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
			ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
			//Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			//	ДокОбъект.ЦенаВключаетНДС = Истина;
			//Иначе
			//	ДокОбъект.ЦенаВключаетНДС = Ложь;
			//КонецЕсли;
			ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПродаже;//всегда должно стоять, иначе реализция некорректно создаётся
		Иначе //нашли документ
			ФлагЗаявкаНеИзменена = ЗаявкаНеИзменена(Док.Ссылка, СтрокаЗаявки.ДатаОбновления);
			СтрокаЗаявки.Изменена = НЕ ФлагЗаявкаНеИзменена;
			СтрокаЗаявки.ЗаказКлиента = Док.Ссылка;
			Если ФлагЗаявкаНеИзменена И (НЕ(НеОбновлятьЗагруженныеЗаказы И ПерезаполнятьСтатусыПриЗагрузке))Тогда //если загружаем одну заявку для отладки, считается, что она всегда изменяется
				Если Отладка И ФильтрПоЗАявке>1000 Тогда
					сообщить("Заказ пропускаем, стоит ""Не обновлять загруженные заказы""");
				конецЕсли;
				Продолжить;
			КонецЕсли;
			Если НеОбновлятьЗагруженныеЗаказы И НЕ ПерезаполнятьСтатусыПриЗагрузке Тогда
				Продолжить;
			КонецЕсли;
			//частичное разервирование по расписанию разделяет позицию на часть, которая есть на складе, и ту, которой ещё нет
			//поэтому надо ставить признак, чтобы не перезаполнялась табличная часть
			//когда все позиции придут на склад, тогда всё вернётся обратно
			Комментарий = Док.Комментарий;
			Если Лев(Комментарий, 24) = "частичное резервирование" Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаДокумента Из Док.Товары Цикл //когда табличная часть документа очищается и заново заполняется, чтобы сохранялся вариант обеспечения
				СоответствиеВариантаОбеспеченияКодуСтроки.Вставить(СтрокаДокумента.КодСтроки, СтрокаДокумента.ВариантОбеспечения);
			КонецЦикла;
			//если есть вариант обеспечения у этого статуса, то можно попробовать обновить варианты обеспечения
			Если НеОбновлятьЗагруженныеЗаказы Тогда
				Если ПерезаполнятьСтатусыПриЗагрузке Тогда
					ДокОбъект = Док.ПолучитьОбъект();//перезаполняем статусы, записываем документ и закрываем его
					//СтатусыABCPЗаказа.Очистить();//сохранить настройки статусов в хранилище с привязкой к каждому документу и позиции
					
					//ДокОбъект.ДополнительныеРеквизиты.Очистить();
					СтруктураПоиска.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
					ЖелаемаяДатаОтгрузкиЧасы = 24;//в deadline - пусто /search/batch/ может вернуть, но по всем, а не по уникальному ид.номенклатуры, а так это очень русурсно затратно
					//если есть статус "Отказ", то заполняем ещё статус в 1C
					ИзмененСтатусНеЗаполнять = Ложь;
					Если Не НайденныеСтроки = Неопределено Тогда
						ПереченьПозиций = "";
						НС = 0;
						Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
							//НовСтрокаСтатусов  = СтатусыABCPЗаказа.Добавить();
							//ЗаполнитьЗначенияСвойств(НовСтрокаСтатусов, СтрокаТовара);
							//НовСтрокаСтатусов.НС = НС;
							//НовСтрокаСтатусов.НаименованиеСтатуса = СтрокаТовара.СтатусСайт;
							Если СтрокаТовара.КодСтатуса = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(СтрокаТовара.КодСтатуса) <> Неопределено Тогда
								//ищем в заказе эту строчку и, если там стоит "к обеспечению", меняем на "не обеспечивать"
								СтруктураДляЗаказа = Новый Структура("КодСтроки,Номенклатура,Количество");
								СтруктураДляЗаказа.КодСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
								СтруктураДляЗаказа.Номенклатура = СтрокаТовара.Номенклатура;
								СтруктураДляЗаказа.Количество = СтрокаТовара.Количество;
								НайденныеСтрокиЗаказа = ДокОбъект.Товары.НайтиСтроки(СтруктураДляЗаказа);
								Если НайденныеСтрокиЗаказа.Количество() > 0 Тогда
									Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
										ВариантТребуется = Перечисления.ВариантыОбеспечения.Требуется;
									ИначеЕсли Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("УдалитьТребуется")<> Неопределено Тогда
										ВариантТребуется = Перечисления.ВариантыОбеспечения.УдалитьТребуется;
									Иначе
										ВариантТребуется = Неопределено;
									КонецЕсли;
									Для Каждого НайденнаяСтрокаЗаказа Из НайденныеСтрокиЗаказа Цикл
										Если НайденнаяСтрокаЗаказа.ВариантОбеспечения = ВариантТребуется Или НайденнаяСтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
											Если НайденнаяСтрокаЗаказа.ВариантОбеспечения = ВариантТребуется Тогда //уже меняли на НеТребуется, чтобы следующую такую же позицию не изменить
												НайденнаяСтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
												НайденнаяСтрокаЗаказа.Отменено = Истина;
												ИзмененСтатусНеЗаполнять = Истина;
												ТекстСообщения = "идентификатор заявки:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", изменен статус на «Не обеспечивать» позиция " +СокрЛП(СтрокаТовара.Номенклатура)+", идентификатор позиции "+СтрокаТовара.ИдентификаторНоменклатуры;
												ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
												Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
													СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
										Если НЕ НайденнаяСтрокаЗаказа.Отменено Тогда
											НайденнаяСтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
											НайденнаяСтрокаЗаказа.Отменено = Истина;
											ТекстСообщения = "идентификатор заявки:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", отменена позиция " +СокрЛП(СтрокаТовара.Номенклатура)+", идентификатор позиции "+СтрокаТовара.ИдентификаторНоменклатуры;
											ЗаписьВЛог(ТекстСообщения);
											ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
											Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
												СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						//КлючОбъекта  = "ABCP_1C";
						//КлючНастроек = "ЗаказКлиента_"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
						//ИмяПользователя = "Администратор";//иначе другие пользователи не будут иметь доступа к этой таблице значений 
						////но, у кого неполные права, тоже не смогут
						//ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, СтатусыABCPЗаказа, , ИмяПользователя);
						//ИмяПользователя = "Администратор";//иначе другие пользователи не будут иметь доступа к этой таблице значений 
						//Попытка
						//	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, СтатусыABCPЗаказа, , ИмяПользователя);
						//Исключение
						//КонецПопытки;
					КонецЕсли;
					
					//не надо, а то при обмене с бухгалтерией косячит
					//СтрокиДопРеквизитов = ДокОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство"), dateUpdated);
					//Если СтрокиДопРеквизитов.Количество() = 0 Тогда СтрокаДопРеквизитов = ДокОбъект.ДополнительныеРеквизиты.Добавить(); СтрокаДопРеквизитов.Свойство = dateUpdated; Иначе СтрокаДопРеквизитов = СтрокиДопРеквизитов[0]; КонецЕсли;
					//СтрокаДопРеквизитов.Значение = dateUpdated; СтрокаДопРеквизитов.ТекстоваяСтрока = СокрЛП(dateUpdated);
					
					//СтрокиДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", dateUpdated.Ссылка));
					//Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда	СтрокаДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.Добавить(); Иначе СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0]; КонецЕсли;
					//СтрокаДополнительныеРеквизиты.Свойство = dateUpdated.Ссылка; СтрокаДополнительныеРеквизиты.Значение = СтрокаЗаявки.ДатаОбновления; СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = СокрЛП(СтрокаЗаявки.ДатаОбновления);
					
					Если НЕ id17496 Тогда //Автолиния - не перезаписывать
						СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, ДокОбъект);
						ДокОбъект.Записать();
						Если ИзмененСтатусНеЗаполнять Тогда //надо провести
							Попытка
								ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							Исключение
								сообщить(ОписаниеОшибки());
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					ТекстСообщения = "идентификатор заявки:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", обновлены статусы в заявке " +СокрЛП(ДокОбъект);
					ЗаписьВЛог(ТекстСообщения);
					МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
					МенеджерЗаписи.Свойство = dateUpdated;
					МенеджерЗаписи.Значение = СтрокаЗаявки.ДатаОбновления;
					МенеджерЗаписи.Записать();
					
					МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
					МенеджерЗаписи.Свойство = userAPI;
					МенеджерЗаписи.Значение = Пользователь;
					МенеджерЗаписи.Записать();
				Конецесли;//Если ПерезаполнятьСтатусыПриЗагрузке Тогда

				Продолжить;
			КонецЕсли;//Если НеОбновлятьЗагруженныеЗаказы И ПерезаполнятьСтатусыПриЗагрузке Тогда
			Если ФлагЗаявкаНеИзменена Тогда //если загружаем одну заявку для отладки, считается, что она всегда изменяется
				Продолжить;
			КонецЕсли;
			Если НеОбновлятьЗагруженныеЗаказы Тогда
				Продолжить;
			КонецЕсли;
			ДокОбъект = Док.ПолучитьОбъект();
			//ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;//К выполнению / В резерве если всё на складе, то КОтгрузке, если есть реализация, то закрыт
			//с другими статусами заказ поставщику сделать нельзя
			СтрокаЗаявки.ЗаказКлиента = ДокОбъект.Ссылка;
			ТаблицаТоваровВЗаказе = Новый ТаблицаЗначений;
			Если (НЕ ЗначениеЗаполнено(ДокОбъект.Контрагент)) И (ЗначениеЗаполнено(СтрокаЗаявки.Контрагент))Тогда
				ДокОбъект.Товары.Очистить(); //если до этого не был заполнен контрагент, очищаем табличную часть, чтобы заново всё перезаполнилось
				Попытка  
					СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, ДокОбъект);
					ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Исключение
					сообщить(ОписаниеОшибки());
				КонецПопытки;
				ДокОбъект.Контрагент = СтрокаЗаявки.Контрагент;
				ДокОбъект.Партнер = ДокОбъект.Контрагент.Партнер;
			КонецЕсли;
			//ЗаписьВЛог("Найден документ по заявке "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" "+СокрЛП(Док));//**
		КонецЕсли;
		
		//АТС 01.12.2021
		Если id41032 Тогда
			ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер сделки с сайта");
			Если ЗначениеЗаполнено(ДопРеквизит) Тогда
				НайденнаяСтрока = ДокОбъект.ДополнительныеРеквизиты.Найти(ДопРеквизит);
				Если НайденнаяСтрока = Неопределено Тогда
					НайденнаяСтрока = ДокОбъект.ДополнительныеРеквизиты.Добавить();
					НайденнаяСтрока.Свойство = ДопРеквизит;
				КонецЕсли; 
				НайденнаяСтрока.Значение = СтрокаЗаявки.НомерСделкиБ24;
			КонецЕсли; 
		КонецЕсли; 
		
		//ДокОбъект.ЗаполнитьУсловияПродажПоУмолчанию();//заполняем встроенными стредствами
		Если НЕ НеПерезаполнятьШапкуДокументов Или НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
			Если ЗначениеЗаполнено(СтрокаЗаявки.Организация) Тогда
				ДокОбъект.Организация = СтрокаЗаявки.Организация;
			Конецесли;
			ДокОбъект.Комментарий = СтрокаЗаявки.Комментарий;
			Если УТ113 Или УТ114 Тогда
				//Если НЕ УТКазахстан Тогда
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				Иначе
					Попытка
						ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			ДокОбъект.ПорядокРасчетов = ПорядокРасчетов;
			ДокОбъект.НомерПоДаннымКлиента = НомерЗаявкиСтрокой;
			ДокОбъект.ДатаПоДаннымКлиента = СтрокаЗаявки.ДатаЗаявки;
			Если id14544 Тогда
				ДокОбъект.ВидЗаказа = Перечисления.ВидыЗаказовКлиента.ЗаказКлиентаНаПокупкуТовара;
				ДокОбъект.СтавкаНДС = ОсновнаяСтавкаНДС;
			КонецЕсли;
			//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
			ДокОбъект.Подразделение = СтрокаЗаявки.Подразделение;
			Если ЗначениеЗаполнено(СтрокаЗаявки.Подразделение) Тогда
				ДокОбъект.Подразделение = СтрокаЗаявки.Подразделение;
			Иначе
				ДокОбъект.Подразделение = Подразделение;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДокОбъект.Склад) Тогда
				Если ЗначениеЗаполнено(СтрокаЗаявки.Склад) Тогда
					ДокОбъект.Склад = СтрокаЗаявки.Склад;
				Иначе
					ДокОбъект.Склад = Склад;
				КонецЕсли;
			КонецЕсли;
			СкладИзТипаПлатежа = Неопределено;
			Если ЗаполнятьПоТипамПлатежей И СтрокаЗаявки.paymentTypeId > 0 Тогда
				СкладИзТипаПлатежа = СоответствиеСкладаПоТипуПлатежа.Получить(СтрокаЗаявки.paymentTypeId);
				Если СкладИзТипаПлатежа <> Неопределено Тогда
					ДокОбъект.Склад = СкладИзТипаПлатежа;
				КонецЕсли;
			КонецЕсли;
			Если id15051 Тогда ДокОбъект["зс_бк_СкладПродажи"] = Склад; ДокОбъект.Склад = ДокОбъект.Склад.Родитель; КонецЕсли;
			Если ЗаполнятьСкладПоОфису Тогда
				ОфисСклад = Справочники.Склады.НайтиПоНаименованию(СтрокаЗаявки.deliveryOffice, Истина);
				Если ЗначениеЗаполнено(ОфисСклад) Тогда
					ДокОбъект.Склад = ОфисСклад;
					Если id15051 Тогда ДокОбъект["зс_бк_СкладПродажи"] = ОфисСклад; КонецЕсли;
				Иначе
					ЗаписьВЛог("В заявке № "+СтрокаЗаявки.НомерЗаявки+" не найден склад по имени офиса: "+СтрокаЗаявки.deliveryOffice,3);
				КонецЕсли;
			КонецЕсли;
			Если ДокОбъект.Комментарий = "" И ОрганизацияПоТипуОплаты Тогда
				ДокОбъект.Комментарий = СтрокаЗаявки.ТипОплаты;
			КонецЕсли;
			Если ОрганизацияПоТипуОплаты Тогда
				ДокОбъект.Организация = СтрокаЗаявки.Организация;
			Иначе
				ДокОбъект.Организация = СтрокаЗаявки.Организация;
			КонецЕсли;
			ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;//РеглУчет;//РеализацияКлиенту
			ДокОбъект.Дата = СтрокаЗаявки.ДатаЗаявки;
			Если ЗагрузкаТекущейДатой Тогда
				ДокОбъект.Дата = ТекущаяДата();
			КонецЕсли;
			ДокОбъект.ДатаСогласования = СтрокаЗаявки.ДатаОбновления;
			ДокОбъект.Контрагент = СтрокаЗаявки.Контрагент;
			ДокОбъект.Партнер = ДокОбъект.Контрагент.Партнер;
			ДокОбъект.Валюта = Валюта;
			Если ЦеныПродажиВРублях Тогда//заказ клиенту
				ДокОбъект.Валюта = Рубли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаПродажи) Тогда
				ДокОбъект.Валюта = СтрокаЗаявки.ВалютаПродажи;
			КонецЕсли;
			Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
				ДокОбъект.Валюта = Валюта;
			КонецЕсли;
			ДокОбъект.АдресДоставки = СтрокаЗаявки.АдресДоставки;
			ДопДоставка = СокрЛП(СтрокаЗаявки.methodName+" "+СтрокаЗаявки.methodType);
			Если ДопДоставка = "" Тогда
				ДокОбъект.ДополнительнаяИнформацияПоДоставке = СтрокаЗаявки.АдресДоставки;
			Иначе
				ДокОбъект.ДополнительнаяИнформацияПоДоставке = ДопДоставка+Символы.ПС+СтрокаЗаявки.АдресДоставки;
			КонецЕсли;
			
			#Область ЗаказКлиентаИспользоватьСоглашенияСКлиентами
			Если ИспользоватьСоглашенияСКлиентами Тогда
				УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокОбъект.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
				Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
					Если УсловияПродажПоУмолчанию.Соглашение.Организация = ДокОбъект.Организация Тогда
						Если УсловияПродажПоУмолчанию.Соглашение.Типовое = Истина И 
							(((СтрокаЗаявки.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо) И НЕ ЗначениеЗаполнено(СоглашениеОпт)) ИЛИ ((СтрокаЗаявки.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) И НЕ ЗначениеЗаполнено(СоглашениеРозница))) 
							И НЕ ЗначениеЗаполнено(СоглашениеОпт) 
							И ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения 
							И СоздаватьИндивидуальныеСоглашения Тогда
						Иначе
							ДокОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если (Не ЗначениеЗаполнено(ДокОбъект.Соглашение) Или (ДокОбъект.Соглашение.Организация <> ДокОбъект.Организация)) И (ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения Или ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения) Тогда
					Если СтрокаЗаявки.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
						ДокОбъект.Соглашение = СоглашениеРозница;
					Иначе
						ДокОбъект.Соглашение = СоглашениеОпт;
					КонецЕсли;
				КонецЕсли;
				//если почему-то не нашли соглашение
				Если (НЕ ЗначениеЗаполнено(ДокОбъект.Соглашение)) Или (ДокОбъект.Соглашение.Организация <> ДокОбъект.Организация) Тогда
					ДокОбъект.Соглашение = ПолучитьСоглашениеСКлиентом(ДокОбъект.Контрагент, ДокОбъект, ДокОбъект.Организация);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
					ЗаполнитьПоСоглашениюСКлиентом(ДокОбъект,Истина);
				КонецЕсли;
			КонецЕсли;
			ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПродаже;
			Если ИспользоватьСоглашенияСКлиентами И ((НЕ ЗначениеЗаполнено(ДокОбъект.Соглашение)) Или (ДокОбъект.Соглашение.Организация <> ДокОбъект.Организация)) Тогда
				УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокОбъект.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
				Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
					ДокОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда //по 2 раза получает соглашение
					ДокОбъект.Соглашение = ПолучитьСоглашениеСКлиентом(ДокОбъект.Контрагент, ДокОбъект.Организация);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
					Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
						ДокОбъект.Соглашение = СоглашениеРозница;
					Иначе
						ДокОбъект.Соглашение = СоглашениеОпт;
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьПоСоглашениюСКлиентом(ДокОбъект);
			КонецЕсли;
			Если ИспользоватьСоглашенияСКлиентами И ЗаполнятьОрганизациюПоСоглашению И ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
				Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Организация) Тогда
					ДокОбъект.Организация = ДокОбъект.Соглашение.Организация;
				КонецЕсли;
				ДокОбъект.ЦенаВключаетНДС = ДокОбъект.Соглашение.ЦенаВключаетНДС;
				//в соглашении может быть менеджер возможно его тоже стоит заполнять
			КонецЕсли;
			#КонецОбласти
			#Область ЗаказКлиентаИспользоватьДоговорыСКлиентами
			ИспользоватьДоговорыИзСоглашения = Истина;
			Если ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
				Если ДокОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов = Ложь Тогда
					ИспользоватьДоговорыИзСоглашения = Ложь;
				КонецЕсли;
			КонецЕсли;
			//Если Отладка И ФильтрПоЗаявке > 0 Тогда
			//	сообщить("№ "+СтрокаЗаявки.НоваяЗаявка+"
			//	|ИспользоватьДоговорыСКлиентами="+ИспользоватьДоговорыСКлиентами+"
			//	|ИспользоватьДоговорыИзСоглашения="+ИспользоватьДоговорыИзСоглашения);
			//КонецЕсли;
			Если ИспользоватьДоговорыСКлиентами И ИспользоватьДоговорыИзСоглашения Тогда
				ДокОбъект.Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация);
				Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
					Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
					Иначе
						Попытка
							Если ЗначениеЗаполнено(ДокОбъект.Договор.ПорядокОплаты) Тогда
							//Если Не ЗначениеЗаполнено(ДокОбъект.ПорядокОплаты) Тогда
								Если УТ113 Или УТ114 Тогда
									ДокОбъект.ПорядокОплаты = ДокОбъект.Договор.ПорядокОплаты;
								КонецЕсли;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЕсли;
					Если ЗначениеЗаполнено(ДокОбъект.Договор.ПорядокРасчетов) Тогда
						Если ЗначениеЗаполнено(ДокОбъект.Соглашение) И ДокОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов Тогда
							ДокОбъект.ПорядокРасчетов = ДокОбъект.Договор.ПорядокРасчетов;
						КонецЕсли;
					КонецЕсли;
					Договор = ДокОбъект.Договор;
					Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДСОпределяетсяВДокументе") <> Неопределено Тогда
						Если Договор.НалогообложениеНДСОпределяетсяВДокументе = Ложь Тогда
							ДокОбъект.НалогообложениеНДС = Договор.НалогообложениеНДС;
						КонецЕсли;
						Если ДокОбъект.Договор.НалогообложениеНДСОпределяетсяВДокументе = Ложь Тогда
							Если ДокОбъект.Договор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Или
								ДокОбъект.Договор.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
								СтрокаЗаявки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(Договор.БанковскийСчет) Тогда
						ДокОбъект.БанковскийСчет = Договор.БанковскийСчет;
					КонецЕсли;
					Если ЗначениеЗаполнено(Договор.БанковскийСчетКонтрагента) Тогда
						ДокОбъект.БанковскийСчетКонтрагента = Договор.БанковскийСчетКонтрагента;
					КонецЕсли;
				Иначе
					ДокОбъект.ПорядокРасчетов = ПорядокРасчетов;
				КонецЕсли;
			Иначе
				ДокОбъект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Если Отладка И ФильтрПоЗаявке > 0 Тогда
					сообщить("№ "+СтрокаЗаявки.НоваяЗаявка+" ИспользоватьДоговорыСКлиентами="+ИспользоватьДоговорыСКлиентами+" ИспользоватьДоговорыИзСоглашения="+ИспользоватьДоговорыИзСоглашения);
				КонецЕсли;
			КонецЕсли;
			#КонецОбласти
			//Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			//	ДокОбъект.ЦенаВключаетНДС = Истина;
			//Иначе
			//	ДокОбъект.ЦенаВключаетНДС = Ложь;
			//КонецЕсли;
			//СтруктураОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(ДокОбъект.Организация, ДокОбъект.Дата);
			//СтруктураОтветственныхЛиц = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(ДокОбъект.Организация, ДокОбъект.Дата);//лучше вынести за цикл в самом начале, так как мало организаций, не надо каждый раз получать
			Если ДокОбъект.Организация = ОрганизацияРозница Тогда
				ДокОбъект.Руководитель = СтруктураОтветственныхЛицРозница.РуководительСсылка;
				ДокОбъект.ГлавныйБухгалтер = СтруктураОтветственныхЛицРозница.ГлавныйБухгалтерСсылка;
			Иначе
				ДокОбъект.Руководитель = СтруктураОтветственныхЛиц.РуководительСсылка;
				ДокОбъект.ГлавныйБухгалтер = СтруктураОтветственныхЛиц.ГлавныйБухгалтерСсылка;
			КонецЕсли;
			Если ДокОбъект.Организация = ОрганизацияРозница Тогда
				ДокОбъект.БанковскийСчет = БанковскийСчетОрганизацииРозницаПоУмолчанию;
			Иначе
				ДокОбъект.БанковскийСчет = БанковскийСчетОрганизацииПоУмолчанию;
			КонецЕсли;
			ВремСчет = СоответствиеБанковскийСчетОрганизации.Получить(ДокОбъект.Организация);
			Если ВремСчет <> Неопределено Тогда
				ДокОбъект.БанковскийСчет = ВремСчет;
			КонецЕсли;
			ДокОбъект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетПоУмолчанию(ДокОбъект.Контрагент);
			//ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(ДокОбъект.Организация, Неопределено, ДокОбъект.БанковскийСчет);
			//ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(ДокОбъект.Контрагент, Неопределено, ДокОбъект.БанковскийСчетКонтрагента);
			ДокОбъект.НазначениеПлатежа = "По счету № "+ДокОбъект.НомерПоДаннымКлиента+" от "+Формат(ДокОбъект.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy");

			ДокОбъект.Приоритет = ПриоритетСредний;
			//ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;// .КОбеспечению;
			ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;//иначе не Реализация не увидит .КОтгрузке;// .КОбеспечению;
			ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;//РеглУчет;//.РеализацияКлиенту;
			Если СтрокаЗаявки.АдресДоставки = "Самовывоз" Или СтрокаЗаявки.АдресДоставки = "" Тогда
				ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
				Если СтрокаЗаявки.deliveryOffice <> "" И Лев(АдресСервиса, 5) <> "mrcar" Тогда
					ДокОбъект.АдресДоставки = СтрокаЗаявки.deliveryOffice;
				КонецЕсли;
				Если id15051 Тогда ДокОбъект["зс_веб_ВыбранныйТипДоставки"] = Справочники.зс_веб_ТипыДоставки.Самовывоз; КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СпособДоставки) Тогда
					ДокОбъект.СпособДоставки = СпособДоставки;
				Иначе
					ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
				КонецЕсли;
				Если id15051 Тогда ДокОбъект["зс_веб_ВыбранныйТипДоставки"] = Справочники.зс_веб_ТипыДоставки.КурьерскаяСлужба; КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаявки.СпособДоставки) Тогда
				ДокОбъект.СпособДоставки = СтрокаЗаявки.СпособДоставки;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаявки.ЗонаДоставки) Тогда
				ДокОбъект.ЗонаДоставки = СтрокаЗаявки.ЗонаДоставки;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаявки.ПеревозчикПартнер) Тогда
				ДокОбъект.ПеревозчикПартнер = СтрокаЗаявки.ПеревозчикПартнер;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокОбъект.ПеревозчикПартнер) И (ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу) Тогда
				//заполняем реквизиты АдресДоставкиПеревозчика АдресДоставкиЗначенияПолей АдресДоставкиПеревозчикаЗначенияПолей 
				ТаблицаАдресов = АдресаПолучателяИзКонтактнойИнформации(ДокОбъект.ПеревозчикПартнер);
				Если ТаблицаАдресов <> Неопределено Тогда
					Для Каждого СтрокаТаблицаАдресов Из ТаблицаАдресов Цикл
						ДокОбъект.АдресДоставкиПеревозчика = СтрокаТаблицаАдресов.АдресДоставки;
						ДокОбъект.АдресДоставкиЗначенияПолей = СтрокаТаблицаАдресов.АдресДоставкиЗначенияПолей;
						ДокОбъект.АдресДоставкиПеревозчикаЗначенияПолей = СтрокаТаблицаАдресов.АдресДоставкиЗначенияПолей;
						Прервать;
					КонецЦикла;
				КонецЕсли;			
			КонецЕсли;			
			
			ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ДокОбъект.Партнер.ОсновнойМенеджер;
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
				ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;//ПользовательИнформационнойБазы.ТекущийПользователь();
			КонецЕсли;
			ДокОбъект.Автор = ДокОбъект.Менеджер;
		КонецЕсли;//НЕ НеПерезаполнятьШапкуДокументов
		
		ВидЦеныДокумента = ВидЦены;
		Если (НЕ ЦенаИзСправочника) И ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
			Если ЗначениеЗаполнено(ДокОбъект.Соглашение.ВидЦен) Тогда
				ВидЦеныДокумента = ДокОбъект.Соглашение.ВидЦен;
				Если Отладка Тогда
					ТекстСообщения = "Вид цены документа из соглашения: "+ВидЦеныДокумента;
					сообщить(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПроизвольныйВидЦеныВЗаказе Тогда
			ВидЦеныДокумента = Справочники.ВидыЦен.ПустаяСсылка();
		КонецЕсли;
		Если Отладка Тогда
			ТекстСообщения = "Вид цены документа: "+ВидЦеныДокумента;
			сообщить(ТекстСообщения);
		КонецЕсли;
		//!!! проверяем, если positionsQuantity и sum совпадают с заявкой, то её не меняем, считаем, что в ней всё осталось
		//!!! возможно, ещё стоит проверять dateUpdated - дату обновления, или только её
		СтруктураПоиска.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		ЕстьОтказ = Ложь;
		Если ОтборЗагружаемыхПозиций Тогда
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);//позиции уже раньше были отобраны
		Иначе
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		СтрокОтказа = 0;
		Если (Не НайденныеСтроки = Неопределено) И (НеЗагружатьОтказы = Истина) Тогда
			Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
				КодСтатусаСайт = СтрокаТовара.КодСтатусаСайт;
				Если КодСтатусаСайт = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(КодСтатусаСайт) <> Неопределено Тогда
					ЕстьОтказ = Истина;
					СтрокОтказа = СтрокОтказа + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//это заказ клиента
		Если ПроверятьНаличиеНашихПозиций Тогда
			МассивНоменклатуры = Новый Массив;
			Для Каждого СтрокаНоменклатуры Из НайденныеСтроки Цикл
				МассивНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);
			КонецЦикла;
			ЗапросОстатков.УстановитьПараметр("НаДату", ДокОбъект.Дата);
			ЗапросОстатков.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
			ЗапросОстатков.УстановитьПараметр("Склад", ДокОбъект.Склад);
			Результат = ЗапросОстатков.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Соответствие = Новый Соответствие;
				Пока Выборка.Следующий() Цикл
					Соответствие.Вставить(Выборка.Ссылка, Выборка.Наличие);
				КонецЦикла;
				Для Каждого СтрокаНоменклатуры Из НайденныеСтроки Цикл
					СтрокаНоменклатуры.Наличие = Соответствие.Получить(СтрокаНоменклатуры.Номенклатура);
				КонецЦикла;
			КонецЕсли;
			Для Каждого СтрокаНоменклатуры Из НайденныеСтроки Цикл
				Если СтрокаНоменклатуры.Наличие<СтрокаНоменклатуры.Количество И СтрокаНоменклатуры.ВариантОбеспечения = ВариантОбеспеченияСНаличия Тогда
					СтрокаНоменклатуры.ВариантОбеспечения = ВариантОбеспеченияНеСНаличия;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтрокВЗаказе = ДокОбъект.Товары.Количество();
		СуммаЗаказа = ДокОбъект.Товары.Итог("Сумма");//ДокОбъект.Товары.Итог("Количество") - негде брать, надо перебирать
		//Если СтрокОтказа = СтрокВЗаказе Тогда //если все позиции отказные - обнуляем доставку, чтобы не загружалась
		//	СтрокаЗаявки.СтоимостьДоставки = 0;
		//КонецЕсли;
		Если СтрокаЗаявки.СтоимостьДоставки > 0 И ЗначениеЗаполнено(УслугаДоставки) Тогда
			СтрокВЗаказе = СтрокВЗаказе + 1;//если есть стоимость доставки, то позиций должно быть на 1 больше
			СуммаЗаказа = СуммаЗаказа + СтрокаЗаявки.СтоимостьДоставки;
		КонецЕсли;
		Если mrcar И СтрокаЗаявки.deliveryTypeId <> "0" Тогда // в конце 2019 вся доставка высокая И СуммаЗаказа<5000 Тогда
			ДокОбъект.Приоритет = ПриоритетВысокий;//!!! приоритет надо брать из статуса
		КонецЕсли;
		Если ЗначениеЗаполнено(Приоритет) Тогда
			ДокОбъект.Приоритет = Приоритет;
		КонецЕсли;
		Если id44546 Тогда ДокОбъект.Приоритет = ПриоритетВысокий; КонецЕсли;
		//ДокОбъект.Склад = СтрокаЗаявки.Склад;//почему-то где-то слетает
		ВариантыОбеспеченияПерезаполнены = Ложь;//иначе здесь обратно перезапишется Если ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда
		ВариантОбеспеченияИзменился = Ложь;
		ПозицииОтличаются = Ложь;//медленный способ, сравниваем артикул каждой позиции в заказе
		Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) И ((СтрокВЗаказе>0 И СтрокВЗаказе = СтрокаЗаявки.Позиций И СуммаЗаказа = СтрокаЗаявки.СуммаЗаявки) Или ПроверятьИзмененияВТоварахЗаказа) Тогда
			ТаблицаТоваровЗаказа = ПолучитьТаблицуТоваровЗаказа(СтрокаЗаявки.ЗаказКлиента);
			Если ТаблицаТоваровЗаказа <> Неопределено Тогда
				//Структура = Новый Структура("Артикул");
				Структура = Новый Структура("КодСтроки");
				Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
					Структура.КодСтроки = СтрокаТаблицы.ИдентификаторНоменклатуры;
					НСтроки = ТаблицаТоваровЗаказа.НайтиСтроки(Структура);
					Если НСтроки.Количество()=0 Тогда
						Если Отладка Тогда
							сообщить("В заказе 1С "+СтрокаЗаявки.НомерЗаявки+" не найден код строки "+СтрокаТаблицы.ИдентификаторНоменклатуры);
						КонецЕсли; 
						ПозицииОтличаются = Истина;
						Прервать;
					КонецЕсли; 
					НСтрока = НСтроки[0];
					Если НСтрока.Артикул <> СтрокаТаблицы.number И НСтрока.Артикул <> СтрокаТаблицы.numberFix Тогда
						Если Отладка Тогда
							сообщить("В заказе 1С "+СтрокаЗаявки.НомерЗаявки+" по коду строки "+СтрокаТаблицы.ИдентификаторНоменклатуры+" не совпадает артикул "+НСтрока.Артикул);
						КонецЕсли; 
						ПозицииОтличаются = Истина;
						Прервать;
					КонецЕсли; 
					Если НСтрока.Цена <> СтрокаТаблицы.ЦенаПродажи Тогда
						Если Отладка Тогда
							сообщить("В заказе 1С "+СтрокаЗаявки.НомерЗаявки+" по коду строки "+СтрокаТаблицы.ИдентификаторНоменклатуры+" не совпадает цена "+НСтрока.Цена);
						КонецЕсли; 
						ПозицииОтличаются = Истина;
						Прервать;
					КонецЕсли; 
					Если НСтрока.Количество <> СтрокаТаблицы.Количество Тогда
						Если Отладка Тогда
							сообщить("В заказе 1С "+СтрокаЗаявки.НомерЗаявки+" по коду строки "+СтрокаТаблицы.ИдентификаторНоменклатуры+" не совпадает количество "+НСтрока.Количество);
						КонецЕсли; 
						ПозицииОтличаются = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		Если ЕстьОтказ Или (НЕ ((СтрокВЗаказе = СтрокаЗаявки.Позиций) И (СуммаЗаказа = СтрокаЗаявки.СуммаЗаявки))) Или ПозицииОтличаются = Истина Или ФильтрПоЗаявке<>0 Тогда
			//сохранить настройки статусов в хранилище с привязкой к каждому документу и позиции
			//СтатусыABCPЗаказа.Очистить();
			ТаблицаТоваровДокумента = ДокОбъект.Товары.Выгрузить();//чтобы, даже если есть отказ - оставлять цену и количество, чтобы документ перепроводился
			СтруктураПоиска.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
			Если ОтборЗагружаемыхПозиций Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);//уже раньше отобрали, при заполнении таблицы
			Иначе
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			Если ФильтрПоЗаявке<>0 Или ПерезаполнятьДокументыПриЗагрузке Или ПозицииОтличаются Тогда
				ДокОбъект.Товары.Очистить();
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтатусЗаказаПоСтатусу = СоответствиеСтатусЗаказа.Получить(НайденныеСтроки[0].КодСтатуса);
					Если СтатусЗаказаПоСтатусу <> Неопределено Тогда
						ДокОбъект.Статус = СтатусЗаказаПоСтатусу;
					КонецЕсли;
					ПриоритетПоСтатусу = СоответствиеПриоритет.Получить(НайденныеСтроки[0].КодСтатуса);
					Если ПриоритетПоСтатусу <> Неопределено Тогда
						ДокОбъект.Приоритет = ПриоритетПоСтатусу;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			МассивНайденныхПозиций = Новый Массив;//здесь сохраняем позиции, которые надо оставить, и которые не надо добавлять в документ снова
			Если ДокОбъект.Товары.Количество() > 0 Тогда
				//если очистить табличную часть, то уже отгруженные позиции пропадут
				Структура = Новый Структура("КодСтроки");
				Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
					Структура.КодСтроки = Число(СтрокаТовара.ИдентификаторНоменклатуры);
					СтрокиДокумента = ДокОбъект.Товары.НайтиСтроки(Структура);
					Если СтрокиДокумента.Количество() > 0 Тогда
						СтрокаДокумента = СтрокиДокумента[0];
						//перезаполняем цену, количество и сумму
						Если СтрокаДокумента.Цена = СтрокаТовара.ЦенаПродажи И СтрокаДокумента.Количество = СтрокаТовара.Количество Тогда
							МассивНайденныхПозиций.Добавить(Структура.КодСтроки);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				//оставшиеся позиции удаляем - они могли быть удалены из заказа
				МассивУдаляемыхПозиций = Новый Массив;//здесь сохраняем позиции, которые надо удалить, их больше нет в заказе
				Для Каждого СтрокаДокумента Из ДокОбъект.Товары Цикл
					Если МассивНайденныхПозиций.Найти(СтрокаДокумента.КодСтроки) = Неопределено Или (НеЗагружатьОтказы = Истина И СтрокаДокумента.Отменено) Или СтрокаДокумента.Номенклатура = УслугаДоставки Тогда //отменённые позиции и доставку тоже удаляем
						МассивУдаляемыхПозиций.Добавить(СтрокаДокумента.КодСтроки);
					КонецЕсли;
				КонецЦикла;
				Если МассивУдаляемыхПозиций.Количество() > 0 Тогда //удаляем из документа
					Для Каждого КодСтроки  Из МассивУдаляемыхПозиций Цикл
						Структура.КодСтроки = КодСтроки;
						УдаляемыеСтроки = ДокОбъект.Товары.НайтиСтроки(Структура);
						Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
							ДокОбъект.Товары.Удалить(УдаляемаяСтрока);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;			
			ЖелаемаяДатаОтгрузкиЧасы = 24;//в deadline - пусто /search/batch/ может вернуть, но по всем, а не по уникальному ид.номенклатуры, а так это очень русурсно затратно
			
			СтруктураСводная = Новый Структура("Номенклатура");
			Если Не НайденныеСтроки = Неопределено Тогда
				ПереченьПозиций = "";
				НС = 0;
				ПерваяСтрока = Истина;
				Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
					//Если Отладка Тогда
					//	сообщить(""+СтрокаТовара.НомерСтроки+"	"+СтрокаТовара.Номенклатура+"	"+СтрокаТовара.КодСтатуса);
					//КонецЕсли;
					Если МассивНайденныхПозиций.Найти(Число(СтрокаТовара.ИдентификаторНоменклатуры)) <> Неопределено Тогда
						Если НЕ НеЗагружатьОтказы И (СтрокаТовара.КодСтатусаСайт = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(СтрокаТовара.КодСтатусаСайт) <> Неопределено) Или (СтрокаТовара.Количество=0) Тогда
							СтрокиОтказа = ДокОбъект.Товары.НайтиСтроки(Новый Структура("КодСтроки", СтрокаТовара.ИдентификаторНоменклатуры));
							Для Каждого СтрокаДокумента Из СтрокиОтказа Цикл
								//Если Отладка Тогда
								//	сообщить(""+СтрокаДокумента.НомерСтроки+"	"+СтрокаДокумента.Номенклатура+"	"+СтрокаДокумента.ВариантОбеспечения);
								//КонецЕсли;
								Если НЕ(СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется И СтрокаДокумента.Отменено) Тогда
									СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
									СтрокаДокумента.Отменено = Истина;
									ПозицииДокументаИзменены = Истина;
									ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
									Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
										СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						ВариантОбеспеченияПоСтатусу = СоответствиеВариантОбеспечения.Получить(СтрокаТовара.КодСтатуса);
						Если ЗначениеЗаполнено(ВариантОбеспеченияПоСтатусу) Тогда
							СтрокиОтказа = ДокОбъект.Товары.НайтиСтроки(Новый Структура("КодСтроки", СтрокаТовара.ИдентификаторНоменклатуры));
							Для Каждого СтрокаДокумента Из СтрокиОтказа Цикл
								Если СтрокаДокумента.ВариантОбеспечения <> ВариантОбеспеченияПоСтатусу Тогда
									СтрокаДокумента.ВариантОбеспечения = ВариантОбеспеченияПоСтатусу;
									ВариантОбеспеченияИзменился = Истина;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						//если варианты обеспечений менялись, то надо обновить, а не пропускать
						//Если НЕ ВариантОбеспеченияИзменился Тогда
						//может быть отказ, а сумма в ДокОбъект.ЭтапыГрафикаОплаты СуммаПлатежа
						НадоПерезаписатьДокумент = Ложь;
						ИтогСуммаПлатежа = ДокОбъект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
						#Область ЗаказКлиента_ИспользоватьГрафикиОплаты
						Если ИспользоватьГрафикиОплаты Тогда
							Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
								ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
								Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
									СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
									ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
								КонецЕсли;
							Иначе
								ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
								Если ИтогСуммаПлатежа <> ДокОбъект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа") Тогда
									НадоПерезаписатьДокумент = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							СуммаЗаказано = ДокОбъект.Товары.Итог("Сумма");
							ОтмененныеСтроки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Отменено", Истина));
							Если ОтмененныеСтроки.Количество() = ДокОбъект.Товары.Количество() Тогда
								ВсеСтрокиОтменены = Истина;
							Иначе
								ВсеСтрокиОтменены = Ложь;
							КонецЕсли;
							Для Каждого ОтмененнаяСтрока Из ОтмененныеСтроки Цикл
								СуммаЗаказано = СуммаЗаказано - ОтмененнаяСтрока.Сумма;
							КонецЦикла;
							СуммаЗалогаЗаТару = 0;
							Если НЕ id15051 Тогда
								//Если НЕ НеПерезаполнятьШапкуДокументов Или НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
								Если ВсеСтрокиОтменены Тогда
									ДокОбъект.ЭтапыГрафикаОплаты.Очистить();
								Иначе
									Если (УТ114 И (Подверсия3 > 5)) Тогда
										ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
									ИначеЕсли (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
										ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
										Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
											СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
											ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
										КонецЕсли;
									ИначеЕсли НЕ УТ111 Тогда
										ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
											ДокОбъект,
											ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
											ДокОбъект.ЖелаемаяДатаОтгрузки,//обычно пустая
											СуммаЗаказано,
											СуммаЗалогаЗаТару);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							Если ИтогСуммаПлатежа <> ДокОбъект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа") Тогда
								НадоПерезаписатьДокумент = Истина;
							КонецЕсли;
						КонецЕсли;
						#КонецОбласти
						Если НадоПерезаписатьДокумент Тогда
								ДокументПроведен = Ложь;
								Попытка    
									СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, ДокОбъект);
									ДокОбъект.Записать(РежимЗаписиДок); 
									ДокументПроведен = Истина;
								Исключение
									Если МассивЗаказовДляПерепроведения.Найти(ДокОбъект.Ссылка) = Неопределено Тогда
										МассивЗаказовДляПерепроведения.Добавить(ДокОбъект.Ссылка);
									КонецЕсли;
									Если ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
										ДокОбъект.ОбменДанными.Загрузка = Истина;
										ДокОбъект.Записать();
										ДокОбъект.ОбменДанными.Загрузка = Ложь;
									Иначе
										ДокОбъект.Записать();
									КонецЕсли;
									ТекстСообщения = "идентификатор заявки:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", не удалось провести "+?(ДокументПроведен, "и проведен", "")+" документ " +СокрЛП(ДокОбъект)+", позиций "+ДокОбъект.Товары.Количество();
									ЗаписьВЛог(ТекстСообщения);
									//сообщить("Не удалось провести "+СокрЛП(ДокОбъект));
								КонецПопытки;
						КонецЕсли;
						Продолжить;//эта позиция есть в документе, её не добавляем
						//КонецЕсли;
					КонецЕсли;
					//НовСтрокаСтатусов  = СтатусыABCPЗаказа.Добавить();
					//ЗаполнитьЗначенияСвойств(НовСтрокаСтатусов, СтрокаТовара);
					//НовСтрокаСтатусов.НС = НС;
					//НовСтрокаСтатусов.НаименованиеСтатуса = СтрокаТовара.СтатусСайт;
					Если НеЗагружатьОтказы И (СтрокаТовара.КодСтатусаСайт = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(СтрокаТовара.КодСтатусаСайт) <> Неопределено) Тогда
						Продолжить;
					КонецЕсли;
					НС = НС + 1;
					СписокПозиций.Добавить(СтрокаТовара.ИдентификаторНоменклатуры);//если есть следующий статус, то сохраняем список, чтобы его обновить
					//но можно обновить только на один статус
					КодСледующегоСтатуса = СоответствиеКодСледующегоСтатуса.Получить(СтрокаТовара.КодСтатуса);
					Если КодСледующегоСтатуса<>Неопределено Тогда
						МассивПозицийКодСледующегоСтатуса.Добавить(СтрокаТовара.ИдентификаторНоменклатуры);//, КодСледующегоСтатуса);//если есть следующий статус, то сохраняем список, чтобы его обновить
					КонецЕсли;
					СтрокаДокумента = ДокОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТовара);//ВариантОбеспечения тут заполняется
					Если ЕстьСправочникСтатусыABCP Тогда
						СтрокаДокумента.СтатусABCP = Справочники.СтатусыABCP.НайтиПоКоду(СтрокаТовара.КодСтатуса);
						СтрокаДокумента.id = СтрокаТовара.ИдентификаторНоменклатуры;
					КонецЕсли;
					Если ЕстьУчетЗамен Тогда //возможно, надо будет менять заказ, заменяя виртуальные позиции реальными, разделять позиции заказа, так как она может быть сложена из разных позиций, объединенных одним артикулом
						СтрокаДокумента.УчетЗамен_АртикулВЗаказе = СтрокаТовара.numberFix;
						СтрокаДокумента.УчетЗамен_ИдентификаторВЗаказе = СтрокаТовара.ИдентификаторНоменклатуры;
						СтрокаДокумента.УчетЗамен_КоличествоВЗаказе = СтрокаТовара.Количество;
					КонецЕсли;
					//Если ЕстьАналогиНоменклатуры Тогда //возможно, надо будет менять заказ, заменяя виртуальные позиции реальными, разделять позиции заказа, так как она может быть сложена из разных позиций, объединенных одним артикулом
					//	СтрокаДокумента.ОсновнойАртикул = СтрокаТовара.articleCode;
					//	СтрокаДокумента.ОсновнойКодСтроки = СтрокаТовара.ИдентификаторНоменклатуры;
					//	СтрокаДокумента.ОсновнаяНоменклатура = Справочники.Номенклатура.НайтиПоКоду(СтрокаТовара.articleCode);
					//КонецЕсли;
					СтрокаДокумента.Номенклатура = СтрокаТовара.Номенклатура;
					СтрокаДокумента.КодСтроки = Число(СтрокаТовара.ИдентификаторНоменклатуры);
					Если id19225 Тогда //Белак - заполняем упаковку, в которой есть вес и объем
						СтрокаДокумента.Упаковка = ПолучитьУпаковкуНоменклатуры(СтрокаТовара.Номенклатура);
					КонецЕсли;
					Если НаименованиеХарактеристики<>"" И СтрокаДокумента.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
						СтрокаДокумента.Характеристика = ПолучитьХарактеристикуНоменклатуры(СтрокаДокумента.Номенклатура);
					КонецЕсли;
					//СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;//уже при загрузке всё сделали
					Если id15051 Тогда СтрокаДокумента["зс_уз_ЦенаПоставщика"] = СтрокаТовара.ЦенаЗакупки; СтрокаДокумента["зс_уз_Обеспечение"] = ДокОбъект.Склад; КонецЕсли;
					//если заказ перезаполняем, то вариант обеспечения берем из предыдущей таблицы
					НайденнаяСтрока =  ТаблицаТоваровДокумента.Найти(СтрокаТовара.Номенклатура, "Номенклатура");
					Если НайденнаяСтрока <> Неопределено Тогда
						СтрокаДокумента.ВариантОбеспечения = НайденнаяСтрока.ВариантОбеспечения;
						Если ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
							СтрокаДокумента.ВариантОбеспечения = СтрокаТовара.ВариантОбеспечения;
						КонецЕсли;
						//уже при загрузке таблиц заполнили
						//Если ЗначениеЗаполнено(ВариантОбеспеченияСНаличия) И МассивНашихСкладов.Найти(СтрокаТовара.distributorId) <> Неопределено Тогда
						//	СтрокаДокумента.ВариантОбеспечения = ВариантОбеспеченияСНаличия;//если позиция заказывается с нашего склада, то ставим выбранный вариант, обычно "Отгрузить"
						//КонецЕсли;
						Если СтрокаТовара.КодСтатуса = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(СтрокаТовара.КодСтатуса) <> Неопределено Тогда
							Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
								ВариантТребуется = Перечисления.ВариантыОбеспечения.Требуется;
							ИначеЕсли Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("УдалитьТребуется")<> Неопределено Тогда
								ВариантТребуется = Перечисления.ВариантыОбеспечения.УдалитьТребуется;
							Иначе
								ВариантТребуется = Неопределено;
							КонецЕсли;
							Если СтрокаДокумента.ВариантОбеспечения = ВариантТребуется Или СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
								Если СтрокаДокумента.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется Тогда //уже меняли на НеТребуется, чтобы следующую такую же позицию не изменить
									СтрокаДокумента.Отменено = Истина;
									СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
									ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
									Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
										СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если id15051 Тогда
							СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;//сначала делаем "К обеспечению", а лучше стандартными средствами ИзЗаказов - "Резервировать к дате";//!!! надо рассчитывать вариант обеспечения
						Иначе
							СтатусЗаказаПоСтатусу = СоответствиеСтатусЗаказа.Получить(СтрокаТовара.КодСтатуса);
							Если СтатусЗаказаПоСтатусу <> Неопределено Тогда
								ДокОбъект.Статус = СтатусЗаказаПоСтатусу;
							КонецЕсли;
							//Если ЗначениеЗаполнено(ВариантОбеспеченияСНаличия) И МассивНашихСкладов.Найти(СтрокаТовара.distributorId) <> Неопределено Тогда
							//	ВариантОбеспеченияПоСтатусу = ВариантОбеспеченияСНаличия;//если позиция заказывается с нашего склада, то ставим выбранный вариант, обычно "Отгрузить"
							//Иначе
							//	ВариантОбеспеченияПоСтатусу = СоответствиеВариантОбеспечения.Получить(СтрокаТовара.КодСтатуса);
							//КонецЕсли;
							//Если ЗначениеЗаполнено(СтрокаСтатусаДляКонтроля.ВариантОбеспечения) Тогда
							//Если ВариантОбеспеченияПоСтатусу <> Неопределено Тогда
							//	//СтрокаДокумента.ВариантОбеспечения = СтрокаСтатусаДляКонтроля.ВариантОбеспечения;
							//	СтрокаДокумента.ВариантОбеспечения = ВариантОбеспеченияПоСтатусу;
							//Иначе
								Если НЕ УТ111 Тогда
									//Если СтрокаТовара.КодСтатуса = КодСтатусаВыдано Тогда
									//	СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
									//Иначе
									//	СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;//Резервировать на складе //ИзЗаказов - резервировать к дате
									//КонецЕсли;
								Иначе
									СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПодЗаказ;
								КонецЕсли;
							//КонецЕсли;								
						КонецЕсли;
						Если СтрокаТовара.КодСтатуса = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(СтрокаТовара.КодСтатуса) <> Неопределено Тогда
							СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
							СтрокаДокумента.Отменено = Истина;
							ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
							Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
								СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
								Если Отладка Тогда
									сообщить(""+СтрокаДокумента.НомерСтроки+"	"+СтрокаДокумента.Номенклатура+"	"+ПричинаОтменыПоСоответствию);
								КонецЕсли;
							Иначе
								//сообщить("Не заполнена причина отмены");
							КонецЕсли;
						КонецЕсли;
						//Если ДокОбъект.Контрагент = КонтрагентНаНаличие Тогда
						//	Если Не ЗначениеЗаполнено(СтрокаДокумента.ВариантОбеспечения) Тогда
						//		СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
						//		СтрокаДокумента.Отменено = Ложь;
						//	КонецЕсли;
						//КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
							СтрокаДокумента.ВариантОбеспечения = СтрокаТовара.ВариантОбеспечения;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) И ДокОбъект.Контрагент <> КонтрагентНаНаличие Тогда
						СтрокаДокумента.ВариантОбеспечения = СтрокаТовара.ВариантОбеспечения;
					КонецЕсли;
					СоответствиеВариантаОбеспечения = СоответствиеВариантаОбеспеченияКодуСтроки.Получить(СтрокаДокумента.КодСтроки);
					Если (СтрокаТовара.КодСтатуса <> КодСтатусаОтказ И МассивСтатусовОтменено.Найти(СтрокаТовара.КодСтатуса) = Неопределено) И ЗначениеЗаполнено(СоответствиеВариантаОбеспечения) Тогда
						//сообщить(СтрокаДокумента.Номенклатура+"	"+СтрокаДокумента.ВариантОбеспечения+"	"+СоответствиеВариантаОбеспечения);
						ТекущийВариант = СоответствиеВесВариантаОбеспечения.Получить(СтрокаДокумента.ВариантОбеспечения);
						НовыйВариант = СоответствиеВесВариантаОбеспечения.Получить(СоответствиеВариантаОбеспечения);
						Если ЗначениеЗаполнено(НовыйВариант) И ЗначениеЗаполнено(ТекущийВариант) И НовыйВариант > ТекущийВариант Тогда
							СтрокаДокумента.ВариантОбеспечения = СоответствиеВариантаОбеспечения;
							Если СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
								СтрокаДокумента.Отменено = Истина;
								ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
								Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
									СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
								КонецЕсли;
							Иначе
								СтрокаДокумента.Отменено = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьКолонкаОбособленно Тогда
						Если ОбособленнаяЗакупкаПродажа Тогда
							Если СтрокаДокумента.Отменено = Ложь И (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
								СтрокаДокумента.Обособленно = Истина;
							КонецЕсли;
						Иначе
							СтрокаДокумента.Обособленно = Ложь;
						КонецЕсли;
					КонецЕсли;					
					//так как был к обеспечению, должен стать нормальным
					ВариантОбеспеченияПоСтатусу = СоответствиеВариантОбеспечения.Получить(СтрокаТовара.КодСтатуса);
					//Если ЗначениеЗаполнено(ВариантОбеспеченияПоСтатусу) Тогда
					//	Если id14985 И ЗначениеЗаполнено(СтрокаДокумента.ВариантОбеспечения) Тогда //не трогаем заполненный вариант обеспечения
					//	Иначе
					//		СтрокаДокумента.ВариантОбеспечения = ВариантОбеспеченияПоСтатусу;
					//	КонецЕсли;
					//КонецЕсли;
					//id14985 ЕТД
					Если Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("Требуется")<> Неопределено Тогда
						ВариантТребуется = Перечисления.ВариантыОбеспечения.Требуется;
					ИначеЕсли Метаданные.Перечисления.ВариантыОбеспечения.ЗначенияПеречисления.Найти("УдалитьТребуется")<> Неопределено Тогда
						ВариантТребуется = Перечисления.ВариантыОбеспечения.УдалитьТребуется;
					Иначе
						ВариантТребуется = Неопределено;
					КонецЕсли;
					Если СтрокаДокумента.ВариантОбеспечения = ВариантТребуется И ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда
						ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
					КонецЕсли;

					//!!! вообще, при загрузке заявки, если она уже есть, надо заново заполнять обеспечение
					
					//тогда что-то уже будет на складе, и тогда ставитьв ABCP, что оно на складе "Отгрузить"
					//или резервировать по мере поступления
					СтрокаДокумента.ДатаОтгрузки = НачалоДня(ДокОбъект.Дата)+1+СтрокаТовара.deadlineMax*3600;//ДокОбъект.Дата;
					Если id15051 Тогда ДокОбъект["зс_бк_РезервДо"] = КонецДня(Макс(ДокОбъект["зс_бк_РезервДо"], СтрокаДокумента.ДатаОтгрузки)); КонецЕсли;
					СтрокаДокумента.Количество = СтрокаТовара.Количество;
					СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество;
					Если СтрокаДокумента.Количество = 0 Или НЕ ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) Тогда
						Если НЕ СтрокаДокумента.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда //уже отгрузили
							СтрокаДокумента.Отменено = Истина;
							СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
							ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
							Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
								СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;								
					Если СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
						Если СтрокаДокумента.ДатаОтгрузки<НачалоДня(ТекущаяДата()) Тогда
							СтрокаДокумента.ДатаОтгрузки = ТекущаяДата();
						КонецЕсли;
					КонецЕсли;
					СтрокаДокумента.ВидЦены = ВидЦеныДокумента;
					Если ЦенаИзСправочника Тогда
						Если Отладка Тогда
							//ТекстСообщения = "цена из справочника у номенклатуры: "+СтрокаТовара.Номенклатура+", "+СтрокаТовара.ЦенаПродажи;
							//сообщить(ТекстСообщения);
						КонецЕсли;
						ЦенаНоменклатуры = ПолучитьЦенуНоменклатуры(СтрокаТовара.Номенклатура, ДокОбъект.Дата);
						Если ЦенаНоменклатуры = 0 Тогда
							//ТекстСообщения = "Не установлена цена номенклатуры: "+СтрокаТовара.Номенклатура+", артикул "+СтрокаТовара.numberFix+", производитель "+СтрокаТовара.Производитель;
							//ЗаписьВЛог(ТекстСообщения);
							СтрокаДокумента.Цена = СтрокаТовара.ЦенаПродажи;
						Иначе
							СтрокаДокумента.Цена = ЦенаНоменклатуры;
							СтрокаДокумента.ВидЦены = ВидЦеныДокумента;
						Конецесли;
					Иначе
						СтрокаДокумента.Цена = СтрокаТовара.ЦенаПродажи;
					КонецЕсли;
					СтрокаДокумента.Сумма = СтрокаДокумента.Цена * СтрокаДокумента.Количество;//СтрокаТовара.Сумма;
					СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
					ВидЦеныПоСкладу = СоответствиеВидЦеныПоСкладу.Получить(СтрокаТовара.distributorId);
					Если НЕ ПроизвольныйВидЦеныВЗаказе И ВидЦеныПоСкладу <> Неопределено Тогда
						Если Лев(АдресСервиса, 7) <> "id14106" Тогда
							СтрокаДокумента.ВидЦены = ВидЦеныПоСкладу;
						КонецЕсли;
					КонецЕсли;
					СоглашениеПоСкладу = СоответствиеСоглашениеПоСкладу.Получить(СтрокаТовара.distributorId);
					Если СоглашениеПоСкладу <> Неопределено Тогда
						ДокОбъект.Соглашение = СоглашениеПоСкладу;
					КонецЕсли;
					Если СтрокаДокумента.Цена = 0 Тогда
						НайденнаяСтрока = ТаблицаТоваровДокумента.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");
						Если НЕ НайденнаяСтрока = Неопределено Тогда
							СтрокаДокумента.Цена = НайденнаяСтрока.Цена;
							СтрокаДокумента.Сумма = НайденнаяСтрока.Сумма;
							СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
						КонецЕсли;
					КонецЕсли;
					Если СтрокаДокумента.Количество = 0 Тогда
						СтрокаДокумента.Количество = 0;
						СтрокаДокумента.КоличествоУпаковок = 0;
					КонецЕсли;
					Если СтрокаДокумента.Сумма = 0 Тогда //иначе возврат не проводится
						СтрокаДокумента.Сумма = СтрокаДокумента.Количество * СтрокаДокумента.Цена;
					КонецЕсли;
					Если id36235 Тогда
						ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтрокаДокумента, ДокОбъект.Договор, Неопределено);
					Иначе
						ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтрокаДокумента, ДокОбъект.Договор, СтрокаЗаявки.СтавкаНДС);
					КонецЕсли;
					Если ЗаполнятьСкладПоСоглашению И ЗначениеЗаполнено(ДокОбъект.Соглашение) И ЗначениеЗаполнено(ДокОбъект.Соглашение.Склад) Тогда
						СтрокаЗаявки.Склад = ДокОбъект.Соглашение.Склад;
						ДокОбъект.Склад = СтрокаЗаявки.Склад;
					КонецЕсли;
					Если ЗаполнятьСкладПоСоглашению И ЗначениеЗаполнено(ДокОбъект.Склад) Тогда
						СтрокаДокумента.Склад = ДокОбъект.Склад;
						СтрокаТовара.Склад = ДокОбъект.Склад;
					Иначе
						Если ЗаполнятьПоТипамПлатежей И СкладИзТипаПлатежа <> Неопределено Тогда
						Иначе
							СтрокаДокумента.Склад = СтрокаТовара.Склад;
						КонецЕсли;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(ДокОбъект.Склад) Тогда
						ДокОбъект.Склад = СтрокаТовара.Склад;
					КонецЕсли;
					Если ЗаполнятьПоТипамПлатежей И СкладИзТипаПлатежа <> Неопределено Тогда
					Иначе
						Если ПерваяСтрока И ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда //если 2 разных склада
							Если НЕ ЗаполнятьСкладПоСоглашению Тогда
								ДокОбъект.Склад = СтрокаТовара.Склад;
							КонецЕсли;
							ПерваяСтрока = Ложь;
						КонецЕсли;
						Если (НЕ ДокОбъект.Склад.ЭтоГруппа) И (СтрокаДокумента.Склад<>ДокОбъект.Склад) Тогда
							ГруппаСкладов = СтрокаДокумента.Склад.Родитель;
							Если ЗначениеЗаполнено(ГруппаСкладов) Тогда
								ДокОбъект.Склад = ГруппаСкладов;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если НЕ СтрокаДокумента.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда //уже отгрузили
						Если СтрокаДокумента.Цена = 0 Или СтрокаТовара.КодСтатусаСайт = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(СтрокаТовара.КодСтатуса) <> Неопределено Тогда
							СтрокаДокумента.Отменено = Истина;
							СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
							//СтрокаДокумента.ПричинаОтмены = НайтиДобавитьПричинуОтмены(СтрокаТовара.commentAnswer);
							ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
							Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
								СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
							КонецЕсли;
						Иначе
							СтрокаДокумента.Отменено = Ложь;
						КонецЕсли;
					КонецЕсли;
					Если ИспользоватьСерииНоменклатуры Тогда
						СтрокаДокумента.Серия = НайтиДобавитьСериюНоменклатуры(СтрокаТовара);
						СтрокаДокумента.СтатусУказанияСерий = 14;//13;
					Иначе
						СтрокаДокумента.СтатусУказанияСерий = 0;
						СтрокаДокумента.Серия = "";
					КонецЕсли;
					//ид 44546
					Если ЕстьЦенаЗакупа Тогда
						СтрокаДокумента.ЦенаЗакупа = СтрокаТовара.ЦенаЗакупки;
					КонецЕсли;
					Если ЕстьПоставщик Тогда
						Если ЗначениеЗаполнено(СтрокаТовара.Поставщик) Тогда
							СтрокаДокумента.Поставщик = СтрокаТовара.Поставщик.Партнер;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьProKod_СрокПоставки Тогда
						СтрокаДокумента.ProKod_СрокПоставки = Формат(ДокОбъект.Дата+СтрокаТовара.deadlineMax*3600);
					КонецЕсли;
					Если ЕстьСтатусИмя Тогда
						СтрокаДокумента.СтатусИмя = СтрокаТовара.СтатусСайт;
					КонецЕсли;
					Если ЕстьID Тогда
						СтрокаДокумента.ID = СтрокаТовара.ИдентификаторНоменклатуры;
					КонецЕсли;
					Если ЕстьПользовательВТабличнойЧасти Тогда
						СтрокаДокумента.Пользователь = ДокОбъект.Менеджер;
					КонецЕсли;
					ЖелаемаяДатаОтгрузкиЧасы = Макс(ЖелаемаяДатаОтгрузкиЧасы, СтрокаТовара.deadlineMax*3600);
				КонецЦикла;
				//КлючОбъекта  = "ABCP_1C";
				//КлючНастроек = "ЗаказКлиента_"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0");
				//ИмяПользователя = ИмяПользователя();
				//ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, СтатусыABCPЗаказа, , ИмяПользователя);
				//ИмяПользователя = "Администратор";//иначе другие пользователи не будут иметь доступа к этой таблице значений 
				//Попытка
				//	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, СтатусыABCPЗаказа, , ИмяПользователя);
				//Исключение
				//КонецПопытки;
			Иначе
				Продолжить;//не сохраняем документ, в нём нет позиций				
			КонецЕсли;
			//ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(ДокОбъект, ДокОбъект.Товары.Итог("Сумма"), 0, Ложь);
		Иначе
			//позиции не поменялись, но возможно поменялись варианты обеспечения
			СоответствиеПозицияВариантОбеспечения = Новый Соответствие;
			СтатусЗаказаПоСтатусу = Неопределено;
			ПриоритетПоСтатусу = Неопределено;
			МассивОтмененныхПозиций = Новый Массив;
			Для Каждого СтрокаНоменклатуры Из НайденныеСтроки Цикл
				Если СтатусЗаказаПоСтатусу = Неопределено Тогда
					СтатусЗаказаПоСтатусу = СоответствиеСтатусЗаказа.Получить(СтрокаНоменклатуры.КодСтатуса);
					Если СтатусЗаказаПоСтатусу <> Неопределено Тогда
						ДокОбъект.Статус = СтатусЗаказаПоСтатусу;
					КонецЕсли;
				КонецЕсли;
				Если ПриоритетПоСтатусу = Неопределено Тогда
					ПриоритетПоСтатусу = СоответствиеПриоритет.Получить(СтрокаНоменклатуры.КодСтатуса);
					Если ПриоритетПоСтатусу <> Неопределено Тогда
						ДокОбъект.Приоритет = ПриоритетПоСтатусу;
					КонецЕсли;
				КонецЕсли;
				Если СтрокаНоменклатуры.КодСтатуса = КодСтатусаОтказ Или МассивСтатусовОтменено.Найти(СтрокаНоменклатуры.КодСтатуса) <> Неопределено Тогда
					МассивОтмененныхПозиций.Добавить(СтрокаНоменклатуры.ИдентификаторНоменклатуры);
				КонецЕсли;
				ВремВариант = СоответствиеВариантОбеспечения.Получить(СтрокаНоменклатуры.КодСтатуса);
				Если ВремВариант = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СоответствиеПозицияВариантОбеспечения.Вставить(СтрокаНоменклатуры.ИдентификаторНоменклатуры, ВремВариант);
			КонецЦикла;
			//теперь проходим по документу
			НадоЗаписатьДокумент = Ложь;
			Для Каждого СтрокаДокумента Из ДокОбъект.Товары Цикл
				Структура = Новый Структура("ИдентификаторНоменклатуры");
				СоответствиеВариантаОбеспечения = СоответствиеВариантаОбеспеченияКодуСтроки.Получить(СтрокаДокумента.КодСтроки);
				Если ЗначениеЗаполнено(СоответствиеВариантаОбеспечения) Тогда
					СтрокаДокумента.ВариантОбеспечения = СоответствиеВариантаОбеспечения;
					Если СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
						СтрокаДокумента.Отменено = Истина;
						//надо не кодстатуса, а искать эту строку в таблиценоменклатуры
						Структура.ИдентификаторНоменклатуры = СтрокаДокумента.КодСтроки;
						Попытка
							СтрокаТовара = ТаблицаНоменклатуры.НайтиСтроки(Структура)[0];
							ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
							Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
								СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЕсли;
				Иначе
					ВремВариант = СоответствиеПозицияВариантОбеспечения.Получить(СтрокаДокумента.КодСтроки);
					Если ВремВариант <> Неопределено И ВремВариант <> СтрокаДокумента.ВариантОбеспечения Тогда
						СтрокаДокумента.ВариантОбеспечения = ВремВариант;
					КонецЕсли;
				КонецЕсли;
				ПозицияВариантОбеспеченияПоСтатусу = СоответствиеПозицияВариантОбеспечения.Получить(СтрокаДокумента.КодСтроки);
				Если ПозицияВариантОбеспеченияПоСтатусу <> Неопределено Тогда
					ТекущийВариант = СоответствиеВесВариантаОбеспечения.Получить(СтрокаДокумента.ВариантОбеспечения);
					НовыйВариант = СоответствиеВесВариантаОбеспечения.Получить(ПозицияВариантОбеспеченияПоСтатусу);
					Если МассивОтмененныхПозиций.Найти(СтрокаДокумента.КодСтроки) <> Неопределено Тогда
						НовыйВариант = 10;//отказ старше всех других вариантов
					КонецЕсли;
					Если ЗначениеЗаполнено(НовыйВариант) И ЗначениеЗаполнено(ТекущийВариант) И НовыйВариант > ТекущийВариант Тогда
						СтрокаДокумента.ВариантОбеспечения = ПозицияВариантОбеспеченияПоСтатусу;
						Если СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
							СтрокаДокумента.Отменено = Истина;
							//надо не кодстатуса, а искать эту строку в таблиценоменклатуры
							Структура.ИдентификаторНоменклатуры = СтрокаДокумента.КодСтроки;
							СтрокаТовара = ТаблицаНоменклатуры.НайтиСтроки(Структура)[0];
							ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
							Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
								СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
							КонецЕсли;
						Иначе
							СтрокаДокумента.Отменено = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ВариантыОбеспеченияПерезаполнены = Истина;
				//если одна из строк не отгрузить, значить не весь документ можно отгружать
				Если СтрокаДокумента.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
					Если ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда
						ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
					КонецЕсли;
				КонецЕсли;
				НадоЗаписатьДокумент = Истина;
			КонецЦикла;
		КонецЕсли;//Если ЕстьОтказ Или (НЕ ((СтрокВЗаказе = СтрокаЗаявки.Позиций) И (СуммаЗаказа = СтрокаЗаявки.СуммаЗаявки))) Тогда
		НеПроводитьДокумент = Ложь;
		//проверяем остатки на складе, чтобы провелся заказ
		//Запрос.УстановитьПараметр("МомВрем", Новый Граница(МомВрем.МоментВремени(), ВидГраницы.Включая));
		//https://infostart.ru/public/158617/
		//ещё бы выданные в ABCP позиции надо пробрасывать
		//это условие лучше не использовать, так как позиции, у которых не было остатков, ставятся в отказ
		#Область ПроверятьНаличиеНашихПозиций_И_СтавитьВОтказЕслиНетНаличияНашихПозиций
		Если ПроверятьНаличиеНашихПозиций И СтавитьВОтказЕслиНетНаличияНашихПозиций И СводныйЗаказКлиентаПоСтатусу И ВариантОбеспеченияСводногоЗаказа = Перечисления.ВариантыОбеспечения.Отгрузить Тогда //если отгрузить, то проверяем, есть на складе или нет
			ПереченьПозиций = "";
			ДатаЗапроса = ТекущаяДата();
			ЗапросОстатков.УстановитьПараметр("НаДату", ДатаЗапроса);
			ЗапросОстатков.УстановитьПараметр("Номенклатура", ДокОбъект.Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));
			ЗапросОстатков.УстановитьПараметр("Склад", ДокОбъект.Склад);
			Результат = ЗапросОстатков.Выполнить();
			КодСтатусаОтказныхПозиций = Формат(КодСтатусаОтказ, "ЧГ=0");
			ЗаписьВЛог("Проверка остатков по заказу "+ДокОбъект.НомерПоДаннымКлиента+", позиций "+ДокОбъект.Товары.Количество()+" на "+ДатаЗапроса);
			Если Результат.Пустой() Тогда
				НеПроводитьДокумент = Истина;
				//все в отказ
				ЗаписьВЛог("Нет остатков на "+ДатаЗапроса+", все позиции в отказ:"+ДокОбъект.НомерПоДаннымКлиента);
				Для Каждого СтрокаДокумента Из ДокОбъект.Товары Цикл
					Если МассивОтгруженныхПозиций.Найти(СтрокаДокумента.КодСтроки) <> Неопределено Тогда
						ЗаписьВЛог(""+СтрокаДокумента.Номенклатура.Артикул+" "+СтрокаДокумента.Номенклатура+" уже обработана раньше, пропускаем");
						Продолжить;
					КонецЕсли;
					ЗаписьВЛог(""+СтрокаДокумента.Номенклатура.Артикул+" "+СтрокаДокумента.Номенклатура+" на складе нет, в документе "+СтрокаДокумента.Количество);
					СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
					СтрокаДокумента.Отменено = Истина;
					Структура.ИдентификаторНоменклатуры = СтрокаДокумента.КодСтроки;
					СтрокаТовара = ТаблицаНоменклатуры.НайтиСтроки(Структура)[0];
					ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
					Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
						СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
					КонецЕсли;
					НС = НС + 1;
					ФорматНС = Формат(НС,"ЧГ=0");
					ПереченьПозиций = ПереченьПозиций + "&order[positions]["+ФорматНС+"][id]="+Формат(СтрокаДокумента.КодСтроки,"ЧГ=0")+"&order[positions]["+ФорматНС+"][statusCode]="+КодСтатусаОтказныхПозиций;//+"&order[positions]["+ФорматНС+"][comment]="+Комментарий;
				КонецЦикла;
				Если ПереченьПозиций <> "" Тогда
					ЗаписьВЛог("ПроверятьНаличиеНашихПозиций_И_СтавитьВОтказЕслиНетНаличияНашихПозиций");
					ОбновитьСтатусЗаявки(ДокОбъект.НомерПоДаннымКлиента, ПереченьПозиций, КодСтатусаОтказныхПозиций,,Истина);
				КонецЕсли;
				СписокПозиций.Очистить();
				МассивПозицийКодСледующегоСтатуса.Очистить();
			Иначе
				//проверяем остатки по позициям
				Выборка = Результат.Выбрать();
				СтруктураНоменклатура = Новый Структура("Номенклатура, ВариантОбеспечения");
				СтруктураНоменклатура.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				НС = 0;
				МассивПроверенныхПозиций = Новый Массив;
				Пока Выборка.Следующий() Цикл //выборка не найдет товар, которого нет !
					Наличие = Выборка.Наличие;
					СтруктураНоменклатура.Номенклатура = Выборка.Ссылка;
					СтрокиДокумента = ДокОбъект.Товары.НайтиСтроки(СтруктураНоменклатура);
					Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
						МассивПроверенныхПозиций.Добавить(СтрокаДокумента.КодСтроки);
						Если МассивОтгруженныхПозиций.Найти(СтрокаДокумента.КодСтроки) <> Неопределено Тогда
							ЗаписьВЛог(""+СтрокаДокумента.Номенклатура.Артикул+" "+СтрокаДокумента.Номенклатура+" уже обработана ранее, пропускаем");
							Продолжить;
						КонецЕсли;
						ЗаписьВЛог(""+СтрокаДокумента.Номенклатура.Артикул+" "+СтрокаДокумента.Номенклатура+" на складе "+Наличие+" в документе "+СтрокаДокумента.Количество);
						Если ДокОбъект.Проведен И СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
							//так как документ проведён, он уже забрал из остатков своё количество
							//Наличие = Наличие + СтрокаДокумента.Количество;//документ только создаётся
						КонецЕсли;
						Если Наличие >= СтрокаДокумента.Количество Тогда
							Наличие = Наличие - СтрокаДокумента.Количество;
						Иначе
							ЗаписьВЛог("Не хватает, в отказ");
							СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
							СтрокаДокумента.Отменено = Истина;
							//ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
							//Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
							//	СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
							//КонецЕсли;
							НС = НС + 1;
							ФорматНС = Формат(НС,"ЧГ=0");
							ПереченьПозиций = ПереченьПозиций + "&order[positions]["+ФорматНС+"][id]="+Формат(СтрокаДокумента.КодСтроки,"ЧГ=0")+"&order[positions]["+ФорматНС+"][statusCode]="+КодСтатусаОтказныхПозиций;//+"&order[positions]["+ФорматНС+"][comment]="+Комментарий;
							ИсключаемаяПозиция = СписокПозиций.Найти(СтрокаДокумента.КодСтроки);
							Если ИсключаемаяПозиция <> Неопределено Тогда //из списка изменяемых статусов позиций убираем отказные
								СписокПозиций.Удалить(ИсключаемаяПозиция);
								МассивПозицийКодСледующегоСтатуса.Удалить(ИсключаемаяПозиция);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				//теперь смотрим, остались ли непроверенные позиции - по ним нет остатков в запросе, значит их надо ставить в отказ
				СтрокиДокумента = ДокОбъект.Товары.НайтиСтроки(Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить));
				Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
					Если МассивПроверенныхПозиций.Найти(СтрокаДокумента.КодСтроки) = Неопределено Тогда //эту позицю не проверяли, значит, её нет на складе
						ЗаписьВЛог(""+СтрокаДокумента.Номенклатура.Артикул+" "+СтрокаДокумента.Номенклатура+" на складе не осталось, в документе "+СтрокаДокумента.Количество);
						СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
						СтрокаДокумента.Отменено = Истина;
						//ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
						//Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
						//	СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
						//КонецЕсли;
						НС = НС + 1;
						ФорматНС = Формат(НС,"ЧГ=0");
						ПереченьПозиций = ПереченьПозиций + "&order[positions]["+ФорматНС+"][id]="+Формат(СтрокаДокумента.КодСтроки,"ЧГ=0")+"&order[positions]["+ФорматНС+"][statusCode]="+КодСтатусаОтказныхПозиций;//+"&order[positions]["+ФорматНС+"][comment]="+Комментарий;
					КонецЕсли;
				КонецЦикла;
				//Если СводныйЗаказКлиентаПоСтатусу Тогда//позиции, которых нет на складе, делаем отказными на сайте
				Если ПереченьПозиций <> "" Тогда
					ЗаписьВЛог("позиции, которых нет на складе, делаем отказными на сайте");
					ОбновитьСтатусЗаявки(ДокОбъект.НомерПоДаннымКлиента, ПереченьПозиций, КодСтатусаОтказныхПозиций,,Истина);
				КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти
		//ДокОбъект.ЖелаемаяДатаОтгрузки = ДокОбъект.Дата+ЖелаемаяДатаОтгрузкиЧасы*3600;
		#Область УслугаДоставкиВЗаказе
		Если СтрокаЗаявки.СтоимостьДоставки>0 И ЗначениеЗаполнено(УслугаДоставки) Тогда
			НеДобавлятьДоставку = Ложь;
			ПозицийДокумента = 0;
			ОтказныхПозиций = 0;
			Для Каждого СтрокаДокумента Из ДокОбъект.Товары Цикл
				Если СтрокаДокумента.Номенклатура <> УслугаДоставки Тогда
					ПозицийДокумента = ПозицийДокумента + 1;
					Если Не УТ111 Тогда
						Если СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Или СтрокаДокумента.Отменено Тогда
							ОтказныхПозиций = ОтказныхПозиций + 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ОтказныхПозиций < ПозицийДокумента Тогда
				Если ЗначениеЗаполнено(УслугаДоставки) И СтрокаЗаявки.СтоимостьДоставки>0 Тогда 
					СтруктураДоставка = Новый Структура("Номенклатура", УслугаДоставки);
					СтрокиСДоставкой = ДокОбъект.Товары.НайтиСтроки(СтруктураДоставка);
					Если СтрокиСДоставкой.Количество() = 0 Тогда
						ДокОбъект.АдресДоставки = СтрокаЗаявки.АдресДоставки;
						//ДокОбъект.ДополнительнаяИнформация = СтрокаЗаявки.АдресДоставки;//внизу в заказе будет выводиться, не надо
						//раньше уже заполнили
						//ДокОбъект.ДополнительнаяИнформацияПоДоставке = СтрокаЗаявки.АдресДоставки;
						//ДокОбъект.ДополнительнаяИнформацияПоДоставке = ""+СтрокаЗаявки.methodName+" "+СтрокаЗаявки.methodType+" "+СтрокаЗаявки.АдресДоставки;
						Если НЕ УТ111 Тогда
							Если ЗначениеЗаполнено(СпособДоставки) Тогда
								ДокОбъект.СпособДоставки = СпособДоставки;
							Иначе
								ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаЗаявки.СпособДоставки) Тогда
								ДокОбъект.СпособДоставки = СтрокаЗаявки.СпособДоставки;
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаЗаявки.ЗонаДоставки) Тогда
								ДокОбъект.ЗонаДоставки = СтрокаЗаявки.ЗонаДоставки;
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаЗаявки.ПеревозчикПартнер) Тогда
								ДокОбъект.ПеревозчикПартнер = СтрокаЗаявки.ПеревозчикПартнер;
							КонецЕсли;
						КонецЕсли;
						НС = НС + 1;
						СтрокаДокумента = ДокОбъект.Товары.Добавить();
						СтрокаДокумента.Номенклатура = УслугаДоставки;//услуга
						//НайденныеСтроки = СпособыДоставки.НайтиСтроки(Новый Структура("id", СтрокаЗаявки.deliveryTypeId);
						//Если НайденныеСтроки.Количество()<>0 Тогда
						//	Если ЗначениеЗаполнено(НайденныеСтроки[0].Услуга) Тогда
						//		СтрокаДокумента.Номенклатура = НайденныеСтроки[0].Услуга;
						//	КонецЕсли;
						//КонецЕсли;
						Если id15051 Тогда 
							СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
						Иначе
							СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;//всегда должна быть отгрузить
							//Если НайденныеСтроки.Количество()>0 Тогда
							//	ВремВариантОбеспечения = НайденныеСтроки[0].ВариантОбеспечения;
							//	Если ЗначениеЗаполнено(ВремВариантОбеспечения) Тогда
							//		СтрокаДокумента.ВариантОбеспечения = ВремВариантОбеспечения;
							//	КонецЕсли;
							//КонецЕсли;
						КонецЕсли;
						СтрокаДокумента.ДатаОтгрузки = ДокОбъект.Дата;
						СтрокаДокумента.Количество = 1;
						СтрокаДокумента.КоличествоУпаковок = 1;
						СтрокаДокумента.ВидЦены = ВидЦены;
						СтрокаДокумента.Цена = СтрокаЗаявки.СтоимостьДоставки;
						СтрокаДокумента.Сумма = СтрокаЗаявки.СтоимостьДоставки;
						СтрокаДокумента.СуммаСНДС = СтрокаЗаявки.СтоимостьДоставки;
						СтрокаДокумента.Склад = Склад;//а то вдруг группа
						ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтрокаДокумента, ДокОбъект.Договор);
					КонецЕсли;
				КонецЕсли;
			Иначе
				//если доставка там была, то удаляем её
				СтруктураДоставка = Новый Структура("Номенклатура", УслугаДоставки);
				СтрокиСДоставкой = ДокОбъект.Товары.НайтиСтроки(СтруктураДоставка);
				Если СтрокиСДоставкой.Количество() > 0 Тогда
					Для Каждого СтрокаСДоставкой Из СтрокиСДоставкой Цикл
						ДокОбъект.Товары.Удалить(СтрокаСДоставкой);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти
		
		ДокументПроведен = Ложь;
		Если ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда
			//могут быть неотменённые позиции, которым надо поставить статус "Отгрузить"
			Для Каждого СтрокаДокумента Из ДокОбъект.Товары Цикл
				Если СтрокаДокумента.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется Тогда
					СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
		Структура = Новый Структура("ИдентификаторНоменклатуры");
		Для Каждого СтрокаДокумента Из ДокОбъект.Товары Цикл
			Если СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется И СтрокаДокумента.Отменено = Ложь Тогда
				СтрокаДокумента.Отменено = Истина;
			КонецЕсли;
			Если СтрокаДокумента.Отменено Тогда
				Попытка
					Структура.ИдентификаторНоменклатуры = СтрокаДокумента.КодСтроки;
					СтрокаТовара = ТаблицаНоменклатуры.НайтиСтроки(Структура)[0];
					ПричинаОтменыПоСоответствию = СоответствиеПричиныОтменыСтатусу.Получить(СтрокаТовара.КодСтатуса);
					Если ЗначениеЗаполнено(ПричинаОтменыПоСоответствию) Тогда
						СтрокаДокумента.ПричинаОтмены = ПричинаОтменыПоСоответствию;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		#Область ИспользоватьГрафикиОплаты
		Попытка
			Если ИспользоватьГрафикиОплаты Тогда
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
					ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
					Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
						СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
						ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
					КонецЕсли;
				Иначе
					Если НЕ НеПерезаполнятьШапкуДокументов Или НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
						ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
					КонецЕсли;
				КонецЕсли;
			Иначе
				СуммаЗаказано = ДокОбъект.Товары.Итог("Сумма");// - ДокОбъект.Товары.Итог("СуммаОтменено");
				ОтмененныеСтроки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Отменено", Истина));
				Для Каждого ОтмененнаяСтрока Из ОтмененныеСтроки Цикл
					СуммаЗаказано = СуммаЗаказано - ОтмененнаяСтрока.Сумма;
				КонецЦикла;
				Если ОтмененныеСтроки.Количество() > 0 Тогда
					Для Каждого ТекСтрока Из ДокОбъект.ЭтапыГрафикаОплаты Цикл
						ТекСтрока.СуммаПлатежа = СуммаЗаказано;
					КонецЦикла;
				КонецЕсли;
				СуммаЗалогаЗаТару = 0;
				Если НЕ id15051 Тогда
					Если НЕ НеПерезаполнятьШапкуДокументов Или НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
						Если (УТ114 И (Подверсия3 > 5)) Тогда
							ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
						ИначеЕсли УТ115 Тогда
						ИначеЕсли НЕ УТ111 Тогда
							ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
								ДокОбъект,
								ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
								?(УТ115, Неопределено, Макс(ДокОбъект.ЖелаемаяДатаОтгрузки, ТекущаяДата())),//обычно пустая в УТ 11.5, должна быть текущая дата, иначе "Дата платежа по кредитному этапу должна быть не меньше даты отгрузки ..."
								СуммаЗаказано,
								СуммаЗалогаЗаТару);
							КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		#КонецОбласти
		Если НЕ НеПерезаполнятьШапкуДокументов Или НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
			ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
				ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
		КонецЕсли;//Если НЕ НеПерезаполнятьШапкуДокументов Или НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
		
		//если во всех строчках один склад из настроек, а в реквизите "Склад" - группа, то её исправляем
		Если ДокОбъект.Склад.ЭтоГруппа Тогда
			НайденныеСтрокиДокумента = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Склад", Склад));
			Если НайденныеСтрокиДокумента.Количество() = ДокОбъект.Товары.Количество() Тогда
				ДокОбъект.Склад = Склад;
			КонецЕсли;
		КонецЕсли;
		//Если ЕстьАналогиНоменклатуры Тогда
		//	//здесь проверяем виртуальные и реальные позиции и переделываем по-нормальному //надо делать в заказе, с учетом наличия на складе
		//КонецЕсли;
		ДокОбъект.Согласован = Истина;
		#Область ЗаполнениеДопРеквизита_deliveryOfficeId
		Если ЗначениеЗаполнено(СтрокаЗаявки.deliveryOfficeId) И (СтрокаЗаявки.deliveryOfficeId<>"0") Тогда
			
			СтрокиДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", deliveryOfficeId.Ссылка));
			Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
				СтрокаДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.Добавить();
			Иначе
				СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
			КонецЕсли;
			СтрокаДополнительныеРеквизиты.Свойство = deliveryOfficeId.Ссылка;
			СтрокаДополнительныеРеквизиты.Значение = СтрокаЗаявки.deliveryOfficeId;
			СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = Формат(СтрокаЗаявки.deliveryOfficeId,"ЧГ=0");
			
			СтрокиДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", deliveryOffice.Ссылка));
			Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
				СтрокаДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.Добавить();
			Иначе
				СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
			КонецЕсли;
			СтрокаДополнительныеРеквизиты.Свойство = deliveryOffice.Ссылка;
			СтрокаДополнительныеРеквизиты.Значение = СтрокаЗаявки.deliveryOffice;
			СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = СтрокаЗаявки.deliveryOffice;
		КонецЕсли;
		#КонецОбласти
		
		ЕстьОшибка = Ложь;
		Попытка       
			СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, ДокОбъект);
			ДокОбъект.Записать(РежимЗаписиДок); 
			ДокументПроведен = Истина;
		Исключение
			Если МассивЗаказовДляПерепроведения.Найти(ДокОбъект.Ссылка) = Неопределено Тогда
				МассивЗаказовДляПерепроведения.Добавить(ДокОбъект.Ссылка);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
				ДокОбъект.ОбменДанными.Загрузка = Истина;
				ДокОбъект.Записать();
				ДокОбъект.ОбменДанными.Загрузка = Ложь;
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
			ТекстСообщения = "идентификатор заявки:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", не удалось провести "+?(ДокументПроведен, "и проведен", "")+" документ " +СокрЛП(ДокОбъект)+", позиций "+ДокОбъект.Товары.Количество();
			ЗаписьВЛог(ТекстСообщения);
			//сообщить("Не удалось провести "+СокрЛП(ДокОбъект));
		КонецПопытки;
		Если ЕстьОшибка Тогда
			Попытка   
				СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, ДокОбъект);
				ДокОбъект.Записать();
			Исключение
				ТекстСообщения = "идентификатор заявки:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", не удалось записать "+ОписаниеОшибки();
				ЗаписьВЛог(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		ТекстСообщения = "идентификатор заявки:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+?(ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента),"",", создан ")+?(ДокументПроведен, "и проведен", "")+" документ " +СокрЛП(ДокОбъект);
		ЗаписьВЛог(ТекстСообщения);
		//добавляем данные в специальные регистры сведений\
		//сообщить(id22842);
		#Область Регистрыid22842
		Если id22842 Тогда
			ТекстСообщения = "записываем в регистры доп.данные, заявка №	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", документ " +СокрЛП(ДокОбъект);
			ЗаписьВЛог(ТекстСообщения);
			НаборЗаписей = РегистрыСведений.W247_СодержимоеЗаказовКлиентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаказКлиента.Установить(ДокОбъект.Ссылка);
			НаборЗаписей.Записать();
			//W247_Заказы.ОбновитьСтатусыЗаказаКлиента(ДокОбъект.Ссылка);
			Структура = Новый Структура("ИдентификаторНоменклатуры");
			Для Каждого ТекСтрока Из ДокОбъект.Товары Цикл
				МенеджерЗаписи = РегистрыСведений.W247_СодержимоеЗаказовКлиентов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекСтрока);
				МенеджерЗаписи.ЗаказКлиента = ДокОбъект.Ссылка;
				МенеджерЗаписи.ИдТовара = ТекСтрока.КодСтроки;
				МенеджерЗаписи.ИДКорзины = ТекСтрока.КодСтроки;
				МенеджерЗаписи.НаименованиеССайта = СокрЛП(ТекСтрока.Номенклатура);
				Попытка
					МенеджерЗаписи.СтатусТовара = Перечисления.СтатусыЗаказовКлиентовИнет.ВРаботе;
				Исключение
				КонецПопытки;
				Структура.ИдентификаторНоменклатуры = ТекСтрока.КодСтроки;
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Структура);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					МенеджерЗаписи.Поставщик = НайденнаяСтрока.Поставщик;
					МенеджерЗаписи.ЦенаПоставщика = НайденнаяСтрока.ЦенаЗакупки;
					МенеджерЗаписи.СрокДоставки = НайденнаяСтрока.deadlineMax;
					Прервать;
				КонецЦикла;
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		#КонецОбласти
		
		//Если СводныйЗаказКлиентаПоСтатусу И ЗначениеЗаполнено(КодСледующегоСтатуса) И СписокПозиций.Количество()>0 Тогда
		//Если ЗначениеЗаполнено(КодСледующегоСтатуса) И СписокПозиций.Количество()>0 Тогда
		Если МассивПозицийКодСледующегоСтатуса.Количество()>0 Тогда
			//меняем у позиций статус на следующий
			//КодСледующегоСтатусаСтрокой = Формат(КодСледующегоСтатуса,"ЧГ=0");
			ПереченьПозиций = "";
			ПереченьПозицийСтрокой = "";
			НС = 0;
			Для Каждого Элемент Из МассивПозицийКодСледующегоСтатуса Цикл
				КодСледующегоСтатусаСтрокой = Формат(КодСледующегоСтатуса,"ЧГ=0");
				НС = НС + 1;
				ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(Элемент,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСледующегоСтатусаСтрокой;
				ПереченьПозицийСтрокой = ПереченьПозицийСтрокой + ", "+Формат(Элемент,"ЧГ=0"); 
			КонецЦикла;
			Если ПереченьПозиций <> "" Тогда
				ОбновитьСтатусЗаявки(СтрокаЗаявки.НомерЗаявки, ПереченьПозиций, КодСледующегоСтатусаСтрокой,,Истина);
				ТекстСообщения = "МассивПозицийКодСледующегоСтатуса изменены статусы в заявке:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", на "+КодСледующегоСтатусаСтрокой+": "+ПереченьПозицийСтрокой;
				ЗаписьВЛог(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		СтрокаЗаявки.ЗаказКлиента = ДокОбъект.Ссылка;
		Если ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
			МенеджерЗаписи.Свойство = dateUpdated;
			МенеджерЗаписи.Значение = СтрокаЗаявки.ДатаОбновления;
			МенеджерЗаписи.Записать();

			Если ЗначениеЗаполнено(СтрокаЗаявки.deliveryOfficeId) И (СтрокаЗаявки.deliveryOfficeId<>"0") Тогда
				МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
				МенеджерЗаписи.Свойство = deliveryOfficeId;
				МенеджерЗаписи.Значение = СтрокаЗаявки.deliveryOfficeId;
				МенеджерЗаписи.Записать();
				
				МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
				МенеджерЗаписи.Свойство = deliveryOffice;
				МенеджерЗаписи.Значение = СтрокаЗаявки.deliveryOffice;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			//СтрокиДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", dateUpdated.Ссылка));
			//Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
			//	СтрокаДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.Добавить();
			//Иначе
			//	СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
			//КонецЕсли;
			//СтрокаДополнительныеРеквизиты.Свойство = dateUpdated.Ссылка;
			//СтрокаДополнительныеРеквизиты.Значение = СтрокаЗаявки.ДатаОбновления;
			//СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = СтрокаЗаявки.ДатаОбновления;//Формат(НовСтрока.ИдентификаторКонтрагента,"ЧГ=0");
			
			Если СписокИзмененныхЗаявок.НайтиПоЗначению(ДокОбъект.Ссылка) = Неопределено Тогда
				 СписокИзмененныхЗаявок.Добавить(ДокОбъект.Ссылка);//эта заявка изменилась, поэтому, возможно, надо будет создать другие документы
			КонецЕсли;
		Иначе
			сообщить("Не удалось записать заявку № "+СтрокаЗаявки.НомерЗаявки);
		КонецЕсли;
		
		#Область ЭтоНоваяЗаявка_И_ИзменятьСтатусНовыхЗаявок
		Если ЭтоНоваяЗаявка	И ИзменятьСтатусНовыхЗаявок Тогда
			НС = 0;
			Если КодСтатусаВРаботе <> 0 Тогда
				Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
					НС = НС + 1;
					ИдентификаторНоменклатуры = СтрокаТовара.ИдентификаторНоменклатуры;
					ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+Формат(КодСтатусаВРаботе,"ЧГ=0");
				КонецЦикла;
				Если НС > 0 Тогда
					Если Отладка Тогда
						сообщить(ПереченьПозиций);
					КонецЕсли;
					ОбновитьСтатусЗаявки(Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"), ПереченьПозиций, КодСтатусаВРаботе,,Истина);
					ТекстСообщения = "в новой заявке:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", " +СокрЛП(ДокОбъект)+" изменены статусы позиций на: "+Формат(КодСтатусаВРаботе,"ЧГ=0");
					ЗаписьВЛог(ТекстСообщения,3);
				КонецЕсли;
			КонецЕсли;
			НС = 0;
			Если КодСтатусаНаличие <> 0 Тогда
				Попытка
					НС = 0;
					Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
						НайденНашСклад = СоответствиеНашиСклады.Получить(СтрокаТовара.distributorId);
						Если ЗначениеЗаполнено(НайденНашСклад) Тогда
							НС = НС + 1;
							ИдентификаторНоменклатуры = СтрокаТовара.ИдентификаторНоменклатуры;
							ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+Формат(КодСтатусаНаличие,"ЧГ=0");
						КонецЕсли;
					КонецЦикла;
					Если НС > 0 Тогда
						Если Отладка Тогда
							сообщить(ПереченьПозиций);
						КонецЕсли;
						ОбновитьСтатусЗаявки(Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"), ПереченьПозиций, КодСтатусаНаличие,,Истина);
						ТекстСообщения = "в новой заявке:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", " +СокрЛП(ДокОбъект)+" изменены статусы позиций в наличии на: "+Формат(КодСтатусаНаличие,"ЧГ=0");
						ЗаписьВЛог(ТекстСообщения,3);
					КонецЕсли;
				Исключение
					ЗаписьВЛог(ТекстСообщения,6);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти
	КонецЦикла;
	ВидЦены = ВремВидЦены;
	ЗаполнитьКолонкуЗакрыта();
	//Если (СинхронизироватьСтатусЗаявок) И (СписокЗаявокДляОбновленияОстатков.Количество()>0) Тогда
	//	ОбновитьБалансПоСпискуЗаявок(СписокЗаявокДляОбновленияОстатков);
	//КонецЕсли;
КонецПроцедуры //СоздатьЗаказыКлиентов

Функция ВернутьПараметрыЭтапаОплаты(Знач ДокОбъект, СуммаОплатыПоДокументу)
	ПараметрыЭтапа = Новый Структура();
	ПараметрыЭтапа.Вставить("Объект", ДокОбъект);
	ПараметрыЭтапа.Вставить("ЖелаемаяДата", ДокОбъект.Дата);
	ПараметрыЭтапа.Вставить("ВариантОплаты", Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления);
	ПараметрыЭтапа.Вставить("СуммаОплатыПоДокументу", СуммаОплатыПоДокументу);
	ПараметрыЭтапа.Вставить("СуммаОтклоненияМерныхТоваров", 0);
	ПараметрыЭтапа.Вставить("СуммаЗалогаПоДокументу", 0);
	Возврат ПараметрыЭтапа;
КонецФункции



//https://forum.mista.ru/topic.php?id=882451 - про сравнение этапов написано
//Если НакладнаяПоЗаказам 
//	И (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам")
//		ИЛИ ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным")
//		ИЛИ НЕ ЗначениеЗаполнено(ГрафикИсполненияДоговора) И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")) Тогда
//	//ЗаполнитьЭтапыПоЗаказамСервер();
//	ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплатыПоЗаказам();
//	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПоЗаказам(ЭтапыГрафикаОплаты, ПараметрыЗаполнения);
//Иначе
//	//ЗаполнитьЭтапыОплаты();
//	ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты();
//	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплаты(ЭтапыГрафикаОплаты, ПараметрыЗаполнения);
//КонецЕсли;

Функция ПолучитьУпаковкуНоменклатуры(Владелец)
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 2
	               |	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
	               |	УпаковкиЕдиницыИзмерения.Владелец.ЕдиницаИзмерения КАК ВладелецЕдиницаИзмерения
	               |ИЗ
	               |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	               |ГДЕ
	               |	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
	               |	И УпаковкиЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
	               |	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения = УпаковкиЕдиницыИзмерения.Владелец.ЕдиницаИзмерения
	               |	И (УпаковкиЕдиницыИзмерения.Вес > 0
	               |			ИЛИ УпаковкиЕдиницыИзмерения.Объем > 0)";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Владелец.ЕдиницаИзмерения;
	Конецесли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции

Процедура ЗаполнитьКолонкуЗакрыта()
	Если НЕ НеУчитыватьЗакрытыеЗаказыПокупателя Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияЗаказовКлиентов.Заказ КАК ЗаказКлиента,
		|	СостоянияЗаказовКлиентов.Состояние КАК Состояние,
		|	СостоянияЗаказовКлиентов.Заказ.Статус КАК ЗаказСтатус
		|ИЗ
		|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
		|ГДЕ
		|	СостоянияЗаказовКлиентов.Заказ В (&МассивЗаказов)
		|	И СостоянияЗаказовКлиентов.Состояние = &Состояние
		|	И СостоянияЗаказовКлиентов.Заказ ССЫЛКА Документ.ЗаказКлиента";
	
	МассивЗаказов = ТаблицаЗаявок.ВыгрузитьКолонку("ЗаказКлиента");
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияЗаказовКлиентов.Закрыт);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТЗ = РезультатЗапроса.Выгрузить();
	ТЗ.Индексы.Добавить("ЗаказКлиента");
	Структура = Новый Структура("ЗаказКлиента");
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
			Структура.ЗаказКлиента = СтрокаЗаявки.ЗаказКлиента;
			НСтроки = ТЗ.НайтиСтроки(Структура);
			Если НСтроки.Количество() > 0 Тогда
				СтрокаЗаявки.Закрыта = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция возвращает баланс выбранного контрагента из базы 1С
//
// Параметры
//  Контрагент - ссылка на элекмент справочника "Контрагенты"
//
// Возвращаемое значение:
//   остаток суммы взаиморасчетов из регистра накопления "Взаиморасчеты с контрагентами"
Функция ПолучитьБалансРМА(Контрагент)
	//источник http://forum.infostart.ru/forum33/topic141380/
	//по РегистрАналитикаУчетаПоПартнерам.Контрагент
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ор_ВзаиморасчетыСКонтрагентамиПоДокументам.СуммаОстаток КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ор_ВзаиморасчетыСКонтрагентамиПоДокументам.Остатки(&НаДату, Контрагент = &Контрагент) КАК ор_ВзаиморасчетыСКонтрагентамиПоДокументам
	               |ГДЕ
	               |	ор_ВзаиморасчетыСКонтрагентамиПоДокументам.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Баланс;
	КонецЕсли;
	Возврат 0;
КонецФункции

// Функция возвращает баланс выбранного контрагента из базы 1С
//
// Параметры
//  Контрагент - ссылка на элекмент справочника "Контрагенты"
//
// Возвращаемое значение:
//   остаток суммы взаиморасчетов из регистра накопления "Взаиморасчеты с контрагентами"
Функция ПолучитьБаланс(Контрагент)
	//источник http://forum.infostart.ru/forum33/topic141380/
	//по РегистрАналитикаУчетаПоПартнерам.Контрагент
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	-РасчетыСКлиентамиОстатки.СуммаОстаток КАК Баланс
	               |ИЗ
	               |	РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(&НаДату, ) КАК РасчетыСКлиентамиОстатки
	               |		ПО РегистрАналитикаУчетаПоПартнерам.КлючАналитики = РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам
	               |ГДЕ
	               |	РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент";
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	-РасчетыСКлиентамиОстатки.СуммаОстаток КАК Баланс
	//               |ИЗ
	//               |	Справочник.Контрагенты КАК Контрагенты
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(&НаДату, ) КАК РасчетыСКлиентамиОстатки
	//               |		ПО Контрагенты.Ссылка = РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент
	//               |ГДЕ
	//               |	Контрагенты.Ссылка = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Баланс;
	КонецЕсли;
	Возврат 0;
КонецФункции

Процедура ОбновитьБалансПоСпискуЗаявок(СписокЗаявокДляОбновленияОстатков, Тест = Ложь)
	Если НЕ ВыгружатьБалансНаСайт Тогда
		Возврат;
	КонецЕсли;
	Если ФинансовыйМодульВключен Тогда
		ТекстСообщения = "включен финансовый модуль, ручной баланс не выгружается";
		ЗаписьВЛог(ТекстСообщения,3);
		Возврат;
	КонецЕсли;
	//Если ИспользоватьТранзакции Тогда НачатьТранзакцию(); КонецЕсли;
	ТекстСообщения = "Обновление баланса у контрагентов: ";
	Для Каждого Элемент Из СписокЗаявокДляОбновленияОстатков Цикл

		Заявка = Элемент.Значение;
		ИдентификаторКлиента = ПолучитьИдентификаторКонтрагента(Заявка.Контрагент);
		Если Не ЗначениеЗаполнено(ИдентификаторКлиента) Тогда
			Продолжить;
		КонецЕсли;
		Баланс = ПолучитьБаланс(Заявка.Контрагент);
		Если Тест Тогда
			ТекстСообщения = ТекстСообщения + "
			|"+Строка(Заявка.Контрагент)+", баланс в 1С = "+СокрЛП(Баланс);
			Продолжить;
		КонецЕсли;
		Если Баланс = 0 Тогда //не совсем корректно, он может работать то в долг, то нет
			//Продолжить;
		КонецЕсли;
		Баланс = Формат(Баланс,"ЧГ=0");
		Если Баланс = "" Тогда
			Баланс = 0;
		КонецЕсли;
		ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль+"&userId="+Строка(Формат(ИдентификаторКлиента,"ЧГ=0"))+"&balance="+Строка(Баланс);
		ИмяФайлаСТекстомЗапроса = ПолучитьимяВременногоФайла("txt");
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСТекстомЗапроса, КодировкаТекста.UTF8);//КодировкаТекста.ANSI);
		ЗаписьТекста.Записать(ФрагментЗапроса);
		ЗаписьТекста.Закрыть();
		
		//отправим файл на сервер для обработки
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
		ФайлОтправки = Новый Файл(ИмяФайлаСТекстомЗапроса);
		РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/finance/userBalance?userlogin="+Пользователь+"&userpsw="+Пароль, , Пользователь, Пароль);
		//так тоже работает
		//HTTPЗапрос = Новый HTTPЗапрос("/cp/finance/userBalance");
		//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаСТекстомЗапроса);
		//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		//HTTPЗапрос.Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
		//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);	
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/finance/userBalance", ИмяВыходногоФайла, Заголовки);	
		КодСостояния = HTTPОтвет.КодСостояния;
		Если НЕ КодСостояния200(КодСостояния, , ИмяВыходногоФайла) Тогда
			ЕстьОшибка = Истина;
			//Возврат;
		Иначе
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(ИмяВыходногоФайла);	
			СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			//сообщить("У клиента с id " + СписокЭлементов.userId + "("+СокрЛП(ТекСтрока.Контрагент)+") обновлен баланс " + СписокЭлементов.balance);
			сообщить(СокрЛП(Заявка.Контрагент)+" = " + СписокЭлементов.balance);
			ТекстСообщения = ТекстСообщения + "
			|"+СокрЛП(Заявка.Контрагент)+", идентификатор контрагента: " + Формат(СписокЭлементов.userId,"ЧГ=0")+", баланс на сайте = "+СокрЛП(СписокЭлементов.balance);
			//ТекстСообщения = "Ответ сервера: errorCode: " + ОписаниеОшибки.errorCode+", errorMessage: " + ОписаниеОшибки.errorMessage;
			//сообщить(ТекстСообщения);
			//сообщить("userId: " + СписокЭлементов.userId);
			//сообщить("balance: " + СписокЭлементов.balance);
			//сообщить("inStopList: " + СписокЭлементов.inStopList);
		КонецЕсли;
		Попытка
		    УдалитьФайлы(ИмяФайлаСТекстомЗапроса);
		Исключение
		КонецПопытки;
		Попытка
		    УдалитьФайлы(ИмяВыходногоФайла);
		Исключение
		КонецПопытки;
	КонецЦикла;
	ЗаписьВЛог(ТекстСообщения,3);
	//Если ИспользоватьТранзакции Тогда ЗафиксироватьТранзакцию(); КонецЕсли;
КонецПроцедуры //ОбновитьБалансПоСпискуЗаявок

// Процедура обновляет статус выбранной заявки на сайте ABCP
//
// Параметры
//  НомерЗаявки - № заявки на сайте (не может быть больше одной, так как запрос обновляет статусы только по первой заявке)
// 	ПереченьПозиций - часть запроса, содержит № заявки, идентификаторы позиций и статусы
//  КодСтатусу - вспомогательная переменная для записи в лог-файл, так как код статуса уже присутствует в "ПереченьПозиций"
//  НоваяЗаявка - признак того, что изменяемая заявка - новая, только что записанная в информационную базу 1С
//  ИнтерактивноеИзменение - признак вызова процедуры из других по расписанию, или с помощью команды пользователя
//
Процедура ОбновитьСтатусЗаявки(НомерЗаказа, ПереченьПозиций, КодСтатуса, НоваяЗаявка = Ложь, ИнтерактивноеИзменение = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(КодСтатуса) Тогда
		сообщить("Не заполнен код статуса, нельзя обновить статус заявки "+Формат(НомерЗаказа,"ЧГ=0"));
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПереченьПозиций) Тогда
		сообщить("Статусы не изменены, не заполнен перечень позиций заявки "+Формат(НомерЗаказа,"ЧГ=0"));
		Возврат;
	КонецЕсли;
	//если очень большая, возможно разделить на несколько запросов
	Если КодСтатуса = 0 Тогда
		ТекстСообщения = " у заказа "+Формат(НомерЗаказа,"ЧГ=0")+", не выбран целевой статус "+СокрЛП(КодСтатуса)+" позиции: "+ПереченьПозиций;
		ЗаписьВЛог(ТекстСообщения,3);
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Пользователь) Тогда //если из ФормаНаличия вызывать, то ничего не заполнено
		КлючОбъекта = "ABCP_1C";
		КлючНастроек = "НастройкиДоступа";
	    ИмяПользователя = ИмяПользователя();
		Если НЕ УТ112 И НЕ ИспользоватьИндивидуальныеНастройкиПользователей Тогда
			ИмяПользователя = "Администратор";//фоновое задание запускается без пользователя
		КонецЕсли;
	    Попытка
	        Настройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователя);
		Исключение
			ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ВыполнитьКоманду перед обработкой выбора", "Не найдены настройки обмена с ABCP для текущего пользователи. Нажмите ""Сохранить настройки"" в окне формы");
	        Возврат;
		КонецПопытки;
		АдресСервиса = Настройки.АдресСервиса;
		Пользователь = Настройки.Пользователь;
		Пароль = Настройки.Пароль;
	КонецЕсли;
	НомерЗаказаСтрокой = Формат(Число(НомерЗаказа), "ЧГ=0");
	ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль+"&order[number]="+НомерЗаказаСтрокой+ПереченьПозиций;
	
	Если НЕ ИнтерактивноеИзменение Тогда //вызываем из формы
		Возврат;
		
		//Если (НЕ (СинхронизироватьСтатусЗаявок)) И (НЕ НоваяЗаявка) Тогда
		//	Возврат;
		//КонецЕсли;
		Если (НЕ НоваяЗаявка) Тогда
			Возврат;
		КонецЕсли;
		Если (НЕ (ИзменятьСтатусНовыхЗаявок)) И (НоваяЗаявка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = ""; 
	//сообщить(ФрагментЗапроса);
	ИмяФайлаСТекстомЗапроса = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСТекстомЗапроса, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ФрагментЗапроса);
	ЗаписьТекста.Закрыть();
	Если Отладка Тогда
		ЗаписьВЛог(ФрагментЗапроса,,Истина);
	КонецЕсли;
	//отправим файл на сервер для обработки
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
	ФайлОтправки = Новый Файл(ИмяФайлаСТекстомЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/order?userlogin="+Пользователь+"&userpsw="+Пароль, , Пользователь, Пароль);
	//так тоже работает
	//HTTPЗапрос = Новый HTTPЗапрос("/cp/order");
	//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаСТекстомЗапроса);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//HTTPЗапрос.Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);	
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/order", ИмяВыходногоФайла, Заголовки);
	ТекстСообщения = ТекстСообщения + "отправлен запрос на обновление статуса "+?(НоваяЗаявка, "нового", "")+" заказа "+Формат(НомерЗаказа,"ЧГ=0")+", новый статус "+СокрЛП(КодСтатуса)+" позиции: "+ПереченьПозиций;
	ЗаписьВЛог(ТекстСообщения,3);
	//!!! если делим заказ, то надо обработать выходной файл, там есть идентификатор номенклатуры positions":[{"number":"**"...[{"id":"****"
	Если НЕ КодСостояния200(HTTPОтвет.КодСостояния, , ИмяВыходногоФайла) Тогда
		ЕстьОшибка = Истина;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла);
		ТекстИзФайла = ТекстовыйДокумент.ПолучитьТекст();
		Если Франчайзи Тогда
			ТекстСообщения = "Ошибка: Ответ с сайта ("+АдресСервиса+" / "+Пользователь+") по № "+Формат(Число(НомерЗаказа),"ЧГ=0");
		Иначе
			ТекстСообщения = "Ошибка: Ответ с сайта по № "+Формат(Число(НомерЗаказа),"ЧГ=0");
		КонецЕсли;
		ЗаписьВЛог(ТекстСообщения,3,Истина);
		Возврат;
	Иначе
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла);
		ТекстИзФайла = ТекстовыйДокумент.ПолучитьТекст();
		Если Отладка Тогда
			ЗаписьВЛог(ТекстИзФайла,,Истина);
		КонецЕсли;
		Если Франчайзи Тогда
			Если Найти(ТекстИзФайла,"Order position with such id not found")>0 Тогда
				ТекстСообщения = "Ошибка, в заказе № "+Формат(Число(НомерЗаказа),"ЧГ=0")+" нет такой позиции : "+Лев(ТекстИзФайла,200);
			ИначеЕсли Найти(ТекстИзФайла,"not found")>0 Тогда
				ТекстСообщения = "Ошибка, в ABCP нет заказа № "+Формат(Число(НомерЗаказа),"ЧГ=0")+": "+Лев(ТекстИзФайла,200);
			Иначе
				ТекстСообщения = "Фрагмент ответа с сайта ("+АдресСервиса+" / "+Пользователь+") по № "+Формат(Число(НомерЗаказа),"ЧГ=0")+": "+Лев(ТекстИзФайла,200)+" ... "+Прав(ТекстИзФайла,200);
			КонецЕсли;
		Иначе
			Если Найти(ТекстИзФайла,"not found")>0 Тогда
				ТекстСообщения = "Ошибка, в ABCP нет заказа № "+Формат(Число(НомерЗаказа),"ЧГ=0")+": "+Лев(ТекстИзФайла,200);
			Иначе
				ТекстСообщения = "Фрагмент ответа с сайта по № "+Формат(Число(НомерЗаказа),"ЧГ=0")+": "+Лев(ТекстИзФайла,200);//+" ... "+Прав(ТекстИзФайла,200);
			КонецЕсли;
		КонецЕсли;
		ЗаписьВЛог(ТекстСообщения,3,Истина);
		УИ = ПоместитьВоВременноеХранилище(ТекстИзФайла);
		ВременныйИдентификатор = УИ;
		//Возврат УИ;
		//ТекстИзФайла		
		//может быть, записывать в хранилище значений к заказу
		// Ошибка, в ABCP нет заказа № 74320725: {"0":{"number":"74320725"
		ЕстьОшибка = Истина;
		Если Лев(ТекстИзФайла, 9) = "[{""number" Тогда
			ЕстьОшибка = Ложь;
		ИначеЕсли Лев(ТекстИзФайла, 13) = "{""0"":{""number" Тогда
			ЕстьОшибка = Ложь;
		КонецЕсли;
		Если ЕстьОшибка Тогда
			ТекстСообщения = "Ошибка при обновлении позиций заказа "+НомерЗаказа;
			ЗаписьВЛог(ТекстСообщения,6,Истина);
			ЗаписьВЛог(ТекстИзФайла,6,Истина);
			//{"errors":"StatusCode has denied. It must be a owned status code."}
			//{"0":{"nu... ,"errors":"Order position with such id not found"}
		Иначе
			ТекстСообщения = "Обновлен статус позиций заказа № "+Формат(Число(НомерЗаказа),"ЧГ=0")+", новый статус: """+Формат(Число(КодСтатуса), "ЧГ=0")+"""";
			ЗаписьВЛог(ТекстСообщения,3,Истина);
		КонецЕсли;
	КонецЕсли;
	Попытка
	    УдалитьФайлы(ИмяФайлаСТекстомЗапроса);
	Исключение
	КонецПопытки;
	Попытка
	    УдалитьФайлы(ИмяВыходногоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ОбновитьОстаткиНоменклатурыПоСпискуЗаявок(СписокЗаявокДляОбновленияОстатков, Тест = Ложь)
	//лучше через соединение
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
	               |	СвободныеОстаткиОстатки.Номенклатура.Наименование КАК Описание,
	               |	СвободныеОстаткиОстатки.Номенклатура.Артикул КАК Артикул,
	               |	СвободныеОстаткиОстатки.Номенклатура.Производитель КАК Производитель,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	               |	СвободныеОстаткиОстатки.ВНаличииОстаток КАК Наличие,
	               |	ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) КАК КОтгрузке,
	               |	ЗаказКлиентаТовары.Номенклатура
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(&НаДату, Склад = &Склад) КАК СвободныеОстаткиОстатки
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	               |			ПО СвободныеОстаткиОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
	               |			ПО СвободныеОстаткиОстатки.Номенклатура = ТоварыКОтгрузкеОстатки.Номенклатура
	               |		ПО ЗаказКлиентаТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	               |ГДЕ
	               |	ЗаказКлиентаТовары.Ссылка В(&Ссылка)";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СписокЗаявокДляОбновленияОстатков);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);

	//временно
	ВидЦеныФикс1 = Справочники.ВидыЦен.НайтиПоНаименованию("Фикс цена(Типовое соглашение)");
	
	Запрос.УстановитьПараметр("ВидЦеныФикс", ВидЦеныФикс1);
	
	////++абс+
	//Запрос.Текст = СтрЗаменить(Запрос.Текст , "ПО РаспределениеЗапасов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура",
	//"ПО РаспределениеЗапасов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&НаДату, ВидЦены = &ВидЦеныФикс) КАК ЦеныНоменклатуры25СрезПоследних ПО (РаспределениеЗапасов.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура)");
	//
	//Запрос.Текст = СтрЗаменить(Запрос.Текст , "ЦеныНоменклатурыСрезПоследних.Цена КАК Цена" ,
	//"ВЫБОР КОГДА ЦеныНоменклатуры25СрезПоследних.Цена = 0 ТОГДА ЦеныНоменклатурыСрезПоследних.Цена ИНАЧЕ ЦеныНоменклатуры25СрезПоследних.Цена КОНЕЦ КАК Цена");
	//
	//Запрос.Текст = СтрЗаменить(Запрос.Текст , "ЦеныНоменклатурыСрезПоследних.Цена,", 
	//"ВЫБОР	КОГДА ЦеныНоменклатуры25СрезПоследних.Цена = 0 ТОГДА ЦеныНоменклатурыСрезПоследних.Цена	ИНАЧЕ ЦеныНоменклатуры25СрезПоследних.Цена КОНЕЦ ,");
	//
	//Запрос.Текст = СтрЗаменить(Запрос.Текст , "И ЦеныНоменклатурыСрезПоследних.Цена <> 0", 
	//"И (ЦеныНоменклатурыСрезПоследних.Цена <> 0 ИЛИ ЦеныНоменклатуры25СрезПоследних.Цена <> 0)");
	//
	//
	////++абс-
	Результат = Запрос.Выполнить();
	//ТЗОстатки = Новый ТаблицаЗначений;
	ТаблицаОстатков.Загрузить(Результат.Выгрузить());
	
	ИмяФайлаExcel = ИмяФайлаExcel;
	ИмяФайлаZip = ИмяФайлаExcel+".zip";
	ПозицияСлеша = Найти(ИмяФайлаExcel,"\");
	Если ПозицияСлеша>0 Тогда
		ИмяФайлаExcelБезПути = Сред(ИмяФайлаExcel, ПозицияСлеша);
	Иначе
		ИмяФайлаExcelБезПути = ИмяФайлаExcel;
	КонецЕсли;
	ИмяФайлаZipБезПути = ИмяФайлаExcelБезПути+".zip";
	Если НРег(Прав(СокрЛП(ИмяФайлаExcel),3)) = "csv" Тогда
		ВыгрузитьНоменклатуруВCSV(ИмяФайлаExcel, ИмяФайлаZip);
	Иначе		
		//ВыгрузитьНоменклатуруВExcel(ИмяФайлаExcel, ИмяФайлаZip);
		ВыгрузитьИзТабличногоДокументаВExcel(ИмяФайлаExcel, ИмяФайлаZip);
	КонецЕсли;
	ТекстСообщения = ВерсияОбработки+" Из заявок обновлено позиций номенклатуры "+СокрЛП(ТаблицаОстатков.Количество());
	ЗаписьВЛог(ТекстСообщения,3);
	Если Тест Тогда
		Возврат;
	КонецЕсли;
	
	ТипФайла = "-F ""fileTypeId=4"" ";//инкрементный ассортимент
	fileTypeId = "&fileTypeId=4";
	
	МассивФайлов = Новый Массив;
	 
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	Boundary = "------------------------5707735e694680a2";//boundary нужны
	 
	ИмяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt"); // первый файл, содержащий параметры
	 
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСПараметрами);
	//&distributorId=" + ИдентификаторПоставщика+fileTypeId+"&uploadFile=@"+ИмяФайлаZip, , Пользователь, Пароль);
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""userlogin""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(Пользователь);
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""userpsw""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(Пароль);
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""distributorId""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(ИдентификаторПоставщика);
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""fileTypeId""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(4);//инкрементально
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""uploadFile""; filename="""+ИмяФайлаZipБезПути+"""");
	ЗаписьТекста.ЗаписатьСтроку("Content-Type: application/octet-stream");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.Закрыть(); // заканчиваем работу с файлом 1
	 
	МассивФайлов.Добавить(ИмяФайлаСПараметрами); // добавляем 1-ый файл для объединения
	МассивФайлов.Добавить(ИмяФайлаZip); // добавляем 1-ый архив для объединения
	 
	// третий файл, закрывающий параметры
	ИмяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСПараметрами);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary+"--");
	ЗаписьТекста.Закрыть();
	МассивФайлов.Добавить(ИмяФайлаСПараметрами); // добавляем 3-ий файл, закрывающий параметры
	
	// результирующий файл, который и будет отправлен
	ИмяФайлаОтправки = ПолучитьимяВременногоФайла("txt");
	// объединим все файлы
	ОбъединитьФайлы(МассивФайлов, ИмяФайлаОтправки);
	 
	ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	 
	// передадим данные на сервер 
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data, boundary="+boundary);
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	 
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
	//HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/distributor/pricelistUpdate?userlogin="+Пользователь+"&userpsw="+Пароль+"&distributorId=" + ИдентификаторПоставщика+fileTypeId+"&uploadFile=@"+ИмяФайлаZip, , Пользователь, Пароль);
	Попытка
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаОтправки, "/cp/distributor/pricelistUpdate", ИмяВыходногоФайла, Заголовки);
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", ТекстСообщения);
		Возврат;
	КонецПопытки;
	КодСостояния = HTTPОтвет.КодСостояния;
	Если НЕ КодСостояния200(КодСостояния, , ИмяВыходногоФайла) Тогда
		ЕстьОшибка = Истина;
		Возврат;
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяВыходногоФайла);	
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Попытка
			ТекстСообщения = "Позиций: "+ СокрЛП(ТаблицаОстатков.Количество())+", "+СокрЛП(СписокЭлементов.message);
			ЗаписьВЛог(ТекстСообщения,3);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Попытка
	    УдалитьФайлы(ИмяФайлаОтправки);
	Исключение
	КонецПопытки;
	Попытка
	    УдалитьФайлы(ИмяВыходногоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

//записываем в Excel сразу из табличного документа
Процедура ВыгрузитьИзТабличногоДокументаВExcel(ИмяФайла, ИмяФайлаZip, ЗаписыватьВЛогФайл = Ложь, ИдПоставщика = 0) Экспорт
	Если Лев(АдресСервиса, 6) = "id9652" Тогда
		id9652 = Истина;
	Иначе
		id9652 = Ложь;
	КонецЕсли;
	ТабДок=Новый ТабличныйДокумент;
	
	ТабДок.Область(1, 1).Текст = "Бренд";
	ТабДок.Область(1, 2).Текст = "Артикул";
	ТабДок.Область(1, 3).Текст = "Описание";
	ТабДок.Область(1, 4).Текст = "Цена";
	ТабДок.Область(1, 5).Текст = "Наличие";
	ПоследняяКолонка = 5;
	Если ВыгружатьКратность Тогда
		ПоследняяКолонка = ПоследняяКолонка + 1;
		КолонкаКратность = ПоследняяКолонка;
		ТабДок.Область(1,КолонкаКратность).Текст = "Кратность";
	КонецЕсли;
	Если ВыгружатьКодыНоменклатуры Тогда
		ПоследняяКолонка = ПоследняяКолонка + 1;
		КолонкаКодНоменклатуры = ПоследняяКолонка;
		ТабДок.Область(1,КолонкаКодНоменклатуры).Текст = "КодНоменклатуры";
	КонецЕсли;
	Если ВыгружатьГруппыНоменклатуры Или ВыгружатьКорневуюГруппу Тогда
		ПоследняяКолонка = ПоследняяКолонка + 1;
		КолонкаГруппа = ПоследняяКолонка;
		ТабДок.Область(1,КолонкаГруппа).Текст = "Группа";
	КонецЕсли;
	
	НС = 2;
	//БезАртикула = 0;
	БезПроизводителя = 0;
	Для Каждого ТекСтрока Из ТаблицаОстатков Цикл
		Описание = СтрЗаменить(ТекСтрока.Описание,"'", "`");
		ПроизводительСтрокой = СокрЛП(ТекСтрока.Производитель);
		ПроизводительСтрокой = СтрЗаменить(ПроизводительСтрокой,"'", "`");
		Если ПроизводительСтрокой = "" Тогда
			Если NonameВместоПустыхБрендов Тогда
				ПроизводительСтрокой = "Noname";
			Иначе
				БезПроизводителя = БезПроизводителя +1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока.Артикул = "" Тогда
			//БезАртикула = БезАртикула +1;
			Продолжить;
		КонецЕсли;
		//Н = Формат(НС,"ЧГ=0");
		ТабДок.Область(НС, 1).Текст = ПроизводительСтрокой;
		ТабДок.Область(НС, 2).Текст = ТекСтрока.Артикул;
		ТабДок.Область(НС, 3).Текст = Описание;
		ТабДок.Область(НС, 4).Текст = Формат(ТекСтрока.Цена, "ЧРД=,; ЧГ=0");
		Если id9652 И ТекСтрока.Наличие>3 Тогда
			ТабДок.Область(НС, 5).Текст = "+++";
		Иначе
			ТабДок.Область(НС, 5).Текст = ТекСтрока.Наличие+ТекСтрока.Ожидается;
		КонецЕсли;
		Если ВыгружатьКратность Тогда
			ТабДок.Область(НС, КолонкаКратность).Текст = ТекСтрока.Кратность;
		КонецЕсли;
		Если ВыгружатьКодыНоменклатуры Тогда
			ТабДок.Область(НС, КолонкаКодНоменклатуры).Текст = ТекСтрока.КодНоменклатуры;
		КонецЕсли;
		Если ВыгружатьКорневуюГруппу Тогда
			ТабДок.Область(НС, КолонкаГруппа).Текст = СокрЛП(ТекСтрока.КорневаяГруппа);
		ИначеЕсли ВыгружатьГруппыНоменклатуры Тогда
			ТабДок.Область(НС, КолонкаГруппа).Текст = СокрЛП(ТекСтрока.Группа);
		КонецЕсли;
		НС = НС + 1;
	КонецЦикла;
	ТекстСообщения = "Выгружено позиций: "+СокрЛП(НС-1)+?(БезПроизводителя=0,""," позиций без брендов "+БезПроизводителя);
	ЗаписьВЛог(ТекстСообщения,,Истина);
	ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
	ЗаписьZIP =  Новый ЗаписьZipФайла(ИмяФайлаZip);     
    ЗаписьZIP.Добавить(ИмяФайла);
    ЗаписьZIP.Записать();
	Если Отладка Тогда
		сообщить("Данные выгружены в файлы: "+ИмяФайла+", "+ИмяФайлаZip);
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузитьНоменклатуруВExcel(ИмяФайла, ИмяФайлаZip, ЗаписыватьВЛогФайл = Истина, ИдПоставщика = 0) Экспорт
	УдалитьФайлы(ИмяФайла);
	СтрокаПодключения="Provider=Microsoft.Jet.OLEDB.4.0;Data Source="+ИмяФайла+";Extended Properties=""Excel 8.0;HDR=No;"";";
	//IMEX - говорит драйверу какой режим использовать., 0 - Export mode, 1 - Import mode, 2 - Linked mode (full update capabilities)
	Catalog = Новый COMОбъект("ADOX.Catalog");
	Catalog.ActiveConnection = СтрокаПодключения;
	Table = Новый COMОбъект("ADOX.Table");
	Table.Name = "TDSheet";
	//https://msdn.microsoft.com/en-us/library/windows/desktop/ms676596(v=vs.85).aspx
	//https://msdn.microsoft.com/en-us/library/windows/desktop/ms675318(v=vs.85).aspx
	//https://msdn.microsoft.com/en-us/library/ms675318%28v=vs.85%29.aspx
	//adVarWChar 202
	//adChar 129
	//adInteger 3
	Table.Columns.Append("Бренд",202,50);
	//Table.Columns.Append("Производитель",202,50);
	Table.Columns.Append("Артикул",202,20);
	Table.Columns.Append("Описание",202,100);
	Table.Columns.Append("Цена",3);//adBigInt 20
	Table.Columns.Append("Наличие",3);
	Table.Columns.Append("Кратность",3);
	Catalog.Tables.Append(Table);
	Table = Неопределено;
	Catalog = Неопределено;
	Попытка
		Connection = Новый COMОбъект("ADODB.Connection"); 
		rs = Новый COMОбъект("ADODB.Recordset");
		Connection.ConnectionString = СтрокаПодключения; 
		//Connection.Mode = 3;//adModeReadWrite 
		Connection.Open(); 
	Исключение
		Сообщить("Ошибка создания объекта ADODB.Connection. "+ОписаниеОшибки());
		Возврат;// 0;
	КонецПопытки;
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandType = 1;
	Connection.BeginTrans();
	Если ЗаписыватьВЛогФайл Тогда
		Файл = Новый ЗаписьТекста(ЛогФайл,КодировкаТекста.ANSI,,Истина);
	КонецЕсли;
	Для Каждого ТекСтрока Из ТаблицаОстатков Цикл
		//Произошла исключительная ситуация (Microsoft JET Database Engine): Ошибка синтаксиса (пропущен оператор) в выражении запроса ''Wynn's', 'W23379', 'Очиститель системы воздухозабора дизельных двигателей', 1, 0, 100)'.
		Описание = СтрЗаменить(ТекСтрока.Описание,"'", "`");
		ПроизводительСтрокой = СокрЛП(ТекСтрока.Производитель);
		ПроизводительСтрокой = СтрЗаменить(ПроизводительСтрокой,"'", "`");
		Если ПроизводительСтрокой = "" Тогда
			Продолжить;
		КонецЕсли;
	    SQL = "INSERT INTO [TDSheet] VALUES ('" + ПроизводительСтрокой + "', '" + ТекСтрока.Артикул + "', '" + Описание + "', " + Формат(ТекСтрока.Цена,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ", " + Формат(ТекСтрока.Наличие,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+", "+Формат(ТекСтрока.Кратность, "ЧГ=0")+")";
		Command.CommandText = SQL;
		//сообщить(SQL);//INSERT INTO [TDSheet] VALUES ('', '', '', 1, , )
		Если ЗаписыватьВЛогФайл Тогда
			Файл.ЗаписатьСтроку(Формат(ТекущаяДата(),"ДЛФ=DT")+"	"+SQL);
		КонецЕсли;
		Если (ТекСтрока.Артикул<>"") Тогда
			Попытка
		    	Command.Execute();
			Исключение
				Файл.ЗаписатьСтроку(Формат(ТекущаяДата(),"ДЛФ=DT")+"	**** "+SQL+"; "+СокрЛП(ТекСтрока.Артикул));
				//Файл.ЗаписатьСтроку(Формат(ТекущаяДата(),"ДЛФ=DT")+"	Ошибка ");
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Если ЗаписыватьВЛогФайл Тогда
		Файл.Закрыть();
	КонецЕсли;
	Connection.CommitTrans();
	Command = Неопределено;
	Connection.Close();
	Connection = Неопределено;	
	//txtSQL="CREATE TABLE tz "+ИменаКолонок;
	//rs=conn.Execute(txtSQL);
	ЗаписьZIP =  Новый ЗаписьZipФайла(ИмяФайлаZip);     
    ЗаписьZIP.Добавить(ИмяФайла);
    ЗаписьZIP.Записать();
КонецПроцедуры

Процедура ВыгрузитьНоменклатуруВCSV(ИмяФайла, ИмяФайлаZip, ЗаписыватьВЛогФайл = Истина, ИдПоставщика = 0) Экспорт
	Если ИмяФайла = "" Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла()+".csv";
		Дополнение = СтрЗаменить(Формат(ТекущаяДата(),"ДЛФ=DT"),":",".");
		
		ИмяФайла = КаталогВременныхФайлов()+"test"+Дополнение+".csv";
		//ИмяФайлаZip = ИмяФайла+".zip";
		//сообщить(ИмяФайла);
	Иначе
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	ФайлCSV = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
	//ФайлCSV.ЗаписатьСтроку("Производитель;Артикул;Описание;Кратность;Цена;Наличие");
	Для Каждого ТекСтрока Из ТаблицаОстатков Цикл
		Описание = СтрЗаменить(ТекСтрока.Описание,"'", "`");
		Описание = СтрЗаменить(Описание,"""", "`");
		Артикул = СтрЗаменить(ТекСтрока.Артикул,"'", "`");
		Артикул = СтрЗаменить(Артикул,"""", "`");
		ПроизводительСтрокой = СокрЛП(ТекСтрока.Производитель);
		ПроизводительСтрокой = СтрЗаменить(ПроизводительСтрокой,"'", "`");
		ПроизводительСтрокой = СтрЗаменить(ПроизводительСтрокой,"""", "`");
		Если ПроизводительСтрокой = "" Тогда
			Продолжить;
		КонецЕсли;
		ЦенаСтрокой = Формат(ТекСтрока.Цена,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
		НаличиеСтрокой = Формат(ТекСтрока.Наличие,"ЧДЦ=; ЧРД=.; ЧН=0; ЧГ=0");
		СтрокаФайла = ПроизводительСтрокой + Символы.Таб + Артикул + Символы.Таб + Описание + Символы.Таб + ЦенаСтрокой + Символы.Таб + НаличиеСтрокой + Символы.Таб + ТекСтрока.КодНоменклатуры;
		ФайлCSV.ЗаписатьСтроку(СтрокаФайла);
	КонецЦикла;
	ФайлCSV.Закрыть();
	Если ИмяФайлаZip<>"" Тогда
		ЗаписьZIP =  Новый ЗаписьZipФайла(ИмяФайлаZip);     
	    ЗаписьZIP.Добавить(ИмяФайла);
	    ЗаписьZIP.Записать();
		ВыгрузитьФайлНаСервер(ИмяФайлаZip, ИдПоставщика);
	Иначе
		ВыгрузитьФайлНаСервер(ИмяФайла, ИдПоставщика);
	КонецЕсли;
КонецПроцедуры

//функции для выгрузки прайсов
Функция НоменклатураЗаполнитьЗапрос(Полная = Ложь, ВидЦены) Экспорт
//Процедура НоменклатураЗаполнитьНаСервере() Экспорт
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = ЭтотОбъект.ВидЦены;
	КонецЕсли;
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
	               |	СвободныеОстаткиОстатки.Номенклатура.Наименование КАК Описание,
	               |	СвободныеОстаткиОстатки.Номенклатура.Артикул КАК Артикул,
	               |	СвободныеОстаткиОстатки.Номенклатура.Производитель КАК Производитель,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	               |	СвободныеОстаткиОстатки.ВНаличииОстаток КАК Наличие,
	               |	ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) КАК КОтгрузке
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(&НаДату, Склад = &Склад) КАК СвободныеОстаткиОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО СвободныеОстаткиОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
	               |		ПО СвободныеОстаткиОстатки.Номенклатура = ТоварыКОтгрузкеОстатки.Номенклатура
	               |ГДЕ
	               |	СвободныеОстаткиОстатки.Номенклатура.ЭтоГруппа = ЛОЖЬ
	               |	И СвободныеОстаткиОстатки.Номенклатура.Производитель В(&Производитель)";
	Если НЕ ЗначениеЗаполнено(Производитель) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СвободныеОстаткиОстатки.Номенклатура.Производитель В(&Производитель)", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Результат = Запрос.Выполнить();
	Возврат Результат;
	//ТЗОстатки.Загрузить(Результат.Выгрузить());
	//ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , ТЗОстатки.Количество());
//КонецПроцедуры
КонецФункции

Процедура ДозаполнитьПоАналогам() Экспорт
	Если РасположениеАналогов = "" Тогда //путь к ресурсу
		Возврат;
	КонецЕсли;
	ВТ = ТаблицаОстатков.Выгрузить();
	//ВТ.Колонки.Добавить("ОсновнойАртикул", Новый ОписаниеТипов("Строка"));
	ВТ.Индексы.Добавить("Артикул");
	ВТ.Индексы.Добавить("ОсновнойАртикул");
	
	ВН = Новый ТаблицаЗначений;
	ВН.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("Строка"));
	ВН.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
	ВН.Колонки.Добавить("Производитель", Новый ОписаниеТипов("Строка"));
	ВН.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ВН.Колонки.Добавить("Наличие", Новый ОписаниеТипов("Число"));
	ВН.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АналогиНоменклатуры.Номенклатура КАК Ссылка,
		|	АналогиНоменклатуры.Артикул КАК Артикул,
		|	АналогиНоменклатуры.Бренд КАК Бренд,
		|	АналогиНоменклатуры.ОсновнойАртикул КАК ОсновнойАртикул,
		|	АналогиНоменклатуры.Описание КАК Описание,
		|	0 КАК Остаток
		|ИЗ
		|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
		|ГДЕ
		|	АналогиНоменклатуры.Артикул <> """"
		|	И АналогиНоменклатуры.Бренд <> """"";
	РезультатЗапроса = Запрос.Выполнить();
	ТА = РезультатЗапроса.Выгрузить();
	//заполняем колонку основным артикулом
	МассивАртикулов = Новый Массив;//здесь будут артикулы которые уже есть в таблице, чтобы добавлять виртуальные остатки по аналогам
	Структура = Новый Структура("Артикул");
	Для Каждого СтрокаОстатков Из ВТ Цикл
		Структура.Артикул = СтрокаОстатков.Артикул;
		МассивАртикулов.Добавить(СтрокаОстатков.Артикул);
		СтрокиРегистра = ТА.НайтиСтроки(Структура);
		Если СтрокиРегистра.Количество() > 0 Тогда //вдруг задвоение, тоже надо проверить будет
			СтрокаОстатков.ОсновнойАртикул = СтрокиРегистра[0].ОсновнойАртикул;
		Иначе
			//сообщить("Не найден основной артикул к "+СтрокаОстатков.Артикул);
		КонецЕсли;
	КонецЦикла;
	//теперь собираем итог по каждому основному артикулу
	ВИ = ВТ.Скопировать(,"Наличие,ОсновнойАртикул");
	ВИ.Свернуть("ОсновнойАртикул","Наличие");
	ВИ.Индексы.Добавить("ОсновнойАртикул");
	СтруктураОсновнойАртикул = Новый Структура("ОсновнойАртикул");
	Для Каждого СтрокаАналога Из ТА Цикл //проходим по регистру
		СтруктураОсновнойАртикул.ОсновнойАртикул = СтрокаАналога.ОсновнойАртикул;
		СтрокиОстатковАртикулов = ВИ.НайтиСтроки(СтруктураОсновнойАртикул);
		Если СтрокиОстатковАртикулов.Количество() = 0 Тогда //в остатках нет позиций, у которых есть этот основной артикул, значит, и аналогов нет
			Продолжить;
		КонецЕсли;
		НаличиеОсновногоАртикула = СтрокиОстатковАртикулов[0].Наличие;
		Структура.Артикул = СтрокаАналога.Артикул;
		СтрокиОстатков = ВТ.НайтиСтроки(Структура);
		Если СтрокиОстатков.Количество() = 0 Тогда
			//по основному артикулу остатки есть, а по артикулу нет, добавляем виртуальный остаток
			НовСтрока = ВТ.Добавить();
			НовСтрока.Артикул = СтрокаАналога.Артикул;
			НовСтрока.Производитель = СтрокаАналога.Бренд;
			НовСтрока.Описание = СтрокаАналога.Описание;
			НовСтрока.Наличие = НаличиеОсновногоАртикула;
			//ищем цену и код номенклатуры
			Структура.Артикул = СтрокаАналога.ОсновнойАртикул;
			СтрокиОстатков = ВТ.НайтиСтроки(Структура);
			Если СтрокиОстатков.Количество() = 0 Тогда //это первая добавленная
			Иначе
				Если СтрокиОстатков[0].Цена = 0 Тогда
					//на основном артикуле нет остатков, поэтому цену берём из первого аналога
					СтрокиОстатков = ВТ.НайтиСтроки(СтруктураОсновнойАртикул);
					Если СтрокиОстатков.Количество() = 0 Тогда
					Иначе
						НовСтрока.Цена = СтрокиОстатков[0].Цена;
						НовСтрока.КодНоменклатуры = СтрокиОстатков[0].КодНоменклатуры;
					КонецЕсли;
				Иначе
					НовСтрока.Цена = СтрокиОстатков[0].Цена;
					НовСтрока.КодНоменклатуры = СтрокиОстатков[0].КодНоменклатуры;
				КонецЕсли;
			КонецЕсли;			
			НовСтрока.ОсновнойАртикул = СтрокаАналога.ОсновнойАртикул;
			Если ЗначениеЗаполнено(СтрокаАналога.Ссылка) Тогда
				НовСтрока.Ссылка = СтрокаАналога.Ссылка;
				НовСтрока.КодНоменклатуры = СтрокаАналога.Ссылка.Код;
			КонецЕсли;
		Иначе
			СтрокаОстатков = СтрокиОстатков[0]; //этот артикул есть в остатках, но может быть другой остаток, так как все суммируются по основному артикулу
			Если СтрокаОстатков.Наличие <> НаличиеОсновногоАртикула Тогда
				СтрокаОстатков.ИсходноеНаличие = СтрокаОстатков.Наличие;
				СтрокаОстатков.Наличие = НаличиеОсновногоАртикула;
			КонецЕсли;
			Если Структура.Артикул <> СтрокаАналога.ОсновнойАртикул Тогда
				Структура.Артикул = СтрокаАналога.ОсновнойАртикул;
				СтрокиОстатков = ВТ.НайтиСтроки(Структура);
				Если СтрокиОстатков.Количество() = 0 Тогда
				Иначе
					СтрокаОстатков.КодНоменклатуры = СтрокиОстатков[0].КодНоменклатуры;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаОстатков.Загрузить(ВТ);
	//может быть, код номенклатуры менять на код номенклатуры основного артикула?
КонецПроцедуры

//Функция ПолучитьОстатки(Полная = Ложь, ВидЦены, Склад = Неопределено, СписокНоменклатуры = Неопределено, Сводные = Ложь) Экспорт
Процедура ПолучитьОстатки(Полная = Ложь, ВидЦены, Склад = Неопределено, СписокНоменклатуры = Неопределено, ГруппаСкладов = Неопределено, СтрокаСклада = Неопределено) Экспорт
	Лев7 = Лев(АдресСервиса, 7);
	id14544 = Ложь;
	id26207 = Ложь;
	id34230 = Ложь;//Торсион, более хитро остатки товаров определяет
	id36235 = Ложь;//autokhadom
	id34582 = Ложь;
	id17496 = Ложь;
	Если Лев7 = "id26207"  Тогда id26207 = Истина;
	ИначеЕсли Лев7 = "id14544"  Тогда id14544 = Истина;
	ИначеЕсли Лев7 = "id34230"  Тогда id34230 = Истина;
	ИначеЕсли Лев7 = "id36235"  Тогда id36235 = Истина;
	ИначеЕсли Лев7 = "id34582" Тогда id34582 = Истина;
	ИначеЕсли Лев7 = "id17496" Тогда id17496 = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = ЭтотОбъект.ВидЦены;
	КонецЕсли;
	//Если СтрокаСклада<>Неопределено И СтрокаСклада.ВсеПодЗаказ Тогда
	//	Если ТаблицаГруппТоваров.Количество() = 0 Тогда
	//		сообщить("Не заполнены группы товаров, заказными позициями не заполняется!");
	//		Возврат;
	//	КонецЕсли;
	//	ДозаполнитьЗаказнымиПозициями(ВидЦены, СтрокаСклада.НомерГруппы);
	//	Возврат;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	#Область Торсион
	Если id34230 Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток > 0
		               |			ТОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК КОтгрузке,
		               |	ТоварыКОтгрузкеОстатки.Номенклатура КАК ОтгружаемаяНоменклатура
		               |ПОМЕСТИТЬ ВТ_ТоварыКОтгрузке
		               |ИЗ
		               |	РегистрНакопления.ТоварыКОтгрузке.Остатки(&НаДату, Склад = &Склад) КАК ТоварыКОтгрузкеОстатки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТоварыНаСкладахОстатки.Номенклатура КАК ПоставленнаяНоменклатура,
		               |	ТоварыНаСкладахОстатки.КОтгрузкеОстаток КАК КоличествоПоставлено
		               |ПОМЕСТИТЬ ВТ_Поставлено
		               |ИЗ
		               |	РегистрНакопления.ТоварыНаСкладах.Остатки(&НаДату, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТоварыНаСкладахОстатки.Номенклатура КАК Ссылка,
		               |	ТоварыНаСкладахОстатки.Номенклатура.Наименование КАК ОписаниеНаименование,
		               |	ТоварыНаСкладахОстатки.Номенклатура.НаименованиеПолное КАК Описание,
		               |	ТоварыНаСкладахОстатки.Номенклатура.Артикул КАК Артикул,
		               |	ТоварыНаСкладахОстатки.Номенклатура.Производитель.Наименование КАК Производитель,
		               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличии,
		               |	ЕСТЬNULL(ВТ_ТоварыКОтгрузке.КОтгрузке, 0) КАК РезервКОтгрузке,
		               |	ЕСТЬNULL(ВТ_Поставлено.КоличествоПоставлено, 0) КАК ГотовоКОтгрузке,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(ВТ_ТоварыКОтгрузке.КОтгрузке, 0) > ЕСТЬNULL(ВТ_Поставлено.КоличествоПоставлено, 0)
		               |			ТОГДА ВТ_ТоварыКОтгрузке.КОтгрузке + ЕСТЬNULL(ВТ_Поставлено.КоличествоПоставлено, 0)
		               |		ИНАЧЕ ВТ_Поставлено.КоличествоПоставлено + ЕСТЬNULL(ВТ_ТоварыКОтгрузке.КОтгрузке, 0)
		               |	КОНЕЦ КАК Зарезервировано,
		               |	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ТоварыНаСкладахОстатки.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               |	ТоварыНаСкладахОстатки.Номенклатура.НаборУпаковок КАК НаборУпаковок,
		               |	ТоварыНаСкладахОстатки.Номенклатура.Код КАК КодНоменклатуры,
		               |	ТоварыНаСкладахОстатки.Номенклатура.Родитель КАК Группа,
		               |	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               |	ТоварыНаСкладахОстатки.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов
		               |ПОМЕСТИТЬ ВТ_Общая
		               |ИЗ
		               |	РегистрНакопления.ТоварыНаСкладах.Остатки(&НаДату, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыКОтгрузке КАК ВТ_ТоварыКОтгрузке
		               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ВТ_ТоварыКОтгрузке.ОтгружаемаяНоменклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Поставлено КАК ВТ_Поставлено
		               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ВТ_Поставлено.ПоставленнаяНоменклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Общая.Ссылка КАК Ссылка,
		               |	ВТ_Общая.ВНаличии КАК Наличие,
		               |	ВТ_Общая.РезервКОтгрузке КАК РезервКОтгрузке,
		               |	ВТ_Общая.ГотовоКОтгрузке КАК КОтгрузке,
		               |	ВТ_Общая.Зарезервировано КАК Зарезервировано,
		               |	ВЫБОР
		               |		КОГДА ВТ_Общая.Зарезервировано > 0
		               |			ТОГДА ВТ_Общая.ВНаличии - ВТ_Общая.Зарезервировано
		               |		ИНАЧЕ ВТ_Общая.ВНаличии
		               |	КОНЕЦ КАК Доступно,
		               |	ВТ_Общая.ОписаниеНаименование КАК ОписаниеНаименование,
		               |	ВТ_Общая.Описание КАК Описание,
		               |	ВТ_Общая.Артикул КАК Артикул,
		               |	ВТ_Общая.Производитель КАК Производитель,
		               |	ВТ_Общая.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ВТ_Общая.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               |	ВТ_Общая.НаборУпаковок КАК НаборУпаковок,
		               |	ВТ_Общая.КодНоменклатуры КАК КодНоменклатуры,
		               |	ВТ_Общая.Группа КАК Группа,
		               |	ВТ_Общая.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               |	ВТ_Общая.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		               |ИЗ
		               |	ВТ_Общая КАК ВТ_Общая
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		               |		ПО ВТ_Общая.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Производитель,
		               |	Артикул";
	
		
		
		
		
		//ТекстЗапроса = "ВЫБРАТЬ
		//               |	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
		//               |	СвободныеОстаткиОстатки.Номенклатура.Наименование КАК ОписаниеНаименование,
		//               |	СвободныеОстаткиОстатки.Номенклатура.НаименованиеПолное КАК Описание,
		//               |	СвободныеОстаткиОстатки.Номенклатура.Артикул КАК Артикул,
		//               |	СвободныеОстаткиОстатки.Номенклатура.Производитель.Наименование КАК Производитель,
		//               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		//               |	1 КАК Кратность,
		//               |	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток КАК Наличие,
		//               |	ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) КАК КОтгрузке,
		//               |	СвободныеОстаткиОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		//               |	СвободныеОстаткиОстатки.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		//               |	СвободныеОстаткиОстатки.Номенклатура.НаборУпаковок КАК НаборУпаковок,
		//               |	СвободныеОстаткиОстатки.Номенклатура.Код КАК КодНоменклатуры,
		//               |	СвободныеОстаткиОстатки.Номенклатура.Родитель КАК Группа,
		//               |	СвободныеОстаткиОстатки.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		//               |	СвободныеОстаткиОстатки.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов
		//               |ИЗ
		//               |	РегистрНакопления.СвободныеОстатки.Остатки(
		//               |			&НаДату,
		//               |			Склад = &Склад
		//               |				И Номенклатура В (&Номенклатура)) КАК СвободныеОстаткиОстатки
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		//               |		ПО СвободныеОстаткиОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
		//               |		ПО СвободныеОстаткиОстатки.Номенклатура = ТоварыКОтгрузкеОстатки.Номенклатура
		//               |ГДЕ
		//               |	СвободныеОстаткиОстатки.Номенклатура.ЭтоГруппа = ЛОЖЬ
		//               |	И СвободныеОстаткиОстатки.Номенклатура.Артикул <> """"
		//               |	И ЦеныНоменклатурыСрезПоследних.Цена <> 0
		//               |	И СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток > 0
		//               |
		//               |УПОРЯДОЧИТЬ ПО
		//               |	Производитель,
		//               |	Артикул";
	#КонецОбласти
	#Область autokhadom
	ИначеЕсли id36235 Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Набор.Номенклатура КАК Номенклатура,
		               |	СУММА(ЕСТЬNULL(Набор.ВНаличии, 0)) КАК ВНаличии,
		               |	СУММА(ЕСТЬNULL(Набор.ВРезервеСоСклада, 0)) КАК ВРезервеСоСклада,
		               |	СУММА(ЕСТЬNULL(Набор.ВРезервеПодЗаказ, 0)) КАК ВРезервеПодЗаказ,
		               |	СУММА(ЕСТЬNULL(Набор.КОтгрузке, 0)) КАК Котгрузке,
		               |	СУММА(ЕСТЬNULL(Набор.ВЯчейкахНеХранения, 0)) КАК ВЯчейкахНеХранения,
		               |	СУММА(ЕСТЬNULL(Набор.ВЯчейкахХранения, 0)) КАК ВЯчейкахХранения,
		               |	Набор.Артикул КАК Артикул,
		               |	Набор.Производитель КАК Производитель,
		               |	Набор.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	Набор.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               |	Набор.НаборУпаковок КАК НаборУпаковок,
		               |	Набор.КодНоменклатуры КАК КодНоменклатуры,
		               |	Набор.Группа КАК Группа,
		               |	Набор.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               |	Набор.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
		               |	Набор.ОписаниеНаименование КАК ОписаниеНаименование,
		               |	Набор.Описание КАК Описание
		               |ПОМЕСТИТЬ вт_Остатки
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		Таблица.Номенклатура КАК Номенклатура,
		               |		Таблица.Номенклатура.Наименование КАК ОписаниеНаименование,
		               |		Таблица.Номенклатура.НаименованиеПолное КАК Описание,
		               |		Таблица.Номенклатура.Артикул КАК Артикул,
		               |		Таблица.Номенклатура.Производитель.Наименование КАК Производитель,
		               |		СУММА(Таблица.ВНаличииОстаток) КАК ВНаличии,
		               |		СУММА(Таблица.ВРезервеСоСкладаОстаток) КАК ВРезервеСоСклада,
		               |		СУММА(Таблица.ВРезервеПодЗаказОстаток) КАК ВРезервеПодЗаказ,
		               |		СУММА(0) КАК КОтгрузке,
		               |		СУММА(0) КАК ВЯчейкахНеХранения,
		               |		Таблица.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |		Таблица.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               |		Таблица.Номенклатура.НаборУпаковок КАК НаборУпаковок,
		               |		Таблица.Номенклатура.Код КАК КодНоменклатуры,
		               |		Таблица.Номенклатура.Родитель КАК Группа,
		               |		Таблица.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               |		Таблица.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
		               |		СУММА(0) КАК ВЯчейкахХранения
		               |	ИЗ
		               |		РегистрНакопления.СвободныеОстатки.Остатки(
		               |				&НаДату,
		               |				Склад = &Склад
		               |					И Номенклатура В (&Номенклатура)) КАК Таблица
		               |	ГДЕ
		               |		НЕ Таблица.Номенклатура.ЭтоГруппа
		               |		И НЕ Таблица.Номенклатура.Артикул = """"""""
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		Таблица.Номенклатура,
		               |		Таблица.Номенклатура.Наименование,
		               |		Таблица.Номенклатура.Артикул,
		               |		Таблица.Номенклатура.Производитель.Наименование,
		               |		Таблица.Номенклатура.ЕдиницаИзмерения,
		               |		Таблица.Номенклатура.ИспользоватьУпаковки,
		               |		Таблица.Номенклатура.НаборУпаковок,
		               |		Таблица.Номенклатура.Код,
		               |		Таблица.Номенклатура.Родитель,
		               |		Таблица.Номенклатура.ЕдиницаДляОтчетов,
		               |		Таблица.Номенклатура.КоэффициентЕдиницыДляОтчетов,
		               |		Таблица.Номенклатура.НаименованиеПолное
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		Таблица.Номенклатура,
		               |		Таблица.Номенклатура.Наименование,
		               |		Таблица.Номенклатура.НаименованиеПолное,
		               |		Таблица.Номенклатура.Артикул,
		               |		Таблица.Номенклатура.Производитель.Наименование,
		               |		СУММА(0),
		               |		СУММА(0),
		               |		СУММА(0),
		               |		СУММА(Таблица.КОтгрузкеОстаток),
		               |		СУММА(0),
		               |		Таблица.Номенклатура.ЕдиницаИзмерения,
		               |		Таблица.Номенклатура.ИспользоватьУпаковки,
		               |		Таблица.Номенклатура.НаборУпаковок,
		               |		Таблица.Номенклатура.Код,
		               |		Таблица.Номенклатура.Родитель,
		               |		Таблица.Номенклатура.ЕдиницаДляОтчетов,
		               |		Таблица.Номенклатура.КоэффициентЕдиницыДляОтчетов,
		               |		СУММА(0)
		               |	ИЗ
		               |		РегистрНакопления.ТоварыКОтгрузке.Остатки(
		               |				&НаДату,
		               |				Склад = &Склад
		               |					И Номенклатура В (&Номенклатура)) КАК Таблица
		               |	ГДЕ
		               |		НЕ Таблица.Номенклатура.ЭтоГруппа
		               |		И НЕ Таблица.Номенклатура.Артикул = """"""""
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		Таблица.Номенклатура,
		               |		Таблица.Номенклатура.Наименование,
		               |		Таблица.Номенклатура.Артикул,
		               |		Таблица.Номенклатура.Производитель.Наименование,
		               |		Таблица.Номенклатура.ЕдиницаИзмерения,
		               |		Таблица.Номенклатура.ИспользоватьУпаковки,
		               |		Таблица.Номенклатура.НаборУпаковок,
		               |		Таблица.Номенклатура.Код,
		               |		Таблица.Номенклатура.Родитель,
		               |		Таблица.Номенклатура.ЕдиницаДляОтчетов,
		               |		Таблица.Номенклатура.КоэффициентЕдиницыДляОтчетов,
		               |		Таблица.Номенклатура.НаименованиеПолное
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ТоварыВЯчейкахОстатки.Номенклатура,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.Наименование,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.НаименованиеПолное,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.Артикул,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.Производитель.Наименование,
		               |		СУММА(0),
		               |		СУММА(0),
		               |		СУММА(0),
		               |		СУММА(0),
		               |		СУММА(ВЫБОР
		               |				КОГДА НЕ ТоварыВЯчейкахОстатки.Ячейка.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
		               |					ТОГДА ТоварыВЯчейкахОстатки.Упаковка.Числитель * ТоварыВЯчейкахОстатки.ВНаличииОстаток / ТоварыВЯчейкахОстатки.Упаковка.Знаменатель
		               |				ИНАЧЕ 0
		               |			КОНЕЦ),
		               |		ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.ИспользоватьУпаковки,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.НаборУпаковок,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.Код,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.Родитель,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаДляОтчетов,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.КоэффициентЕдиницыДляОтчетов,
		               |		СУММА(ВЫБОР
		               |				КОГДА ТоварыВЯчейкахОстатки.Ячейка.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
		               |					ТОГДА ТоварыВЯчейкахОстатки.Упаковка.Числитель * ТоварыВЯчейкахОстатки.ВНаличииОстаток / ТоварыВЯчейкахОстатки.Упаковка.Знаменатель
		               |				ИНАЧЕ 0
		               |			КОНЕЦ)
		               |	ИЗ
		               |		РегистрНакопления.ТоварыВЯчейках.Остатки(
		               |				&НаДату,
		               |				Ячейка.Владелец = &Склад
		               |					И Номенклатура В (&Номенклатура)) КАК ТоварыВЯчейкахОстатки
		               |	ГДЕ
		               |		НЕ ТоварыВЯчейкахОстатки.Номенклатура.ЭтоГруппа
		               |		И НЕ ТоварыВЯчейкахОстатки.Номенклатура.Артикул = """"""""
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ТоварыВЯчейкахОстатки.Номенклатура,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.Наименование,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.Артикул,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.Производитель.Наименование,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.ИспользоватьУпаковки,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.НаборУпаковок,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.Код,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.Родитель,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаДляОтчетов,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.КоэффициентЕдиницыДляОтчетов,
		               |		ТоварыВЯчейкахОстатки.Номенклатура.НаименованиеПолное) КАК Набор
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Набор.Номенклатура,
		               |	Набор.Артикул,
		               |	Набор.Производитель,
		               |	Набор.ЕдиницаИзмерения,
		               |	Набор.ИспользоватьУпаковки,
		               |	Набор.НаборУпаковок,
		               |	Набор.КодНоменклатуры,
		               |	Набор.Группа,
		               |	Набор.ЕдиницаДляОтчетов,
		               |	Набор.КоэффициентЕдиницыДляОтчетов,
		               |	Набор.ОписаниеНаименование,
		               |	Набор.Описание
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	вт_Остатки.Номенклатура КАК Ссылка,
		               |	вт_Остатки.ВЯчейкахХранения - вт_Остатки.ВРезервеСоСклада - вт_Остатки.ВРезервеПодЗаказ - вт_Остатки.Котгрузке КАК Наличие,
		               |	вт_Остатки.ОписаниеНаименование КАК ОписаниеНаименование,
		               |	вт_Остатки.Описание КАК Описание,
		               |	вт_Остатки.Артикул КАК Артикул,
		               |	вт_Остатки.Производитель КАК Производитель,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		               |	1 КАК Кратность,
		               |	вт_Остатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	вт_Остатки.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               |	вт_Остатки.НаборУпаковок КАК НаборУпаковок,
		               |	вт_Остатки.КодНоменклатуры КАК КодНоменклатуры,
		               |	вт_Остатки.Группа КАК Группа,
		               |	вт_Остатки.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               |	вт_Остатки.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов
		               |ИЗ
		               |	вт_Остатки КАК вт_Остатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		               |				&НаДату,
		               |				ВидЦены = &ВидЦены
		               |					И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних
		               |		ПО вт_Остатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |ГДЕ
		               |	вт_Остатки.ВЯчейкахХранения - вт_Остатки.ВРезервеСоСклада - вт_Остатки.ВРезервеПодЗаказ - вт_Остатки.Котгрузке > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Ссылка,
		               |	Производитель,
		               |	Артикул
		               |АВТОУПОРЯДОЧИВАНИЕ";	
	#КонецОбласти
	#Область id34582
	ИначеЕсли id34582 Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
		               |	СвободныеОстаткиОстатки.Номенклатура.Наименование КАК ОписаниеНаименование,
		               |	СвободныеОстаткиОстатки.Номенклатура.НаименованиеПолное КАК Описание,
		               |	ВЫБОР
		               |		КОГДА СвободныеОстаткиОстатки.Номенклатура.кам_АртикулABCP = """"
		               |			ТОГДА СвободныеОстаткиОстатки.Номенклатура.Артикул
		               |		ИНАЧЕ СвободныеОстаткиОстатки.Номенклатура.кам_АртикулABCP
		               |	КОНЕЦ КАК Артикул,
		               |	ВЫБОР
		               |		КОГДА СвободныеОстаткиОстатки.Номенклатура.кам_ПроизводительABCP = """"
		               |			ТОГДА СвободныеОстаткиОстатки.Номенклатура.Производитель.Наименование
		               |		ИНАЧЕ СвободныеОстаткиОстатки.Номенклатура.кам_ПроизводительABCP
		               |	КОНЕЦ КАК Производитель,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		               |	1 КАК Кратность,
		               |	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток КАК Наличие,
		               |	ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) КАК КОтгрузке,
		               |	СвободныеОстаткиОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	СвободныеОстаткиОстатки.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               |	СвободныеОстаткиОстатки.Номенклатура.НаборУпаковок КАК НаборУпаковок,
		               |	СвободныеОстаткиОстатки.Номенклатура.Код КАК КодНоменклатуры,
		               |	СвободныеОстаткиОстатки.Номенклатура.Родитель КАК Группа,
		               |	СвободныеОстаткиОстатки.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               |	СвободныеОстаткиОстатки.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов
		               |ИЗ
		               |	РегистрНакопления.СвободныеОстатки.Остатки(
		               |			&НаДату,
		               |			Склад = &Склад
		               |				И Номенклатура В (&Номенклатура)) КАК СвободныеОстаткиОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		               |		ПО СвободныеОстаткиОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
		               |		ПО СвободныеОстаткиОстатки.Номенклатура = ТоварыКОтгрузкеОстатки.Номенклатура
		               |ГДЕ
		               |	СвободныеОстаткиОстатки.Номенклатура.ЭтоГруппа = ЛОЖЬ
		               |	И СвободныеОстаткиОстатки.Номенклатура.Артикул <> """"
		               |	И ЦеныНоменклатурыСрезПоследних.Цена <> 0
		               |	И СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Производитель,
		               |	Артикул";
		Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или (УТ115 И Подверсия3 > 6) Тогда
			
		ТекстЗапроса = 		"ВЫБРАТЬ
		               		|	РаспределениеЗапасов.Номенклатура КАК Ссылка,
		               		|	РаспределениеЗапасов.Номенклатура.Наименование КАК ОписаниеНаименование,
		               		|	РаспределениеЗапасов.Номенклатура.НаименованиеПолное КАК Описание,
		               		|	ВЫБОР
		               		|		КОГДА РаспределениеЗапасов.Номенклатура.кам_АртикулABCP = """"
		               		|			ТОГДА РаспределениеЗапасов.Номенклатура.Артикул
		               		|		ИНАЧЕ РаспределениеЗапасов.Номенклатура.кам_АртикулABCP
		               		|	КОНЕЦ КАК Артикул,
		               		|	ВЫБОР
		               		|		КОГДА РаспределениеЗапасов.Номенклатура.кам_ПроизводительABCP = """"
		               		|			ТОГДА РаспределениеЗапасов.Номенклатура.Производитель.Наименование
		               		|		ИНАЧЕ РаспределениеЗапасов.Номенклатура.кам_ПроизводительABCP
		               		|	КОНЕЦ КАК Производитель,
		               		|	1 КАК Кратность,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               		|	РаспределениеЗапасов.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               		|	РаспределениеЗапасов.Номенклатура.НаборУпаковок КАК НаборУпаковок,
		               		|	РаспределениеЗапасов.Номенклатура.Код КАК КодНоменклатуры,
		               		|	РаспределениеЗапасов.Номенклатура.Родитель КАК Группа,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               		|	РаспределениеЗапасов.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
		               		|	СУММА(РаспределениеЗапасов.ВНаличии) - СУММА(РаспределениеЗапасов.Резерв) КАК Наличие,
		               		|	СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
		               		|	СУММА(РаспределениеЗапасов.Свободно) КАК Свободно,
		               		|	СУММА(РаспределениеЗапасов.Резерв) КАК Резерв,
		               		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		               		|ИЗ
		               		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		               		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		               		|		ПО РаспределениеЗапасов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               		|ГДЕ
		               		|	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		               		|	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		               		|	И РаспределениеЗапасов.Склад = &Склад
		               		|	И РаспределениеЗапасов.Номенклатура.ЭтоГруппа = ЛОЖЬ
		               		|	И РаспределениеЗапасов.Номенклатура.Артикул <> """"
		               		|	И ЦеныНоменклатурыСрезПоследних.Цена <> 0
		               		|
		               		|СГРУППИРОВАТЬ ПО
		               		|	РаспределениеЗапасов.Номенклатура,
		               		|	РаспределениеЗапасов.Номенклатура.Наименование,
		               		|	РаспределениеЗапасов.Номенклатура.НаименованиеПолное,
		               		|	ЦеныНоменклатурыСрезПоследних.Цена,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаИзмерения,
		               		|	РаспределениеЗапасов.Номенклатура.ИспользоватьУпаковки,
		               		|	РаспределениеЗапасов.Номенклатура.НаборУпаковок,
		               		|	РаспределениеЗапасов.Номенклатура.Код,
		               		|	РаспределениеЗапасов.Номенклатура.Родитель,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаДляОтчетов,
		               		|	РаспределениеЗапасов.Номенклатура.КоэффициентЕдиницыДляОтчетов,
		               		|	ВЫБОР
		               		|		КОГДА РаспределениеЗапасов.Номенклатура.кам_АртикулABCP = """"
		               		|			ТОГДА РаспределениеЗапасов.Номенклатура.Артикул
		               		|		ИНАЧЕ РаспределениеЗапасов.Номенклатура.кам_АртикулABCP
		               		|	КОНЕЦ,
		               		|	ВЫБОР
		               		|		КОГДА РаспределениеЗапасов.Номенклатура.кам_ПроизводительABCP = """"
		               		|			ТОГДА РаспределениеЗапасов.Номенклатура.Производитель.Наименование
		               		|		ИНАЧЕ РаспределениеЗапасов.Номенклатура.кам_ПроизводительABCP
		               		|	КОНЕЦ
		               		|
		               		|УПОРЯДОЧИТЬ ПО
		               		|	Производитель,
		               		|	Артикул";
		КонецЕсли;
	#КонецОбласти
	Иначе
		//               |	СвободныеОстаткиОстатки.ВНаличииОстаток - ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) КАК Наличие,
		#Область Меньше115
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
		               |	СвободныеОстаткиОстатки.Номенклатура.Наименование КАК ОписаниеНаименование,
		               |	СвободныеОстаткиОстатки.Номенклатура.НаименованиеПолное КАК Описание,
		               |	СвободныеОстаткиОстатки.Номенклатура.Артикул КАК Артикул,
		               |	СвободныеОстаткиОстатки.Номенклатура.Производитель.Наименование КАК Производитель,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		               |	1 КАК Кратность,
		               |	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток КАК Наличие,
		               |	ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) КАК КОтгрузке,
		               |	СвободныеОстаткиОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	СвободныеОстаткиОстатки.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               |	СвободныеОстаткиОстатки.Номенклатура.НаборУпаковок КАК НаборУпаковок,
		               |	СвободныеОстаткиОстатки.Номенклатура.Код КАК КодНоменклатуры,
		               |	СвободныеОстаткиОстатки.Номенклатура.Родитель КАК Группа,
		               |	СвободныеОстаткиОстатки.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               |	СвободныеОстаткиОстатки.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
		               |	СвободныеОстаткиОстатки.Номенклатура.Производитель КАК ПроизводительСсылка,
		               |	СвободныеОстаткиОстатки.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа
		               |ИЗ
		               |	РегистрНакопления.СвободныеОстатки.Остатки(
		               |			&НаДату,
		               |			Склад = &Склад
		               |				И Номенклатура В (&Номенклатура)) КАК СвободныеОстаткиОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		               |		ПО СвободныеОстаткиОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
		               |		ПО СвободныеОстаткиОстатки.Номенклатура = ТоварыКОтгрузкеОстатки.Номенклатура
		               |ГДЕ
		               |	СвободныеОстаткиОстатки.Номенклатура.ЭтоГруппа = ЛОЖЬ
		               |	И СвободныеОстаткиОстатки.Номенклатура.Артикул <> """"
		               |	И ЦеныНоменклатурыСрезПоследних.Цена <> 0
		               |	И СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток > 0
		               |	И 1 = 1
					   |	И 2 = 2
					   |
		               |УПОРЯДОЧИТЬ ПО
		               |	Производитель,
		               |	Артикул";
		#КонецОбласти

		//               |	И СвободныеОстаткиОстатки.Номенклатура.Производитель В(&Производитель)
		#Область КА25
		Если Отладка Тогда
			сообщить("УТ113="+УТ113+" УТ114="+УТ114+" УТ115="+УТ115+" Подверсия2="+Подверсия2+" Подверсия2="+Подверсия2+" Подверсия3="+Подверсия3+" Подверсия4="+Подверсия4);
		КонецЕсли;
		Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или (УТ115 И Подверсия3 > 6) Тогда
			
		ТекстЗапроса = 		"ВЫБРАТЬ
		               		|	РаспределениеЗапасов.Номенклатура КАК Ссылка,
		               		|	РаспределениеЗапасов.Номенклатура.Наименование КАК ОписаниеНаименование,
		               		|	РаспределениеЗапасов.Номенклатура.НаименованиеПолное КАК Описание,
		               		|	РаспределениеЗапасов.Номенклатура.Артикул КАК Артикул,
		               		|	РаспределениеЗапасов.Номенклатура.Производитель.Наименование КАК Производитель,
		               		|	1 КАК Кратность,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               		|	РаспределениеЗапасов.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               		|	РаспределениеЗапасов.Номенклатура.НаборУпаковок КАК НаборУпаковок,
		               		|	РаспределениеЗапасов.Номенклатура.Код КАК КодНоменклатуры,
		               		|	РаспределениеЗапасов.Номенклатура.Родитель КАК Группа,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               		|	РаспределениеЗапасов.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
		               		|	РаспределениеЗапасов.Номенклатура.Производитель КАК ПроизводительСсылка,
		               		|	РаспределениеЗапасов.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		               		|	СУММА(РаспределениеЗапасов.ВНаличии) - СУММА(РаспределениеЗапасов.Резерв) КАК Наличие,
		               		|	СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
		               		|	СУММА(РаспределениеЗапасов.Свободно) КАК Свободно,
		               		|	СУММА(РаспределениеЗапасов.Резерв) КАК Резерв,
		               		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		               		|ИЗ
		               		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		               		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		               		|		ПО РаспределениеЗапасов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               		|ГДЕ
		               		|	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		               		|	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		               		|	И РаспределениеЗапасов.Склад = &Склад
		               		|	И РаспределениеЗапасов.Номенклатура В (&Номенклатура)
		               		|	И РаспределениеЗапасов.Номенклатура.ЭтоГруппа = ЛОЖЬ
		               		|	И РаспределениеЗапасов.Номенклатура.Артикул <> """"
		               		|	И ЦеныНоменклатурыСрезПоследних.Цена <> 0
		               		|	И 1 = 1
		               		|	И 2 = 2
		               		|
		               		|СГРУППИРОВАТЬ ПО
		               		|	РаспределениеЗапасов.Номенклатура,
		               		|	РаспределениеЗапасов.Номенклатура.Наименование,
		               		|	РаспределениеЗапасов.Номенклатура.НаименованиеПолное,
		               		|	РаспределениеЗапасов.Номенклатура.Артикул,
		               		|	РаспределениеЗапасов.Номенклатура.Производитель.Наименование,
		               		|	ЦеныНоменклатурыСрезПоследних.Цена,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаИзмерения,
		               		|	РаспределениеЗапасов.Номенклатура.ИспользоватьУпаковки,
		               		|	РаспределениеЗапасов.Номенклатура.НаборУпаковок,
		               		|	РаспределениеЗапасов.Номенклатура.Код,
		               		|	РаспределениеЗапасов.Номенклатура.Родитель,
		               		|	РаспределениеЗапасов.Номенклатура.ЕдиницаДляОтчетов,
		               		|	РаспределениеЗапасов.Номенклатура.КоэффициентЕдиницыДляОтчетов,
		               		|	РаспределениеЗапасов.Номенклатура.Производитель,
		               		|	РаспределениеЗапасов.Номенклатура.ЦеноваяГруппа
		               		|
		               		|УПОРЯДОЧИТЬ ПО
		               		|	Производитель,
		               		|	Артикул";
	#КонецОбласти	
		#Область КА25НеИспользовать			
	//	ТекстЗапроса = 		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//	               		|	&ТипЗаписиОтгружается КАК ТипЗаписи,
	//	               		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	//	               		|	ТоварыКОтгрузке.Склад КАК Склад,
	//	               		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоступности,
	//	               		|	ТоварыКОтгрузке.КОтгрузкеОстаток КАК Отгружается,
	//	               		|	0 КАК ВНаличии,
	//	               		|	0 КАК Поступит,
	//	               		|	0 КАК ВРезерве,
	//	               		|	0 КАК Доступно,
	//	               		|	0 КАК НеОбеспечено
	//	               		|ПОМЕСТИТЬ ТаблицаДанныхОтчета
	//	               		|ИЗ
	//	               		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ) КАК ТоварыКОтгрузке
	//	               		|ГДЕ
	//	               		|	ТоварыКОтгрузке.Склад = &Склад
	//	               		|
	//	               		|ОБЪЕДИНИТЬ ВСЕ
	//	               		|
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	&ТипЗаписиНеОбеспечено,
	//	               		|	ИнформацияОДоступности.Номенклатура,
	//	               		|	ИнформацияОДоступности.Склад,
	//	               		|	ДАТАВРЕМЯ(1, 1, 1),
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	ИнформацияОДоступности.Распределено
	//	               		|ИЗ
	//	               		|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	//	               		|ГДЕ
	//	               		|	ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу)
	//	               		|	И ИнформацияОДоступности.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	//	               		|	И ИнформацияОДоступности.Склад = &Склад
	//	               		|
	//	               		|ОБЪЕДИНИТЬ ВСЕ
	//	               		|
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	ВЫБОР
	//	               		|		КОГДА ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)
	//	               		|			ТОГДА &ТипЗаписиНеОбеспечено
	//	               		|		КОГДА ИнформацияОДоступности.ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	//	               		|			ТОГДА &ТипЗаписиСейчас
	//	               		|		ИНАЧЕ &ТипЗаписиОжидается
	//	               		|	КОНЕЦ,
	//	               		|	ИнформацияОДоступности.Номенклатура,
	//	               		|	ИнформацияОДоступности.Склад,
	//	               		|	ИнформацияОДоступности.ДатаПоступления,
	//	               		|	0,
	//	               		|	ВЫБОР
	//	               		|		КОГДА ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	//	               		|			ТОГДА ИнформацияОДоступности.Запас
	//	               		|		ИНАЧЕ 0
	//	               		|	КОНЕЦ,
	//	               		|	ВЫБОР
	//	               		|		КОГДА ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)
	//	               		|			ТОГДА ИнформацияОДоступности.Запас
	//	               		|		ИНАЧЕ 0
	//	               		|	КОНЕЦ,
	//	               		|	ИнформацияОДоступности.Распределено + ВЫБОР
	//	               		|		КОГДА ИнформацияОДоступности.Назначение.Заказ <> НЕОПРЕДЕЛЕНО
	//	               		|			ТОГДА ИнформацияОДоступности.Свободно
	//	               		|		ИНАЧЕ 0
	//	               		|	КОНЕЦ,
	//	               		|	ВЫБОР
	//	               		|		КОГДА ИнформацияОДоступности.Назначение.Заказ <> НЕОПРЕДЕЛЕНО
	//	               		|			ТОГДА 0
	//	               		|		ИНАЧЕ ИнформацияОДоступности.Свободно
	//	               		|	КОНЕЦ,
	//	               		|	ИнформацияОДоступности.НеОбеспечено
	//	               		|ИЗ
	//	               		|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	//	               		|ГДЕ
	//	               		|	ИнформацияОДоступности.Состояние В (ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе), ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление), ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе), ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате), ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить), ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве))
	//	               		|	И (ИнформацияОДоступности.Свободно <> 0
	//	               		|			ИЛИ ИнформацияОДоступности.Запас <> 0
	//	               		|			ИЛИ ИнформацияОДоступности.Распределено <> 0
	//	               		|			ИЛИ ИнформацияОДоступности.НеОбеспечено <> 0)
	//	               		|	И ИнформацияОДоступности.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
	//	               		|	И ИнформацияОДоступности.Склад = &Склад
	//	               		|;
	//	               		|
	//	               		|////////////////////////////////////////////////////////////////////////////////
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	Таблица.Номенклатура КАК Номенклатура,
	//	               		|	Таблица.Склад КАК Склад,
	//	               		|	Таблица.ДатаДоступности КАК ДатаДоступности,
	//	               		|	СУММА(Таблица.ВНаличии + Таблица.Поступит) КАК Запас,
	//	               		|	СУММА(Таблица.ВРезерве) КАК ВРезерве,
	//	               		|	СУММА(Таблица.Доступно) КАК Доступно,
	//	               		|	СУММА(Таблица.НеОбеспечено) КАК НеОбеспечено,
	//	               		|	СУММА(Таблица.ВНаличии + Таблица.Поступит - Таблица.ВРезерве - Таблица.Доступно) <> 0 КАК ТребуетсяРаспределять
	//	               		|ПОМЕСТИТЬ ТаблицаКРаспределению
	//	               		|ИЗ
	//	               		|	ТаблицаДанныхОтчета КАК Таблица
	//	               		|ГДЕ
	//	               		|	Таблица.Склад = &Склад
	//	               		|
	//	               		|СГРУППИРОВАТЬ ПО
	//	               		|	Таблица.Номенклатура,
	//	               		|	Таблица.Склад,
	//	               		|	Таблица.ДатаДоступности
	//	               		|
	//	               		|ИМЕЮЩИЕ
	//	               		|	(СУММА(Таблица.ВНаличии + Таблица.Поступит - Таблица.ВРезерве - Таблица.Доступно) <> 0
	//	               		|		ИЛИ СУММА(Таблица.НеОбеспечено) > 0)
	//	               		|
	//	               		|ИНДЕКСИРОВАТЬ ПО
	//	               		|	Номенклатура
	//	               		|;
	//	               		|
	//	               		|////////////////////////////////////////////////////////////////////////////////
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	Таблица.Номенклатура КАК Номенклатура,
	//	               		|	Таблица.Склад КАК Склад,
	//	               		|	Таблица.ДатаДоступности КАК ДатаДоступности
	//	               		|ПОМЕСТИТЬ ТаблицаСлужебныеЗаписиПоЗаказу
	//	               		|ИЗ
	//	               		|	ТаблицаКРаспределению КАК Таблица
	//	               		|ГДЕ
	//	               		|	Таблица.ТребуетсяРаспределять
	//	               		|	И Таблица.Склад = &Склад
	//	               		|;
	//	               		|
	//	               		|////////////////////////////////////////////////////////////////////////////////
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	Таблица.Номенклатура КАК Номенклатура,
	//	               		|	Таблица.Склад КАК Склад
	//	               		|ПОМЕСТИТЬ ТаблицаСлужебныеЗаписиПоТовару
	//	               		|ИЗ
	//	               		|	ТаблицаСлужебныеЗаписиПоЗаказу КАК Таблица
	//	               		|
	//	               		|СГРУППИРОВАТЬ ПО
	//	               		|	Таблица.Номенклатура,
	//	               		|	Таблица.Склад
	//	               		|;
	//	               		|
	//	               		|////////////////////////////////////////////////////////////////////////////////
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	Таблица.Номенклатура КАК Номенклатура,
	//	               		|	Таблица.Склад КАК Склад
	//	               		|ПОМЕСТИТЬ ТаблицаСлужебныеЗаписиПоТоваруИНеобеспеченныеОжидается
	//	               		|ИЗ
	//	               		|	ТаблицаСлужебныеЗаписиПоТовару КАК Таблица
	//	               		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКРаспределению КАК ТаблицаНеобеспеченные
	//	               		|		ПО (ТаблицаНеобеспеченные.Номенклатура = Таблица.Номенклатура)
	//	               		|			И (ТаблицаНеобеспеченные.Склад = Таблица.Склад)
	//	               		|			И (ТаблицаНеобеспеченные.НеОбеспечено > 0)
	//	               		|
	//	               		|ИНДЕКСИРОВАТЬ ПО
	//	               		|	Номенклатура,
	//	               		|	Склад
	//	               		|;
	//	               		|
	//	               		|////////////////////////////////////////////////////////////////////////////////
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	Таблица.Номенклатура КАК Номенклатура,
	//	               		|	Таблица.Склад КАК Склад
	//	               		|ПОМЕСТИТЬ ТаблицаСлужебныеЗаписиПоТоваруИНеобеспеченныеСейчас
	//	               		|ИЗ
	//	               		|	ТаблицаСлужебныеЗаписиПоТовару КАК Таблица
	//	               		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКРаспределению КАК ТаблицаНеобеспеченные
	//	               		|		ПО (ТаблицаНеобеспеченные.Номенклатура = Таблица.Номенклатура)
	//	               		|			И (ТаблицаНеобеспеченные.Склад = Таблица.Склад)
	//	               		|			И (ТаблицаНеобеспеченные.НеОбеспечено > 0)
	//	               		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСлужебныеЗаписиПоТоваруИНеобеспеченныеОжидается КАК ТаблицаСлужебныеЗаписи
	//	               		|		ПО (ТаблицаСлужебныеЗаписи.Номенклатура = Таблица.Номенклатура)
	//	               		|			И (ТаблицаСлужебныеЗаписи.Склад = Таблица.Склад)
	//	               		|;
	//	               		|
	//	               		|////////////////////////////////////////////////////////////////////////////////
	//	               		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	               		|	Таблица.ТипЗаписи КАК ТипЗаписи,
	//	               		|	Таблица.Номенклатура КАК Номенклатура,
	//	               		|	Таблица.Склад КАК Склад,
	//	               		|	NULL КАК ЗаказНаОтгрузку,
	//	               		|	NULL КАК ЗаказНаПоступление,
	//	               		|	NULL КАК ДатаДоступности,
	//	               		|	Таблица.Отгружается КАК Отгружается,
	//	               		|	Таблица.ВНаличии КАК ВНаличии,
	//	               		|	Таблица.Поступит КАК Поступит,
	//	               		|	Таблица.ВРезерве КАК ВРезерве,
	//	               		|	Таблица.Доступно КАК Доступно,
	//	               		|	Таблица.НеОбеспечено КАК НеОбеспечено,
	//	               		|	Таблица.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//	               		|	Таблица.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
	//	               		|	Таблица.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов
	//	               		|ПОМЕСТИТЬ ТаблицаОстатков
	//	               		|ИЗ
	//	               		|	ТаблицаДанныхОтчета КАК Таблица
	//	               		|
	//	               		|ОБЪЕДИНИТЬ ВСЕ
	//	               		|
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	ВЫБОР
	//	               		|		КОГДА Таблица.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
	//	               		|			ТОГДА &ТипЗаписиСейчас
	//	               		|		ИНАЧЕ &ТипЗаписиОжидается
	//	               		|	КОНЕЦ,
	//	               		|	Таблица.Номенклатура,
	//	               		|	Таблица.Склад,
	//	               		|	НЕОПРЕДЕЛЕНО,
	//	               		|	NULL,
	//	               		|	Таблица.ДатаДоступности,
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	NULL,
	//	               		|	NULL,
	//	               		|	0,
	//	               		|	Таблица.Номенклатура.ЕдиницаИзмерения,
	//	               		|	Таблица.Номенклатура.ЕдиницаДляОтчетов,
	//	               		|	Таблица.Номенклатура.КоэффициентЕдиницыДляОтчетов
	//	               		|ИЗ
	//	               		|	ТаблицаСлужебныеЗаписиПоЗаказу КАК Таблица
	//	               		|
	//	               		|ОБЪЕДИНИТЬ ВСЕ
	//	               		|
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	&ТипЗаписиОжидается,
	//	               		|	Таблица.Номенклатура,
	//	               		|	Таблица.Склад,
	//	               		|	НЕОПРЕДЕЛЕНО,
	//	               		|	НЕОПРЕДЕЛЕНО,
	//	               		|	ДАТАВРЕМЯ(1, 1, 1),
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	NULL,
	//	               		|	NULL,
	//	               		|	0,
	//	               		|	Таблица.Номенклатура.ЕдиницаИзмерения,
	//	               		|	Таблица.Номенклатура.ЕдиницаДляОтчетов,
	//	               		|	Таблица.Номенклатура.КоэффициентЕдиницыДляОтчетов
	//	               		|ИЗ
	//	               		|	ТаблицаСлужебныеЗаписиПоТоваруИНеобеспеченныеОжидается КАК Таблица
	//	               		|
	//	               		|ОБЪЕДИНИТЬ ВСЕ
	//	               		|
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	&ТипЗаписиНеОбеспечено,
	//	               		|	Таблица.Номенклатура,
	//	               		|	Таблица.Склад,
	//	               		|	НЕОПРЕДЕЛЕНО,
	//	               		|	НЕОПРЕДЕЛЕНО,
	//	               		|	ДАТАВРЕМЯ(1, 1, 1),
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	NULL,
	//	               		|	Таблица.Номенклатура.ЕдиницаИзмерения,
	//	               		|	Таблица.Номенклатура.ЕдиницаДляОтчетов,
	//	               		|	Таблица.Номенклатура.КоэффициентЕдиницыДляОтчетов
	//	               		|ИЗ
	//	               		|	ТаблицаСлужебныеЗаписиПоТоваруИНеобеспеченныеОжидается КАК Таблица
	//	               		|
	//	               		|ОБЪЕДИНИТЬ ВСЕ
	//	               		|
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	&ТипЗаписиСейчас,
	//	               		|	Таблица.Номенклатура,
	//	               		|	Таблица.Склад,
	//	               		|	НЕОПРЕДЕЛЕНО,
	//	               		|	НЕОПРЕДЕЛЕНО,
	//	               		|	ДАТАВРЕМЯ(1, 1, 1),
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	NULL,
	//	               		|	NULL,
	//	               		|	0,
	//	               		|	Таблица.Номенклатура.ЕдиницаИзмерения,
	//	               		|	Таблица.Номенклатура.ЕдиницаДляОтчетов,
	//	               		|	Таблица.Номенклатура.КоэффициентЕдиницыДляОтчетов
	//	               		|ИЗ
	//	               		|	ТаблицаСлужебныеЗаписиПоТоваруИНеобеспеченныеСейчас КАК Таблица
	//	               		|
	//	               		|ОБЪЕДИНИТЬ ВСЕ
	//	               		|
	//	               		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               		|	&ТипЗаписиНеОбеспечено,
	//	               		|	Таблица.Номенклатура,
	//	               		|	Таблица.Склад,
	//	               		|	НЕОПРЕДЕЛЕНО,
	//	               		|	НЕОПРЕДЕЛЕНО,
	//	               		|	ДАТАВРЕМЯ(1, 1, 1),
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	0,
	//	               		|	NULL,
	//	               		|	Таблица.Номенклатура.ЕдиницаИзмерения,
	//	               		|	Таблица.Номенклатура.ЕдиницаДляОтчетов,
	//	               		|	Таблица.Номенклатура.КоэффициентЕдиницыДляОтчетов
	//	               		|ИЗ
	//	               		|	ТаблицаСлужебныеЗаписиПоТоваруИНеобеспеченныеСейчас КАК Таблица
	//	               		|;
	//	               		|
	//	               		|////////////////////////////////////////////////////////////////////////////////
	//	               		|ВЫБРАТЬ
	//	               		|	ТаблицаОстатков.ТипЗаписи КАК ТипЗаписи,
	//	               		|	ТаблицаОстатков.Номенклатура КАК Ссылка,
	//	               		|	ТаблицаОстатков.Номенклатура.Наименование КАК ОписаниеНаименование,
	//	               		|	ТаблицаОстатков.Номенклатура.НаименованиеПолное КАК Описание,
	//	               		|	ТаблицаОстатков.Номенклатура.Артикул КАК Артикул,
	//	               		|	ТаблицаОстатков.Номенклатура.Производитель.Наименование КАК Производитель,
	//	               		|	ТаблицаОстатков.Склад КАК Склад,
	//	               		|	ТаблицаОстатков.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	//	               		|	ТаблицаОстатков.ЗаказНаПоступление КАК ЗаказНаПоступление,
	//	               		|	ТаблицаОстатков.ДатаДоступности КАК ДатаДоступности,
	//	               		|	ТаблицаОстатков.Отгружается КАК Отгружается,
	//	               		|	ТаблицаОстатков.ВНаличии КАК ВНаличии,
	//	               		|	ТаблицаОстатков.Поступит КАК Ожидается,
	//	               		|	ТаблицаОстатков.ВРезерве КАК ВРезерве,
	//	               		|	ТаблицаОстатков.Доступно КАК Наличие,
	//	               		|	ТаблицаОстатков.НеОбеспечено КАК НеОбеспечено,
	//	               		|	ТаблицаОстатков.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//	               		|	ТаблицаОстатков.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
	//	               		|	ТаблицаОстатков.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	//	               		|	ТаблицаОстатков.Номенклатура.НаборУпаковок КАК НаборУпаковок,
	//	               		|	ТаблицаОстатков.Номенклатура.Код КАК КодНоменклатуры,
	//	               		|	ТаблицаОстатков.Номенклатура.Родитель КАК Группа,
	//	               		|	1 КАК Кратность,
	//	               		|	ТаблицаОстатков.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
	//	               		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	//	               		|ИЗ
	//	               		|	ТаблицаОстатков КАК ТаблицаОстатков
	//	               		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	//	               		|		ПО ТаблицаОстатков.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//	               		|ГДЕ
	//	               		|	ТаблицаОстатков.Номенклатура.ЭтоГруппа = ЛОЖЬ
	//	               		|	И ТаблицаОстатков.Номенклатура.Артикул <> """"
	//	               		|	И ЦеныНоменклатурыСрезПоследних.Цена <> 0
	//	               		|	И ТаблицаОстатков.Доступно > 0
	//	               		|
	//	               		|УПОРЯДОЧИТЬ ПО
	//	               		|	Производитель,
	//	               		|	Артикул";
	//
	//Запрос.УстановитьПараметр("ТипЗаписиНеОбеспечено", "Не обеспечено");
	//Запрос.УстановитьПараметр("ТипЗаписиОжидается", "Ожидается");
	//Запрос.УстановитьПараметр("ТипЗаписиОтгружается", "Отгружается");
	//Запрос.УстановитьПараметр("ТипЗаписиСейчас", "Сейчас");
	
					 //|	СвободныеОстаткиОстатки.Номенклатура.Наименование КАК ОписаниеНаименование,
					 //  |	СвободныеОстаткиОстатки.Номенклатура.НаименованиеПолное КАК Описание,
					 //  |	СвободныеОстаткиОстатки.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
					 //  |	СвободныеОстаткиОстатки.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
					 //  |	СвободныеОстаткиОстатки.ВНаличииОстаток КАК Наличие
			//https://tnsoft.ru/blog/udalen-registr-nakopleniya-svobodnyeostatki-chto-vmesto-nego/
			//СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
			//СУММА(РаспределениеЗапасов.Свободно) КАК Свободно,
			//СУММА(РаспределениеЗапасов.Резерв) КАК Резерв
			//|И СвободныеОстаткиОстатки.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
			
			//ТекстЗапроса = "ВЫБРАТЬ
			//               |	РаспределениеЗапасов.Номенклатура КАК Ссылка,
			//               |	РаспределениеЗапасов.Номенклатура.Наименование КАК ОписаниеНаименование,
			//               |	РаспределениеЗапасов.Номенклатура.НаименованиеПолное КАК Описание,
			//               |	РаспределениеЗапасов.Номенклатура.Артикул КАК Артикул,
			//               |	РаспределениеЗапасов.Номенклатура.Производитель.Наименование КАК Производитель,
			//               |	1 КАК Кратность,
			//               |	РаспределениеЗапасов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			//               |	РаспределениеЗапасов.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
			//               |	РаспределениеЗапасов.Номенклатура.НаборУпаковок КАК НаборУпаковок,
			//               |	РаспределениеЗапасов.Номенклатура.Код КАК КодНоменклатуры,
			//               |	РаспределениеЗапасов.Номенклатура.Родитель КАК Группа,
			//               |	РаспределениеЗапасов.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
			//               |	РаспределениеЗапасов.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
			//               |	СУММА(РаспределениеЗапасов.Отгрузить) КАК Наличие,
			//               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			//               |ИЗ
			//               |	РегистрНакопления.РаспределениеЗапасовДвижения КАК РаспределениеЗапасов
			//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
			//               |		ПО РаспределениеЗапасов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			//               |ГДЕ
			//               |	РаспределениеЗапасов.Номенклатура.ЭтоГруппа = ЛОЖЬ
			//               |	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			//               |	И РаспределениеЗапасов.Номенклатура.Артикул <> """"
			//               |	И ЦеныНоменклатурыСрезПоследних.Цена <> 0
			//               |
			//               |СГРУППИРОВАТЬ ПО
			//               |	РаспределениеЗапасов.Номенклатура,
			//               |	РаспределениеЗапасов.Номенклатура.Наименование,
			//               |	РаспределениеЗапасов.Номенклатура.НаименованиеПолное,
			//               |	РаспределениеЗапасов.Номенклатура.Артикул,
			//               |	РаспределениеЗапасов.Номенклатура.Производитель.Наименование,
			//               |	РаспределениеЗапасов.Номенклатура.ЕдиницаИзмерения,
			//               |	РаспределениеЗапасов.Номенклатура.ИспользоватьУпаковки,
			//               |	РаспределениеЗапасов.Номенклатура.НаборУпаковок,
			//               |	РаспределениеЗапасов.Номенклатура.Код,
			//               |	РаспределениеЗапасов.Номенклатура.Родитель,
			//               |	РаспределениеЗапасов.Номенклатура.ЕдиницаДляОтчетов,
			//               |	РаспределениеЗапасов.Номенклатура.КоэффициентЕдиницыДляОтчетов,
			//               |	ЦеныНоменклатурыСрезПоследних.Цена
			//               |
			//               |УПОРЯДОЧИТЬ ПО
			//               |	Производитель,
			//               |	Артикул";
			
		КонецЕсли;//если КА 2.5 или УТ 11.5
		#КонецОбласти
	КонецЕсли;
	#Область ОстаткиТоварыНаСкладах
	Если ОстаткиТоварыНаСкладах Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ТоварыНаСкладахОстатки.Номенклатура КАК Ссылка,
		               |	ТоварыНаСкладахОстатки.Номенклатура.Наименование КАК ОписаниеНаименование,
		               |	ТоварыНаСкладахОстатки.Номенклатура.НаименованиеПолное КАК Описание,
		               |	ТоварыНаСкладахОстатки.Номенклатура.Артикул КАК Артикул,
		               |	ТоварыНаСкладахОстатки.Номенклатура.Производитель.Наименование КАК Производитель,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		               |	1 КАК Кратность,
		               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Наличие,
		               |	ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) КАК КОтгрузке,
		               |	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ТоварыНаСкладахОстатки.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		               |	ТоварыНаСкладахОстатки.Номенклатура.НаборУпаковок КАК НаборУпаковок,
		               |	ТоварыНаСкладахОстатки.Номенклатура.Код КАК КодНоменклатуры,
		               |	ТоварыНаСкладахОстатки.Номенклатура.Родитель КАК Группа,
		               |	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
		               |	ТоварыНаСкладахОстатки.Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов
		               |ИЗ
		               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
		               |			&НаДату,
		               |			Склад = &Склад
		               |				И Номенклатура В (&Номенклатура)) КАК ТоварыНаСкладахОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки КАК ТоварыКОтгрузкеОстатки
		               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыКОтгрузкеОстатки.Номенклатура
		               |ГДЕ
		               |	ТоварыНаСкладахОстатки.Номенклатура.ЭтоГруппа = ЛОЖЬ
		               |	И ТоварыНаСкладахОстатки.Номенклатура.Артикул <> """"
		               |	И ЦеныНоменклатурыСрезПоследних.Цена <> 0
		               |	И ТоварыНаСкладахОстатки.ВНаличииОстаток > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Производитель,
		               |	Артикул";
	КонецЕсли;
	#КонецОбласти
	Если ЦенаНоменклатуры25 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ЦеныНоменклатуры.СрезПоследних", "РегистрСведений.ЦеныНоменклатуры25.СрезПоследних");
	КонецЕсли;
	Если ПроизводительВБренде Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Производитель.Наименование", "Марка.Наименование");
	КонецЕсли;
	Если id26207 = Истина  Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Производитель.Наименование", "АВЗ_БрендЗапчасти.Наименование");
	КонецЕсли;
	//Если id14544 Тогда
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Номенклатура.Артикул", "Номенклатура.ИДАЗЧ");
	//КонецЕсли;
	Если СтрокаСклада <> Неопределено Тогда
		Если СтрокаСклада.Сводный Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Склад = &Склад
		               |				И", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РаспределениеЗапасов.Склад = &Склад", "");
		КонецЕсли;
		Если ТаблицаГруппТоваров.Количество()>0 Тогда
			//отбор по производителю (бренду)
			НСтроки = ТаблицаГруппТоваров.НайтиСтроки(Новый Структура("НомерГруппы", СтрокаСклада.НомерГруппы));
			МассивПроизодителей = Новый Массив;
			Для Каждого НСтрока Из НСтроки Цикл
				Если ЗначениеЗаполнено(НСтрока.Производитель) Тогда
					МассивПроизодителей.Добавить(НСтрока.Производитель);
				КонецЕсли;
			КонецЦикла;
			Если МассивПроизодителей.Количество() > 0 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И 1 = 1", "И СвободныеОстаткиОстатки.Номенклатура.Производитель В (&МассивПроизодителей)");
			КонецЕсли;
			Запрос.УстановитьПараметр("МассивПроизодителей", МассивПроизодителей);
			//отбор по ценовой группе
			НСтроки = ТаблицаГруппТоваров.НайтиСтроки(Новый Структура("НомерГруппы", СтрокаСклада.НомерГруппы));
			МассивЦеноваяГруппа = Новый Массив;
			Для Каждого НСтрока Из НСтроки Цикл
				Если ЗначениеЗаполнено(НСтрока.ЦеноваяГруппа) Тогда
					МассивЦеноваяГруппа.Добавить(НСтрока.ЦеноваяГруппа);
				КонецЕсли;
			КонецЦикла;
			Если МассивЦеноваяГруппа.Количество() > 0 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И 2 = 2", "И СвободныеОстаткиОстатки.Номенклатура.ЦеноваяГруппа В (&МассивЦеноваяГруппа)");
			КонецЕсли;
			Запрос.УстановитьПараметр("МассивЦеноваяГруппа", МассивЦеноваяГруппа);
			//отбор по группе товаров
			НСтроки = ТаблицаГруппТоваров.НайтиСтроки(Новый Структура("НомерГруппы", СтрокаСклада.НомерГруппы));
			//СписокНоменклатуры = Новый Массив;
			//Для Каждого НСтрока Из НСтроки Цикл
			//	Если ЗначениеЗаполнено(НСтрока.ГруппаТоваров) Тогда
			//		СписокНоменклатуры.Добавить(НСтрока.ГруппаТоваров);
			//	КонецЕсли;
			//КонецЦикла;
			//Если СписокНоменклатуры.Количество() > 0 Тогда
			//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Номенклатура В (&Номенклатура)", "Номенклатура В ИЕРАРХИИ (&Номенклатура)");
			//КонецЕсли;
			//Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	Если СписокНоменклатуры = Неопределено Или СписокНоменклатуры.Количество() = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Номенклатура В (&Номенклатура)", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РаспределениеЗапасов.Номенклатура В (&Номенклатура)", "");
	Иначе
		Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	КонецЕсли;
	Если ГруппаСкладов<>Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Склад = &Склад", "Склад В (&ГруппаСкладов)");
		Запрос.УстановитьПараметр("ГруппаСкладов", ГруппаСкладов);
	КонецЕсли;
	Если УТ111 Тогда
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Номенклатура.Производитель", "Номенклатура.Марка");
	КонецЕсли;
	Если Пользователь = "api@id9135" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Номенклатура.Артикул", "Номенклатура.АртикулПроизводителя");
	КонецЕсли;
		
	//РМА
	//ТекстЗапроса = "ВЫБРАТЬ
	//               |	ТоварыНаСкладахОстатки.Номенклатура КАК Ссылка,
	//               |	ТоварыНаСкладахОстатки.Номенклатура.Наименование КАК Описание,
	//               |	ТоварыНаСкладахОстатки.Номенклатура.Артикул КАК Артикул,
	//               |	ТоварыНаСкладахОстатки.Номенклатура.Производитель.Наименование КАК Производитель,
	//               |	ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК Наличие,
	//               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	//               |ИЗ
	//               |	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	//               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	//Если НЕ ЗначениеЗаполнено(Производитель) Тогда
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СвободныеОстаткиОстатки.Номенклатура.Производитель В(&Производитель)", "");
	//КонецЕсли;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	//временно
	ВидЦеныФикс1 = Справочники.ВидыЦен.НайтиПоНаименованию("Фикс цена(Типовое соглашение)");
	
	Запрос.УстановитьПараметр("ВидЦеныФикс", ВидЦеныФикс1);
	
	//++абс+
	Запрос.Текст = СтрЗаменить(Запрос.Текст , "ПО РаспределениеЗапасов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура",
	"ПО РаспределениеЗапасов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&НаДату, ВидЦены = &ВидЦеныФикс) КАК ЦеныНоменклатуры25СрезПоследних ПО (РаспределениеЗапасов.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура)");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст , "ЦеныНоменклатурыСрезПоследних.Цена КАК Цена" ,
	"ВЫБОР КОГДА ЦеныНоменклатуры25СрезПоследних.Цена = 0 ТОГДА ЦеныНоменклатурыСрезПоследних.Цена ИНАЧЕ ЦеныНоменклатуры25СрезПоследних.Цена КОНЕЦ КАК Цена");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст , "ЦеныНоменклатурыСрезПоследних.Цена,", 
	"ВЫБОР	КОГДА ЦеныНоменклатуры25СрезПоследних.Цена = 0 ТОГДА ЦеныНоменклатурыСрезПоследних.Цена	ИНАЧЕ ЦеныНоменклатуры25СрезПоследних.Цена КОНЕЦ ,");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст , "И ЦеныНоменклатурыСрезПоследних.Цена <> 0", 
	"И (ЦеныНоменклатурыСрезПоследних.Цена <> 0 ИЛИ ЦеныНоменклатуры25СрезПоследних.Цена <> 0)");
	
	
	//++абс-
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = "нет остатков на складе: «"+ СокрЛП(Склад)+"», по виду цен «"+ВидЦены+"». Возможно не введён документ «Установка цен номенклатуры». Возможно нет свободных остатков. Возможно для ордерного склада не введён «Приходный ордер на товары»";
		ЗаписьВЛог(ТекстСообщения,5);
		Если Отладка Тогда
			сообщить(ТекстЗапроса);
			сообщить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	ТаблицаОстатков.Загрузить(Результат.Выгрузить());
	Если id36235 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
			АртикулДляПоиска = СокрЛП(СтрокаТаблицы.Ссылка.АртикулДляПоиска);
			Если АртикулДляПоиска <> "" Тогда
				СтрокаТаблицы.Артикул = АртикулДляПоиска;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(СвойствоАртикул) И id17496 Тогда //заполняем артикулом из доп.свойства
		Запрос.Текст = "ВЫБРАТЬ
		               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
		               |	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		               |ИЗ
		               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		               |ГДЕ
		               |	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
		               |	И НоменклатураДополнительныеРеквизиты.Ссылка В(&Ссылка)";
		МассивСсылок = ТаблицаОстатков.ВыгрузитьКолонку("Ссылка");
		Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
		Запрос.УстановитьПараметр("Свойство", СвойствоАртикул);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ТаблицаСвойствоАртикул = Результат.Выгрузить();
			ТаблицаСвойствоАртикул.Индексы.Добавить("Ссылка");
			СтруктураСвойствоАртикул = Новый Структура("Ссылка");
			Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
				СтруктураСвойствоАртикул.Ссылка = СтрокаТаблицы.Ссылка;
				НСтроки = ТаблицаСвойствоАртикул.НайтиСтроки(СтруктураСвойствоАртикул);
				Для Каждого НСтрока Из НСтроки Цикл
					Если СокрЛП(НСтрока.Значение)<>"" Тогда
						СтрокаТаблицы.Артикул = НСтрока.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//дописываем в таблицу позиции, которых нет на складе с количеством -10
	//Если товара нет на складе, всё равно его выгружать с количеством -10, чтобы были позиции под заказ (-1 - в наличии)
	//пока криво реализовано
	Если СтрокаСклада<>Неопределено И СтрокаСклада.ВсеПодЗаказ Тогда
		ДозаполнитьЗаказнымиПозициями(ВидЦены, СтрокаСклада.НомерГруппы);
	КонецЕсли;
	//ожидается тоже добавляем в остатки
	//Если ТоварыВПутиВОстатках Тогда
	//КонецЕсли;
	ЗаполнитьКратность();
	Если СтрокаСклада <> Неопределено И ЗначениеЗаполнено(СтрокаСклада.СвойствоКратность) Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
		               |	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		               |ИЗ
		               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		               |ГДЕ
		               |	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
		               |	И НоменклатураДополнительныеРеквизиты.Ссылка В(&Ссылка)";
		Запрос.УстановитьПараметр("Свойство", СтрокаСклада.СвойствоКратность); 
		Запрос.УстановитьПараметр("Ссылка", ТаблицаОстатков.Выгрузить(,"Ссылка").ВыгрузитьКолонку("Ссылка"));
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВТЗ = Результат.Выгрузить();
			ВТЗ.Индексы.Добавить("Ссылка");
			Структура = Новый Структура("Ссылка");
			Для Каждого ТекСтрока Из ТаблицаОстатков Цикл
				Структура.Ссылка = ТекСтрока.Ссылка;
				СтрокиВТЗ = ВТЗ.НайтиСтроки(Структура);
				Для Каждого СтрокаВТЗ Из СтрокиВТЗ Цикл
					Если СтрокаВТЗ.Значение > 0 Тогда
						ТекСтрока.Кратность = СтрокаВТЗ.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	Если ВыгружатьКорневуюГруппу = Истина Тогда
		Соответствие = Новый Соответствие;//запоминаем корневые группы, чтобы не искать в справочнике по каждой позиции
		ДлинаКода = 0;
		//КС = ТЗОстатки.Количество();
		Для Каждого ТекСтрока Из ТаблицаОстатков Цикл
			Если ДлинаКода = 0 Тогда
				ДлинаКода = ТекСтрока.Ссылка.Метаданные().ДлинаКода;
			КонецЕсли;
			ПолныйКод = ТекСтрока.Ссылка.ПолныйКод();
			Если СтрДлина(ПолныйКод) <= ДлинаКода Тогда
				Продолжить;
			КонецЕсли;
			КодГруппы = Лев(ПолныйКод,ДлинаКода);
			
			Если ЗначениеЗаполнено(КодГруппы) Тогда
				КорневаяГруппа = Соответствие.Получить(КодГруппы);
				Если НЕ ЗначениеЗаполнено(КорневаяГруппа) Тогда
					КорневаяГруппа = Справочники.Номенклатура.НайтиПоКоду(КодГруппы);
					Соответствие.Вставить(КодГруппы, КорневаяГруппа);
				КонецЕсли;
				ТекСтрока.КорневаяГруппа = КорневаяГруппа;
				//КС = КС - 1;
				//Если КС % 100 = 0 Тогда
				//	#Если Клиент Тогда
				//	состояние(КС);
				//	#КонецЕсли
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Лев(АдресСервиса, 6) = "id9652" Тогда
		//если бренд не заполнен, то заполняем из доп. реквизита brand name - для Аремении
		//"Brand Name"
		//Brand Name (Товар)
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Brand Name (Товар)");
		Если НЕ ЗначениеЗаполнено(Свойство) Тогда
			сообщить("Не найдено свойство Brand Name");
			Возврат;
		КонецЕсли;
		МассивНоменклатуры = ТаблицаОстатков.ВыгрузитьКолонку("Ссылка");
		Запрос.Текст = "ВЫБРАТЬ
		               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
		               |	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		               |ИЗ
		               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		               |ГДЕ
		               |	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
		               |	И НоменклатураДополнительныеРеквизиты.Ссылка В(&Ссылка)";
		                //|	И ДополнительныеСведения.Объект В(&Объект)";
		Запрос.УстановитьПараметр("Свойство", Свойство);
		Запрос.УстановитьПараметр("Ссылка", МассивНоменклатуры);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		ВТ = ТаблицаОстатков.Выгрузить();
		ВТ.Индексы.Добавить("Ссылка");
		Выборка = Результат.Выбрать();
		Структура = Новый Структура("Ссылка");
		Пока Выборка.Следующий() Цикл
			Структура.Ссылка = Выборка.Ссылка;
			СтрокиТаблицы = ВТ.НайтиСтроки(Структура);
			Если СтрокиТаблицы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокиТаблицы[0].Производитель = СокрЛП(Выборка.Значение);
		КонецЦикла;
		
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Brand Number (Товар)");	
		Если НЕ ЗначениеЗаполнено(Свойство) Тогда
			сообщить("Не найдено свойство Brand Number");
			Возврат;
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
		               |	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		               |ИЗ
		               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		               |ГДЕ
		               |	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
		               |	И НоменклатураДополнительныеРеквизиты.Ссылка В(&Ссылка)";
		                //|	И ДополнительныеСведения.Объект В(&Объект)";
		Запрос.УстановитьПараметр("Свойство", Свойство);
		Запрос.УстановитьПараметр("Ссылка", МассивНоменклатуры);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Структура = Новый Структура("Ссылка");
		Пока Выборка.Следующий() Цикл
			Структура.Ссылка = Выборка.Ссылка;
			СтрокиТаблицы = ВТ.НайтиСтроки(Структура);
			Если СтрокиТаблицы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокиТаблицы[0].Артикул = СокрЛП(Выборка.Значение);
			СтрокиТаблицы[0].Описание = СокрЛП(Выборка.Ссылка);
		КонецЦикла;
		ТаблицаОстатков.Загрузить(ВТ);
	КонецЕсли;
	Если Метаданные.РегистрыСведений.Найти("АналогиНоменклатуры") <> Неопределено И НЕ id14544 Тогда
		ДозаполнитьПоАналогам();
	КонецЕсли;
	//изм н КАВ
	Если id36235 Тогда
		ДополнитьОписание();
	КонецЕсли;
	//\\изм к КАВ
	
КонецПроцедуры
//КонецФункции

Процедура ДозаполнитьЗаказнымиПозициями(ПоВидуЦены = Неопределено, НомерГруппы = 0)
	//Если товара нет на складе, всё равно его выгружать с количеством -10, чтобы были позиции под заказ (-1 - в наличии)
	//выгружаем всё, а не только наличие, только если заполнены товарные группы
	Если ТаблицаГруппТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЦены", ПоВидуЦены);
	НоменклатураСОстатками = ТаблицаОстатков.ВыгрузитьКолонку("Ссылка");
	Запрос.УстановитьПараметр("НоменклатураСОстатками", НоменклатураСОстатками);
	Массив = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаГруппТоваров Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ГруппаТоваров) И ТекСтрока.НомерГруппы = НомерГруппы Тогда
			Массив.Добавить(ТекСтрока.ГруппаТоваров);
		КонецЕсли;
	КонецЦикла;
	Если Массив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос.УстановитьПараметр("ГруппыНоменклатуры", Массив);
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Наименование КАК ОписаниеНаименование,
	               |	Номенклатура.НаименованиеПолное КАК Описание,
	               |	Номенклатура.Артикул КАК Артикул,
	               |	Номенклатура.Производитель.Наименование КАК Производитель,
	               |	1 КАК Кратность,
	               |	-10 КАК Наличие,
	               |	-10 КАК КОтгрузке,
	               |	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	               |	Номенклатура.НаборУпаковок КАК НаборУпаковок,
	               |	Номенклатура.Код КАК КодНоменклатуры,
	               |	Номенклатура.Родитель КАК Группа,
	               |	Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаДляОтчетов,
	               |	Номенклатура.КоэффициентЕдиницыДляОтчетов КАК КоэффициентЕдиницыДляОтчетов,
	               |	Номенклатура.Производитель КАК ПроизводительСсылка,
	               |	Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	               |	Номенклатура.Родитель КАК Родитель
	               |ПОМЕСТИТЬ ВН
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	               |	И Номенклатура.Артикул <> """"
	               |	И НЕ Номенклатура.Ссылка В (&НоменклатураСОстатками)
	               |	И Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппыНоменклатуры)
	               |	И Номенклатура.Производитель <> &ПустойПроизводитель
	               |	И 1 = 1
	               |	И 2 = 2
	               |	И 3 = 3
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена * &Коэф КАК Цена
	               |ПОМЕСТИТЬ ВЦ
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	               |ГДЕ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура В
	               |			(ВЫБРАТЬ
	               |				ВН.Ссылка
	               |			ИЗ
	               |				ВН)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВН.Ссылка КАК Ссылка,
	               |	ВН.Описание КАК Описание,
	               |	ВН.Артикул КАК Артикул,
	               |	ВН.Производитель КАК Производитель,
	               |	ВН.Наличие КАК Наличие,
	               |	ВЦ.Цена КАК Цена,
	               |	ВН.КодНоменклатуры КАК КодНоменклатуры,
	               |	ВН.ЦеноваяГруппа КАК ЦеноваяГруппа,
	               |	ВН.ПроизводительСсылка КАК ПроизводительСсылка,
	               |	ВН.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВН.Родитель КАК Группа,
	               |	ВН.Кратность КАК Кратность
	               |ИЗ
	               |	ВН КАК ВН
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВЦ КАК ВЦ
	               |		ПО ВН.Ссылка = ВЦ.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Артикул,
	               |	Производитель";
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидЦены", ПоВидуЦены);
	Запрос.УстановитьПараметр("Коэф", 1);
	Запрос.УстановитьПараметр("ПустойПроизводитель", Справочники.Производители.ПустаяСсылка());
	Если НомерГруппы <> 0 Тогда
		НСтроки = ТаблицаГруппТоваров.НайтиСтроки(Новый Структура("НомерГруппы", НомерГруппы));
		МассивПроизодителей = Новый Массив;
		Для Каждого НСтрока Из НСтроки Цикл
			Если ЗначениеЗаполнено(НСтрока.Производитель) Тогда
				МассивПроизодителей.Добавить(НСтрока.Производитель);
			КонецЕсли;
		КонецЦикла;
		Если МассивПроизодителей.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И 1 = 1", "И Номенклатура.Производитель В (&МассивПроизодителей)");
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивПроизодителей", МассивПроизодителей);

		//отбор по ценовой группе
		МассивЦеноваяГруппа = Новый Массив;
		Для Каждого НСтрока Из НСтроки Цикл
			Если ЗначениеЗаполнено(НСтрока.ЦеноваяГруппа) Тогда
				МассивЦеноваяГруппа.Добавить(НСтрока.ЦеноваяГруппа);
			КонецЕсли;
		КонецЦикла;
		Если МассивЦеноваяГруппа.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И 2 = 2", "И Номенклатура.ЦеноваяГруппа В (&МассивЦеноваяГруппа)");
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивЦеноваяГруппа", МассивЦеноваяГруппа);

		//МассивГруппНоменклатуры = Новый Массив;
		//Для Каждого НСтрока Из НСтроки Цикл
		//	Если ЗначениеЗаполнено(НСтрока.ГруппаТоваров) Тогда
		//		МассивГруппНоменклатуры.Добавить(НСтрока.ГруппаТоваров);
		//	КонецЕсли;
		//КонецЦикла;
		//Если МассивГруппНоменклатуры.Количество() > 0 Тогда
		//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И 3 = 3", "И Номенклатура В ИЕРАРХИИ (&МассивГруппНоменклатуры)");
		//КонецЕсли;
		//Запрос.УстановитьПараметр("МассивГруппНоменклатуры", МассивГруппНоменклатуры);

	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	//сообщить(Результат.Пустой());
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтрока = ТаблицаОстатков.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
	КонецЦикла;
КонецПроцедуры//ДозаполнитьЗаказнымиПозициями

//изм н КАВ
Процедура ДополнитьОписание()
	Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		Если Найти(СтрокаТаблицы.ЕдиницаИзмерения,"шт") = 0 Тогда
			СтрокаТаблицы.Описание = СтрокаТаблицы.Описание + " / цена за " + СтрокаТаблицы.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	
//\\изм к КАВ

Процедура ЗаполнитьКратность()
	Если НЕ ВыгружатьКратность Тогда
		Возврат;
	КонецЕсли;
	id19225 = Ложь;
	Если Лев(АдресСервиса,7) = "id19225" Тогда
		id19225 = Истина;
	КонецЕсли;
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
	               |	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель,
	               |	УпаковкиЕдиницыИзмерения.Знаменатель КАК Знаменатель,
	               |	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ИЗ
	               |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	               |ГДЕ
	               |	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
	               |	И УпаковкиЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
	               |	И УпаковкиЕдиницыИзмерения.Знаменатель <> 0
	               |	И УпаковкиЕдиницыИзмерения.Числитель <> 0
	               |	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	Если id19225 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения = &ЕдиницаИзмерения", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения", "УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения, УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Для Каждого СтрокаТаблицаОстатков Из ТаблицаОстатков Цикл
		Если СтрокаТаблицаОстатков.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
			Если id19225 Тогда
				ЧастьНазвания = СокрЛП(СтрокаТаблицаОстатков.Ссылка);
				Если Лев(ЧастьНазвания, 6) <> "Фитинг" И Лев(ЧастьНазвания, 14) <> "Пресс-масленка" Тогда
					СтрокаТаблицаОстатков.Кратность = 1;
					Продолжить;
				Иначе
					//сообщить(ЧастьНазвания);
				КонецЕсли;
			КонецЕсли;
			Запрос.УстановитьПараметр("Владелец", СтрокаТаблицаОстатков.Ссылка);
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", СтрокаТаблицаОстатков.ЕдиницаИзмерения);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			Если id19225 Тогда
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Выборка.ЕдиницаИзмеренияНаименование = "Пакет" Тогда
						//сообщить(СтрокаТаблицаОстатков.Артикул+"	"+ЧастьНазвания+"	"+Выборка.Ссылка+"	"+Выборка.Числитель+"	"+Выборка.ЕдиницаИзмеренияНаименование);
						СтрокаТаблицаОстатков.Кратность = Выборка.Числитель/Выборка.Знаменатель;
					КонецЕсли;
				КонецЦикла;				
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				СтрокаТаблицаОстатков.Кратность = Выборка.Числитель/Выборка.Знаменатель;
				Если СтрокаТаблицаОстатков.ЕдиницаДляОтчетов <> СтрокаТаблицаОстатков.ЕдиницаИзмерения И СтрокаТаблицаОстатков.ЕдиницаДляОтчетов = Выборка.ЕдиницаИзмерения И СтрокаТаблицаОстатков.КоэффициентЕдиницыДляОтчетов <> 0 Тогда
					СтрокаТаблицаОстатков.КОтгрузке = СтрокаТаблицаОстатков.КОтгрузке/СтрокаТаблицаОстатков.КоэффициентЕдиницыДляОтчетов;
					СтрокаТаблицаОстатков.Наличие = СтрокаТаблицаОстатков.Наличие/СтрокаТаблицаОстатков.КоэффициентЕдиницыДляОтчетов;
					СтрокаТаблицаОстатков.Кратность = СтрокаТаблицаОстатков.Кратность/СтрокаТаблицаОстатков.КоэффициентЕдиницыДляОтчетов;
					СтрокаТаблицаОстатков.ЕдиницаИзмерения = СтрокаТаблицаОстатков.ЕдиницаДляОтчетов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаНаборУпаковок = ТаблицаОстатков.Выгрузить(,"ИспользоватьУпаковки,НаборУпаковок,ЕдиницаИзмерения");
	ТаблицаНаборУпаковок.Свернуть("ИспользоватьУпаковки,НаборУпаковок,ЕдиницаИзмерения",);
	Соответствие = Новый Соответствие;
	Для Каждого СтрокаНаборУпаковок Из ТаблицаНаборУпаковок Цикл
		Если Не СтрокаНаборУпаковок.ИспользоватьУпаковки Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицаОстатков.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		Запрос.УстановитьПараметр("Владелец", СтрокаНаборУпаковок.НаборУпаковок);
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", СтрокаНаборУпаковок.ЕдиницаИзмерения);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Если СтрокаНаборУпаковок.НаборУпаковок.КоэффициентЕдиницыДляОтчетов > 1 Тогда
				сообщить(СтрокаНаборУпаковок.НаборУпаковок);
				сообщить(СтрокаНаборУпаковок.НаборУпаковок.КоэффициентЕдиницыДляОтчетов);
				Соответствие.Вставить(СтрокаНаборУпаковок.НаборУпаковок, СтрокаНаборУпаковок.НаборУпаковок.КоэффициентЕдиницыДляОтчетов);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Кратность = Выборка.Числитель/Выборка.Знаменатель;
		Соответствие.Вставить(СтрокаНаборУпаковок.НаборУпаковок, Кратность);
	КонецЦикла;
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		Кратность = Соответствие.Получить(СтрокаОстатков.НаборУпаковок);
		Если ЗначениеЗаполнено(Кратность) Тогда
			СтрокаОстатков.Кратность = Кратность;
		КонецЕсли;
	КонецЦикла;
	//кратность в дополнительном реквизите
	Если АдресСервиса = "id14106.public.api.abcp.ru" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
		               |	НоменклатураДополнительныеРеквизиты.Значение КАК Значение,
		               |	НоменклатураДополнительныеРеквизиты.ТекстоваяСтрока КАК ТекстоваяСтрока
		               |ИЗ
		               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		               |ГДЕ
		               |	НоменклатураДополнительныеРеквизиты.Свойство.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", "Кратность");
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ТК = Результат.Выгрузить();
			//сообщить(ТК.Количество());
			ТК.Индексы.Добавить("Ссылка");
			Структура = Новый Структура("Ссылка");
			Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
				Структура.Ссылка = СтрокаОстатков.Ссылка;
				НСтроки = ТК.НайтиСтроки(Структура);
				Для Каждого НСтрока Из НСтроки Цикл
					//сообщить(""+НСтрока.Ссылка+"	-	"+НСтрока.Значение);
					Если НСтрока.Значение > 0 Тогда
						СтрокаОстатков.Кратность = НСтрока.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузитьПрайсНаСайт(ИдПоставщика = 0, ГруппаСкладов = Неопределено) Экспорт
	//если несколько складов отмечено, то надо по нескольким выгружать
	Кол = ТаблицаОстатков.Количество();
	Если Кол = 0 Тогда
		Если ИдПоставщика = 0 Тогда
			ПолучитьОстатки(Истина, ВидЦены,,,ГруппаСкладов);//некорректно берёт вид цены, он может быть привязан к складу
		Иначе
			Структура = Новый Структура("ИдентификаторПоставщика", ИдПоставщика);
			СтрокиСкладов = ТаблицаСкладов.НайтиСтроки(Структура);
			Если СтрокиСкладов.Количество() = 0 Тогда
				ВидЦеныИзТаблицы = ВидЦены;
			Иначе
				ВидЦеныИзТаблицы = СтрокиСкладов[0].ВидЦены;
				Если Не ЗначениеЗаполнено(ВидЦеныИзТаблицы) Тогда
					ВидЦеныИзТаблицы = ВидЦены;
				КонецЕсли;
			КонецЕсли;
			ПолучитьОстатки(Истина, ВидЦеныИзТаблицы);
		КонецЕсли;
		//ТаблицаОстатков.Загрузить(ПолучитьОстатки(Истина, ВидЦены).Выгрузить());
	КонецЕсли;
	Если ТаблицаОстатков.Количество() = 0 Тогда
		ЗаписьВЛог("Нет остатков в ТЗОстатки "+ ИдПоставщика,5);
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "Нет остатков по складу: "+ СокрЛП(Склад));
		Возврат;//нет остатков на складе
	КонецЕсли;
	//Если ВыгружатьКратность Тогда
	//	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
	//		//заполняем кратность по единице измерения
	//	КонецЦикла;
	//КонецЕсли;
	Если ИдПоставщика = 0 Тогда
		ИдПоставщика = Формат(ИдентификаторПоставщика,"ЧГ=0");
	ИначеЕсли ТипЗнч(ИдПоставщика) = Тип("Число") Тогда
		ИдПоставщика = Формат(ИдПоставщика,"ЧГ=0");
	КонецЕсли;
	ТекстСообщения = "Выгрузка склада по идентификатору: "+ИдПоставщика+", количество позиций без учета невыгружаемых: "+Кол;
	ЗаписьВЛог(ТекстСообщения,,Истина);
	//ИмяФайлаExcel = ИмяФайлаExcel;
	Если Прав(ИмяФайлаExcel, 8) = "test.xls" Тогда
		Дополнение = СтрЗаменить(Формат(ТекущаяДата(),"ДЛФ=DT"),":",".");
		ИмяФайлаExcel = СтрЗаменить(ИмяФайлаExcel, "test.xls", "test"+Дополнение+".xls");
	КонецЕсли;
	ИмяФайлаZip = ИмяФайлаExcel+".zip";
	Если ИмяФайлаExcel = "" Или НРег(Прав(СокрЛП(ИмяФайлаExcel),3)) = "csv" Тогда
		ИмяФайлаZip = "";
	КонецЕсли;
	//ТекстСообщения = СокрЛП(ИдПоставщика)+", позиций без учета невыгружаемых: "+ТаблицаОстатков.Количество();
	ЗаписьВЛог(ТекстСообщения,,Истина);
	//ЗаписьЖурналаРегистрации("1C-ABCP", , ,СокрЛП(ИдПоставщика) , СокрЛП(ИдПоставщика)+", позиций без учета невыгружаемых: "+ТаблицаОстатков.Количество());
	Если СокрЛП(РасположениеАналогов) <> "" И ИмяФайлаExcel = "" Тогда
		ИмяФайлаExcel = ПолучитьИмяВременногоФайла("csv");
		ИмяФайлаZip = ИмяФайлаExcel+".zip";
	КонецЕсли;
	Если ИмяФайлаExcel = "" Тогда
		ИмяФайлаExcel = ПолучитьИмяВременногоФайла("xls");
		ИмяФайлаZip = ИмяФайлаExcel+".zip";
		ВыгрузитьИзТабличногоДокументаВExcel(ИмяФайлаExcel, ИмяФайлаZip);
		ВыгрузитьФайлНаСервер(ИмяФайлаZip, ИдПоставщика);
		УдалитьФайлы(ИмяФайлаExcel);
		УдалитьФайлы(ИмяФайлаZip);
		ИмяФайлаExcel = "";
	ИначеЕсли НРег(Прав(СокрЛП(ИмяФайлаExcel),3)) = "csv" Тогда
		ВыгрузитьНоменклатуруВCSV(ИмяФайлаExcel, ИмяФайлаZip, Ложь, ИдПоставщика);
		//ВыгрузитьФайлНаСервер(ИмяФайлаZip, ИдПоставщика); - внутри ВыгрузитьНоменклатуруВCSV
		Файл = Новый Файл(ИмяФайлаExcel);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ИмяФайлаExcel);
		КонецЕсли;
		Файл = Новый Файл(ИмяФайлаZip);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ИмяФайлаZip);
		КонецЕсли;
	Иначе		
		//ВыгрузитьОстаткиВExcel(ИмяФайлаExcel, ИмяФайлаZip);
		ВыгрузитьИзТабличногоДокументаВExcel(ИмяФайлаExcel, ИмяФайлаZip);
		ВыгрузитьФайлНаСервер(ИмяФайлаZip, ИдПоставщика);
		//если прайсы не для выгрузки, чтобы не удалять
		Попытка
			Если Число(Идпоставщика)<100000 Тогда
				Возврат;
			КонецЕсли;
		Исключение
			ЗаписьВЛог(ОписаниеОшибки());
		КонецПопытки;
		//УдалитьФайлы(ИмяФайлаExcel);
		//УдалитьФайлы(ИмяФайлаZip);
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузитьОстаткиВExcel(ИмяФайла, ИмяФайлаZip) Экспорт
	УдалитьФайлы(ИмяФайла);
	СтрокаПодключения="Provider=Microsoft.Jet.OLEDB.4.0;Data Source="+ИмяФайла+";Extended Properties=""Excel 8.0;HDR=No;"";";
	//IMEX - говорит драйверу какой режим использовать., 0 - Export mode, 1 - Import mode, 2 - Linked mode (full update capabilities)
	//если файл не xls, а xlsx, тогда надо использовать ACE.OLEDB, но предварительно скачать драйверы поставщика с Microsoft
    // ACE.OLEDB.12.0 - Для использования данного подключения необходимо дополнительное ПО:
    // Microsoft Access Database Engine 2010 Redistributable 32/64 bit.
    //СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;""";
    // Еще один вариант.
    //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
	//txtSQL="CREATE TABLE tz "+ИменаКолонок; - колонки лучше добавить через ADOX
	//rs=conn.Execute(txtSQL);
	Catalog = Новый COMОбъект("ADOX.Catalog");
	Catalog.ActiveConnection = СтрокаПодключения;
	Table = Новый COMОбъект("ADOX.Table");
	Table.Name = "TDSheet";
	//https://msdn.microsoft.com/en-us/library/windows/desktop/ms676596(v=vs.85).aspx
	//https://msdn.microsoft.com/en-us/library/windows/desktop/ms675318(v=vs.85).aspx
	//https://msdn.microsoft.com/en-us/library/ms675318%28v=vs.85%29.aspx
	//adVarWChar 202
	//adChar 129
	//adInteger 3
	Table.Columns.Append("Бренд",202,50);
	Table.Columns.Append("Артикул",202,20);
	Table.Columns.Append("Описание",202,100);
	Table.Columns.Append("Цена",3);//adBigInt 20
	Table.Columns.Append("Наличие",3);
	Table.Columns.Append("Кратность",3);
	Catalog.Tables.Append(Table);
	Table = Неопределено;
	Catalog = Неопределено;
	Попытка
		Connection = Новый COMОбъект("ADODB.Connection"); 
		rs = Новый COMОбъект("ADODB.Recordset");
		Connection.ConnectionString = СтрокаПодключения; 
		//Connection.Mode = 3;//adModeReadWrite 
		Connection.Open(); 
	Исключение
		Сообщить("Ошибка создания объекта ADODB.Connection. "+ОписаниеОшибки());
		Возврат;// 0;
	КонецПопытки;
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandType = 1;
	Connection.BeginTrans();
	Для Каждого ТекСтрока Из ТаблицаОстатков Цикл
		//Произошла исключительная ситуация (Microsoft JET Database Engine): Ошибка синтаксиса (пропущен оператор) в выражении запроса ''Wynn's', 'W23379', 'Очиститель системы воздухозабора дизельных двигателей', 1, 0, 100)'.
		Описание = СтрЗаменить(ТекСтрока.Описание,"'", "`");
		//ПроизводительСтрокой = СокрЛП(ТекСтрока.Производитель);
		ПроизводительСтрокой = СокрЛП(ТекСтрока.Производитель);
		ПроизводительСтрокой = СтрЗаменить(ПроизводительСтрокой,"'", "`");
		Если ПроизводительСтрокой = "" Тогда
			Продолжить;
		КонецЕсли;
		//Если ТекСтрока.Артикул = "" Тогда
		//	Продолжить;
		//КонецЕсли;
		Если ТекСтрока.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
	    SQL = "INSERT INTO [TDSheet] VALUES ('" + ПроизводительСтрокой + "', '" + ТекСтрока.Артикул + "', '" + Описание + "', " + Формат(ТекСтрока.Цена,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ", " + Формат(ТекСтрока.Наличие,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+", "+Формат(ТекСтрока.Кратность, "ЧГ=0")+")";
		Command.CommandText = SQL;
		//сообщить(SQL);
	    Command.Execute();
	КонецЦикла;
	Connection.CommitTrans();
	Command = Неопределено;
	Connection.Close();
	Connection = Неопределено;	
	ЗаписьZIP =  Новый ЗаписьZipФайла(ИмяФайлаZip);     
    ЗаписьZIP.Добавить(ИмяФайла);
    ЗаписьZIP.Записать();
КонецПроцедуры

Процедура ВыгрузитьФайлНаСервер(ИмяФайлаZip, ИдПоставщика = 0)
	Если СокрЛП(EmailПолучателя) <> "" Тогда
		ТемаПисьма = "рассылка прайса, поставщик "+ИдПоставщика;
		Профиль = Новый ИнтернетПочтовыйПрофиль;
		Профиль.АдресСервераSMTP = ПочтовыйСервер;
		Профиль.ПортSMTP = ПортSMTP;
		Профиль.Пользователь = ПользовательДляEmail;
		Профиль.Пароль = ПарольДляEmail;
		Профиль.ПользовательSMTP = ПользовательДляEmail;
		Профиль.ПарольSMTP = ПарольДляEmail;
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
		Профиль.ТолькоЗащищеннаяАутентификацияSMTP = Ложь;
		Профиль.ИспользоватьSSLSMTP = Истина;
		Почта = Новый ИнтернетПочта;

		Письмо = Новый ИнтернетПочтовоеСообщение;
		Текст = Письмо.Тексты.Добавить(ТекстПисьма);
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		Письмо.Тема = ТемаПисьма;
		Если ИдПоставщика <> 0 Тогда
			НайденныеСтроки = ТаблицаСкладов.НайтиСтроки(Новый Структура("ИдентификаторПоставщика", ИдПоставщика));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Тема = Тема + " ид. " + Формат(НайденнаяСтрока.ИдентификаторПоставщика, "ЧГ=0") + " поставщик " + СокрЛП(НайденнаяСтрока.НаименованиеПоставщика);
				Прервать;
			КонецЦикла;
		КонецЕсли;
		Письмо.Тема = Тема;
		Письмо.Отправитель = ПользовательДляEmail;
		Если Не ЗначениеЗаполнено(ПодписьОтправителя) Тогда
			Письмо.ИмяОтправителя = ПользовательДляEmail;
		Иначе
			Письмо.ИмяОтправителя = СокрЛП(ПодписьОтправителя);
		КонецЕсли;
		Письмо.Вложения.Добавить(ИмяФайлаZip);
		Письмо.Получатели.Добавить(EmailПолучателя);
		Попытка
			Почта.Подключиться(Профиль);
			ЗаписьВЛог("Подключено к серверу: "+ПочтовыйСервер+":"+ПортSMTP, 1, Истина);
		Исключение
			ЗаписьВЛог("Не удалось подключиться к серверу: "+ПочтовыйСервер+":"+ПортSMTP, 1, Истина);
			ЗаписьВЛог(ОписаниеОшибки(),1,Истина);
			Возврат;
		КонецПопытки;
		Попытка
			Почта.Послать(Письмо);
			ЗаписьВЛог("Отправлено письмо по адресу: "+EmailПолучателя, 1, Истина);
		Исключение
			ЗаписьВЛог("Не удалось отправить прайс по адресу: "+EmailПолучателя, 1, Истина);
			ЗаписьВЛог(ОписаниеОшибки(),1,Истина);
			Возврат;
		КонецПопытки;
		Почта.Отключиться();
		Возврат;
	КонецЕсли;
	Если СокрЛП(РасположениеАналогов) <> "" И СтрДлина(РасположениеАналогов)>50 Тогда
		Если ИдПоставщика = 0 Тогда
			ИдПоставщика = ИдентификаторПоставщика;
		КонецЕсли;
		Если ИдПоставщика = "1" Или ИдПоставщика = 1 Тогда
			сообщить("Данные на сайт не выгружены, нет поставщика с идентификатором "+ИдПоставщика);
		КонецЕсли;
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("csv");
		ФайлОтправки = Новый Файл(ИмяФайлаZip);
		РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
		ПолныйАдрес = СтрЗаменить(РасположениеАналогов,"https://","");
		ПолныйАдрес = СтрЗаменить(ПолныйАдрес,"http://","");
		ПолныйАдрес = СтрЗаменить(ПолныйАдрес,"ftp://","");
		ПерваяДробь = Найти(ПолныйАдрес,"/");
		Если ПерваяДробь = 0 Тогда
			Возврат;
		КонецЕсли;
		АдресДоДроби = Лев(ПолныйАдрес, ПерваяДробь-1);
		ПараметрыПослеДроби = Сред(ПолныйАдрес, ПерваяДробь)+"&distributorId="+ИдПоставщика;
		HTTPСоединение = Новый HTTPСоединение(АдресДоДроби);
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаZip, ПараметрыПослеДроби, ИмяВыходногоФайла, Заголовки);	
		Исключение
			ТекстСообщения = " идентификатор склада: " + ИдПоставщика+", ошибки "+ОписаниеОшибки();
			ЗаписьВЛог(ТекстСообщения,3);
			Возврат;
		КонецПопытки;
		КодСостояния = HTTPОтвет.КодСостояния;
		Если НЕ КодСостояния200(КодСостояния, , ИмяВыходногоФайла) Тогда
			Возврат;
		Иначе
			//ЗаписьВЛог("Ответ сервера ("+ИмяВыходногоФайла+")");
		    //не удаляем, так как его выгружаем
		КонецЕсли;
		ИмяФайлаZip = ИмяВыходногоФайла;
		//Возврат;//потом убрать, так как этот файл выгружаем на сайт
	КонецЕсли;
	//boundary нужны
	МассивФайлов = Новый Массив;
	 
	//Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	Boundary = "------------------------5707735e694680a2";
	 
	ИмяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt"); // первый файл, содержащий параметры
	//ЗаписьВЛог("Имя файла с параметрами: "+ИмяФайлаСПараметрами);
	 
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСПараметрами);
	 
	//&distributorId=" + ИдентификаторПоставщика+fileTypeId+"&uploadFile=@"+ИмяФайлаZip, , Пользователь, Пароль);
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""userlogin""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(Пользователь);
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""userpsw""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(Пароль);
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""distributorId""");
	ЗаписьТекста.ЗаписатьСтроку("");
	Если ИдПоставщика = 0 Тогда
		ИдПоставщика = ИдентификаторПоставщика;
	КонецЕсли;
	Попытка
		Если Число(Идпоставщика)<100000 Тогда
			ЗаписьВЛог("Некорректный ид.поставщика ("+Идпоставщика+"), файл сформирован, но на сайт не выгружен",,Истина);
			Возврат;
		КонецЕсли;
	Исключение
		ЗаписьВЛог(ОписаниеОшибки());
	КонецПопытки;
	ЗаписьТекста.ЗаписатьСтроку(ИдПоставщика);
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""fileTypeId""");
	ЗаписьТекста.ЗаписатьСтроку("");
	//Если ЗначениеЗаполнено(Производитель) Тогда //Или (НЕ ПолноеОбновлениеПрайса) Тогда
	//	ПолноеОбновлениеПрайса = Ложь;
	//	ТипФайла = "-F ""fileTypeId=4"" ";//инкрементный ассортимент
	//	fileTypeId = "&fileTypeId=4";
	//	ЗаписьТекста.ЗаписатьСтроку(4);
	//Иначе
		ТипФайла = "-F ""fileTypeId=1"" ";//полный ассортимент
		fileTypeId = "&fileTypeId=1";
		ЗаписьТекста.ЗаписатьСтроку(1);
	//КонецЕсли;
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""uploadFile""; filename="""+ИмяФайлаZip+"""");
	ЗаписьТекста.ЗаписатьСтроку("Content-Type: application/octet-stream");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.Закрыть(); // заканчиваем работу с файлом 1
	 
	МассивФайлов.Добавить(ИмяФайлаСПараметрами); // добавляем 1-ый файл для объединения
	МассивФайлов.Добавить(ИмяФайлаZip); // добавляем 1-ый архив для объединения
	 
	// третий файл, закрывающий параметры
	ИмяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСПараметрами);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary+"--");
	ЗаписьТекста.Закрыть();
	МассивФайлов.Добавить(ИмяФайлаСПараметрами); // добавляем 3-ий файл, закрывающий параметры
	
	// результирующий файл, который и будет отправлен
	ИмяФайлаОтправки = ПолучитьимяВременногоФайла("txt");
	// объединим все файлы
	ОбъединитьФайлы(МассивФайлов, ИмяФайлаОтправки);
	//ЗаписьВЛог("Имя файла отправки: "+ИмяФайлаОтправки);
	 
	ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	 
	// передадим данные на сервер 
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data, boundary="+boundary);
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	 
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json"); // сервер возвращает ответы в виде XML
	//HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	//HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/distributor/pricelistUpdate?userlogin="+Пользователь+"&userpsw="+Пароль+"&distributorId=" + ИдентификаторПоставщика+fileTypeId+"&uploadFile=@"+ИмяФайлаZip, , Пользователь, Пароль);
	//ssl1 = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Авто),Новый СертификатыУдостоверяющихЦентровWindows());
	//ssl1 = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	//HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/distributor/pricelistUpdate?userlogin="+Пользователь+"&userpsw="+Пароль+"&distributorId=" + ИдПоставщика+fileTypeId+"&uploadFile=@"+ИмяФайлаZip, , Пользователь, Пароль,,,ssl1);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/distributor/pricelistUpdate?userlogin="+Пользователь+"&userpsw="+Пароль+"&distributorId=" + ИдПоставщика+fileTypeId+"&uploadFile=@"+ИмяФайлаZip, , Пользователь, Пароль);
	Попытка
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаОтправки, "/cp/distributor/pricelistUpdate", ИмяВыходногоФайла, Заголовки);
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", ТекстСообщения);
		Возврат;
	КонецПопытки;
	КодСостояния = HTTPОтвет.КодСостояния;
	Если НЕ КодСостояния200(КодСостояния, , ИмяВыходногоФайла) Тогда
		ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли;
	Попытка
	    УдалитьФайлы(ИмяФайлаСПараметрами);
	Исключение
	КонецПопытки;
	Попытка
	    УдалитьФайлы(ИмяФайлаОтправки);
	Исключение
	КонецПопытки;
	Попытка
		Файл = Новый ЧтениеТекста(ИмяВыходногоФайла);
		ВесьФайлОднойСтрокой = Файл.Прочитать();
		Если Отладка Тогда
			сообщить("Ответ с сайта в файле "+ИмяВыходногоФайла);
			сообщить(ВесьФайлОднойСтрокой);
		КонецЕсли;
		Файл.Закрыть();
		Если ВесьФайлОднойСтрокой = "{""status"":1,""message"":""\u0424\u0430\u0439\u043b \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443""}" Тогда
			ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Информация, , СокрЛП(ИдПоставщика), "Файл поставлен в очередь на обработку");
		Иначе
			ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Информация, , СокрЛП(ИдПоставщика), ВесьФайлОднойСтрокой);
		КонецЕсли;
	    УдалитьФайлы(ИмяВыходногоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

#Область СинхронизацияФинансовКлиента
//Процедура ОбновитьФинансовуюИнформацию() Экспорт
//КонецПроцедуры

Процедура ОбновитьБалансКлиентов(НеВыгружать = Ложь) Экспорт
	Если ТаблицаКлиентов.Количество() > 0 Тогда
		Если НеВыгружать Тогда
			Возврат;
		КонецЕсли;
		Для Каждого ТекСтрока Из ТаблицаКлиентов Цикл
			ОбновитьБалансКлиента(ТекСтрока.Контрагент, ТекСтрока.ИдентификаторКонтрагента, ТекСтрока.Баланс);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Контрагент,
	               |	ДополнительныеСведения.Значение КАК ИдентификаторКонтрагента
	               |ПОМЕСТИТЬ ВТКлиенты
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект.Ссылка ССЫЛКА Справочник.Контрагенты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	0 КАК Баланс,
	               |	ВТКлиенты.Контрагент КАК АналитикаУчетаПоПартнерамКонтрагент
	               |ПОМЕСТИТЬ ВТБалансы
	               |ИЗ
	               |	ВТКлиенты КАК ВТКлиенты
	               |ГДЕ
	               |	ВТКлиенты.Контрагент В
	               |			(ВЫБРАТЬ
	               |				ВТКлиенты.Контрагент
	               |			ИЗ
	               |				ВТКлиенты)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект,
	               |	ДополнительныеСведения.Значение КАК ДатаОбновленияСальдо
	               |ПОМЕСТИТЬ ВТДатаСальдо
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект В
	               |			(ВЫБРАТЬ
	               |				ВТКлиенты.Контрагент
	               |			ИЗ
	               |				ВТКлиенты)
	               |	И ДополнительныеСведения.Свойство = &ДатаОбновленияСальдо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект,
	               |	ДополнительныеСведения.Значение КАК ВыгруженноеСальдо
	               |ПОМЕСТИТЬ ВТВыгруженноеСальдо
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект В
	               |			(ВЫБРАТЬ
	               |				ВТКлиенты.Контрагент
	               |			ИЗ
	               |				ВТКлиенты)
	               |	И ДополнительныеСведения.Свойство = &ВыгруженноеCальдо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект,
	               |	ДополнительныеСведения.Значение КАК ВыгруженныйЛимитКредита
	               |ПОМЕСТИТЬ ВТВыгруженныйЛимитКредита
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект В
	               |			(ВЫБРАТЬ
	               |				ВТКлиенты.Контрагент
	               |			ИЗ
	               |				ВТКлиенты)
	               |	И ДополнительныеСведения.Свойство = &creditLimit
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект,
	               |	ДополнительныеСведения.Значение КАК ВыгруженнаяОтсрочкаПлатежа
	               |ПОМЕСТИТЬ ВТВыгруженнаяОтсрочкаПлатежа
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект В
	               |			(ВЫБРАТЬ
	               |				ВТКлиенты.Контрагент
	               |			ИЗ
	               |				ВТКлиенты)
	               |	И ДополнительныеСведения.Свойство = &payDelay
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект,
	               |	ДополнительныеСведения.Значение КАК ВыгруженныйПросроченныйБаланс
	               |ПОМЕСТИТЬ ВТВыгруженныйПросроченныйБаланс
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект В
	               |			(ВЫБРАТЬ
	               |				ВТКлиенты.Контрагент
	               |			ИЗ
	               |				ВТКлиенты)
	               |	И ДополнительныеСведения.Свойство = &overdueSaldo
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТКлиенты.Контрагент КАК Контрагент,
	               |	ВТКлиенты.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	               |	ВТБалансы.Баланс КАК Баланс,
	               |	ВТДатаСальдо.ДатаОбновленияСальдо КАК ДатаОбновленияСальдо,
	               |	ВТВыгруженноеСальдо.ВыгруженноеСальдо КАК ВыгруженноеСальдо,
	               |	ВТВыгруженныйЛимитКредита.ВыгруженныйЛимитКредита КАК ВыгруженныйЛимитКредита,
	               |	ВТВыгруженнаяОтсрочкаПлатежа.ВыгруженнаяОтсрочкаПлатежа КАК ВыгруженнаяОтсрочкаПлатежа,
	               |	ВТВыгруженныйПросроченныйБаланс.ВыгруженныйПросроченныйБаланс КАК ВыгруженныйПросроченныйБаланс
	               |ИЗ
	               |	ВТКлиенты КАК ВТКлиенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТБалансы КАК ВТБалансы
	               |		ПО ВТКлиенты.Контрагент = ВТБалансы.АналитикаУчетаПоПартнерамКонтрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаСальдо КАК ВТДатаСальдо
	               |		ПО ВТКлиенты.Контрагент = ВТДатаСальдо.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыгруженноеСальдо КАК ВТВыгруженноеСальдо
	               |		ПО ВТКлиенты.Контрагент = ВТВыгруженноеСальдо.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыгруженныйЛимитКредита КАК ВТВыгруженныйЛимитКредита
	               |		ПО ВТКлиенты.Контрагент = ВТВыгруженныйЛимитКредита.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыгруженнаяОтсрочкаПлатежа КАК ВТВыгруженнаяОтсрочкаПлатежа
	               |		ПО ВТКлиенты.Контрагент = ВТВыгруженнаяОтсрочкаПлатежа.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыгруженныйПросроченныйБаланс КАК ВТВыгруженныйПросроченныйБаланс
	               |		ПО ВТКлиенты.Контрагент = ВТВыгруженныйПросроченныйБаланс.Объект";
	//если были взаиморасчеты по документам и без, то неправильно считает |	И РасчетыСКлиентамиОстатки.ЗаказКлиента.Ссылка ЕСТЬ NULL 
	userId = НайтиДобавитьСвойствоКонтрагента("userId");
	ДатаОбновленияСальдо = НайтиДобавитьСвойствоКонтрагента("Дата обновления сальдо");
	ВыгруженноеСальдо = НайтиДобавитьСвойствоКонтрагента("Выгруженное сальдо");
	creditLimit = НайтиДобавитьСвойствоКонтрагента("creditLimit");//Значение лимита кредита в валюте сайта
	payDelay = НайтиДобавитьСвойствоКонтрагента("payDelay");//Отсрочка платежа(в днях)
	overdueSaldo = НайтиДобавитьСвойствоКонтрагента("overdueSaldo");//Просроченный баланс
	
	Запрос.УстановитьПараметр("Свойство", userId);
	Запрос.УстановитьПараметр("ДатаОбновленияСальдо", ДатаОбновленияСальдо);
	Запрос.УстановитьПараметр("ВыгруженноеCальдо", ВыгруженноеСальдо);
	Запрос.УстановитьПараметр("creditLimit", creditLimit);//Значение лимита кредита в валюте сайта
	Запрос.УстановитьПараметр("payDelay", payDelay);//Отсрочка платежа(в днях)
	Запрос.УстановитьПараметр("overdueSaldo", overdueSaldo);//Просроченный баланс

	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Результат = Запрос.Выполнить(); //Запрос.ВыполнитьПакетСПромежуточнымиДанными()[6].Выгрузить()
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТаблицаКлиентов.Загрузить(Результат.Выгрузить());
	МассивКлиентовСИдентификаторами = ТаблицаКлиентов.ВыгрузитьКолонку("Контрагент");
	ПерезаполнитьБаланс(МассивКлиентовСИдентификаторами);
	ЗаполнитьДополнительнуюФинансовуюИнформацию(МассивКлиентовСИдентификаторами);
	Для Каждого ТекСтрока Из ТаблицаКлиентов Цикл
		Если ТекСтрока.Баланс <> ТекСтрока.ВыгруженноеСальдо Или ТекСтрока.creditLimit <> ТекСтрока.ВыгруженныйЛимитКредита Или ТекСтрока.payDelay <> ТекСтрока.ВыгруженнаяОтсрочкаПлатежа Или ТекСтрока.overdueSaldo <> ТекСтрока.ВыгруженныйПросроченныйБаланс Тогда
			ТекСтрока.Обновить = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НеВыгружать Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьБалансИФинансовуюИнформацию();
КонецПроцедуры //ОбновитьБалансКлиентов

Процедура ЗаполнитьДополнительнуюФинансовуюИнформацию(МассивКлиентовСИдентификаторами) Экспорт
	//запрос из отчета СостояниеРасчетовСКлиентами
	//заполняем лимит кредита (в договоре), отсрочка платежа (из соглашения), просроченное сальдо (отчет о просроченной задолженности)
	//и из этого отчета перезаполняем баланс, он более правильный
	Запрос = Новый Запрос;
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		Запрос.Текст = ТекстЗапросаПросроченноеСальдоУТ1158();
	Иначе
		Запрос.Текст = ТекстЗапросаПросроченноеСальдо();
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивКлиентовСИдентификаторами", МассивКлиентовСИдентификаторами);
	Запрос.УстановитьПараметр("ДатаОтчета", ТекущаяДата());
    Результат = Запрос.Выполнить();
	//сообщить(Результат.Пустой());
	ТЗСДоговорами = Результат.Выгрузить();
	ТЗСДоговорами.Свернуть("Контрагент,Договор,Соглашение", "КОплатеПросрочено");
	
	Результат = Запрос.Выполнить();
	ТЗСДоговорами.Индексы.Добавить("Контрагент");
	ТЗ = Результат.Выгрузить();
	ТЗ.Свернуть("Контрагент,ЗаказКлиента,Соглашение", "КОплатеПросрочено");//если в соглашении стоит отсрочка, проверяем вышли за пределы соглашения
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Соглашение) И ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
			Для Каждого СтрокаЭтапа Из ТекСтрока.Соглашение.ЭтапыГрафикаОплаты Цикл
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
					Если СтрокаЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг Или СтрокаЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки Тогда
						Если СтрокаЭтапа.Сдвиг>0 Тогда
							//сообщить(ТекСтрока.ЗаказКлиента);
							Если ТекСтрока.ЗаказКлиента.Дата + СтрокаЭтапа.Сдвиг * 86400 >= ТекущаяДата() Тогда
								ТекСтрока.КОплатеПросрочено = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если СтрокаЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитСдвиг Или СтрокаЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
						Если СтрокаЭтапа.Сдвиг>0 Тогда
							//сообщить(ТекСтрока.ЗаказКлиента);
							Если ТекСтрока.ЗаказКлиента.Дата + СтрокаЭтапа.Сдвиг * 86400 >= ТекущаяДата() Тогда
								ТекСтрока.КОплатеПросрочено = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ТЗ.Свернуть("Контрагент", "КОплатеПросрочено");
	ТЗ.Индексы.Добавить("Контрагент");
	ЗапросДоговоры = Новый Запрос;
	ЗапросДоговоры.Текст = "ВЫБРАТЬ
	                       |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	                       |	ДоговорыКонтрагентов.УстановленСрокОплаты КАК УстановленСрокОплаты,
	                       |	ДоговорыКонтрагентов.СрокОплаты КАК СрокОплаты,
	                       |	ДоговорыКонтрагентов.ОграничиватьСуммуЗадолженности КАК ОграничиватьСуммуЗадолженности,
	                       |	ДоговорыКонтрагентов.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	                       |	ДоговорыКонтрагентов.Контрагент КАК Контрагент
	                       |ИЗ
	                       |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                       |ГДЕ
	                       |	ДоговорыКонтрагентов.Контрагент В(&МассивКлиентовСИдентификаторами)
	                       |	И ДоговорыКонтрагентов.Организация = &Организация
	                       |	И ДоговорыКонтрагентов.ПометкаУдаления = Ложь";
	ЗапросДоговоры.УстановитьПараметр("МассивКлиентовСИдентификаторами", МассивКлиентовСИдентификаторами);
	ЗапросДоговоры.УстановитьПараметр("Организация", Организация);
	Результат = ЗапросДоговоры.Выполнить();
	Если Результат.Пустой() Тогда
		ЕстьТЗДоговоры = Ложь;
	Иначе
		ЕстьТЗДоговоры = Истина;
		ТЗДоговоры = Результат.Выгрузить();
		ТЗДоговоры.Индексы.Добавить("Контрагент");
	КонецЕсли;
	
	ЗапросСоглашения = Новый Запрос;
	ЗапросСоглашения.Текст = "ВЫБРАТЬ
	                         |	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	                         |	СоглашенияСКлиентами.Контрагент КАК Контрагент
	                         |ИЗ
	                         |	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	                         |ГДЕ
	                         |	СоглашенияСКлиентами.Контрагент В(&МассивКлиентовСИдентификаторами)
							 |	И СоглашенияСКлиентами.ПометкаУдаления = ЛОЖЬ
							 |	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)";
	//						 |	И СоглашенияСКлиентами.Организация = &Организация//не всегда заполнено
	ЗапросСоглашения.УстановитьПараметр("МассивКлиентовСИдентификаторами", МассивКлиентовСИдентификаторами);
	//ЗапросСоглашения.УстановитьПараметр("Организация", Организация);
	Результат = ЗапросСоглашения.Выполнить();
	Если Результат.Пустой() Тогда
		ЕстьТЗСоглашения = Ложь;
	Иначе
		ЕстьТЗСоглашения = Истина;
		ТЗСоглашения = Результат.Выгрузить();
		ТЗСоглашения.Индексы.Добавить("Контрагент");
	КонецЕсли;
	
	Структура = Новый Структура("Контрагент");
	Для Каждого СтрокаТаблицы Из ТаблицаКлиентов Цикл
		Структура.Контрагент = СтрокаТаблицы.Контрагент;
		НайденныеСтроки = ТЗСДоговорами.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ЕстьТЗДоговоры Тогда
				НайденныеСтроки = ТЗДоговоры.НайтиСтроки(Структура);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				//НайденныйДоговор = ПолучитьДоговорПоУмолчанию(,,,,СтрокаТаблицы.Контрагент);
					НайденныйДоговор = НайденнаяСтрока.Ссылка;
					Если ЗначениеЗаполнено(НайденныйДоговор) Тогда
						СтрокаТаблицы.Договор = НайденныйДоговор;
						Если ЗначениеЗаполнено(НайденнаяСтрока.УстановленСрокОплаты) И НайденнаяСтрока.СрокОплаты>0 Тогда
							СтрокаТаблицы.payDelay = НайденнаяСтрока.СрокОплаты;//отсрочка платежа, в договоре в интерфейсе не видно, но если есть соглашение, берет из него
						КонецЕсли;
						Если ЗначениеЗаполнено(НайденнаяСтрока.ОграничиватьСуммуЗадолженности) И НайденнаяСтрока.ДопустимаяСуммаЗадолженности>0 Тогда
							СтрокаТаблицы.creditLimit = НайденнаяСтрока.ДопустимаяСуммаЗадолженности;//Значение лимита кредита
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЕстьТЗСоглашения Тогда
				//сообщить(СтрокаТаблицы.Контрагент);
				НайденныеСтроки = ТЗСоглашения.НайтиСтроки(Структура);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				//НайденныйДоговор = ПолучитьДоговорПоУмолчанию(,,,,СтрокаТаблицы.Контрагент);
					НайденноеСоглашение = НайденнаяСтрока.Ссылка;
					Если ЗначениеЗаполнено(НайденноеСоглашение) Тогда
						СтрокаТаблицы.Соглашение = НайденноеСоглашение;
						Для Каждого ТекСтрока Из НайденноеСоглашение.ЭтапыГрафикаОплаты Цикл
							СтрокаТаблицы.payDelay = ТекСтрока.Сдвиг;
						КонецЦикла;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденныйДоговор = НайденнаяСтрока.Договор;
				Если ЗначениеЗаполнено(НайденныйДоговор) Тогда
					Если ЗначениеЗаполнено(НайденныйДоговор.УстановленСрокОплаты) Тогда
						СтрокаТаблицы.payDelay = НайденныйДоговор.СрокОплаты;//отсрочка платежа, в договоре в интерфейсе не видно
					КонецЕсли;
					Если ЗначениеЗаполнено(НайденныйДоговор.ОграничиватьСуммуЗадолженности) Тогда
						СтрокаТаблицы.creditLimit = НайденныйДоговор.ДопустимаяСуммаЗадолженности;//Значение лимита кредита
					КонецЕсли;
				КонецЕсли;
				НайденноеСоглашение = НайденнаяСтрока.Соглашение;
				//из этапов оплаты брать
				Если ЗначениеЗаполнено(НайденноеСоглашение) Тогда
					Для Каждого ТекСтрока Из НайденноеСоглашение.ЭтапыГрафикаОплаты Цикл
					СтрокаТаблицы.payDelay = ТекСтрока.Сдвиг;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НайденныеСтроки = ТЗ.НайтиСтроки(Структура);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокаТаблицы.overdueSaldo = НайденнаяСтрока.КОплатеПросрочено;//Просроченный баланс
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ТекстЗапросаПросроченноеСальдоУТ1158()
	Возврат
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	РасчетыСКлиентами.УдалитьЗаказКлиента КАК ЗаказКлиента,
|	ВЫБОР
|		КОГДА РасчетыСКлиентами.УдалитьЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
|			ТОГДА ИСТИНА
|		ИНАЧЕ ЛОЖЬ
|	КОНЕЦ КАК РасчетыПоДоговору,
|	РасчетыСКлиентами.УдалитьЗаказКлиента.Соглашение КАК Соглашение,
|	РасчетыСКлиентами.Валюта КАК Валюта,
|	АналитикаПоПартнерам.Партнер КАК Партнер,
|	АналитикаПоПартнерам.Организация КАК Организация,
|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
|	АналитикаПоПартнерам.Договор КАК Договор,
|	ВЫБОР
|		КОГДА РасчетыСКлиентами.КОплатеОстаток > 0
|			ТОГДА РасчетыСКлиентами.КОплатеОстаток
|		ИНАЧЕ 0
|	КОНЕЦ КАК КОплатеПросрочено,
|	ВЫБОР
|		КОГДА РасчетыСКлиентамиНаСледующийДень.КОплатеОстаток < 0
|				И (РасчетыСКлиентамиНаСледующийДень.УдалитьЗаказКлиента ССЫЛКА Документ.ВозвратТоваровОтКлиента
|					ИЛИ РасчетыСКлиентамиНаСледующийДень.УдалитьЗаказКлиента ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента)
|			ТОГДА -РасчетыСКлиентамиНаСледующийДень.КОплатеОстаток
|		ИНАЧЕ 0
|	КОНЕЦ КАК КВозвратуДСПросрочено,
|	ВЫБОР
|		КОГДА РасчетыСКлиентами.КОтгрузкеОстаток < 0
|			ТОГДА -РасчетыСКлиентами.КОтгрузкеОстаток
|		ИНАЧЕ 0
|	КОНЕЦ КАК КОтгрузкеПросрочено
|ИЗ
|	РегистрНакопления.РасчетыСКлиентами.Остатки({(&ДатаОтчета)}, ) КАК РасчетыСКлиентами
|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки({(ДОБАВИТЬКДАТЕ(&ДатаОтчета, СЕКУНДА, 1)) КАК Поле2}, ) КАК РасчетыСКлиентамиНаСледующийДень
|		ПО (РасчетыСКлиентамиНаСледующийДень.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам)
|			И (РасчетыСКлиентамиНаСледующийДень.УдалитьЗаказКлиента = РасчетыСКлиентами.УдалитьЗаказКлиента)
|			И (РасчетыСКлиентамиНаСледующийДень.Валюта = РасчетыСКлиентами.Валюта)}
|ГДЕ
|	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
|	И (РасчетыСКлиентами.КОплатеОстаток > 0
|			ИЛИ РасчетыСКлиентами.КОтгрузкеОстаток < 0
|			ИЛИ РасчетыСКлиентами.ОтгружаетсяОстаток < 0)
|	И (ВЫБОР
|				КОГДА РасчетыСКлиентами.КОплатеОстаток > 0
|					ТОГДА РасчетыСКлиентами.КОплатеОстаток
|				ИНАЧЕ 0
|			КОНЕЦ <> 0
|			ИЛИ ВЫБОР
|				КОГДА РасчетыСКлиентамиНаСледующийДень.КОплатеОстаток < 0
|						И (РасчетыСКлиентамиНаСледующийДень.УдалитьЗаказКлиента ССЫЛКА Документ.ВозвратТоваровОтКлиента
|							ИЛИ РасчетыСКлиентамиНаСледующийДень.УдалитьЗаказКлиента ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента)
|					ТОГДА -РасчетыСКлиентамиНаСледующийДень.КОплатеОстаток
|				ИНАЧЕ 0
|			КОНЕЦ <> 0
|			ИЛИ ВЫБОР
|				КОГДА РасчетыСКлиентами.КОтгрузкеОстаток < 0
|					ТОГДА -РасчетыСКлиентами.КОтгрузкеОстаток
|				ИНАЧЕ 0
|			КОНЕЦ <> 0)
|	И АналитикаПоПартнерам.Контрагент В(&МассивКлиентовСИдентификаторами)";	
КонецФункции

Функция ТекстЗапросаПросроченноеСальдо()
	Возврат
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
|	ВЫБОР
|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
|			ТОГДА ИСТИНА
|		ИНАЧЕ ЛОЖЬ
|	КОНЕЦ КАК РасчетыПоДоговору,
|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
|	РасчетыСКлиентами.Валюта КАК Валюта,
|	АналитикаПоПартнерам.Партнер КАК Партнер,
|	АналитикаПоПартнерам.Организация КАК Организация,
|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
|	АналитикаПоПартнерам.Договор КАК Договор,
|	ВЫБОР
|		КОГДА РасчетыСКлиентами.КОплатеОстаток > 0
|			ТОГДА РасчетыСКлиентами.КОплатеОстаток
|		ИНАЧЕ 0
|	КОНЕЦ КАК КОплатеПросрочено,
|	ВЫБОР
|		КОГДА РасчетыСКлиентамиНаСледующийДень.КОплатеОстаток < 0
|				И (РасчетыСКлиентамиНаСледующийДень.ЗаказКлиента ССЫЛКА Документ.ВозвратТоваровОтКлиента
|					ИЛИ РасчетыСКлиентамиНаСледующийДень.ЗаказКлиента ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента)
|			ТОГДА -РасчетыСКлиентамиНаСледующийДень.КОплатеОстаток
|		ИНАЧЕ 0
|	КОНЕЦ КАК КВозвратуДСПросрочено,
|	ВЫБОР
|		КОГДА РасчетыСКлиентами.КОтгрузкеОстаток < 0
|			ТОГДА -РасчетыСКлиентами.КОтгрузкеОстаток
|		ИНАЧЕ 0
|	КОНЕЦ КАК КОтгрузкеПросрочено
|ИЗ
|	РегистрНакопления.РасчетыСКлиентами.Остатки({(&ДатаОтчета)}, ) КАК РасчетыСКлиентами
|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки({(ДОБАВИТЬКДАТЕ(&ДатаОтчета, СЕКУНДА, 1)) КАК Поле2}, ) КАК РасчетыСКлиентамиНаСледующийДень
|		ПО (РасчетыСКлиентамиНаСледующийДень.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам)
|			И (РасчетыСКлиентамиНаСледующийДень.ЗаказКлиента = РасчетыСКлиентами.ЗаказКлиента)
|			И (РасчетыСКлиентамиНаСледующийДень.Валюта = РасчетыСКлиентами.Валюта)}
|ГДЕ
|	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
|	И (РасчетыСКлиентами.КОплатеОстаток > 0
|			ИЛИ РасчетыСКлиентами.КОтгрузкеОстаток < 0
|			ИЛИ РасчетыСКлиентами.ОтгружаетсяОстаток < 0)
|	И (ВЫБОР
|				КОГДА РасчетыСКлиентами.КОплатеОстаток > 0
|					ТОГДА РасчетыСКлиентами.КОплатеОстаток
|				ИНАЧЕ 0
|			КОНЕЦ <> 0
|			ИЛИ ВЫБОР
|				КОГДА РасчетыСКлиентамиНаСледующийДень.КОплатеОстаток < 0
|						И (РасчетыСКлиентамиНаСледующийДень.ЗаказКлиента ССЫЛКА Документ.ВозвратТоваровОтКлиента
|							ИЛИ РасчетыСКлиентамиНаСледующийДень.ЗаказКлиента ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента)
|					ТОГДА -РасчетыСКлиентамиНаСледующийДень.КОплатеОстаток
|				ИНАЧЕ 0
|			КОНЕЦ <> 0
|			ИЛИ ВЫБОР
|				КОГДА РасчетыСКлиентами.КОтгрузкеОстаток < 0
|					ТОГДА -РасчетыСКлиентами.КОтгрузкеОстаток
|				ИНАЧЕ 0
|			КОНЕЦ <> 0)
|	И АналитикаПоПартнерам.Контрагент В(&МассивКлиентовСИдентификаторами)";	
КонецФункции

Функция ТекстЗапросаОстаткиРасчетовУТ1158()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
	|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Статус,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Соглашение,
	|	ДанныеДокумента.Договор,
	|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.СуммаЗамены,
	|	ДанныеДокумента.СуммаАвансаДоОбеспечения,
	|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	|	КОНЕЦ,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Соглашение,
	|	ДанныеДокумента.Договор,
	|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.СуммаВзаиморасчетов,
	|	0,
	|	СУММА(ЕСТЬNULL(ЭтапыГрафика.СуммаВзаиморасчетов, 0))
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ЭтапыГрафикаОплаты КАК ЭтапыГрафика
	|		ПО ДанныеДокумента.Ссылка = ЭтапыГрафика.Ссылка
	|			И (ЭтапыГрафика.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки), ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Соглашение,
	|	ДанныеДокумента.Договор,
	|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ЗаказКлиента,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|	РасчетыСКлиентами.Валюта КАК Валюта,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаПоПартнерам.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток > 0
	|			ТОГДА РасчетыСКлиентами.СуммаКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгКлиента,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток < 0
	|			ТОГДА -РасчетыСКлиентами.СуммаКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НашДолг,
	|	РасчетыСКлиентами.СуммаКонечныйОстаток КАК СальдоДолга
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, , , , ) КАК РасчетыСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК Заказ
	|		ПО РасчетыСКлиентами.ОбъектРасчетов.Объект = Заказ.Ссылка
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
	|ГДЕ
	|	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И АналитикаПоПартнерам.Контрагент В(&МассивКлиентовСИдентификаторами)";
	
КонецФункции

Процедура ПерезаполнитьБаланс(МассивКлиентовСИдентификаторами) Экспорт
	//Отчет.СостояниеРасчетовСКлиентам.Модуль
	//ТекстЗапросаОстаткиРасчетов
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		ТекстЗапроса = ТекстЗапросаОстаткиРасчетовУТ1158();
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДанныеДокумента.Ссылка КАК Ссылка,
		               |	ДанныеДокумента.Статус КАК Статус,
		               |	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
		               |	ДанныеДокумента.Партнер КАК Партнер,
		               |	ДанныеДокумента.Соглашение КАК Соглашение,
		               |	ДанныеДокумента.Договор КАК Договор,
		               |	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		               |	ДанныеДокумента.Валюта КАК Валюта,
		               |	ДанныеДокумента.Организация КАК Организация,
		               |	ДанныеДокумента.Контрагент КАК Контрагент,
		               |	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
		               |	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
		               |	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
		               |ПОМЕСТИТЬ ОбъектыРасчетов
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ДанныеДокумента
		               |ГДЕ
		               |	ДанныеДокумента.Контрагент В(&МассивКлиентовСИдентификаторами)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ДанныеДокумента.Ссылка,
		               |	ДанныеДокумента.Статус,
		               |	ДанныеДокумента.ПорядокРасчетов,
		               |	ДанныеДокумента.Партнер,
		               |	ДанныеДокумента.Соглашение,
		               |	ДанныеДокумента.Договор,
		               |	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета,
		               |	ДанныеДокумента.Валюта,
		               |	ДанныеДокумента.Организация,
		               |	ДанныеДокумента.Контрагент,
		               |	ДанныеДокумента.СуммаЗамены,
		               |	ДанныеДокумента.СуммаАвансаДоОбеспечения,
		               |	ДанныеДокумента.СуммаПредоплатыДоОтгрузки
		               |ИЗ
		               |	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		               |ГДЕ
		               |	ДанныеДокумента.Контрагент В(&МассивКлиентовСИдентификаторами)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ДанныеДокумента.Ссылка,
		               |	ВЫБОР
		               |		КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		               |	КОНЕЦ,
		               |	ДанныеДокумента.ПорядокРасчетов,
		               |	ДанныеДокумента.Партнер,
		               |	ДанныеДокумента.Соглашение,
		               |	ДанныеДокумента.Договор,
		               |	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета,
		               |	ДанныеДокумента.Валюта,
		               |	ДанныеДокумента.Организация,
		               |	ДанныеДокумента.Контрагент,
		               |	ДанныеДокумента.СуммаВзаиморасчетов,
		               |	0,
		               |	СУММА(ЕСТЬNULL(ЭтапыГрафика.СуммаВзаиморасчетов, 0))
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ЭтапыГрафикаОплаты КАК ЭтапыГрафика
		               |		ПО ДанныеДокумента.Ссылка = ЭтапыГрафика.Ссылка
		               |			И (ЭтапыГрафика.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки), ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения)))
		               |ГДЕ
		               |	ДанныеДокумента.Контрагент В(&МассивКлиентовСИдентификаторами)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ДанныеДокумента.Ссылка,
		               |	ДанныеДокумента.ПорядокРасчетов,
		               |	ДанныеДокумента.Партнер,
		               |	ДанныеДокумента.Соглашение,
		               |	ДанныеДокумента.Договор,
		               |	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета,
		               |	ДанныеДокумента.Валюта,
		               |	ДанныеДокумента.Организация,
		               |	ДанныеДокумента.Контрагент,
		               |	ДанныеДокумента.СуммаВзаиморасчетов,
		               |	ВЫБОР
		               |		КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		               |	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
		               |	ВЫБОР
		               |		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК РасчетыПоДоговору,
		               |	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
		               |	АналитикаПоПартнерам.Партнер КАК Партнер,
		               |	АналитикаПоПартнерам.Контрагент КАК Контрагент,
		               |	АналитикаПоПартнерам.Договор КАК Договор,
		               |	ВЫБОР
		               |		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток > 0
		               |			ТОГДА РасчетыСКлиентами.СуммаКонечныйОстаток
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ДолгКлиента,
		               |	ВЫБОР
		               |		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток < 0
		               |			ТОГДА -РасчетыСКлиентами.СуммаКонечныйОстаток
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК НашДолг,
		               |	РасчетыСКлиентами.СуммаКонечныйОстаток КАК СальдоДолга
		               |ИЗ
		               |	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, , , , ) КАК РасчетыСКлиентами
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК Заказ
		               |		ПО РасчетыСКлиентами.ЗаказКлиента = Заказ.Ссылка
		               |		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		               |		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
		               |ГДЕ
		               |	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		               |	И АналитикаПоПартнерам.Контрагент В(&МассивКлиентовСИдентификаторами)";
		Если Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Найти("ЭтапыГрафикаОплаты") = Неопределено Тогда
			//Отчет "СостояниеРасчетовСКлиентами" - "Задолженность клиентов"
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СУММА(ЕСТЬNULL(ЭтапыГрафика.СуммаВзаиморасчетов, 0))", "ДанныеДокумента.СуммаПредоплаты КАК СуммаПредоплатыДоОтгрузки");
			ТекстЗапрос = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ЭтапыГрафикаОплаты КАК ЭтапыГрафика
		               |		ПО ДанныеДокумента.Ссылка = ЭтапыГрафика.Ссылка
		               |			И (ЭтапыГрафика.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки), ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения)))", "");
		КонецЕсли;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивКлиентовСИдентификаторами", МассивКлиентовСИдентификаторами);
	Попытка
		Результат = Запрос.Выполнить();
	Исключение
		ЗАписьВЛог(ОписаниеОшибки(),, Истина);
	КонецПопытки;
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТЗ = Результат.Выгрузить();
	ТЗ.Свернуть("Контрагент","СальдоДолга");
	ТЗ.Индексы.Добавить("Контрагент");
	//вдруг долгов нет, а параметры договора поменялись
	//ТЗСДоговорами = Результат.Выгрузить();
	//ТЗСДоговорами.Свернуть("Контрагент, Соглашение, Договор",);
	//ТЗСДоговорами.Индексы.Добавить("Контрагент");
	Структура = Новый Структура("Контрагент");
	Для Каждого СтрокаКлиента Из ТаблицаКлиентов Цикл
		Структура.Контрагент = СтрокаКлиента.Контрагент;
		НайденныеСтроки = ТЗ.НайтиСтроки(Структура);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокаКлиента.Баланс = -НайденнаяСтрока.СальдоДолга;
		КонецЦикла;
		//НайденныеСтроки = ТЗСДоговорами.НайтиСтроки(Структура);
		//Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		//	Если Не ЗначениеЗаполнено(СтрокаКлиента.Договор) И ЗначениеЗаполнено(НайденнаяСтрока.Договор) Тогда
		//		СтрокаКлиента.Договор = НайденнаяСтрока.Договор;
		//	КонецЕсли;
		//	Если Не ЗначениеЗаполнено(СтрокаКлиента.Соглашение) И ЗначениеЗаполнено(НайденнаяСтрока.Соглашение) Тогда
		//		СтрокаКлиента.Соглашение = НайденнаяСтрока.Соглашение;
		//	КонецЕсли;
		//	Если ЗначениеЗаполнено(СтрокаКлиента.Договор) И ЗначениеЗаполнено(СтрокаКлиента.Соглашение) Тогда
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ТекстЗапросаОстаткиРасчетов()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сегменты.Партнер КАК Партнер,
	|	ИСТИНА КАК ИспользуетсяОтборПоСегментуПартнеров
	|ПОМЕСТИТЬ ОтборПоСегментуПартнеров
	|	ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК Сегменты
	|{ГДЕ
	|	Сегменты.Сегмент.* КАК СегментПартнеров,
	|	Сегменты.Партнер.* КАК Партнер}
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ИспользуетсяОтборПоСегментуПартнеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
	|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.СуммаЗамены КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
	|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	|	КОНЕЦ КАК Статус,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаДокумента,
	|	0 КАК СуммаАвансаДоОбеспечения,
	|	СУММА(ЕСТЬNULL(ЭтапыГрафика.СуммаВзаиморасчетов,0)) КАК СуммаПредоплатыДоОтгрузки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ЭтапыГрафикаОплаты КАК ЭтапыГрафика
	|		ПО ДанныеДокумента.Ссылка = ЭтапыГрафика.Ссылка
	|			И ЭтапыГрафика.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки),
	|													ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения))
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
	|	РасчетыСКлиентами.ЗаказКлиента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	РасчетыСКлиентами.Валюта КАК Валюта,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаПоПартнерам.Договор КАК Договор,
	|	АналитикаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток > 0
	|			ТОГДА РасчетыСКлиентами.СуммаКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгКлиента,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток < 0
	|			ТОГДА -РасчетыСКлиентами.СуммаКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НашДолг,
	|	РасчетыСКлиентами.СуммаКонечныйОстаток КАК СальдоДолга,
	|	РасчетыСКлиентами.ОплачиваетсяКонечныйОстаток КАК Оплачивается,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток > 0
	|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОплате,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток < 0
	|			И (РасчетыСКлиентами.ЗаказКлиента Ссылка Документ.ВозвратТоваровОтКлиента
	|				ИЛИ РасчетыСКлиентами.ЗаказКлиента Ссылка Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|			ТОГДА -РасчетыСКлиентами.КОплатеКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КВозвратуДС,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.КОтгрузкеКонечныйОстаток < 0
	|			ТОГДА -РасчетыСКлиентами.КОтгрузкеКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОтгрузке,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток > 0
	|			ТОГДА РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Отгружается,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0) > 0
	|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
	|					< ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения,0)
	|			ТОГДА Заказ.СуммаАвансаДоОбеспечения - (РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АвансДоОбеспечения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
	|				И ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0) > 0
	|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
	|					< ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
	|			ТОГДА Заказ.СуммаПредоплатыДоОтгрузки
	|		КОГДА ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
	|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
	|					< ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) + ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
	|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
	|					>= ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
	|			ТОГДА Заказ.СуммаПредоплатыДоОтгрузки + Заказ.СуммаАвансаДоОбеспечения - (РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПредоплатаДоОтгрузки,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	|				И Заказ.Ссылка ЕСТЬ NULL 
	|				И РасчетыСКлиентами.КОплатеКонечныйОстаток > 0
	|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
	|		КОГДА РасчетыСКлиентами.КОплатеПриход - ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
	|				- ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
	|			И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток <=
	|				ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) + ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
	|			ТОГДА РасчетыСКлиентами.КОплатеПриход - ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
	|					- ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0)
	|		КОГДА РасчетыСКлиентами.КОплатеПриход - ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
	|				- ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
	|			И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
	|				> ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) + ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
	|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КредитПослеОтгрузки
	|	
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, ) КАК РасчетыСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК Заказ
	|		ПО РасчетыСКлиентами.ЗаказКлиента = Заказ.Ссылка
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
	|ГДЕ
	|	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И (РасчетыСКлиентами.КОплатеКонечныйОстаток <> 0 
	|			ИЛИ РасчетыСКлиентами.КОтгрузкеКонечныйОстаток <> 0
	|			ИЛИ РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток <> 0
	|			ИЛИ РасчетыСКлиентами.СуммаКонечныйОстаток <> 0)
	|{ГДЕ
	|	(АналитикаПоПартнерам.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|";
	
КонецФункции

Процедура ВыгрузитьБалансИФинансовуюИнформацию() Экспорт
	userId = НайтиДобавитьСвойствоКонтрагента("userId");
	ДатаОбновленияСальдо = НайтиДобавитьСвойствоКонтрагента("Дата обновления сальдо");
	ВыгруженноеСальдо = НайтиДобавитьСвойствоКонтрагента("Выгруженное сальдо");
	creditLimit = НайтиДобавитьСвойствоКонтрагента("creditLimit");//Значение лимита кредита в валюте сайта
	payDelay = НайтиДобавитьСвойствоКонтрагента("payDelay");//Отсрочка платежа(в днях)
	overdueSaldo = НайтиДобавитьСвойствоКонтрагента("overdueSaldo");//Просроченный баланс
	Если Лев(АдресСервиса, 5) = "mrcar" Тогда Этоmrcar = Истина; Иначе Этоmrcar = Ложь; КонецЕсли;
	Для Каждого ТекСтрока Из ТаблицаКлиентов Цикл
		Если ТекСтрока.Обновить Тогда
			//у нас могут быть собраны клиенты из нескольких доступов
			Если НЕ Франчайзи Тогда
				ОбновитьБалансКлиента(ТекСтрока.Контрагент, ТекСтрока.ИдентификаторКонтрагента, ТекСтрока.Баланс);
				Если Этоmrcar Тогда ТекСтрока.overdueSaldo = 0; КонецЕсли;
				ОбновитьФинансовуюИнформациюКлиента(ТекСтрока.Контрагент, ТекСтрока.ИдентификаторКонтрагента, ТекСтрока.creditLimit, ТекСтрока.payDelay, ТекСтрока.overdueSaldo);
			Иначе
				Для Каждого СтрокаДоступа Из ТаблицаДоступов Цикл
					Если НЕ СтрокаДоступа.Использовать Тогда
						Продолжить;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ЭтотОбъект,СтрокаДоступа,"АдресСервиса,Пользователь,Пароль");
					ЗаписьВЛог("Выгрузка баланса клиентов по франчайзи "+АдресСервиса+" / "+Пользователь, 3);
					ОбновитьБалансКлиента(ТекСтрока.Контрагент, ТекСтрока.ИдентификаторКонтрагента, ТекСтрока.Баланс);
					ОбновитьФинансовуюИнформациюКлиента(ТекСтрока.Контрагент, ТекСтрока.ИдентификаторКонтрагента, ТекСтрока.creditLimit, ТекСтрока.payDelay, ТекСтрока.overdueSaldo);
				КонецЦикла;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ТекСтрока.Контрагент;
			МенеджерЗаписи.Свойство = ДатаОбновленияСальдо.Ссылка;
			МенеджерЗаписи.Значение = ТекущаяДата();
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ТекСтрока.Контрагент;
			МенеджерЗаписи.Свойство = ВыгруженноеСальдо.Ссылка;
			МенеджерЗаписи.Значение = ТекСтрока.Баланс;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ТекСтрока.Контрагент;
			МенеджерЗаписи.Свойство = creditLimit.Ссылка;
			МенеджерЗаписи.Значение = ТекСтрока.creditLimit;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ТекСтрока.Контрагент;
			МенеджерЗаписи.Свойство = payDelay.Ссылка;
			МенеджерЗаписи.Значение = ТекСтрока.payDelay;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ТекСтрока.Контрагент;
			МенеджерЗаписи.Свойство = overdueSaldo.Ссылка;
			МенеджерЗаписи.Значение = ТекСтрока.overdueSaldo;
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьБалансКлиента(Контрагент, ИдентификаторКлиента, Баланс) Экспорт
	//Если ФинансовыйМодульВключен Тогда
	//	ТекстСообщения = "Включен финансовый модуль, у клиента будет ручной и автоматический баланс";
	//	ЗаписьВЛог(ТекстСообщения,3);
	//	//Возврат;
	//КонецЕсли;
	ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль+"&userId="+Формат(ИдентификаторКлиента,"ЧГ=0")+"&balance="+Формат(Баланс,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
	ИмяФайлаСТекстомЗапроса = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСТекстомЗапроса, КодировкаТекста.UTF8);//КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(ФрагментЗапроса);
	ЗаписьТекста.Закрыть();
	
	//отправим файл на сервер для обработки
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
	ФайлОтправки = Новый Файл(ИмяФайлаСТекстомЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/finance/userBalance?userlogin="+Пользователь+"&userpsw="+Пароль, , Пользователь, Пароль);
	//так тоже работает
	//HTTPЗапрос = Новый HTTPЗапрос("/cp/finance/userBalance");
	//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаСТекстомЗапроса);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//HTTPЗапрос.Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);	
	Попытка
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/finance/userBalance", ИмяВыходногоФайла, Заголовки);	
	Исключение
		ТекстСообщения =СокрЛП(Контрагент)+" идентификатор: " + ИдентификаторКлиента+", ошибки "+ОписаниеОшибки();
		ЗаписьВЛог(ТекстСообщения,3);
		Возврат;
	КонецПопытки;
	КодСостояния = HTTPОтвет.КодСостояния;
	Если НЕ КодСостояния200(КодСостояния, , ИмяВыходногоФайла) Тогда
		ЕстьОшибка = Истина;
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяВыходногоФайла);	
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		ТекстСообщения =СокрЛП(Контрагент)+" идентификатор: " + СписокЭлементов.userId+", баланс на сайте = "+СписокЭлементов.balance;
		ЗаписьВЛог(ТекстСообщения,3);
	КонецЕсли;
	Попытка
	    УдалитьФайлы(ИмяФайлаСТекстомЗапроса);
	Исключение
	КонецПопытки;
	Попытка
	    УдалитьФайлы(ИмяВыходногоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ОбновитьФинансовуюИнформациюКлиента(Контрагент, ИдентификаторКлиента, ЛимитКредита, ОтсрочкаПлатежа, ПросроченныйБаланс) Экспорт
	Если ФинансовыйМодульВключен Тогда
		ТекстСообщения = "Включен финансовый модуль, у клиента будет ручной и автоматический баланс";
		ЗаписьВЛог(ТекстСообщения,3);
		//Возврат;
	КонецЕсли;
	ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль+"&userId="+Формат(ИдентификаторКлиента,"ЧГ=0")+"&creditLimit="+Формат(ЛимитКредита,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"&payDelay="+Формат(ОтсрочкаПлатежа,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"&overdueSaldo="+Формат(ПросроченныйБаланс,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
	ИмяФайлаСТекстомЗапроса = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСТекстомЗапроса, КодировкаТекста.UTF8);//КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(ФрагментЗапроса);
	ЗаписьТекста.Закрыть();
	
	//отправим файл на сервер для обработки
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
	ФайлОтправки = Новый Файл(ИмяФайлаСТекстомЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/finance/userInfo?userlogin="+Пользователь+"&userpsw="+Пароль, , Пользователь, Пароль);
	//так тоже работает
	//HTTPЗапрос = Новый HTTPЗапрос("/cp/finance/userBalance");
	//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаСТекстомЗапроса);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//HTTPЗапрос.Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);	
	
	Попытка
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/finance/userInfo", ИмяВыходногоФайла, Заголовки);	
	Исключение
		ТекстСообщения =СокрЛП(Контрагент)+" идентификатор: " + ИдентификаторКлиента+", ошибки "+ОписаниеОшибки();
		ЗаписьВЛог(ТекстСообщения,3);
		Возврат;
	КонецПопытки;
	КодСостояния = HTTPОтвет.КодСостояния;
	Если НЕ КодСостояния200(КодСостояния, , ИмяВыходногоФайла) Тогда
		ЕстьОшибка = Истина;
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяВыходногоФайла);	
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		ТекстСообщения =СокрЛП(Контрагент)+" идентификатор: " + СписокЭлементов.userId+", creditLimit = "+СписокЭлементов.creditLimit +", payDelay = "+СписокЭлементов.payDelay +", overdueSaldo = "+СписокЭлементов.overdueSaldo;
		ЗаписьВЛог(ТекстСообщения,3);
	КонецЕсли;
	Попытка
	    УдалитьФайлы(ИмяФайлаСТекстомЗапроса);
	Исключение
	КонецПопытки;
	Попытка
	    УдалитьФайлы(ИмяВыходногоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ВнестиСегментВСтопЛист() Экспорт
	//надо как-то учитывать тех, кто вышел из этого сегмента
	Если Не ЗначениеЗаполнено(СегментСтопЛист) Тогда
		ЗаписьВЛог("Не заполнено значение реквизита «Стоп-лист», процедура не выполняется");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартнерыСегмента.Партнер КАК Партнер
	               |ПОМЕСТИТЬ вт
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |ГДЕ
	               |	ПартнерыСегмента.Сегмент = &Сегмент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК Обновить,
	               |	1 КАК inStopList,
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Контрагент,
	               |	ДополнительныеСведения.Значение КАК ИдентификаторКонтрагента,
	               |	ДополнительныеСведения.Объект.Партнер КАК ОбъектПартнер
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство.Наименование = &Наименование
	               |	И ДополнительныеСведения.Объект.Партнер В
	               |			(ВЫБРАТЬ
	               |				ВТ.Партнер
	               |			ИЗ
	               |				ВТ)";
	
	Запрос.УстановитьПараметр("Наименование", "userId (Контрагенты)");
	Запрос.УстановитьПараметр("Сегмент", СегментСтопЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаКлиентов.Загрузить(РезультатЗапроса.Выгрузить());
	Для Каждого ТекСтрока Из ТаблицаКлиентов Цикл
		КлиентВСтопЛист(ТекСтрока.ИдентификаторКонтрагента, Истина);
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

//более быстрая процедура, просматривает документы оплаты, и обновляет баланс только у тех клиентов, которые совершали платежи
Процедура ОбновитьБалансКлиентовЗаТекущийДень() Экспорт
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПриходныйКассовыйОрдер.Контрагент КАК Контрагент
	               |ПОМЕСТИТЬ ВТК
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	               |ГДЕ
	               |	ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачДата И &КонДата
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПоступлениеБезналичныхДенежныхСредств.Контрагент
	               |ИЗ
	               |	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	               |ГДЕ
	               |	ПоступлениеБезналичныхДенежныхСредств.Дата МЕЖДУ &НачДата И &КонДата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТК.Контрагент КАК Контрагент,
	               |	ДополнительныеСведения.Значение КАК ИдентификаторКлиента,
	               |	ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаОстаток, 0) КАК Баланс
	               |ИЗ
	               |	ВТК КАК ВТК
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ВТК.Контрагент.Ссылка = ДополнительныеСведения.Объект
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(&НаДату, ) КАК РасчетыСКлиентамиОстатки
	               |		ПО ВТК.Контрагент.Ссылка = РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство.Наименование = &Свойство
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Баланс УБЫВ";
	//если были взаиморасчеты по документам и без, то неправильно считает               |	И РасчетыСКлиентамиОстатки.ЗаказКлиента.Ссылка ЕСТЬ NULL 
	Запрос.УстановитьПараметр("Свойство", "userId (Контрагенты)");
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонДата", ТекущаяДата());
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	ПредКлиент = "";
	Пока Выборка.Следующий() Цикл
		Если ПредКлиент <> Число(Выборка.ИдентификаторКлиента) Тогда
			ОбновитьБалансКлиента(Выборка.Контрагент, Выборка.ИдентификаторКлиента, Выборка.Баланс);
		КонецЕсли;
		ПредКлиент = Число(Выборка.ИдентификаторКлиента);
	КонецЦикла;
	//Объект.ТабличнаяЧасть1.Загрузить(Результат.Выгрузить());
КонецПроцедуры

Процедура КлиентВСтопЛист(ИдентификаторКлиента, ВСтопЛист = Истина) Экспорт
	ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль+"&userId="+Формат(ИдентификаторКлиента,"ЧГ=0")+"&inStopList="+?(ВСтопЛист = Истина, "1", "0");
	ИмяФайлаСТекстомЗапроса = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСТекстомЗапроса, КодировкаТекста.UTF8);//КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(ФрагментЗапроса);
	ЗаписьТекста.Закрыть();
	
	//отправим файл на сервер для обработки
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
	ФайлОтправки = Новый Файл(ИмяФайлаСТекстомЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/finance/userInfo?userlogin="+Пользователь+"&userpsw="+Пароль, , Пользователь, Пароль);
	//так тоже работает
	//HTTPЗапрос = Новый HTTPЗапрос("/cp/finance/userBalance");
	//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаСТекстомЗапроса);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//HTTPЗапрос.Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);	
	
	Попытка
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/finance/userInfo", ИмяВыходногоФайла, Заголовки);
	Исключение
		ЗаписьВЛог("Ошибка помещения в стоп-лист клиента "+ИдентификаторКлиента+" "+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	КодСостояния = HTTPОтвет.КодСостояния;
	Если НЕ КодСостояния200(КодСостояния, , ИмяВыходногоФайла) Тогда
		ЕстьОшибка = Истина;
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяВыходногоФайла);	
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		ТекстСообщения ="Идентификатор клиента: " + ИдентификаторКлиента+", изменен признак нахождения в стоп-листе на "+ВСтопЛист;
		ЗаписьВЛог(ТекстСообщения,3);
	КонецЕсли;
	Попытка
	    УдалитьФайлы(ИмяФайлаСТекстомЗапроса);
	Исключение
	КонецПопытки;
	Попытка
	    УдалитьФайлы(ИмяВыходногоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ПолучитьОнлайнПлатежи(ОчищатьТаблицы = Истина) Экспорт
	//https://www.abcp.ru/wiki/API:Docs#.D0.9F.D0.BE.D0.BB.D1.83.D1.87.D0.B5.D0.BD.D0.B8.D0.B5_.D1.81.D0.BF.D0.B8.D1.81.D0.BA.D0.B0_online_.D0.BF.D0.BB.D0.B0.D1.82.D0.B5.D0.B6.D0.B5.D0.B9
	Если ОчищатьТаблицы Тогда
		ТаблицаОплат.Очистить();
		paymentOrderLinks.Очистить();
	КонецЕсли;
	НенайденныеКонтрагенты = Новый ТаблицаЗначений;
	НенайденныеКонтрагенты.Колонки.Добавить("ИдентификаторКонтрагента");
	НенайденныеКонтрагенты.Колонки.Добавить("Контрагент");
	НенайденныеКонтрагенты.Колонки.Добавить("НомерЗаявки");
	ДатаНачала = НачалоДня(ТекущаяДата())-ГлубинаПросмотраЗаявок*24*3600;
	ДатаОкончания = ТекущаяДата();
	//Если ЗначениеЗаполнено(НачПериода) Тогда
	//	ДатаНачала = НачалоДня(НачПериода);
	//	ДатаОкончания = КонецДня(КонПериода);
	//Иначе
	//	ДатаНачала = НачалоДня(ТекущаяДата())-ГлубинаПросмотраЗаявок*24*3600;
	//	ДатаОкончания = ТекущаяДата();
	//КонецЕсли;
	//ДатаНачала = НачалоДня(ТекущаяДата())-ГлубинаПросмотраЗаявок*24*3600;
	//ДатаОкончания = ТекущаяДата();
	//&filter[dateEnd]=2018-10-05&filter[customerIds][]=507186&filter[statusIds][]=1&filter[orderIds][]=22668371&filter[orderIds][]=15368959
	ТекстЗапроса = "cp/onlinePayments?userlogin="+Пользователь+"&userpsw="+Пароль+"&filter[dateStart]="+Формат(ДатаНачала, "ДФ=yyyy-MM-dd")+"&filter[dateEnd]="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd");
	НомерПлатежа = "";
	Если НомерПлатежа<>"" Тогда                                                                  //vvvv
		//ТекстЗапроса = "cp/onlinePayments?userlogin="+Пользователь+"&userpsw="+Пароль+"&userId=****&paymentNumber="+НомерПлатежа;
		ТекстЗапроса = "cp/onlinePayments?userlogin="+Пользователь+"&userpsw="+Пароль+"&filter[orderIds][]="+НомерПлатежа;
	КонецЕсли;
	Если Отладка Тогда
		сообщить(АдресСервиса+"/"+ТекстЗапроса);
	КонецЕсли; 
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Попытка
			сообщить(СтруктураИзJSON(СтрокаОтвет).errorMessage);
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;
	СписокЭлементов = СтруктураИзJSON(СтрокаОтвет);
	//ТЗКлиенты.Очистить();
	НС = СписокЭлементов.Количество();
	Для Каждого Элемент Из СписокЭлементов Цикл
		НС = НС - 1;
		Если НС % 50 = 0 Тогда
			//ОбработкаПрерыванияПользователя();
			//состояние("Загрузка оплат "+НС);
		КонецЕсли;
		Если Элемент.paymentStatusName <>"Завершена" Тогда
			Продолжить;
		КонецЕсли;
		НовСтрока = ТаблицаОплат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
		
		НовСтрока.createDateTime = ПреобразоватьИзСтрокиВДату(Элемент.dateTime);
		НовСтрока.ИдентификаторКонтрагента = Число(Элемент.customerId);
		НовСтрока.Контрагент = НайтиКонтрагентаПоИдентификатору(НовСтрока.ИдентификаторКонтрагента);
		НовСтрока.paymentNumber = Формат(Элемент.id,"ЧГ=0");
		НовСтрока.orderId = Формат(Элемент.orderId,"ЧГ=0");
		//Если НайденнаяСтрока.orderId<>0 Тогда
		//	НайденнаяСтрока.ЗаказКлиента = НайтиЗаявку(НайденнаяСтрока.orderId, Неопределено, Истина);
		//	Если ЗначениеЗаполнено(НайденнаяСтрока.ЗаказКлиента) Тогда
		//		//проверяем, контрагент такой же, как в документе?
		//		Если НайденнаяСтрока.ЗаказКлиента.Контрагент = НайденнаяСтрока.Контрагент Тогда
		//			Прервать;
		//		Иначе
		//			НайденнаяСтрока.ЗаказКлиента = "";
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		НовСтрока.ЗаказКлиента = НайтиЗаявку(Формат(НовСтрока.orderId,"ЧГ=0"), Неопределено, Истина);
		НовСтрока.сomment = Элемент.comment;
		НовСтрока.paymentTypeId = Элемент.paymentMethodId;
		//НовСтрока.Баланс = ПолучитьБаланс(НовСтрока.Контрагент);
	КонецЦикла;
	Если ТаблицаОплат.Количество() = 0 Тогда
		сообщить("Нет онлайн оплат за период "+ДатаНачала+"-"+ДатаОкончания);
	Иначе
		ПолучитьИнформациюОПривязкахПлатежей();
	КонецЕсли;
КонецПроцедуры //ПолучитьОнлайнПлатежи

//находит по доп реквизитам последний загруженный документ оплаты
Функция НайтиПоследнююЗагруженнуюОплату(ДатаНачала)
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока50 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(50));
	НомерПлатежногоДокумента = НайтиДобавитьСвойствоДокумента("НомерПлатежногоДокумента", ТипИдентификатораСтрока50);//Номер платежного документа - в платежных документах
	
	НачалоПросмотра = ДатаНачала;
	//СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	//ИмяСервера = НСтр(СтрокаСоединения, "Srvr");
	//Если ИмяСервера = "" Тогда
	//	//серверная база, запускается регулярно без участия человека, смотрим за сутки
	//	НачалоПросмотра = ТекущаяДата() - 3600*24;
	//Иначе
	//	//файловая база, вдруг в выходные не запускали, смотрим за 3 дня
	//	НачалоПросмотра = НачалоДня(ТекущаяДата() - 3600*24*3);
	//КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект КАК Объект,
	               |	ДополнительныеСведения.Свойство КАК Свойство,
	               |	ДополнительныеСведения.Объект.Дата КАК Дата
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект.Дата >= &НачалоПросмотра
	               |	И (ДополнительныеСведения.Объект ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |			ИЛИ ДополнительныеСведения.Объект ССЫЛКА Документ.ОперацияПоПлатежнойКарте
	               |			ИЛИ ДополнительныеСведения.Объект ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
	Запрос.УстановитьПараметр("НачалоПросмотра", НачалоПросмотра);
	Запрос.УстановитьПараметр("Свойство", НомерПлатежногоДокумента.Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ЗаписьВЛог("Не нашли свежие оплаты с "+НачалоПросмотра,2,Ложь);
		Возврат НачалоПросмотра;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДатаВремяПоследнее = Выборка.Дата;
		ЗаписьВЛог("Запрос свежих оплат с момента последнего загруженного документа оплаты "+ДатаВремяПоследнее+" по документу "+Выборка.Объект,2,Ложь);
		Возврат ДатаВремяПоследнее;
	КонецЕсли;
КонецФункции

Функция ВернутьТаблицуОплат(НомерПлатежа = "", ПоКлиенту = Неопределено, Свежие = Ложь) Экспорт
	ТаблицаОплат.Очистить();
	paymentOrderLinks.Очистить();
	ТаблицаКлиентов.Очистить();
	Если Франчайзи Тогда
		//Структура = Новый Структура("АдресСервиса,Пользователь,Пароль,Организация,ОрганизацияРозница");
		//ЗаполнитьЗначенияСвойств(Структура, ЭтотОбъект);
		времАдресСервиса = АдресСервиса;
		времПользователь = Пользователь;
		времПароль = Пароль;
		времОрганизация = Организация;
		времОрганизацияРозница = ОрганизацияРозница;
		Структура = Новый Структура("Использовать", Истина);
		НайденныеСтроки = ТаблицаДоступов.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				//ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТекСтрока, "АдресСервиса,Пользователь,Пароль,Организация,ОрганизацияРозница");
				АдресСервиса = ТекСтрока.АдресСервиса;
				Пользователь = ТекСтрока.Пользователь;
				Пароль = ТекСтрока.Пароль;
				Организация = ТекСтрока.Организация;
				ОрганизацияРозница = ТекСтрока.ОрганизацияРозница;
				
				ЗаполнитьДанныеУчетнойПолитики();
				ЗаполнитьТаблицуОплат(НомерПлатежа, ПоКлиенту,Свежие,Ложь);
			КонецЦикла;
		Иначе
			ЗаполнитьДанныеУчетнойПолитики();
			ЗаполнитьТаблицуОплат(НомерПлатежа, ПоКлиенту,Свежие,Ложь);
		КонецЕсли;
		АдресСервиса = времАдресСервиса;
		Пользователь = времПользователь;
		Пароль = времПароль;
		Организация = времОрганизация;
		ОрганизацияРозница = времОрганизацияРозница;
		//ЗаполнитьЗначенияСвойств(ЭтотОбъект, Структура);
	Иначе
		ЗаполнитьДанныеУчетнойПолитики();
		ЗаполнитьТаблицуОплат(НомерПлатежа, ПоКлиенту,Свежие,Ложь);
		//если не включен модуль "Финансы", то можем попробовать загрузить online платежи
		Если НЕ ФинансовыйМодульВключен Тогда
			ПолучитьОнлайнПлатежи();
		КонецЕсли;
	КонецЕсли;
	Если ЗаменятьТолькоРозничныхПокупателей И ЗначениеЗаполнено(ОсновнойПокупатель) Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаОплат Цикл
			Если ЗначениеЗАполнено(СтрокаТаблицы.Контрагент) И СтрокаТаблицы.Контрагент <> ОсновнойПокупатель Тогда
				ЮрФизЛицо = СтрокаТаблицы.Контрагент.ЮрФизЛицо;
				Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Или ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
					Если Отладка Тогда
						сообщить("Меняем в оплатах розничного клиента "+СтрокаТаблицы.Контрагент+" на "+ОсновнойПокупатель);
					КонецЕсли;
					СтрокаТаблицы.Контрагент = ОсновнойПокупатель;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат ТаблицаОплат;
КонецФункции//ВернутьТаблицуОплат

#Область ВозвратыОплат
Процедура ЗаполнитьВозвратыОплат()
	ЗаполнитьДанныеУчетнойПолитики();
	ЗагрузитьВозвратыОплат();
	СоздатьВозвратыОплат();
КонецПроцедуры

Процедура ЗагрузитьВозвратыОплат() Экспорт
	ЗаполнитьСоответствияДляОплат();
	Если НЕ ДокументыПоТипамПлатежей Тогда
		сообщить("Можно загружать только с флажком «Документы по типам платежей»");
	КонецЕсли;
	ТаблицаОплат.Очистить();
	paymentOrderLinks.Очистить();
	ТаблицаКлиентов.Очистить();
	Если Франчайзи Тогда
		времАдресСервиса = АдресСервиса;
		времПользователь = Пользователь;
		времПароль = Пароль;
		времОрганизация = Организация;
		времОрганизацияРозница = ОрганизацияРозница;
		Структура = Новый Структура("Использовать", Истина);
		НайденныеСтроки = ТаблицаДоступов.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				АдресСервиса = ТекСтрока.АдресСервиса;
				Пользователь = ТекСтрока.Пользователь;
				Пароль = ТекСтрока.Пароль;
				Организация = ТекСтрока.Организация;
				ОрганизацияРозница = ТекСтрока.ОрганизацияРозница;
				
				ЗаполнитьДанныеУчетнойПолитики();
				ЗагрузитьВозвратыОплатПоДоступу();
			КонецЦикла;
		Иначе
			ЗаполнитьДанныеУчетнойПолитики();
			ЗагрузитьВозвратыОплатПоДоступу();
		КонецЕсли;
		АдресСервиса = времАдресСервиса;
		Пользователь = времПользователь;
		Пароль = времПароль;
		Организация = времОрганизация;
		ОрганизацияРозница = времОрганизацияРозница;
	Иначе
		ЗаполнитьДанныеУчетнойПолитики();
		ЗагрузитьВозвратыОплатПоДоступу();
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьВозвратыОплатПоДоступу()
	Если НЕ ПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьСоответствияДляОплат();
	Если ГлубинаПросмотраЗаявок < 60 Тогда
		ДатаНачала = ТекущаяДата() - 180*24*3600; //за последние 2 месяца, потом сделать полгода
		//ДатаНачала = ТекущаяДата() - 20*24*3600; //за последние 2 месяца, потом сделать полгода
	Иначе
		ДатаНачала = ТекущаяДата() - ГлубинаПросмотраЗаявок*24*3600;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачалаУчета) Тогда
		ДатаНачала = Макс(ДатаНачалаУчета, ДатаНачала);
	КонецЕсли;
	ДатаОкончания = ТекущаяДата();
	//Если Свежие Тогда
	//	ДатаВремяПоследнее = НайтиПоследнююЗагруженнуюОплату(ДатаНачала);
	//	ДатаНачала = ДатаВремяПоследнее;
	//КонецЕсли;	
	Если ЗначениеЗаполнено(ФильтрПоЗаявке) И ФильтрПоЗаявке<366 Тогда //делаем возможность загружать частями, и используем этот реквизит для указания количества дней
		ДатаОкончания = ДатаНачала + ФильтрПоЗаявке * 86400;
		сообщить("Загрузка платежей за период: "+ДатаНачала+" - "+ДатаОкончания);
	КонецЕсли;
	ТекстЗапроса = "cp/finance/paymentOrderLinks?userlogin="+Пользователь+"&userpsw="+Пароль+"&orderIds[]=0&DateTimeStart="+Формат(ДатаНачала, "ДФ='yyyy-MM-dd HH:mm:ss'")+"&DateTimeEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59";;
	//Если ПоКлиенту<>0 И ПоКлиенту<>Неопределено Тогда
	//	ТекстЗапроса = ТекстЗапроса+"&userId="+Формат(ПоКлиенту,"ЧГ=0");
	//КонецЕсли;
	Если Отладка Тогда
		сообщить(АдресСервиса+"/"+ТекстЗапроса);
	КонецЕсли; 
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		ТекстСообщения = "ошибка получения возвратов оплат:"+ОписаниеОшибки()+" "+СтрокаОтвет;
		ЗаписьВЛог(ТекстСообщения,6,Истина);
		Возврат;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	Попытка
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ЧтениеJSON.Закрыть();
		ТекстСообщения = "ошибка обработки оплат с сайта в формате JSON, ответ сервера:"+СтрокаОтвет;
		ЗаписьВЛог(ТекстСообщения,6,Истина);
		Возврат;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	НенайденныеКонтрагенты = Новый ТаблицаЗначений;
	НенайденныеКонтрагенты.Колонки.Добавить("ИдентификаторКонтрагента");
	НенайденныеКонтрагенты.Колонки.Добавить("Контрагент");
	НенайденныеКонтрагенты.Колонки.Добавить("НомерЗаявки");
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ЗаполненБанковскийСчет = Истина;
	Иначе
		ЗаполненБанковскийСчет = Ложь;
	КонецЕсли;
	Для Каждого Элемент Из СписокЭлементов Цикл
		//Если МассивНеЗагружать.Найти(Число((Элемент.paymentTypeId))) <> Неопределено Тогда //не загружаем эти виды оплат
		//	Продолжить;
		//КонецЕсли;
		//Если ЗагружатьТолькоСЧеками Тогда
		//	Если Элемент.komtetCheckId = 0 Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		НовСтрока = ТаблицаОплат.Добавить();
		НовСтрока.АдресСервиса = АдресСервиса;//если несколько доступов, чтобы привязки корректно работали
		НовСтрока.Пользователь = Пользователь;
		ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
		НовСтрока.createDateTime = ПреобразоватьИзСтрокиВДату(Элемент.createDateTime, Истина);
		НовСтрока.ДатаВозврата = НовСтрока.createDateTime;
		НовСтрока.СуммаВозврат = Элемент.amount;
		
		НовСтрока.Возврат = Истина;
		
		Для Каждого ПрефиксНомера Из МассивПрефиксовНомеров Цикл
			Если Лев(НовСтрока.paymentNumber, СтрДлина(ПрефиксНомера)) = ПрефиксНомера Тогда
				КассаПоПрефиксуНомера = СоответствиеКассыПрефиксуНомера.Получить(ПрефиксНомера);
				ЭквайринговыйТерминалПоПрефиксуНомера = СоответствиеТерминалаПрефиксуНомера.Получить(ПрефиксНомера);
				ТипПлатежаПоПрефиксуНомера = СоответствиеТипаПлатежаПрефиксуНомера.Получить(ПрефиксНомера);
				ОрганизацияПоПрефиксуНомера = СоответствиеОрганизацииПрефиксуНомера.Получить(ПрефиксНомера);
				ДоговорЭквайрингаПрефиксуНомера = СоответствиеДоговораЭквайрингаПрефиксуНомера.Получить(ПрефиксНомера);
				Если ЗначениеЗаполнено(ОрганизацияПоПрефиксуНомера) Тогда
					НовСтрока.Организация = ОрганизацияПоПрефиксуНомера;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТипПлатежаПоПрефиксуНомера) Тогда
					НовСтрока.paymentTypeId = ТипПлатежаПоПрефиксуНомера;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДоговорЭквайрингаПрефиксуНомера) Тогда
					НовСтрока.ДоговорЭквайринга = ДоговорЭквайрингаПрефиксуНомера;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КассаПоПрефиксуНомера) Тогда
					НовСтрока.Касса = КассаПоПрефиксуНомера;
					Прервать;
				КонецЕсли;
				Если ЗначениеЗаполнено(ЭквайринговыйТерминалПоПрефиксуНомера) Тогда
					НовСтрока.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоПрефиксуНомера;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//НовСтрока.ИдентификаторКонтрагента = Число(Элемент.userId);
		//НовСтрока.Контрагент = НайтиКонтрагентаПоИдентификатору(НовСтрока.ИдентификаторКонтрагента);
	КонецЦикла;
	Если НенайденныеКонтрагенты.Количество()>0 Тогда
		//cp/users - есть параметр customersIds, в который можно передать список не найденных контрагентов и добавить их
		//http://api.demo.abcp.ru/cp/users?userlogin=username&userpsw=md5pass&customersIds[]=574823&customersIds[]=86954&customersIds[]=56234786
		ПереченьИдентификаторов = "";
		СвернутыеИдентификаторы = НенайденныеКонтрагенты.Скопировать(,"ИдентификаторКонтрагента");
		СвернутыеИдентификаторы.Свернуть("ИдентификаторКонтрагента",);
		Для Каждого ТекСтрока Из СвернутыеИдентификаторы Цикл
			ПереченьИдентификаторов = ПереченьИдентификаторов + "&customersIds[]="+Формат(ТекСтрока.ИдентификаторКонтрагента, "ЧГ=0");
		КонецЦикла;
		//ЗаполнитьТаблицуКлиентовССайта(Ложь, ПереченьИдентификаторов = "")
		//возможно еще стоит добавить синхронизацию менеджеров, у них другие идентификаторы и они добавляются по-другому !!!
		ЗаполнитьТаблицуКлиентовССайта(Истина, ПереченьИдентификаторов, СвернутыеИдентификаторы);//автоматически добавляем не найденных контрагентов
		//заново проходим по заявкам и заполняем созданными контрагентами
		Структура = Новый Структура("ИдентификаторКонтрагента");
		Для Каждого ТекСтрока Из НенайденныеКонтрагенты Цикл
			Структура.ИдентификаторКонтрагента = ТекСтрока.ИдентификаторКонтрагента;
			НайденныеСтроки = ТаблицаОплат.НайтиСтроки(Структура);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.Контрагент = ТекСтрока.Контрагент;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ТаблицаОплат.Количество() = 0 Тогда
		сообщить("Нет возвратов оплат за период "+ДатаНачала+"-"+ДатаОкончания);
		Возврат;
	КонецЕсли;
	Док = НайтиДокументПоСвойству("ПриходныйКассовыйОрдер", ДобавитьМесяц(ТекущаяДата(), -6), "*******", Истина);//сразу заполняем таблицу вместе с возвратами
	Для Каждого ТекСтрока Из ТаблицаОплат Цикл
		//ТекСтрока.Реализация = НайтиРеализациюПоЗаказуКлиента(ТекСтрока.ЗаказКлиента);
		//ТекСтрока.createDateTime - здесь дата возврата, а оплата была раньше
		createDateTime = ДобавитьМесяц(ТекСтрока.createDateTime, -6);
		//нет paymentTypeId, поэтому не можем найти
		//и возвраты найти тоже
			Если ЧекиККМ Тогда
				ТекСтрока.Документ = НайтиЧек(ТекСтрока.paymentNumber, createDateTime, ТекСтрока.paymentNumber);
			ИначеЕсли (ДокументыПоТипамПлатежей И ЗначениеЗаполнено(ТекСтрока.Касса)) Или (НЕ ДокументыПоТипамПлатежей И (ТекСтрока.paymentTypeCode = 2 ИЛИ (ТекСтрока.paymentTypeCode = 1 И НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал)))) Тогда //Код типа платежа: 0 - Безналичный, 1 - Электронный, 2 - Наличный
				Док = НайтиДокументПоСвойству("ПриходныйКассовыйОрдер", createDateTime, ТекСтрока.paymentNumber, Ложь, Истина);
				//Если (НЕ ТекСтрока.Возврат) Или (ТекСтрока.amount > 0) Тогда //по одному документу может быть и платеж и частичный возврат но всё равно оплата на полную сумму, и может быть или частичный или полный возврат  - ТекСтрока.СуммаВозврат
				//	ТекСтрока.Документ = НайтиПКО(ТекСтрока.paymentNumber, ТекСтрока.createDateTime, ТекСтрока.orderId);
				//КонецЕсли;
				Если ЗначениеЗаполнено(Док) Тогда
					ТекСтрока.Документ = Док.Ссылка;
					ТекСтрока.Контрагент = Док.Контрагент;
					ТекСтрока.Организация = Док.Организация;
				КонецЕсли;
				Если ТекСтрока.Возврат Тогда
					ТекСтрока.ДокументВозврат = НайтиДокументПоСвойству("РасходныйКассовыйОрдер", ТекСтрока.createDateTime, ТекСтрока.paymentNumber, Истина);
				КонецЕсли;
			ИначеЕсли (ДокументыПоТипамПлатежей И (ЗначениеЗаполнено(ТекСтрока.ЭквайринговыйТерминал) Или ЗначениеЗаполнено(ТекСтрока.ДоговорЭквайринга))) Или (НЕ ДокументыПоТипамПлатежей И (ТекСтрока.paymentTypeCode = 1)) Тогда
				//у операции по платежной карте меняется только вид хоз.операции
				Док = НайтиОперацияПоПлатежнойКарте(ТекСтрока.paymentNumber, createDateTime, ТекСтрока.orderId);//в возврате нет контрагента, берём из исходного документа
				Если ЗначениеЗаполнено(Док) Тогда
					ТекСтрока.Документ = Док.Ссылка;
					ТекСтрока.Контрагент = Док.Контрагент;
					ТекСтрока.Организация = Док.Организация;
				КонецЕсли;
				//Если Не ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
					Док = НайтиДокументПоСвойству("ОперацияПоПлатежнойКарте", ТекСтрока.createDateTime, ТекСтрока.paymentNumber, Истина);//а уже заполнена таблица для поиска
					Если ТекСтрока.Возврат Тогда
						Если ЗначениеЗаполнено(Док) Тогда
							ТекСтрока.ДокументВозврат = Док.Ссылка;
							ТекСтрока.Контрагент = Док.Контрагент;
						КонецЕсли;
					КонецЕсли;
				//КонецЕсли;				
			Иначе
				Док = НайтиПриходНаСчет(ТекСтрока.paymentNumber, createDateTime, ТекСтрока.orderId);
				Если ЗначениеЗаполнено(Док) Тогда
					ТекСтрока.Документ = Док.Ссылка;
					ТекСтрока.Контрагент = Док.Контрагент;
					ТекСтрока.Организация = Док.Организация;
				КонецЕсли;
				Если ТекСтрока.Возврат Тогда
					Док = НайтиРасходСоСчета(ТекСтрока.paymentNumber, createDateTime);
					Если ЗначениеЗаполнено(Док) Тогда
						ТекСтрока.ДокументВозврат = Док.Ссылка;
						ТекСтрока.Контрагент = Док.Контрагент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
	КонецЦикла;	
	//УстановитьНеЗагружатьПоОфисамЗаказов();
	//Если ЗагружатьТолькоСЧеками Тогда
	//	ДозаполнитьДаннымиЧеков();
	//КонецЕсли;
КонецПроцедуры

Процедура СоздатьВозвратыОплат() Экспорт
	Если НеПроводитьДокументы Тогда
		РежимЗаписиДок = РежимЗаписиДокумента.Запись;
	Иначе
		РежимЗаписиДок = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	ЗаполнитьСоответствияДляОплат();
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	Если Метаданные.Документы.ОперацияПоПлатежнойКарте.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("Заказ") = Неопределено Тогда
		ЕстьЗаказВРасшифровкеОперацияПоПлатежнойКарте = Ложь;
	Иначе
		ЕстьЗаказВРасшифровкеОперацияПоПлатежнойКарте = Истина;
	КонецЕсли;
	Если Метаданные.Документы.ОперацияПоПлатежнойКарте.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("УдалитьЗаказ") = Неопределено Тогда
		ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте = Ложь;
	Иначе
		ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте = Истина;
	КонецЕсли;
	Если НомерПлатежногоДокумента = Неопределено Тогда
		НомерПлатежногоДокумента = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("НомерПлатежногоДокумента (Документы)");
	КонецЕсли;
	ХозяйственнаяОперацияДоговора = Новый Массив;
	ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	Для Каждого ТекСтрока Из ТаблицаОплат Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДатаВозврата) И ЗначениеЗаполнено(ДатаНачалаУчета) Тогда
			Если ТекСтрока.ДатаВозврата<ДатаНачалаУчета Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.ДокументВозврат) Тогда
			Продолжить;
		КонецЕсли;
		Док = Неопределено;
		//надо создавать документ в зависимости от вида, а не РКО
		Если ЗначениеЗаполнено(ТекСтрока.Касса) Тогда
			ДокОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокОбъект.Заполнить(Неопределено);
			ДокОбъект.Комментарий = ТекСтрока.сomment+" "+Формат(ТекСтрока.OnlinePaymentId, "ЧГ=0")+" orderId = возврат ";
			Если Отладка Тогда
				сообщить("создаем возврат РКО "+ДокОбъект.Комментарий);
			КонецЕсли;
			ДокОбъект.Валюта = Валюта;
			Если ЦеныПродажиВРублях Тогда//заказ клиенту
				ДокОбъект.Валюта = Рубли;
			КонецЕсли;
			Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
				ДокОбъект.Валюта = Валюта;
			КонецЕсли;
			Если (ДокументыПоТипамПлатежей И ЗначениеЗаполнено(ТекСтрока.Касса)) Тогда
				ДокОбъект.Касса = ТекСтрока.Касса;
			Иначе
				ДокОбъект.Касса = Касса;
			КонецЕсли;
			ДокОбъект.БанковскийСчет = БанковскийСчет;
			ДокОбъект.Организация = Организация;
			Если Организация <> Касса.Владелец И ЗначениеЗаполнено(Касса.Владелец) Тогда
				ДокОбъект.Организация = Касса.Владелец;
			КонецЕсли;
			//Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			//	ДокОбъект.Организация = ОрганизацияРозница;
			//КонецЕсли;
			Если ИспользоватьПривязкиКассКМенеджерам Тогда
				ВремОрганизация = СоответствиеОрганизаций.Получить(ТекСтрока.editorId);
				Если ВремОрганизация<>Неопределено Тогда
					ДокОбъект.Организация = ВремОрганизация;
				КонецЕсли;
				ВремКасса = СоответствиеКасс.Получить(ТекСтрока.editorId);
				Если ВремКасса<>Неопределено Тогда
					ДокОбъект.Касса = ВремКасса;
				КонецЕсли;
			КонецЕсли;
			ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
			ДокОбъект.Контрагент = ТекСтрока.Контрагент;
			ДокОбъект.Выдать = СокрЛП(ТекСтрока.Контрагент);//"orderId = "+Формат(ТекСтрока.orderId,"ЧГ=0")+", paymentLinkId = "+Формат(ТекСтрока.paymentLinkId,"ЧГ=0");
			Если ИспользоватьДоговорыСКлиентами Тогда
				Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект);
				Если НЕ ЗначениеЗаполнено(Договор) Тогда
					Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация, , ДокОбъект.Контрагент);
				КонецЕсли;
				//ПолучитьДоговорПоУмолчаниюСервер(ДокОбъект);
				ДокОбъект.Договор = Договор;
			КонецЕсли;
			ДокОбъект.Приложение = ТекСтрока.paymentType;//+" EditorId=" +Формат(ТекСтрока.EditorId,"ЧГ=0")+" "+"orderId = "+Формат(ТекСтрока.orderId,"ЧГ=0")+", paymentLinkId = "+Формат(ТекСтрока.paymentLinkId,"ЧГ=0");
			ДокОбъект.Основание = ТекСтрока.paymentNumber;
			ДокОбъект.ПоДокументу = ТекСтрока.paymentNumber;
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ЭквайринговыйТерминал) Тогда
			ДокОбъект = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
			ДокОбъект.Заполнить(Неопределено);
			//ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту;
			ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
			ДокОбъект.Комментарий = ТекСтрока.сomment+" "+Формат(ТекСтрока.OnlinePaymentId, "ЧГ=0")+" orderId = возврат ";
			Если Отладка Тогда
				сообщить("создаем возврат по эквайрингу "+ТекСтрока.paymentNumber);
			КонецЕсли;
			ДокОбъект.Валюта = Валюта;
			Если ЦеныПродажиВРублях Тогда//заказ клиенту
				ДокОбъект.Валюта = Рубли;
			КонецЕсли;
			Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
				ДокОбъект.Валюта = Валюта;
			КонецЕсли;
			ДокОбъект.ЭквайринговыйТерминал = ТекСтрока.ЭквайринговыйТерминал;
			Если ЗначениеЗаполнено(ТекСтрока.ДоговорЭквайринга) Тогда
				Если Отладка Тогда
					сообщить(ТекСтрока.paymentNumber+"	"+ТекСтрока.ДоговорЭквайринга);
				КонецЕсли;
				ДокОбъект.ДоговорЭквайринга = ТекСтрока.ДоговорЭквайринга;
			КонецЕсли;
			//ДокОбъект.БанковскийСчет = БанковскийСчет;
			Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				ДокОбъект.Организация = ТекСтрока.Организация;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
				ДокОбъект.Организация = ТекСтрока.Документ.Организация;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Организация) Тогда
				ДокОбъект.Организация = Организация;
			КонецЕсли;
			ДокОбъект.Контрагент = ТекСтрока.Контрагент;
			ДокОбъект.Партнер = ТекСтрока.Контрагент.Партнер;
			//ДоговорКонтрагента = ДенежныеСредстваСервер.ДоговорПоУмолчанию(ДоговорКонтрагента,ТекСтрока.Контрагент.Партнер,ТекСтрока.Контрагент,ДокОбъект.Организация, ХозяйственнаяОперацияДоговора);
			Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект);
			Если НЕ ЗначениеЗаполнено(Договор) Тогда
				Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация, , ДокОбъект.Контрагент);
			КонецЕсли;
			ДокОбъект.Договор = Договор;
			Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
			Иначе
				ДокОбъект.НомерПлатежнойКарты = ТекСтрока.paymentNumber;
			КонецЕсли;
		Иначе
			сообщить("Не заполнена ни касса, ни эквайринговый терминал по № "+ТекСтрока.paymentNumber+", "+ТекСтрока.OnlinePaymentId);
			Продолжить;
		КонецЕсли;
		ДокОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		ДокОбъект.Дата = ТекСтрока.createDateTime;
		Если ЗначениеЗаполнено(ТекСтрока.ДатаВозврата) Тогда
			ДокОбъект.Дата = ТекСтрока.ДатаВозврата;
		КонецЕсли;
		//ДокОбъект.Основание = ТекСтрока.paymentNumber;
		//ДокОбъект.ДокументОснование = ТекСтрока.Реализация;//по заказу клиента нельзя, только по заказу поставщика, или приобретение, реализации нет в документах основаниях
		//ДокОбъект.ЗаказКлиента = ТекСтрока.ЗаказКлиента; - можно так
		ДокОбъект.СуммаДокумента = ТекСтрока.СуммаВозврат;
		//если несколько привязано
		РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
		РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
		Если ЦеныПродажиВРублях Тогда//оплата
			РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
		КонецЕсли;
		РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;		
		//Если Отладка Тогда
		//КонецЕсли;
		СтатьяДДСПоХО =	Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ДокОбъект.ХозяйственнаяОперация);
		РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;

		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			Если ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
				РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Договор;  
				РасшифровкаПлатежа.КурсЧислительВзаиморасчетов = 1;
				РасшифровкаПлатежа.КурсЗнаменательВзаиморасчетов = 1;
				ДокОбъект.ОбъектРасчетов = ПолучитьОбъектРасчетовПоДоговору(ДокОбъект.Контрагент, ДокОбъект.Договор);
				РасшифровкаПлатежа.ОбъектРасчетов = ДокОбъект.ОбъектРасчетов;
			Иначе
				РасшифровкаПлатежа.Заказ = ДокОбъект.Договор;
			КонецЕсли;
		Иначе
			Если ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
				РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.ЗаказКлиента;
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
					РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.ЗаказКлиента;//а то в чеке некорректно отображается
				Иначе
					РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.Реализация;
				КонецЕсли;
			Иначе
				РасшифровкаПлатежа.Заказ = ТекСтрока.ЗаказКлиента;
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
					РасшифровкаПлатежа.Заказ = ТекСтрока.ЗаказКлиента;//а то в чеке некорректно отображается
				Иначе
					РасшифровкаПлатежа.Заказ = ТекСтрока.Реализация;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		РасшифровкаПлатежа.Сумма = ТекСтрока.СуммаВозврат;
		РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
		РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
		//Если ЗначениеЗаполнено(ТекСтрока.Касса) Тогда
			//Если Не УТ111 Тогда
			//	РасшифровкаПлатежа.Организация = ДокОбъект.Организация;
			//КонецЕсли;
			Если НЕ УТКазахстан Тогда
				ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
			КонецЕсли;
		//КонецЕсли;
		ДокОбъект.Записать(); 
		Попытка
			ДокОбъект.Записать(РежимЗаписиДок); 
			ДокументПроведен = Истина;
			ЗаписьВЛог("Проведен "+СокрЛП(ДокОбъект)+" по заявке № "+Формат(ТекСтрока.orderId,"ЧГ=0")+" "+ТекСтрока.paymentType+" " +ТекСтрока.createDateTime,1);
		Исключение
			ДокОбъект.Записать();
			ЗаписьВЛог("Не удалось провести "+СокрЛП(ДокОбъект)+ОписаниеОшибки(),5,Истина);
		КонецПопытки;
		ТекСтрока.ДокументВозврат = ДокОбъект.Ссылка;
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ТекСтрока.ДокументВозврат;
		МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
		МенеджерЗаписи.Значение = ТекСтрока.paymentNumber;
		МенеджерЗаписи.Записать();
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьОбъектРасчетовПоДоговору(КонтрагентСсылка, ДоговорСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Контрагент = &Контрагент
		|	И ОбъектыРасчетов.Договор = &Договор
		|	И ОбъектыРасчетов.ТипОбъектаРасчетов = &ТипОбъектаРасчетов";
	
	Запрос.УстановитьПараметр("Договор", ДоговорСсылка);
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	Запрос.УстановитьПараметр("ТипОбъектаРасчетов", Перечисления.ТипыОбъектовРасчетов.Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
КонецФункции

Функция ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(ИдПлатежа)
	Если ИдПлатежа = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	//ТекСтрока.ЗаказКлиента.ИдентификаторПлатежа - ещё есть такое, по нему можно найти заказ
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.ИдентификаторПлатежа = &ИдентификаторПлатежа";
	
	Запрос.УстановитьПараметр("ИдентификаторПлатежа", ИдПлатежа);
	//Запрос.УстановитьПараметр("ТипОбъектаРасчетов", Перечисления.ТипыОбъектовРасчетов.Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
КонецФункции

Процедура ПолучитьОбъектРасчетовЗаказПоДокументуОплаты(Знач СтрокаТаблицы)
	//в заказе есть табличная часть, из расшифровки получаем
КонецПроцедуры
#КонецОбласти

Процедура ЗаполнитьСоответствияДляОплат()
	//СоответствиеКасса = Новый Соответствие;
	//СоответствиеЭквайринг = Новый Соответствие;
	//СоответствиеБезнал = Новый Соответствие;
	//СоответствиеОрганизацииПоТипуПлатежа = Новый Соответствие;
	//
	//МассивНеЗагружать = Новый Массив;
	//Для Каждого ТекСтрока Из ТипыПлатежей Цикл
	//	Если ЗначениеЗаполнено(ТекСтрока.Касса) Тогда
	//		СоответствиеКасса.Вставить(ТекСтрока.id, ТекСтрока.Касса);
	//	ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ЭквайринговыйТерминал) Тогда
	//		СоответствиеЭквайринг.Вставить(ТекСтрока.id, ТекСтрока.ЭквайринговыйТерминал);
	//	ИначеЕсли ЗначениеЗаполнено(ТекСтрока.БанковскийСчет) Тогда
	//		СоответствиеБезнал.Вставить(ТекСтрока.id, ТекСтрока.БанковскийСчет);
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
	//		СоответствиеОрганизацииПоТипуПлатежа.Вставить(ТекСтрока.id, ТекСтрока.Организация);
	//	КонецЕсли;
	//	Если ТекСтрока.НеЗагружать Тогда
	//		МассивНеЗагружать.Добавить(ТекСтрока.id);
	//	КонецЕсли;
	//КонецЦикла;
	СоответствиеКасса = Новый Соответствие;
	СоответствиеЭквайринг = Новый Соответствие;
	СоответствиеБезнал = Новый Соответствие;
	СоответствиеОрганизацииПоТипуПлатежа = Новый Соответствие;
	
	СоответствиеКассыПрефиксуНомера = Новый Соответствие;
	СоответствиеТерминалаПрефиксуНомера = Новый Соответствие;
	СоответствиеТипаПлатежаПрефиксуНомера = Новый Соответствие;
	СоответствиеОрганизацииПрефиксуНомера = Новый Соответствие;
	СоответствиеДоговораЭквайрингаПрефиксуНомера = Новый Соответствие;
	СоответствиеДоговораЭквайрингаТипуПлатежа = Новый Соответствие;
	
	МассивНеЗагружать = Новый Массив;
	МассивПрефиксовНомеров = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТипыПлатежей Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Касса) Тогда
			СоответствиеКасса.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.Касса);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ЭквайринговыйТерминал) Тогда
			СоответствиеЭквайринг.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.ЭквайринговыйТерминал);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
			СоответствиеБезнал.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.БанковскийСчет);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Организация) Тогда
			СоответствиеОрганизацииПоТипуПлатежа.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.Организация);
		КонецЕсли;
		Если СтрокаТаблицы.НеЗагружать Тогда
			МассивНеЗагружать.Добавить(СтрокаТаблицы.id);
		КонецЕсли;
		
		Если СтрокаТаблицы.ПрефиксНомера<>"" Тогда
			МассивПрефиксовНомеров.Добавить(СтрокаТаблицы.ПрефиксНомера);
			Если ЗначениеЗаполнено(СтрокаТаблицы.Касса) Тогда
				СоответствиеКассыПрефиксуНомера.Вставить(СтрокаТаблицы.ПрефиксНомера, СтрокаТаблицы.Касса);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЭквайринговыйТерминал) Тогда
				СоответствиеТерминалаПрефиксуНомера.Вставить(СтрокаТаблицы.ПрефиксНомера, СтрокаТаблицы.ЭквайринговыйТерминал);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПрефиксНомера) Тогда
				СоответствиеТипаПлатежаПрефиксуНомера.Вставить(СтрокаТаблицы.ПрефиксНомера, СтрокаТаблицы.id);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Организация) Тогда
				СоответствиеОрганизацииПрефиксуНомера.Вставить(СтрокаТаблицы.ПрефиксНомера, СтрокаТаблицы.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорЭквайринга) Тогда
				СоответствиеДоговораЭквайрингаПрефиксуНомера.Вставить(СтрокаТаблицы.ПрефиксНомера, СтрокаТаблицы.ДоговорЭквайринга);
				СоответствиеДоговораЭквайрингаТипуПлатежа.Вставить(СтрокаТаблицы.id, СтрокаТаблицы.ДоговорЭквайринга)
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//если к старым оплатам были привязаны заказы, то такая информация не будет обновлена в документах оплаты
Процедура ЗаполнитьТаблицуОплат(НомерПлатежа = "", ПоКлиенту = Неопределено, Свежие = Ложь, Очищать = Истина)
	id22842 = ?(Лев(АдресСервиса, 7) = "id22842", Истина, Ложь);
	ЗаполнитьСоответствияДляОплат();
	Если Очищать Тогда
		ТаблицаОплат.Очистить();
		paymentOrderLinks.Очистить();
		ТаблицаКлиентов.Очистить();
	КонецЕсли;
	МассивНеЗагружать = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТипыПлатежей Цикл
		Если СтрокаТаблицы.НеЗагружать Тогда
			МассивНеЗагружать.Добавить(СтрокаТаблицы.id);
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачалаУчета) И ДатаНачалаУчета>ТекущаяДата() Тогда
		сообщить("Дата начала учета больше текущей даты, ничего не загружаем");
		Возврат;
	КонецЕсли;
	//а то по расписанию не грузит
	Если НЕ ФинансовыйМодульВключен Тогда
		ПолучитьОнлайнПлатежи();
		Возврат;
	КонецЕсли;
	Если ГлубинаПросмотраЗаявок = 0 Тогда
		ДатаНачала = НачалоДня(ТекущаяДата());//НачалоДня(ТекущаяДата())-ГлубинаПросмотраЗаявок*24*3600;
		Если ГлубинаПросмотраЗаявокВМинутах>0 Тогда
			ДатаНачала = ТекущаяДата() - 3600 * СмещениеЧасовогоПояса - ГлубинаПросмотраЗаявокВМинутах * 60 * 4;//в 4 раза больше интервал просмотра, чем у заявок
			ЗаписьВЛог("Загрузка оплат с "+ДатаНачала+", пользователь "+Пользователь+", адрес сервиса "+АдресСервиса);
		КонецЕсли;
	Иначе
		ДатаНачала = ТекущаяДата()-ГлубинаПросмотраЗаявок*24*3600;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачалаУчета) Тогда
		Если ДатаНачалаУчета>ДатаНачала Тогда
			сообщить("Дата начала учета "+ДатаНачалаУчета+", больше, чем "+ДатаНачала);
		КонецЕсли;
		ДатаНачала = Макс(ДатаНачалаУчета, ДатаНачала);
	КонецЕсли;
	ДатаОкончания = ТекущаяДата();
	Если Свежие Тогда
		ДатаВремяПоследнее = НайтиПоследнююЗагруженнуюОплату(ДатаНачала);
		ДатаНачала = ДатаВремяПоследнее;
	КонецЕсли;	
	Если ФильтрПоЗаявке>0 И ФильтрПоЗаявке<366 Тогда //делаем возможность загружать частями, и используем этот реквизит для указания количества дней
		ДатаОкончания = ДатаНачала + ФильтрПоЗаявке * 86400;
		сообщить("Загрузка платежей за период: "+ДатаНачала+" - "+ДатаОкончания);
	КонецЕсли;

	ТекстЗапроса = "cp/finance/payments?userlogin="+Пользователь+"&userpsw="+Пароль+"&createDateTimeStart="+Формат(ДатаНачала, "ДФ='yyyy-MM-dd HH:mm:ss'")+"&createDateTimeEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59";;
	Если НомерПлатежа<>"" Тогда
		ТекстЗапроса = "cp/finance/payments?userlogin="+Пользователь+"&userpsw="+Пароль+"&paymentNumber="+НомерПлатежа;
	КонецЕсли;
	Если ПоКлиенту<>0 И ПоКлиенту<>Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса+"&userId="+Формат(ПоКлиенту,"ЧГ=0");
	КонецЕсли;
	Если Отладка Тогда
		сообщить(АдресСервиса+"/"+ТекстЗапроса);
	КонецЕсли; 
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		ТекстСообщения = "ошибка получения оплат:"+ОписаниеОшибки()+" "+СтрокаОтвет;
		ЗаписьВЛог(ТекстСообщения,6,Истина);
		Возврат;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	Попытка
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ЧтениеJSON.Закрыть();
		ТекстСообщения = "ошибка обработки оплат с сайта в формате JSON, ответ сервера:"+СтрокаОтвет;
		ЗаписьВЛог(ТекстСообщения,6,Истина);
		Возврат;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	НенайденныеКонтрагенты = Новый ТаблицаЗначений;
	НенайденныеКонтрагенты.Колонки.Добавить("ИдентификаторКонтрагента");
	НенайденныеКонтрагенты.Колонки.Добавить("Контрагент");
	НенайденныеКонтрагенты.Колонки.Добавить("НомерЗаявки");
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ЗаполненБанковскийСчет = Истина;
	Иначе
		ЗаполненБанковскийСчет = Ложь;
	КонецЕсли;
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если МассивНеЗагружать.Найти(Число((Элемент.paymentTypeId))) <> Неопределено Тогда //не загружаем эти виды оплат
			Продолжить;
		КонецЕсли;
		Если ЗагружатьТолькоСЧеками Тогда
			Если Элемент.komtetCheckId = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НовСтрока = ТаблицаОплат.Добавить();
		НовСтрока.АдресСервиса = АдресСервиса;//если несколько доступов, чтобы привязки корректно работали
		НовСтрока.Пользователь = Пользователь;
		ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
		Если (Не ЗаполненБанковскийСчет) И (НовСтрока.paymentTypeCode = 0) Тогда//0 - Безналичный, 1 - Электронный, 2 - Наличный
			НовСтрока.paymentTypeCode = 1;
		КонецЕсли;
		//Если (Не ЗаполненаКасса) И (ТекСтрока.paymentTypeCode = 0) Тогда
		//	ТекСтрока.paymentTypeCode = 1;
		//КонецЕсли;
		ОрганизацияИзТипаПлатежа = СоответствиеОрганизацииПоТипуПлатежа.Получить(НовСтрока.paymentTypeId);
		Если ОрганизацияИзТипаПлатежа <> Неопределено Тогда
			НовСтрока.Организация = ОрганизацияИзТипаПлатежа;
		КонецЕсли;
		КассаИзТипаПлатежа = СоответствиеКасса.Получить(НовСтрока.paymentTypeId);
		Если КассаИзТипаПлатежа <> Неопределено Тогда
			НовСтрока.Касса = КассаИзТипаПлатежа;
			Если Не ЗначениеЗаполнено(ТипПлатежаНаличный) Тогда
				ТипПлатежаНаличный = НовСтрока.paymentTypeId;
			КонецЕсли;
		КонецЕсли;
		ЭквайрингИзТипаПлатежа = СоответствиеЭквайринг.Получить(НовСтрока.paymentTypeId);
		Если ЭквайрингИзТипаПлатежа <> Неопределено Тогда
			НовСтрока.ЭквайринговыйТерминал = ЭквайрингИзТипаПлатежа;
			Если Не ЗначениеЗаполнено(ТипПлатежаЭлектронный) Тогда
				ТипПлатежаЭлектронный = НовСтрока.paymentTypeId;
			КонецЕсли;
		КонецЕсли;
		СчетИзТипаПлатежа = СоответствиеБезнал.Получить(НовСтрока.paymentTypeId);
		Если СчетИзТипаПлатежа <> Неопределено Тогда
			НовСтрока.БанковскийСчет = СчетИзТипаПлатежа;
			НовСтрока.paymentTypeCode = 1;
		КонецЕсли;
		ДоговораЭквайрингаИзТипаПлатежа = СоответствиеДоговораЭквайрингаТипуПлатежа.Получить(НовСтрока.paymentTypeId);
		Если ДоговораЭквайрингаИзТипаПлатежа <> Неопределено Тогда
			НовСтрока.ДоговорЭквайринга = ДоговораЭквайрингаИзТипаПлатежа;
		КонецЕсли;
		
		НовСтрока.createDateTime = ПреобразоватьИзСтрокиВДату(Элемент.createDateTime, Истина);
		НовСтрока.ИдентификаторКонтрагента = Число(Элемент.userId);
		НовСтрока.Контрагент = НайтиКонтрагентаПоИдентификатору(НовСтрока.ИдентификаторКонтрагента);
		Если СинхронизироватьКонтрагентов И Не ЗначениеЗаполнено(НовСтрока.Контрагент) Тогда
			НовНенайденный = НенайденныеКонтрагенты.Добавить();
			НовНенайденный.ИдентификаторКонтрагента = НовСтрока.ИдентификаторКонтрагента; 
			НовНенайденный.НомерЗаявки = НовСтрока.orderId;//пока не заполнен, после привязки заполнится, пока не актуально , если 0 - то возврат
		КонецЕсли;
		//НовСтрока.Партнер = НовСтрока.Контрагент.Партнер;
		НовСтрока.Менеджер = НайтиМенеджераПоИдентификатору(НовСтрока.editorId);
		//НовСтрока.Баланс = ПолучитьБаланс(НовСтрока.Контрагент);
	КонецЦикла;
	Если НенайденныеКонтрагенты.Количество()>0 Тогда
		//cp/users - есть параметр customersIds, в который можно передать список не найденных контрагентов и добавить их
		//http://api.demo.abcp.ru/cp/users?userlogin=username&userpsw=md5pass&customersIds[]=574823&customersIds[]=86954&customersIds[]=56234786
		ПереченьИдентификаторов = "";
		СвернутыеИдентификаторы = НенайденныеКонтрагенты.Скопировать(,"ИдентификаторКонтрагента");
		СвернутыеИдентификаторы.Свернуть("ИдентификаторКонтрагента",);
		Для Каждого ТекСтрока Из СвернутыеИдентификаторы Цикл
			ПереченьИдентификаторов = ПереченьИдентификаторов + "&customersIds[]="+Формат(ТекСтрока.ИдентификаторКонтрагента, "ЧГ=0");
		КонецЦикла;
		//ЗаполнитьТаблицуКлиентовССайта(Ложь, ПереченьИдентификаторов = "")
		//возможно еще стоит добавить синхронизацию менеджеров, у них другие идентификаторы и они добавляются по-другому !!!
		ЗаполнитьТаблицуКлиентовССайта(Истина, ПереченьИдентификаторов, СвернутыеИдентификаторы);//автоматически добавляем не найденных контрагентов
		//заново проходим по заявкам и заполняем созданными контрагентами
		Структура = Новый Структура("ИдентификаторКонтрагента");
		Для Каждого ТекСтрока Из НенайденныеКонтрагенты Цикл
			Структура.ИдентификаторКонтрагента = ТекСтрока.ИдентификаторКонтрагента;
			НайденныеСтроки = ТаблицаОплат.НайтиСтроки(Структура);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.Контрагент = ТекСтрока.Контрагент;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ТаблицаОплат.Количество() = 0 Тогда
		Если ФинансовыйМодульВключен Тогда
			Если НомерПлатежа = "" Тогда
				сообщить("Нет оплат за период: "+ДатаНачала+"-"+ДатаОкончания);
			Иначе
				сообщить("Нет платежа № "+НомерПлатежа+", или надо отключить «Загружать только с чеками»");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПолучитьИнформациюОПривязкахПлатежей();
	КонецЕсли;
	УстановитьНеЗагружатьПоОфисамЗаказов();
	Если ЗагружатьТолькоСЧеками Тогда
		ДозаполнитьДаннымиЧеков();
	КонецЕсли;
КонецПроцедуры

Процедура ДозаполнитьДаннымиЧеков()
	Если ТаблицаОплат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТЗ = ТаблицаОплат.Выгрузить(,"createDateTime");
	ТЗ.Сортировать("createDateTime");
	ДатаНачала = ТЗ[0].createDateTime;
	ДатаОкончания = ТекущаяДата();
	ТекстЗапроса = "komtet/getChecks?userlogin="+Пользователь+"&userpsw="+Пароль+"&dateCreatedStart="+Формат(ДатаНачала, "ДФ=yyyy-MM-dd")+"&dateCreatedEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd");
	//Если НомерПлатежа<>"" Тогда
	//	ТекстЗапроса = "cp/finance/payments?userlogin="+Пользователь+"&userpsw="+Пароль+"&paymentNumber="+НомерПлатежа;
	//КонецЕсли;
	//Если ПоКлиенту<>0 И ПоКлиенту<>Неопределено Тогда
	//	ТекстЗапроса = ТекстЗапроса+"&clientId="+Формат(ПоКлиенту,"ЧГ=0");
	//КонецЕсли;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ТаблицаКлиентов.Очистить();
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		ТекстСообщения = "ошибка получения чеков:"+ОписаниеОшибки()+" "+СтрокаОтвет;
		ЗаписьВЛог(ТекстСообщения,6,Истина);
		Возврат;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	Попытка
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ЧтениеJSON.Закрыть();
		ТекстСообщения = "ошибка обработки оплат с сайта в формате JSON, ответ сервера:"+СтрокаОтвет;
		ЗаписьВЛог(ТекстСообщения,6,Истина);
		Возврат;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	Если СписокЭлементов<>Неопределено Тогда
		Структура = Новый Структура("komtetCheckId");
		Попытка
			Для Каждого Элемент Из СписокЭлементов.checks Цикл
				Структура.komtetCheckId = Число(Элемент.id);
				НСтроки = ТаблицаОплат.НайтиСтроки(Структура);
				Для Каждого НСтрока Из НСтроки Цикл
					ЗаполнитьЗначенияСвойств(НСтрока,Элемент,"clientEmail,taxSystem,vat,calculationMethod,calculationSubject,paymentAmount,fiscalization,printPaperCheck");
				КонецЦикла;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Лев(АдресСервиса, 7) = "id13522" Тогда
		//удаляем все, у кого не calculationMethod = 2 - Полный расчет
		Массив = Новый Массив;
		Для Каждого ТекСтрока Из ТаблицаОплат Цикл
			Если ТекСтрока.calculationMethod<>2 Тогда
				Массив.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из Массив Цикл
			ТаблицаОплат.Удалить(Элемент);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//Если в таблице офисов стоит галочка "Не загружать", то проверяем, какие оплаты не загружать, так как они по заказам, которые не надо загружать
Процедура УстановитьНеЗагружатьПоОфисамЗаказов()
КонецПроцедуры

Процедура ПолучитьИнформациюОПривязкахПлатежей()
	НомераПлатежей = "";
	НС = 0;
	Для Каждого ТекСтрока Из ТаблицаОплат Цикл
		Если ТекСтрока.АдресСервиса<>АдресСервиса Или ТекСтрока.Пользователь<>Пользователь Тогда //от другого доступа
			Продолжить;
		КонецЕсли; 
		НС = НС + 1;
		НомераПлатежей = НомераПлатежей+"&paymentNumbers[]="+ТекСтрока.paymentNumber;
		Если НС % 50 = 0 Тогда
			ПолучитьИнформациюОПривязкахПлатежейПорция(НомераПлатежей);
			НомераПлатежей = "";
		КонецЕсли;
	КонецЦикла;
	Если НомераПлатежей<>"" Тогда
		ПолучитьИнформациюОПривязкахПлатежейПорция(НомераПлатежей);
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьИнформациюОПривязкахПлатежейПорция(Знач НомераПлатежей)
	Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		РазмерСтавкиНДС = 0;
		РазмерСтавкиНДС100 = 100;
	Иначе
		Если НЕ УТКазахстан Тогда
			РазмерСтавкиНДС = 20;
			РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
		Иначе
			РазмерСтавкиНДС = 12;
			РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = "cp/finance/paymentOrderLinks?userlogin="+Пользователь+"&userpsw="+Пароль+НомераПлатежей;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	Если Отладка Тогда
		сообщить(АдресСервиса+"/"+ТекстЗапроса);
	КонецЕсли; 
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ТаблицаКлиентов.Очистить();
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	Попытка
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ЧтениеJSON.Закрыть();
		ТекстСообщения = "ошибка обработки оплат с сайта в формате JSON, ответ сервера:"+СтрокаОтвет;
		сообщить(ТекстСообщения);
		ЗаписьВЛог(ТекстСообщения,6,Истина);
		Возврат;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	//paymentLinkId	id привязки платежа
	//paymentId	id платежа
	//createDateTime	дата/время создания привязки платежа формат ГГГГ-ММ-ДД ЧЧ:ММ:СС
	//orderId	номер заказа (если номер заказа "0" - значит это Возврат средств)
	//amount	сумма платежа
	//editorId	id сотрудника, добавившего привязку. Если параметр равен "0", то привязка автоматическая.
	//paymentNumber	номер платежа из ПУ в виде "НАЛ00010"
	//в переписке zap82 было #166663 Как через API отличить непривязанный платеж от возврата
	//Если существует привязка платежа и orderId: "0", то это возврат средств. Если есть платеж и есть заказ, не привязанные друг к другу, то запрос вернет пустой результат, т.к. привязка не существует.
	Структура = Новый Структура("paymentNumber,АдресСервиса,Пользователь","",АдресСервиса,Пользователь);//может быть 2 одинаковых № платежа но в разные даты НАЛ00555 
	Для Каждого Элемент Из СписокЭлементов Цикл
		//это не будет работать, если в есть платежи с одинаковыми номерами, хотя это неправильно
		//НайденнаяСтрока = ТаблицаОплат.Найти(Элемент.paymentNumber,"paymentNumber");
		//Если НЕ НайденнаяСтрока = Неопределено Тогда
		//	ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Элемент, "orderId,paymentLinkId");
		//	Если НайденнаяСтрока.orderId<>0 Тогда
		//		НайденнаяСтрока.ЗаказКлиента = НайтиЗаявку(НайденнаяСтрока.orderId, Неопределено);
		//	КонецЕсли;
		//КонецЕсли;
		НоваяПривязка = paymentOrderLinks.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПривязка, Элемент);
		НоваяПривязка.АдресСервиса = АдресСервиса;//если несколько доступов, чтобы привязки корректно работали
		НоваяПривязка.Пользователь = Пользователь;
		
		Если Элемент.orderId = "0" И НоваяПривязка.paymentLinkId<>0 Тогда
			НоваяПривязка.Возврат = Истина;
			ТекстСообщения = "Возврат по " + Элемент.paymentLinkId + " от " + НоваяПривязка.createDateTime;
			ЗаписьВЛог(ТекстСообщения, Ложь);
		ИначеЕсли НоваяПривязка.orderId <> 0 Тогда
			НоваяПривязка.ЗаказКлиента = НайтиЗаявку(НоваяПривязка.orderId, Неопределено, Истина);
		КонецЕсли;
		Структура.paymentNumber = Элемент.paymentNumber;
		НайденныеСтроки = ТаблицаОплат.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяПривязка.createDateTime = ПреобразоватьИзСтрокиВДату(Элемент.createDateTime);
				Если НоваяПривязка.Возврат Тогда //а если несколько привязок, и только одна - возврат? Тогда делаем и документ и документ возврата на разные суммы
					НайденнаяСтрока.Возврат = Истина;
					НайденнаяСтрока.СуммаВозврат = НайденнаяСтрока.СуммаВозврат + НоваяПривязка.amount; 
					НайденнаяСтрока.ДатаВозврата = НоваяПривязка.createDateTime;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.ЗаказКлиента) Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Элемент, "orderId,paymentLinkId");
					Если НайденнаяСтрока.orderId<>0 Тогда
						НайденнаяСтрока.ЗаказКлиента = НайтиЗаявку(НайденнаяСтрока.orderId, Неопределено, Истина);
						Если ЗначениеЗаполнено(НайденнаяСтрока.ЗаказКлиента) Тогда
							Если НайденнаяСтрока.ИдентификаторКонтрагента = ИдентификаторГостя Тогда
								НайденнаяСтрока.Контрагент = НайденнаяСтрока.ЗаказКлиента.Контрагент;
							Иначе
								//проверяем, контрагент такой же, как в документе?
								Если НайденнаяСтрока.ЗаказКлиента.Контрагент = НайденнаяСтрока.Контрагент Тогда
									Если ЗначениеЗаполнено(НоваяПривязка.ЗаказКлиента) И НЕ НоваяПривязка.Возврат Тогда
										НайденнаяСтрока.Привязок = НайденнаяСтрока.Привязок + 1;
									КонецЕсли;
									Прервать;
								Иначе
									Если ЗаменятьТолькоРозничныхПокупателей И ЗначениеЗаполнено(ОсновнойПокупатель) Тогда
										//считаем, что уже раньше поменяли
										//Если ЗначениеЗАполнено(СтрокаТаблицы.Контрагент) И СтрокаТаблицы.Контрагент <> ОсновнойПокупатель Тогда
										//	ЮрФизЛицо = СтрокаТаблицы.Контрагент.ЮрФизЛицо;
										//	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Или ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
										//		Если Отладка Тогда
										//			сообщить("Меняем в оплатах розничного клиента "+СтрокаТаблицы.Контрагент+" на "+ОсновнойПокупатель);
										//		КонецЕсли;
										//		СтрокаТаблицы.Контрагент = ОсновнойПокупатель;
										//	КонецЕсли;
										//КонецЕсли;
									Иначе
										НайденнаяСтрока.ЗаказКлиента = "";
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(НоваяПривязка.ЗаказКлиента) И НЕ НоваяПривязка.Возврат Тогда
					НайденнаяСтрока.Привязок = НайденнаяСтрока.Привязок + 1;
				КонецЕсли;
				Для Каждого ПрефиксНомера Из МассивПрефиксовНомеров Цикл
					Если Лев(НайденнаяСтрока.paymentNumber, СтрДлина(ПрефиксНомера)) = ПрефиксНомера Тогда
						КассаПоПрефиксуНомера = СоответствиеКассыПрефиксуНомера.Получить(ПрефиксНомера);
						ЭквайринговыйТерминалПоПрефиксуНомера = СоответствиеТерминалаПрефиксуНомера.Получить(ПрефиксНомера);
						ТипПлатежаПоПрефиксуНомера = СоответствиеТипаПлатежаПрефиксуНомера.Получить(ПрефиксНомера);
						ОрганизацияПоПрефиксуНомера = СоответствиеОрганизацииПрефиксуНомера.Получить(ПрефиксНомера);
						ДоговорЭквайрингаПрефиксуНомера = СоответствиеДоговораЭквайрингаПрефиксуНомера.Получить(ПрефиксНомера);
						Если ЗначениеЗаполнено(ОрганизацияПоПрефиксуНомера) Тогда
							НайденнаяСтрока.Организация = ОрганизацияПоПрефиксуНомера;
						КонецЕсли;
						Если ЗначениеЗаполнено(ТипПлатежаПоПрефиксуНомера) Тогда
							НайденнаяСтрока.paymentTypeId = ТипПлатежаПоПрефиксуНомера;
						КонецЕсли;
						Если ЗначениеЗаполнено(ДоговорЭквайрингаПрефиксуНомера) Тогда
							НайденнаяСтрока.ДоговорЭквайринга = ДоговорЭквайрингаПрефиксуНомера;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(КассаПоПрефиксуНомера) Тогда
							НайденнаяСтрока.Касса = КассаПоПрефиксуНомера;
							Прервать;
						КонецЕсли;
						Если ЗначениеЗаполнено(ЭквайринговыйТерминалПоПрефиксуНомера) Тогда
							НайденнаяСтрока.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоПрефиксуНомера;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСоответствияДляОплат();
	
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока50 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(50));
	НомерПлатежногоДокумента = НайтиДобавитьСвойствоДокумента("НомерПлатежногоДокумента", ТипИдентификатораСтрока50);//Номер платежного документа - в платежных документах
	//ЗаполненаКасса = Ложь;
	//Если ЗначениеЗаполнено(Касса) Тогда
	//	ЗаполненаКасса = Истина;
	//КонецЕсли;
	//НомерПлатежногоДокумента
	//выгружаем свойства
	КоличествоДокументов = ТаблицаОплат.Количество();//чтобы отладку проще было делать
	Для Каждого ТекСтрока Из ТаблицаОплат Цикл
		Если ТекСтрока.ИдентификаторКонтрагента = ИдентификаторГостя И ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
			ТекСтрока.Контрагент = ТекСтрока.ЗаказКлиента.Контрагент;
		КонецЕсли;
		ТекСтрока.Реализация = НайтиРеализациюПоЗаказуКлиента(ТекСтрока.ЗаказКлиента);
		//Если ЧекиККМ Тогда
		//	ТекСтрока.Документ = НайтиЧек(ТекСтрока.paymentNumber, ТекСтрока.createDateTime, ТекСтрока.orderId);
		//Иначе
		//ТекСтрока.paymentTypeCode = 1;//отладка
			//Если (Не ЗаполненаКасса) И (ТекСтрока.paymentTypeCode = 0) Тогда
			//	ТекСтрока.paymentTypeCode = 1;
			//КонецЕсли;
			Если ЧекиККМ Тогда
				ТекСтрока.Документ = НайтиЧек(ТекСтрока.paymentNumber, ТекСтрока.createDateTime, ТекСтрока.paymentNumber);
			ИначеЕсли (ДокументыПоТипамПлатежей И ЗначениеЗаполнено(ТекСтрока.Касса)) Или (НЕ ДокументыПоТипамПлатежей И (ТекСтрока.paymentTypeCode = 2 ИЛИ (ТекСтрока.paymentTypeCode = 1 И НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал)))) Тогда //Код типа платежа: 0 - Безналичный, 1 - Электронный, 2 - Наличный
				Если (НЕ ТекСтрока.Возврат) Или (ТекСтрока.amount > 0) Тогда //по одному документу может быть и платеж и частичный возврат но всё равно оплата на полную сумму, и может быть или частичный или полный возврат  - ТекСтрока.СуммаВозврат
					ТекСтрока.Документ = НайтиПКО(ТекСтрока.paymentNumber, ТекСтрока.createDateTime, ТекСтрока.orderId);
				КонецЕсли;
				Если ТекСтрока.Возврат Тогда
					ТекСтрока.ДокументВозврат = НайтиРКО(ТекСтрока.paymentNumber, ТекСтрока.createDateTime);
					Если Отладка И КоличествоДокументов = 1 Тогда
						Если НЕ ЗначениеЗаполнено(ТекСтрока.ДокументВозврат) Тогда
							сообщить("Не найден РКО № "+ТекСтрока.paymentNumber+" от "+ТекСтрока.createDateTime);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (ДокументыПоТипамПлатежей И (ЗначениеЗаполнено(ТекСтрока.ЭквайринговыйТерминал) Или ЗначениеЗаполнено(ТекСтрока.ДоговорЭквайринга))) Или (НЕ ДокументыПоТипамПлатежей И (ТекСтрока.paymentTypeCode = 1)) Тогда
				//у операции по платежной карте меняется только вид хоз.операции
				ТекСтрока.Документ = НайтиОперацияПоПлатежнойКарте(ТекСтрока.paymentNumber, ТекСтрока.createDateTime, ТекСтрока.orderId, Ложь);//не может быть возврата без оплаты, делаем костыль
				Если ТекСтрока.Возврат Тогда
					ТекСтрока.ДокументВозврат = НайтиОперацияПоПлатежнойКарте(ТекСтрока.paymentNumber, ТекСтрока.ДатаВозврата, 0, Истина);
					Если Отладка И КоличествоДокументов = 1 Тогда
						Если НЕ ЗначениеЗаполнено(ТекСтрока.ДокументВозврат) Тогда
							сообщить("Не найден возврат по эквайрингу № "+ТекСтрока.paymentNumber+" от "+ТекСтрока.ДатаВозврата);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
					Док = НайтиДокументПоСвойству("ОперацияПоПлатежнойКарте", ТекСтрока.createDateTime, ТекСтрока.paymentNumber);
					Если ЗначениеЗаполнено(Док) Тогда
						ТекСтрока.Документ = Док.Ссылка;
					КонецЕсли;
				КонецЕсли;				
			Иначе
				Если (НЕ ТекСтрока.Возврат) Или (ТекСтрока.amount > 0) Тогда //по одному документу может быть и платеж и частичный возврат
					ТекСтрока.Документ = НайтиПриходНаСчет(ТекСтрока.paymentNumber, ТекСтрока.createDateTime, ТекСтрока.orderId);
				КонецЕсли;
				Если ТекСтрока.Возврат Тогда
					ТекСтрока.Документ = НайтиРасходСоСчета(ТекСтрока.paymentNumber, ТекСтрока.createDateTime);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Документ) И ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
				Если ТекСтрока.Документ.РасшифровкаПлатежа.Количество()>0 Тогда
					ОснованиеПлатежаДокумента = ТекСтрока.Документ.РасшифровкаПлатежа[0].ОснованиеПлатежа;
					НадоПерезаполнятьРасшифровку = Ложь;
					Если НЕ ЗначениеЗаполнено(ОснованиеПлатежаДокумента) Тогда
						НадоПерезаполнятьРасшифровку = Истина;
					Иначе
						Если (ТипЗнч(ОснованиеПлатежаДокумента)<>Тип("ДокументСсылка.ЗаказКлиента") И ТипЗнч(ОснованиеПлатежаДокумента)<>Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
							НадоПерезаполнятьРасшифровку = Истина;
						КонецЕсли;
					КонецЕсли;
					Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда //проверяем объект расчетов
						ОбъектРасчетов = ТекСтрока.Документ.РасшифровкаПлатежа[0].ОбъектРасчетов;
						Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) Тогда
							НадоПерезаполнятьРасшифровку = Истина;
						Иначе
							Если (ТипЗнч(ОбъектРасчетов.Объект)<>Тип("ДокументСсылка.ЗаказКлиента") И ТипЗнч(ОснованиеПлатежаДокумента)<>Тип("ДокументСсылка.РеализацияТоваровУслуг")) И (ТипЗнч(ОбъектРасчетов.Объект)<>Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")) И (ТипЗнч(ОбъектРасчетов.Объект)<>Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) Тогда
								НадоПерезаполнятьРасшифровку = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если НадоПерезаполнятьРасшифровку Тогда
						ДокОбъект = ТекСтрока.Документ.ПолучитьОбъект();
						ДокОбъект.РасшифровкаПлатежа.Очистить();
						РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
						РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;
						Если ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
							Если Не УТ111 Тогда
								РасшифровкаПлатежа.Организация = ДокОбъект.Организация;
							КонецЕсли;
						КонецЕсли;
						РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
						Если ЦеныПродажиВРублях Тогда//оплата
							РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
						КонецЕсли;
						Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
							РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.ЗаказКлиента;
							Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
								Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
									РасшифровкаПлатежа.ОбъектРасчетов = ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(ТекСтрока.ЗаказКлиента.ИдентификаторПлатежа);
								ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда
									РасшифровкаПлатежа.ОбъектРасчетов = ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(ТекСтрока.Реализация.ИдентификаторПлатежа);
								КонецЕсли;
								Если Отладка И ЗначениеЗаполнено(РасшифровкаПлатежа.ОбъектРасчетов) Тогда
									сообщить(РасшифровкаПлатежа.ОбъектРасчетов);
								КонецЕсли;
							КонецЕсли;
						Иначе
							РасшифровкаПлатежа.Заказ = ТекСтрока.ЗаказКлиента;
						КонецЕсли;
						Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
							РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.ЗаказКлиента;//а то в чеке некорректно отображается
						Иначе
							РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.Реализация;
						КонецЕсли;
						Если Отладка Тогда
							сообщить("Перезаполняем основание платежа в расшифровке на "+РасшифровкаПлатежа.ОснованиеПлатежа);
						КонецЕсли;
						//сообщить(РасшифровкаПлатежа.ОснованиеПлатежа);
						РасшифровкаПлатежа.Сумма = ТекСтрока.amount;
						//в переписке zap82 было #166663 Как через API отличить непривязанный платеж от возврата
						//функция cp/finance/paymentOrderLinks
						//Если существует привязка платежа и orderId: "0", то это возврат средств. Если есть платеж и есть заказ, не привязанные друг к другу, то запрос вернет пустой результат, т.к. привязка не существует.
						//Если ТекСтрока.orderId = 0 Тогда //возврат денежных средств - надо в элементе искать, так как в этом реквизите 0 будет, так как число
						//	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанка;
						//Иначе
						//	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СдачаДенежныхСредствВБанк;
						//КонецЕсли;
						РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
						Если НалогообложениеНДСРеализация = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
							РасшифровкаПлатежа.СтавкаНДС = ОсновнаяСтавкаНДС;
							РасшифровкаПлатежа.СуммаНДС = РасшифровкаПлатежа.Сумма/РазмерСтавкиНДС100*РазмерСтавкиНДС100;
						Иначе
							РасшифровкаПлатежа.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							РасшифровкаПлатежа.СуммаНДС = 0;
						КонецЕсли;
						Попытка
							ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
							ДокументПроведен = Истина;
						Исключение
							ДокументПроведен = Ложь;
							ЗаписьВЛог(ОписаниеОшибки());
						КонецПопытки;
						Если НЕ ДокументПроведен Тогда
							Попытка
								ДокОбъект.Записать();
								ДокументПроведен = Истина;
							Исключение
								ДокументПроведен = Ложь;
								ЗаписьВЛог(ОписаниеОшибки());
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//эквайринг привязан заказу № 1. Потом по позиции из заказа пришёл отказ, то есть по заказу № 1 появились свободные деньги.
				//Привязываем эти деньги в ABCP к другому заказу №2.
				//А в 1С остаётся старая настройка, привязка к старому заказу. А должна измениться привязка, часть к заказу № 1, часть к заказу № 2
				//Если ПроверятьПривязкиВОплатах Тогда //перепроверяем привязки в документе, если 
				//КонецЕсли;
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВернутьДокументыОплатыНаСервере() Экспорт
	Если НеПроводитьДокументы Тогда
		РежимЗаписиДок = РежимЗаписиДокумента.Запись;
	Иначе
		РежимЗаписиДок = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	Если ЧекиККМ Тогда
		СоздатьЧекиККМ();
	Иначе
		СоздатьОплаты();
	КонецЕсли;
	Возврат ТаблицаОплат;
КонецФункции

Процедура ЗаполнитьТаблицаДокументовОплат()
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект КАК Объект,
	               |	ДополнительныеСведения.Свойство КАК Свойство,
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ВЫБОР
	               |		КОГДА ДополнительныеСведения.Объект ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |			ТОГДА ""ПриходныйКассовыйОрдер""
	               |		КОГДА ДополнительныеСведения.Объект ССЫЛКА Документ.РасходныйКассовыйОрдер
	               |			ТОГДА ""РасходныйКассовыйОрдер""
	               |		КОГДА ДополнительныеСведения.Объект ССЫЛКА Документ.ОперацияПоПлатежнойКарте
	               |			ТОГДА ""ОперацияПоПлатежнойКарте""
	               |		КОГДА ДополнительныеСведения.Объект ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	               |			ТОГДА ""ПоступлениеБезналичныхДенежныхСредств""
	               |		КОГДА ДополнительныеСведения.Объект ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	               |			ТОГДА ""СписаниеБезналичныхДенежныхСредств""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ТипДокумента,
	               |	ДополнительныеСведения.Объект.Дата КАК Дата,
	               |	ДополнительныеСведения.Объект.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект.Дата >= &Дата";
	Запрос.Текст = ТекстЗапроса;
КонецПроцедуры

Функция НайтиДокументПоСвойству(ВидДокумента, createDateTime, ЗначениеСвойства, ПоВозвратам = Ложь, ИспользоватьДатуИзПараметров = Ложь)
	Если НомерПлатежногоДокумента = Неопределено Тогда
		НомерПлатежногоДокумента = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("НомерПлатежногоДокумента (Документы)");
	КонецЕсли;
	Если ТаблицаДокументовОплат = Неопределено Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ДополнительныеСведения.Объект КАК Объект,
		               |	ДополнительныеСведения.Свойство КАК Свойство,
		               |	ДополнительныеСведения.Значение КАК Значение,
		               |	ВЫБОР
		               |		КОГДА ДополнительныеСведения.Объект ССЫЛКА Документ.ПриходныйКассовыйОрдер
		               |			ТОГДА ""ПриходныйКассовыйОрдер""
		               |		КОГДА ДополнительныеСведения.Объект ССЫЛКА Документ.РасходныйКассовыйОрдер
		               |			ТОГДА ""РасходныйКассовыйОрдер""
		               |		КОГДА ДополнительныеСведения.Объект ССЫЛКА Документ.ОперацияПоПлатежнойКарте
		               |			ТОГДА ""ОперацияПоПлатежнойКарте""
		               |		КОГДА ДополнительныеСведения.Объект ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
		               |			ТОГДА ""ПоступлениеБезналичныхДенежныхСредств""
		               |		КОГДА ДополнительныеСведения.Объект ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
		               |			ТОГДА ""СписаниеБезналичныхДенежныхСредств""
		               |		ИНАЧЕ """"
		               |	КОНЕЦ КАК ТипДокумента,
		               |	ДополнительныеСведения.Объект.Дата КАК Дата,
		               |	ДополнительныеСведения.Объект.ХозяйственнаяОперация КАК ХозяйственнаяОперация
		               |ИЗ
		               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |ГДЕ
		               |	ДополнительныеСведения.Свойство = &Свойство
		               |	И ДополнительныеСведения.Объект.Дата >= &Дата";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Свойство", НомерПлатежногоДокумента);
		//Запрос.УстановитьПараметр("Дата", createDateTime);
		//или дату не выбирать, чтобы быстрее выборка делалась
		Если ПоВозвратам Тогда
			Запрос.УстановитьПараметр("Дата", ТекущаяДата() - 180*24*3600);
		Иначе
			Если ИспользоватьДатуИзПараметров Тогда
				Запрос.УстановитьПараметр("Дата", createDateTime - (ГлубинаПросмотраЗаявок+1)*24*3600);
			Иначе
				Запрос.УстановитьПараметр("Дата", ТекущаяДата() - (ГлубинаПросмотраЗаявок+1)*24*3600);//на всякий случай день захватим
			КонецЕсли;
		КонецЕсли;
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ТаблицаДокументовОплат = Новый ТаблицаЗначений;
			ТаблицаДокументовОплат.Колонки.Добавить("Объект");
			ТаблицаДокументовОплат.Колонки.Добавить("Свойство");
			ТаблицаДокументовОплат.Колонки.Добавить("Значение");
			ТаблицаДокументовОплат.Колонки.Добавить("ТипДокумента");
			ТаблицаДокументовОплат.Колонки.Добавить("ХозяйственнаяОперация");
			Возврат Неопределено;
		КонецЕсли;
		ТаблицаДокументовОплат = Результат.Выгрузить();
		ТаблицаДокументовОплат.Индексы.Добавить("ТипДокумента");
		ТаблицаДокументовОплат.Индексы.Добавить("Значение");
		ТаблицаДокументовОплат.Индексы.Добавить("ХозяйственнаяОперация");
	КонецЕсли;
	Если ПоВозвратам Тогда
		Структура = Новый Структура("ТипДокумента,Значение,ХозяйственнаяОперация",ВидДокумента,ЗначениеСвойства,Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Иначе
		Структура = Новый Структура("ТипДокумента,Значение",ВидДокумента,ЗначениеСвойства);
	КонецЕсли;
	НСтроки = ТаблицаДокументовОплат.НайтиСтроки(Структура);
	Для каждого НСтрока Из НСтроки Цикл
		Возврат НСтрока.Объект;
	КонецЦикла; 
КонецФункции

Функция НайтиДокументПоСвойствуМедленный(ВидДокумента, createDateTime, ЗначениеСвойства, ЭтоВозврат = Ложь)
	//не нашли, ищем по-старому - медленный
	Запрос = Новый Запрос;
	//или можно по Контрагент.Партнер
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ПриходныйКассовыйОрдер) КАК Объект
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Значение = &Значение
	               |	И ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |	И ДополнительныеСведения.Объект.Дата >= &Дата";
	Если ВидДокумента = "ОперацияПоПлатежнойКарте" Тогда
		Если ЭтоВозврат Тогда
			ТекстЗапроса = ТекстЗапроса + " И ДополнительныеСведения.Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)";
		Иначе
			ТекстЗапроса = ТекстЗапроса + " И ДополнительныеСведения.Объект.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)";
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПриходныйКассовыйОрдер", ВидДокумента);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
	Запрос.УстановитьПараметр("Свойство", НомерПлатежногоДокумента);
	Запрос.УстановитьПараметр("Дата", createDateTime);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Объект;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция НайтиПКО(Основание, ДатаДокумента, НомерЗаказа)
	Док = НайтиДокументПоСвойству("ПриходныйКассовыйОрдер", ДатаДокумента, Основание);
	Если ЗначениеЗаполнено(Док) Тогда
		Возврат Док.Ссылка;
	КонецЕсли;
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПриходныйКассовыйОрдер.Ссылка
		               |ИЗ
		               |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		               |ГДЕ
		               |	ПриходныйКассовыйОрдер.Дата >= &Дата
		               |	И ПриходныйКассовыйОрдер.Основание = &Основание";
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Если МедленныйПоискОплат Тогда
		Док = НайтиДокументПоСвойствуМедленный("ПриходныйКассовыйОрдер", ДатаДокумента, Основание);
		Возврат Док;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция НайтиРКО(Основание, ДатаДокумента)// у возврата нет № заказа, НомерЗаказа)
	//Док = НайтиДокументПоСвойству("РасходныйКассовыйОрдер", ДатаДокумента, НомерЗаказа);
	//Если ЗначениеЗаполнено(Док) Тогда
	//	Возврат Док.Ссылка;
	//КонецЕсли;
	Запрос = Новый Запрос;
	//лучше по № заказа в регистрах сведений
	//НомерПлатежногоДокумента
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйКассовыйОрдер.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	               |ГДЕ
	               |	РасходныйКассовыйОрдер.Дата >= &Дата
	               |	И РасходныйКассовыйОрдер.Основание = &Основание";
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция НайтиОперацияПоПлатежнойКарте(Основание, ДатаДокумента, НомерЗаказа, ЭтоВозврат = Ложь)
	//Док = НайтиДокументПоСвойству("ОперацияПоПлатежнойКарте", ДатаДокумента, Основание, ?(НомерЗаказа<>0, Ложь, Истина));//когда по оплате делается возврат, то в ответе сервера нет привязки к заказу
	Док = НайтиДокументПоСвойству("ОперацияПоПлатежнойКарте", ДатаДокумента, Основание, ЭтоВозврат);
	Если ЗначениеЗаполнено(Док) Тогда
		Возврат Док.Ссылка;
	КонецЕсли;
	Запрос = Новый Запрос;
	Если НЕ ЭтоВозврат Тогда //НомерЗаказа <> 0 Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОперацияПоПлатежнойКарте.Ссылка
		               |ИЗ
		               |	Документ.ОперацияПоПлатежнойКарте КАК ОперацияПоПлатежнойКарте
		               |ГДЕ
		               |	ОперацияПоПлатежнойКарте.Дата >= &Дата
		               |	И ОперацияПоПлатежнойКарте.НомерПлатежнойКарты = &Основание
		               |	И ОперацияПоПлатежнойКарте.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОперацияПоПлатежнойКарте.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ОперацияПоПлатежнойКарте КАК ОперацияПоПлатежнойКарте
		               |ГДЕ
		               |	ОперацияПоПлатежнойКарте.Дата >= &Дата
		               |	И ОперацияПоПлатежнойКарте.НомерПлатежнойКарты = &Основание
		               |	И ОперацияПоПлатежнойКарте.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)";
	КонецЕсли;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда //в этих версиях не заполняется номер платежной карты
		//Док = НайтиДокументПоСвойствуМедленный("ОперацияПоПлатежнойКарте", ДатаДокумента, Основание, ?(НомерЗаказа<>0, Ложь, Истина));
		//Док = НайтиДокументПоСвойствуМедленный("ОперацияПоПлатежнойКарте", ДатаДокумента, Основание, ?(НомерЗаказа<>0, Ложь, Истина));
		Док = НайтиДокументПоСвойствуМедленный("ОперацияПоПлатежнойКарте", ДатаДокумента, Основание, ЭтоВозврат);
		Возврат Док;
	КонецЕсли;

	Если МедленныйПоискОплат Тогда
		//Док = НайтиДокументПоСвойствуМедленный("ОперацияПоПлатежнойКарте", ДатаДокумента, Основание, ?(НомерЗаказа<>0, Ложь, Истина));
		Док = НайтиДокументПоСвойствуМедленный("ОперацияПоПлатежнойКарте", ДатаДокумента, Основание, ЭтоВозврат);
		Возврат Док;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция НайтиПриходНаСчет(НомерВходящегоДокумента, ДатаВходящегоДокумента, НомерЗаказа)
	Док = НайтиДокументПоСвойству("ПоступлениеБезналичныхДенежныхСредств", ДатаВходящегоДокумента, НомерЗаказа);
	Если ЗначениеЗаполнено(Док) Тогда
		Возврат Док.Ссылка;
	КонецЕсли;
	Запрос = Новый Запрос;
	//Если НомерЗаказа <> 0 Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПоступлениеБезналичныхДенежныхСредств.Ссылка
		               |ИЗ
		               |	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
		               |ГДЕ
		               |	ПоступлениеБезналичныхДенежныхСредств.НомерВходящегоДокумента = &НомерВходящегоДокумента
		               |	И ПоступлениеБезналичныхДенежныхСредств.ДатаВходящегоДокумента = &ДатаВходящегоДокумента";
	//Иначе
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	СписаниеБезналичныхДенежныхСредств.Ссылка
	//	               |ИЗ
	//	               |	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	//	               |ГДЕ
	//	               |	СписаниеБезналичныхДенежныхСредств.НомерВходящегоДокумента = &НомерВходящегоДокумента
	//	               |	И СписаниеБезналичныхДенежныхСредств.ДатаВходящегоДокумента = &ДатаВходящегоДокумента";
	//КонецЕсли;
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", СтрЗаменить(НомерВходящегоДокумента,"ЭЛЕКТРОН","ЭЛЕКТР"));
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(ДатаВходящегоДокумента));
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	//если это это ПоступлениеБезналичныхДенежныхСредств загружено из банка, то НомерВходящегоДокумента и ДатаВходящегоДокумента будут заполнены данными банка
	Если МедленныйПоискОплат Тогда
		//Док = НайтиДокументПоСвойствуМедленный("ПоступлениеБезналичныхДенежныхСредств", ДатаВходящегоДокумента, НомерЗаказа);
		Док = НайтиДокументПоСвойствуМедленный("ПоступлениеБезналичныхДенежныхСредств", ДатаВходящегоДокумента, НомерВходящегоДокумента);
		Возврат Док;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция НайтиРасходСоСчета(НомерВходящегоДокумента, ДатаВходящегоДокумента) //в возврате его нет, НомерЗаказа)
	//Док = НайтиДокументПоСвойству("СписаниеБезналичныхДенежныхСредств", ДатаВходящегоДокумента, НомерЗаказа);
	//Если ЗначениеЗаполнено(Док) Тогда
	//	Возврат Док.Ссылка;
	//КонецЕсли;
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СписаниеБезналичныхДенежныхСредств.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		               |ГДЕ
		               |	СписаниеБезналичныхДенежныхСредств.НомерВходящегоДокумента = &НомерВходящегоДокумента
		               |	И СписаниеБезналичныхДенежныхСредств.ДатаВходящегоДокумента = &ДатаВходящегоДокумента";
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", СтрЗаменить(НомерВходящегоДокумента,"ЭЛЕКТРОН","ЭЛЕКТР"));
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(ДатаВходящегоДокумента));
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция НайтиЧек(paymentNumber, createDateTime, orderId=0)
	Запрос = Новый Запрос;
	//или можно по Контрагент.Партнер
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ЧекККМ) КАК Объект
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Значение = &Значение
	               |	И ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект ССЫЛКА Документ.ЧекККМ
	               |	И ДополнительныеСведения.Объект.Дата >= &Дата";
	
	Если orderId <> 0 Тогда
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЧекККМ", "ЧекККМВозврат");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Значение", paymentNumber);
	Запрос.УстановитьПараметр("Свойство", НомерПлатежногоДокумента);
	Запрос.УстановитьПараметр("Дата", createDateTime);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Объект;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

//Чек ККМ
Процедура СоздатьЧекиККМ()
	//Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока50 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(50));
	НомерПлатежногоДокумента = НайтиДобавитьСвойствоДокумента("НомерПлатежногоДокумента", ТипИдентификатораСтрока50);//Номер платежного документа - в платежных документах
	СостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(КассаККМ);
	//ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены,,"Кассир");
	Для Каждого ТекСтрока Из ТаблицаОплат Цикл
		Если ИспользоватьТранзакции Тогда НачатьТранзакцию(); КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
			сообщить("Не найден контрагент с ид="+ТекСтрока.ИдентификаторКонтрагента);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда //пока не привязанная ни к чему оплата
				Если ТекСтрока.orderId = 0 Тогда //возврат денежных средств, ищем
					//сообщить("Возврат денежных средств: "+ТекСтрока.сomment+" "+Формат(ТекСтрока.OnlinePaymentId, "ЧГ=0"));
					//!!! Документы.РасходныйКассовыйОрдер.СоздатьДокумент(), как его искать
				КонецЕсли;
			Иначе
			КонецЕсли;
			Док = ТекСтрока.Документ;
			ДокОбъект = Док.ПолучитьОбъект();
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) И ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			Продолжить;//пока не привязано, но документ есть, не трогаем
		Иначе
			Док = Неопределено;
		КонецЕсли;
		//Если (Лев(ТекСтрока.PaymentType, 8) = "Наличный") Тогда
		Если ТекСтрока.paymentTypeCode = 2 ИЛИ (ТекСтрока.paymentTypeCode = 1 И НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал)) Тогда //Код типа платежа: 0 - Безналичный, 1 - Электронный, 2 - Наличный
			НаличнаяОплата = Истина;
		Иначе
			НаличнаяОплата = Ложь;
		КонецЕсли;
		Запрос = Новый Запрос;
		Если ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			Док = ТекСтрока.Документ;
			Если Док.СуммаДокумента = ТекСтрока.amount И ЗначениеЗаполнено(Док.КассаККМ) Тогда
				Продолжить;
			КонецЕсли;
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.Товары.Очистить();
		Иначе
			Док = Неопределено;
		КонецЕсли;
		Если Док = Неопределено Тогда
			//ЗаписьВЛог("Не найден ПКО "+Формат(ТекСтрока.НомерЗаявки,"ЧГ=0"));
			Если ТекСтрока.orderId = 0 Тогда //возврат денежных средств
				ДокОбъект = Документы.ЧекККМВозврат.СоздатьДокумент();
			Иначе
				ДокОбъект = Документы.ЧекККМ.СоздатьДокумент();
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.Комментарий = ТекСтрока.сomment+" "+Формат(ТекСтрока.OnlinePaymentId, "ЧГ=0")+" orderId = "+Формат(ТекСтрока.orderId, "ЧГ=0");
		//Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
		//Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
		ДокОбъект.Кассир = Пользователи.ТекущийПользователь();
		//
		//НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
		
		ДокОбъект.Валюта = Валюта;
		Если ЦеныПродажиВРублях Тогда//чек ккм
			ДокОбъект.Валюта = Рубли;
		КонецЕсли;
		Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
			ДокОбъект.Валюта = Валюта;
		КонецЕсли;
		ДокОбъект.ВидЦены = ВидЦены;//или надо вид цены продажи
		ДокОбъект.КассаККМ = КассаККМ;
		ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
		ДокОбъект.Дата = ТекСтрока.createDateTime;
		//ДокОбъект.ОтложенДо = ТекущаяДата() + 1;//ДокОбъект.Дата;
		ДокОбъект.Партнер = ТекСтрока.Контрагент.Партнер;
		ДокОбъект.Комментарий = ТекСтрока.paymentNumber;
		ДокОбъект.КассоваяСмена = СостояниеКассовойСмены.КассоваяСмена;
		ДокОбъект.Склад = Склад;
		//ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован;//.Отложен
		ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.Отложен;//потом вроде должен РМК открываться
		Если НаличнаяОплата Тогда
			ДокОбъект.ПолученоНаличными = ТекСтрока.amount;
			//ДокОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
		Иначе
			//ДокОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
		КонецЕсли;
		ДокОбъект.Организация = Организация;
		Если ТекСтрока.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ДокОбъект.Организация = ОрганизацияРозница;
		КонецЕсли;
		//Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
		//	ДокОбъект.Организация = ТекСтрока.Организация;
		//Конецесли;
		ДокОбъект.СуммаДокумента = ТекСтрока.amount;
		//ДокОбъект.Основание = ТекСтрока.paymentNumber;
		ДокОбъект.Комментарий = ТекСтрока.paymentNumber;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
			//ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит;//ТоварЗарезервирован;//.Отложен
			СтрокаДокумента = ДокОбъект.Товары.Добавить();
			СтрокаДокумента.Номенклатура = АвансЧекККМ;
			СтрокаДокумента.КоличествоУпаковок = 1;
			СтрокаДокумента.Количество = 1;
			СтрокаДокумента.Сумма = ДокОбъект.ПолученоНаличными;
			СтрокаДокумента.Цена = ДокОбъект.ПолученоНаличными;
			СтрокаДокумента.Продавец = ДокОбъект.Кассир;
			ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтрокаДокумента);
		Иначе
			ДокОбъект.Товары.Загрузить(ТекСтрока.ЗаказКлиента.Товары.Выгрузить());
			Для Каждого СтрокаДокумента Из ДокОбъект.Товары Цикл
				СтрокаДокумента.Продавец = ДокОбъект.Кассир;
			КонецЦикла;
			ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
			Если НаличнаяОплата Тогда
				ДокОбъект.ПолученоНаличными = ДокОбъект.СуммаДокумента;
			КонецЕсли;
		КонецЕсли;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДок); 
			ДокументПроведен = Истина;
			ЗаписьВЛог("Проведен "+СокрЛП(ДокОбъект)+" по заявке № "+Формат(ТекСтрока.orderId,"ЧГ=0")+" "+ТекСтрока.paymentType+" " +ТекСтрока.createDateTime,1,Истина);
		Исключение
			ДокОбъект.Записать();
			ЗаписьВЛог("Не удалось провести "+СокрЛП(ДокОбъект)+ОписаниеОшибки(),5,Истина);
		КонецПопытки;
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
		МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
		МенеджерЗаписи.Значение = ТекСтрока.paymentNumber;
		МенеджерЗаписи.Записать();
		ТекСтрока.Документ = ДокОбъект.Ссылка;
		Если ИспользоватьТранзакции Тогда ЗафиксироватьТранзакцию(); КонецЕсли;
		//учетбеззабот.рф/bukhgalteriya-3-0/main/bukhgalteriya-3-0/onlain-kassy-chast-2-pechat-chekov-v-1s
		//пробить чек
		//ПробитьЧек(ДокОбъект.Ссылка);
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьОплаты() Экспорт
	ЗаполнитьСоответствияДляОплат();
	Если Лев(АдресСервиса, 5) = "mrcar" Тогда
		Этоmrcar = Истина;
	Иначе
		Этоmrcar = Ложь;
	КонецЕсли;
	Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		РазмерСтавкиНДС = 0;
		РазмерСтавкиНДС100 = 100;
	Иначе
		Если НЕ УТКазахстан Тогда
			РазмерСтавкиНДС = 20;
			РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
		Иначе
			РазмерСтавкиНДС = 12;
			РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
		КонецЕсли;
	КонецЕсли;
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока50 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(50));
	НомерПлатежногоДокумента = НайтиДобавитьСвойствоДокумента("НомерПлатежногоДокумента", ТипИдентификатораСтрока50);//Номер платежного документа - в платежных документах
	ЕстьЗаказВРасшифровкеОперацияПоПлатежнойКарте = Метаданные.Документы.ОперацияПоПлатежнойКарте.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("Заказ") <> Неопределено;
	ЕстьКурсЗнаменательВзаиморасчетов = Метаданные.Документы.ОперацияПоПлатежнойКарте.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("КурсЗнаменательВзаиморасчетов") <> Неопределено;
	ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте = Метаданные.Документы.ОперацияПоПлатежнойКарте.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("УдалитьЗаказ") <> Неопределено;
	Если ИспользоватьПривязкиКассКМенеджерам Тогда
		СоответствиеОрганизаций = Новый Соответствие;
		СоответствиеКасс = Новый Соответствие;
		СоответствиеЭквайринговыхТерминалов = Новый Соответствие;
		Для Каждого ТекСтрока Из ТаблицаКасс Цикл
			Если ТекСтрока.editorId = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
				СоответствиеОрганизаций.Вставить(ТекСтрока.editorId, ТекСтрока.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Касса) Тогда
				СоответствиеКасс.Вставить(ТекСтрока.editorId, ТекСтрока.Касса);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.ЭквайринговыйТерминал) Тогда
				СоответствиеЭквайринговыхТерминалов.Вставить(ТекСтрока.editorId, ТекСтрока.ЭквайринговыйТерминал);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СоответствиеДоговоровЭквайринга = Новый Соответствие;
	Для Каждого ТекСтрока Из ТипыПлатежей Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДоговорЭквайринга) Тогда
			СоответствиеДоговоровЭквайринга.Вставить(ТекСтрока.id, ТекСтрока.ДоговорЭквайринга);
		КонецЕсли;
	КонецЦикла;
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	//НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
	ЗапросСчет = Новый Запрос;
	ЗапросСчет.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	БанковскиеСчетаКонтрагентов.Ссылка
	                |ИЗ
	                |	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	                |ГДЕ
	                |	БанковскиеСчетаКонтрагентов.Владелец = &Владелец";
	Для Каждого ТекСтрока Из ТаблицаОплат Цикл
		Если ИспользоватьТранзакции Тогда НачатьТранзакцию(); КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
			сообщить("Не найден контрагент с ид="+ТекСтрока.ИдентификаторКонтрагента);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда //пока не привязанная ни к чему оплата
				Если ТекСтрока.Возврат Тогда //возврат денежных средств, ищем
					//уже в другом месте нашли
				КонецЕсли;
			Иначе
			КонецЕсли;
			Док = ТекСтрока.Документ;
			ОбновитьРасшифровкаПлатежа = Ложь;
			СтрокРасшифровкаПлатежаВДокументе = Док.РасшифровкаПлатежа.Количество();
			Если СтрокРасшифровкаПлатежаВДокументе > 0 Тогда //уже создан и заполнен документ, не трогаем, но проверяем, вдруг привязок стало больше
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
					Строка0Заказ = Док.РасшифровкаПлатежа[0].УдалитьЗаказ;
					Если НЕ ЗначениеЗаполнено(Строка0Заказ) Тогда
						Строка0Заказ = Док.РасшифровкаПлатежа[0].ОснованиеПлатежа;
					КонецЕсли;
				Иначе
					Строка0Заказ = Док.РасшифровкаПлатежа[0].Заказ;
				КонецЕсли;
				Если ЗначениеЗаполнено(Строка0Заказ) Тогда
					Если ТипЗнч(Строка0Заказ) <> Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
						Если НЕ ТекСтрока.Возврат Тогда
							//Если ТипЗнч(Строка0Заказ) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"") Тогда
							Если СтрокРасшифровкаПлатежаВДокументе<ТекСтрока.Привязок Тогда
								ОбновитьРасшифровкаПлатежа = Истина;
							Иначе
								Продолжить;//пока не привязано, но документ есть, не трогаем	
							КонецЕсли;
						КонецЕсли;
					Иначе
						ОбновитьРасшифровкаПлатежа = Истина;
					КонецЕсли;
				ИначеЕсли ПривязыватьПлатежиТолькоКЗаказам=Ложь Или Не ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда //пока нет реализации по документу, тоже не трогаем
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.РасшифровкаПлатежа.Очистить();
			//ТекСтрока.Документ = ДокОбъект.Ссылка;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) И ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			Если НЕ ТекСтрока.Возврат Тогда
				Продолжить;//пока не привязано, но документ есть, не трогаем
			КонецЕсли;
			Если ТекСтрока.Возврат И ЗначениеЗаполнено(ТекСтрока.ДокументВозврат) Тогда
				Продолжить;//пока не привязано, но документ есть, не трогаем
			КонецЕсли;
		Иначе
			Док = Неопределено;
		КонецЕсли;
		//если было 2 реализации по двум заказам поставщикам, правильно будет делать?
		//Если (Лев(ТекСтрока.PaymentType, 8) = "Наличный") Тогда
		//в новых конфигурациях появилась ОперацияПоЯндексКассе
		Если (ДокументыПоТипамПлатежей И ЗначениеЗаполнено(ТекСтрока.Касса)) Или (НЕ ДокументыПоТипамПлатежей  И ((ТекСтрока.paymentTypeCode = 2 ИЛИ (ТекСтрока.paymentTypeCode = 1 И НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал))))) Тогда //Код типа платежа: 0 - Безналичный, 1 - Электронный, 2 - Наличный
			#Область СоздатьПКО
			//создаем приходный кассовый ордер
			//Док = НайтиПриходныйКассовыйОрдер(ТекСтрока.ЗаказКлиента);//!!! ТекСтрока.paymentNumber, ТекСтрока.createDateTime);
			СоздаватьДокумент = Истина;
			Запрос = Новый Запрос;
			Если ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
				Док = ТекСтрока.Документ;
				Если Док.СуммаДокумента = ТекСтрока.amount Тогда
					ТекСтрока.Документ = Док.Ссылка;
					Если НЕ ТекСтрока.Возврат И НЕ ОбновитьРасшифровкаПлатежа Тогда
						//Продолжить;
						СоздаватьДокумент = Ложь;
					КонецЕсли;
					Если ТекСтрока.Возврат И ЗначениеЗаполнено(ТекСтрока.ДокументВозврат) Тогда
						Если ТекСтрока.ДокументВозврат.СуммаДокумента = ТекСтрока.СуммаВозврат Тогда
							СоздаватьДокумент = Ложь;
							//Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ДокОбъект = Док.ПолучитьОбъект();
				ДокОбъект.РасшифровкаПлатежа.Очистить();
			Иначе
				ДокОбъект = Неопределено;
				Док = Неопределено;
			КонецЕсли;
			Если СоздаватьДокумент Тогда
				Если Док = Неопределено Тогда
					Если (НЕ ТекСтрока.Возврат) Или (ТекСтрока.amount > 0) Тогда //по одному документу может быть и платеж и частичный возврат
						ДокОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
						ДокОбъект.Заполнить(Неопределено);
						ДокОбъект.Валюта = Валюта;
					КонецЕсли;
				КонецЕсли;
				Если Не ДокОбъект = Неопределено Тогда //вдруг возврат был на всю сумму
					ДокОбъект.Комментарий = ТекСтрока.сomment+" "+Формат(ТекСтрока.OnlinePaymentId, "ЧГ=0")+" orderId = "+Формат(ТекСтрока.orderId, "ЧГ=0");
					Если Отладка Тогда
						сообщить("создаем ПКО "+ДокОбъект.Комментарий);
					КонецЕсли;
					ДокОбъект.Валюта = Валюта;
					Если ЦеныПродажиВРублях Тогда//возврат, оплата
						ДокОбъект.Валюта = Рубли;
					КонецЕсли;
					Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
						ДокОбъект.Валюта = Валюта;
					КонецЕсли;
					Если (ДокументыПоТипамПлатежей И ЗначениеЗаполнено(ТекСтрока.Касса)) Тогда
						ДокОбъект.Касса = ТекСтрока.Касса;
					Иначе
						ДокОбъект.Касса = Касса;
					КонецЕсли;
					ДокОбъект.БанковскийСчет = БанковскийСчет;
					ДокОбъект.Организация = Организация;
					Если Организация <> ДокОбъект.Касса.Владелец Тогда
						ДокОбъект.Организация = ДокОбъект.Касса.Владелец;
					КонецЕсли;
					//Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
					//	ДокОбъект.Организация = ОрганизацияРозница;
					//КонецЕсли;
					Если ИспользоватьПривязкиКассКМенеджерам Тогда
						ВремОрганизация = СоответствиеОрганизаций.Получить(ТекСтрока.editorId);
						Если ВремОрганизация<>Неопределено Тогда
							ДокОбъект.Организация = ВремОрганизация;
						КонецЕсли;
						ВремКасса = СоответствиеКасс.Получить(ТекСтрока.editorId);
						Если ВремКасса<>Неопределено Тогда
							ДокОбъект.Касса = ВремКасса;
						КонецЕсли;
					КонецЕсли;
					ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
					ДокОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
					ДокОбъект.Дата = ТекСтрока.createDateTime;
					ДокОбъект.Контрагент = ТекСтрока.Контрагент;
					Если ИспользоватьДоговорыСКлиентами Тогда
						ДокОбъект.Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект);
						Если НЕ ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
							ПолучитьДоговорПоУмолчаниюСервер(ДокОбъект);//не всегда срабатывает
							//ДокОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, Неопределено);//не нужны хоз.операции так как в договоре реализация, а в документе поступление оплаты
						КонецЕсли;
					КонецЕсли;
					//ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
					ДокОбъект.Основание = ТекСтрока.paymentNumber;
					Если ПривязыватьПлатежиТолькоКЗаказам Тогда
						ДокОбъект.ДокументОснование = ТекСтрока.ЗаказКлиента;//тогда в журнале заказов не будет оплата 100% и долг 100%
					Иначе
						ДокОбъект.ДокументОснование = ТекСтрока.Реализация;
					КонецЕсли;
					ДокОбъект.ПринятоОт = СокрЛП(ТекСтрока.Контрагент);//"orderId = "+Формат(ТекСтрока.orderId,"ЧГ=0")+", paymentLinkId = "+Формат(ТекСтрока.paymentLinkId,"ЧГ=0");
					Если Не ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
						ДокОбъект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					КонецЕсли;
					ДокОбъект.Приложение = ТекСтрока.paymentType;//+" EditorId=" +Формат(ТекСтрока.EditorId,"ЧГ=0")+" "+"orderId = "+Формат(ТекСтрока.orderId,"ЧГ=0")+", paymentLinkId = "+Формат(ТекСтрока.paymentLinkId,"ЧГ=0");
					ДокОбъект.СуммаДокумента = ТекСтрока.amount;
					ДокОбъект.Основание = ТекСтрока.paymentNumber;
					//если несколько привязано
					Основание = "";
					Если РасширеннаяПривязкаОплат И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
						//СтрокиПривязок = paymentOrderLinks.НайтиСтроки(Новый Структура("paymentNumber,Возврат", ТекСтрока.paymentNumber, Ложь));//paymentNumber могут двоиться
						СтрокиПривязок = paymentOrderLinks.НайтиСтроки(Новый Структура("paymentId,Возврат", ТекСтрока.paymentId, Ложь));
						Для Каждого СтрокаПривязок Из СтрокиПривязок Цикл
							РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
							РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
							Если ЦеныПродажиВРублях Тогда//оплата
								РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
							КонецЕсли;
							РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;
							Если Этоmrcar Тогда
								РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Договор;
								РасшифровкаПлатежа.ОснованиеПлатежа = ДокОбъект.Договор;
								ЗаписьВЛог("Договор в основании: "+ТекСтрока.paymentNumber);
							Иначе
								Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
									РасшифровкаПлатежа.УдалитьЗаказ = СтрокаПривязок.ЗаказКлиента;
								Иначе
									РасшифровкаПлатежа.Заказ = СтрокаПривязок.ЗаказКлиента;
								КонецЕсли;
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаПривязок.ЗаказКлиента) Тогда
								РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.ЗаказКлиента;//а то в чеке некорректно отображается
								Основание = Основание + СокрЛП(СтрокаПривязок.ЗаказКлиента);
							Иначе
								Если НЕ ПривязыватьПлатежиТолькоКЗаказам Тогда
									РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.Реализация;
									Основание = Основание + СокрЛП(ТекСтрока.Реализация);
								КонецЕсли;
							КонецЕсли;
							Если Не УТ111 Тогда
								РасшифровкаПлатежа.Организация = ДокОбъект.Организация;
							КонецЕсли;
							РасшифровкаПлатежа.Сумма = СтрокаПривязок.amount;
							РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
							РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
							Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
								Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
									Если ЗначениеЗаполнено(СтрокаПривязок.ЗаказКлиента) Тогда
										РасшифровкаПлатежа.ОбъектРасчетов = ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(СтрокаПривязок.ЗаказКлиента.ИдентификаторПлатежа);
									//ИначеЕсли ЗначениеЗаполнено(СтрокаПривязок.Реализация) Тогда //в paymentOrderLinks нет реализации
									//	РасшифровкаПлатежа.ОбъектРасчетов = ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(СтрокаПривязок.Реализация.ИдентификаторПлатежа);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							Если ВерсияУТ <> "3.2.3.18" Тогда
								ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
							КонецЕсли;
							Если ЕстьКурсЗнаменательВзаиморасчетов Тогда
								РасшифровкаПлатежа.КурсЗнаменательВзаиморасчетов = 1;
								РасшифровкаПлатежа.КурсЧислительВзаиморасчетов = 1;
							КонецЕсли;
						КонецЦикла;
					Иначе
						//если по договорам, а не по заказам, тогда надо по другому писать
						РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
						РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
						Если ЦеныПродажиВРублях Тогда//оплата
							РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
						КонецЕсли;
						РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;
						Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
							Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
								РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Договор;
							Иначе
								РасшифровкаПлатежа.Заказ = ДокОбъект.Договор;
							КонецЕсли;
							РасшифровкаПлатежа.ОснованиеПлатежа = ДокОбъект.Договор;
						Иначе
							Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
								РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.ЗаказКлиента;
								Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
									РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.ЗаказКлиента;//а то в чеке некорректно отображается
								Иначе
									Если НЕ ПривязыватьПлатежиТолькоКЗаказам Тогда
										РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.Реализация;
									КонецЕсли;
								КонецЕсли;
							Иначе
								РасшифровкаПлатежа.Заказ = ТекСтрока.ЗаказКлиента;
								Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
									РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.ЗаказКлиента;//а то в чеке некорректно отображается
								Иначе
									Если НЕ ПривязыватьПлатежиТолькоКЗаказам Тогда
										РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.Реализация;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если Не УТ111 Тогда
							РасшифровкаПлатежа.Организация = ДокОбъект.Организация;
						КонецЕсли;
						РасшифровкаПлатежа.Сумма = ТекСтрока.amount;
						РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
						РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
						Если ВерсияУТ <> "3.2.3.18" Тогда
							ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
						КонецЕсли;
						Если ЕстьКурсЗнаменательВзаиморасчетов Тогда
							РасшифровкаПлатежа.КурсЗнаменательВзаиморасчетов = 1;
							РасшифровкаПлатежа.КурсЧислительВзаиморасчетов = 1;
						КонецЕсли;
					КонецЕсли;
					Если Основание <> "" Тогда
						ДокОбъект.Основание = Основание;
					КонецЕсли;
					СоздатьЗаполнитьДопРеквизитДокумента(ТекСтрока, ДокОбъект);
					ДокОбъект.Записать(); 
					//в 11.4 всё равно не выводит основание платежа, так как это заказ
					//Если Не ЗначениеЗаполнено(ДокОбъект.ДокументОснование) Тогда
					//	Для Каждого РасшифровкаПлатежа Из ДокОбъект.РасшифровкаПлатежа Цикл
					//		Если Не ЗначениеЗаполнено(РасшифровкаПлатежа.Заказ) Тогда
					//			РасшифровкаПлатежа.Заказ = ДокОбъект.Ссылка;
					//		КонецЕсли;
					//	КонецЦикла;
					//	ДокОбъект.Записать(); 
					//КонецЕсли;

					Попытка
						ДокОбъект.Записать(РежимЗаписиДок); 
						ДокументПроведен = Истина;
						ЗаписьВЛог("Проведен "+СокрЛП(ДокОбъект)+" по заявке № "+Формат(ТекСтрока.orderId,"ЧГ=0")+" "+ТекСтрока.paymentType+" " +ТекСтрока.createDateTime,1);
					Исключение
						ЗаписьВЛог("Не удалось провести "+СокрЛП(ДокОбъект)+ОписаниеОшибки(),5,Истина);
					КонецПопытки;
					ТекСтрока.Документ = ДокОбъект.Ссылка;
					МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект = ТекСтрока.Документ;
					МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
					МенеджерЗаписи.Значение = ТекСтрока.paymentNumber;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
			#КонецОбласти
			
			#Область СозданиеВозвратПКО_РКО
			//теперь делаем возврат
			Если (НЕ НеСоздаватьВозвратыФинансов) И ТекСтрока.Возврат И ТекСтрока.СуммаВозврат > 0 Тогда
				Если ЗначениеЗаполнено(ТекСтрока.ДокументВозврат) Тогда
					Док = ТекСтрока.ДокументВозврат;
					Если Док.СуммаДокумента = ТекСтрока.СуммаВозврат Тогда
						Если Не ЗначениеЗаполнено(ТекСтрока.Документ) Тогда //должен быть приходник, по которому возврат делали
							ТекСтрока.Документ = Док.Ссылка;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					ДокОбъект = Док.ПолучитьОбъект();
					ДокОбъект.РасшифровкаПлатежа.Очистить();
				Иначе
					ДокОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
					ДокОбъект.Заполнить(Неопределено);
					ДокОбъект.Валюта = Валюта;
					Док = Неопределено;
				КонецЕсли;
				ДокОбъект.Комментарий = ТекСтрока.сomment+" "+Формат(ТекСтрока.OnlinePaymentId, "ЧГ=0")+" orderId = возврат ";
				Если Отладка Тогда
					сообщить("создаем возврат ПКО "+ДокОбъект.Комментарий);
				КонецЕсли;
				ДокОбъект.Валюта = Валюта;
				Если ЦеныПродажиВРублях Тогда//заказ клиенту
					ДокОбъект.Валюта = Рубли;
				КонецЕсли;
				Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
					ДокОбъект.Валюта = Валюта;
				КонецЕсли;
				Если (ДокументыПоТипамПлатежей И ЗначениеЗаполнено(ТекСтрока.Касса)) Тогда
					ДокОбъект.Касса = ТекСтрока.Касса;
				Иначе
					ДокОбъект.Касса = Касса;
				КонецЕсли;
				ДокОбъект.БанковскийСчет = БанковскийСчет;
				ДокОбъект.Организация = Организация;
				Если Организация <> Касса.Владелец Тогда
					ДокОбъект.Организация = Касса.Владелец;
				КонецЕсли;
				//Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				//	ДокОбъект.Организация = ОрганизацияРозница;
				//КонецЕсли;
				Если ИспользоватьПривязкиКассКМенеджерам Тогда
					ВремОрганизация = СоответствиеОрганизаций.Получить(ТекСтрока.editorId);
					Если ВремОрганизация<>Неопределено Тогда
						ДокОбъект.Организация = ВремОрганизация;
					КонецЕсли;
					ВремКасса = СоответствиеКасс.Получить(ТекСтрока.editorId);
					Если ВремКасса<>Неопределено Тогда
						ДокОбъект.Касса = ВремКасса;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДокОбъект.Организация) Тогда
					ДокОбъект.Организация = Организация;
				КонецЕсли;
				ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
				ДокОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				ДокОбъект.Дата = ТекСтрока.createDateTime;
				Если ЗначениеЗаполнено(ТекСтрока.ДатаВозврата) Тогда
					ДокОбъект.Дата = ТекСтрока.ДатаВозврата;
				КонецЕсли;
				ДокОбъект.Контрагент = ТекСтрока.Контрагент;
				ДокОбъект.Основание = ТекСтрока.paymentNumber;
				ДокОбъект.ДокументОснование = ТекСтрока.Реализация;//по заказу клиента нельзя, только по заказу поставщика, или приобретение, реализации нет в документах основаниях
				//ДокОбъект.ЗаказКлиента = ТекСтрока.ЗаказКлиента; - можно так
				ДокОбъект.Выдать = СокрЛП(ТекСтрока.Контрагент);//"orderId = "+Формат(ТекСтрока.orderId,"ЧГ=0")+", paymentLinkId = "+Формат(ТекСтрока.paymentLinkId,"ЧГ=0");
				Если ИспользоватьДоговорыСКлиентами Тогда
					ПолучитьДоговорПоУмолчаниюСервер(ДокОбъект);
					//ДокОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, Неопределено);//не нужны хоз.операции так как в договоре реализация, а в документе поступление оплаты
				КонецЕсли;
				ДокОбъект.Приложение = ТекСтрока.paymentType;//+" EditorId=" +Формат(ТекСтрока.EditorId,"ЧГ=0")+" "+"orderId = "+Формат(ТекСтрока.orderId,"ЧГ=0")+", paymentLinkId = "+Формат(ТекСтрока.paymentLinkId,"ЧГ=0");
				ДокОбъект.СуммаДокумента = ТекСтрока.СуммаВозврат;
				ДокОбъект.Основание = ТекСтрока.paymentNumber;
				ДокОбъект.ПоДокументу = ТекСтрока.paymentNumber;
				//если несколько привязано
				РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
				РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
				Если ЦеныПродажиВРублях Тогда//оплата
					РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
				КонецЕсли;
				РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;
				Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					Если ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
						РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Договор;  
					Иначе
						РасшифровкаПлатежа.Заказ = ДокОбъект.Договор;
					КонецЕсли;
				Иначе
					Если ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
						РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.ЗаказКлиента;
						Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
							РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.ЗаказКлиента;//а то в чеке некорректно отображается
						Иначе
							РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.Реализация;
						КонецЕсли;
					Иначе
						РасшифровкаПлатежа.Заказ = ТекСтрока.ЗаказКлиента;
						Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
							РасшифровкаПлатежа.Заказ = ТекСтрока.ЗаказКлиента;//а то в чеке некорректно отображается
						Иначе
							РасшифровкаПлатежа.Заказ = ТекСтрока.Реализация;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Не УТ111 Тогда
					РасшифровкаПлатежа.Организация = ДокОбъект.Организация;
				КонецЕсли;
				РасшифровкаПлатежа.Сумма = ТекСтрока.СуммаВозврат;
				РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
				РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
				Если НЕ УТКазахстан Тогда
					ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
				КонецЕсли;     
				
				СоздатьЗаполнитьДопРеквизитДокумента(ТекСтрока, ДокОбъект);
				ДокОбъект.Записать(); 
				Попытка
					ДокОбъект.Записать(РежимЗаписиДок); 
					ДокументПроведен = Истина;
					ЗаписьВЛог("Проведен "+СокрЛП(ДокОбъект)+" по заявке № "+Формат(ТекСтрока.orderId,"ЧГ=0")+" "+ТекСтрока.paymentType+" " +ТекСтрока.createDateTime,1);
				Исключение
					ДокОбъект.Записать();
					ЗаписьВЛог("Не удалось провести "+СокрЛП(ДокОбъект)+ОписаниеОшибки(),5,Истина);
				КонецПопытки;
				ТекСтрока.ДокументВозврат = ДокОбъект.Ссылка;
				МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = ТекСтрока.ДокументВозврат;
				МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
				МенеджерЗаписи.Значение = ТекСтрока.paymentNumber;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			#КонецОбласти
			
			//Прервать;//!!! для отладки
		ИначеЕсли (ДокументыПоТипамПлатежей И (ЗначениеЗаполнено(ТекСтрока.ЭквайринговыйТерминал) Или ЗначениеЗаполнено(ТекСтрока.ДоговорЭквайринга))) Или (НЕ ДокументыПоТипамПлатежей  И (((ТекСтрока.paymentTypeCode = 1) И ЗначениеЗаполнено(ЭквайринговыйТерминал)))) Тогда
			//ОперацияПоПлатежнойКарте
			#Область СоздатьОперацияПоПлатежнойКарте
			Запрос = Новый Запрос;
			СоздаватьДокумент = Истина;
			Если ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
				Док = ТекСтрока.Документ;
				Если Док.СуммаДокумента = ТекСтрока.amount И НЕ ОбновитьРасшифровкаПлатежа Тогда
					ТекСтрока.Документ = Док.Ссылка;
					СоздаватьДокумент = Ложь;
					//Продолжить;//а то возврат не создастся
				КонецЕсли;
				ДокОбъект = Док.ПолучитьОбъект();
				ДокОбъект.РасшифровкаПлатежа.Очистить();
			Иначе
				Док = Неопределено;
			КонецЕсли;
			Если СоздаватьДокумент Тогда
				Если Док = Неопределено Тогда
					//Если существует привязка платежа и orderId: "0", то это возврат средств. 
					//Если есть платеж и есть заказ, не привязанные друг к другу, то запрос вернет пустой результат, т.к. привязка не существует.
					//ЗаписьВЛог("Не найден ПКО "+Формат(ТекСтрока.НомерЗаявки,"ЧГ=0"));
					//Если ТекСтрока.orderId = 0 Тогда //возврат денежных средств - аванс
					//	ДокОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
					//	ДокОбъект.Выдать = СокрЛП(ТекСтрока.Контрагент);
					//Иначе
						ДокОбъект = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
						ДокОбъект.Заполнить(Неопределено);
						ДокОбъект.Валюта = Валюта;
					//КонецЕсли;
				КонецЕсли;
				ДокОбъект.Комментарий = ТекСтрока.сomment+" "+Формат(ТекСтрока.OnlinePaymentId, "ЧГ=0")+" orderId = "+Формат(ТекСтрока.orderId, "ЧГ=0");
				Если Отладка Тогда
					сообщить("создаем оплату платежной картой "+ДокОбъект.Комментарий);
				КонецЕсли;
				ДокОбъект.Валюта = Валюта;
				Если ЦеныПродажиВРублях Тогда//оплата
					ДокОбъект.Валюта = Рубли;
				КонецЕсли;
				Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
					ДокОбъект.Валюта = Валюта;
				КонецЕсли;
				//ДокОбъект.Касса = Касса;
				//ДокОбъект.БанковскийСчет = БанковскийСчет;
				ДокОбъект.Организация = Организация;
				//Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				//	ДокОбъект.Организация = ОрганизацияРозница;
				//КонецЕсли;
				ДокОбъект.Дата = ТекСтрока.createDateTime;
				Если (ДокументыПоТипамПлатежей И ЗначениеЗаполнено(ТекСтрока.ЭквайринговыйТерминал)) Тогда
					ДокОбъект.ЭквайринговыйТерминал = ТекСтрока.ЭквайринговыйТерминал;
				Иначе
					ДокОбъект.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
				КонецЕсли;
				Если ИспользоватьПривязкиКассКМенеджерам Тогда
					ВремОрганизация = СоответствиеОрганизаций.Получить(ТекСтрока.editorId);
					Если ВремОрганизация<>Неопределено Тогда
						ДокОбъект.Организация = ВремОрганизация;
					КонецЕсли;
					
					ВремТерминал = СоответствиеЭквайринговыхТерминалов.Получить(ТекСтрока.editorId);
					Если ВремТерминал<>Неопределено Тогда
						ДокОбъект.ЭквайринговыйТерминал = ВремТерминал;
					КонецЕсли;
				КонецЕсли;
				ДокОбъект.Контрагент = ТекСтрока.Контрагент;
				//ДокОбъект.Партнер = ТекСтрока.Контрагент.Партнер;
				ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
				//ДокОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				Если ИспользоватьДоговорыСКлиентами Тогда
					ДокОбъект.Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект);
					Если НЕ ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
						ПолучитьДоговорПоУмолчаниюСервер(ДокОбъект);
						//ДокОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, Неопределено);//не нужны хоз.операции так как в договоре реализация, а в документе поступление оплаты
					КонецЕсли;
				КонецЕсли;
				Попытка
					//ДокОбъект.ОплатаВыполнена = Истина;
					ДокОбъект.ОплатаВыполнена = Ложь;
				Исключение
				КонецПопытки;
				ДокОбъект.НеКонтролироватьЗаполнениеЗаявки = Истина;
				//ДокОбъект.Покупатель = ТекСтрока.Контрагент;
				//ДокОбъект.Основание = ТекСтрока.paymentNumber;
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
					//ДокОбъект.НеКонтролироватьЗаполнениеЗаявки = Ложь;
					//ДокОбъект.НалогообложениеНДС = ПродажаНеОблагаетсяНДС
				Иначе
					ДокОбъект.НомерПлатежнойКарты = ТекСтрока.paymentNumber;
				КонецЕсли;
				//ДокОбъект.ДокументОснование = ТекСтрока.Реализация;
				//ДокОбъект.ЗаказКлиента = ТекСтрока.ЗаказКлиента; - можно так
				//ДокОбъект.ПринятоОт = СокрЛП(ТекСтрока.Контрагент);//"orderId = "+Формат(ТекСтрока.orderId,"ЧГ=0")+", paymentLinkId = "+Формат(ТекСтрока.paymentLinkId,"ЧГ=0");
				ДокОбъект.Комментарий = СокрЛП(ТекСтрока.Контрагент);
				//ДокОбъект.Приложение = ТекСтрока.paymentType;//+" EditorId=" +Формат(ТекСтрока.EditorId,"ЧГ=0")+" "+"orderId = "+Формат(ТекСтрока.orderId,"ЧГ=0")+", paymentLinkId = "+Формат(ТекСтрока.paymentLinkId,"ЧГ=0");
				ДокОбъект.СуммаДокумента = ТекСтрока.amount;
				ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;//СтрокаЗаявки.Ответственный;
				ДогЭквайринга = СоответствиеДоговоровЭквайринга.Получить(ТекСтрока.paymentTypeId);
				Если ЗначениеЗаполнено(ДогЭквайринга) Тогда
					ДокОбъект.ДоговорЭквайринга = ДогЭквайринга;
					Если Отладка Тогда
						сообщить(ТекСтрока.paymentNumber+" "+ДогЭквайринга);
					КонецЕсли;
				КонецЕсли;
				//если несколько привязано
				Если РасширеннаяПривязкаОплат И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					//СтрокиПривязок = paymentOrderLinks.НайтиСтроки(Новый Структура("paymentNumber,Возврат", ТекСтрока.paymentNumber, Ложь));//paymentNumber могут двоиться
					СтрокиПривязок = paymentOrderLinks.НайтиСтроки(Новый Структура("paymentId,Возврат", ТекСтрока.paymentId, Ложь));
					Для Каждого СтрокаПривязок Из СтрокиПривязок Цикл
						РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
						РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
						Если ЦеныПродажиВРублях И ЗначениеЗаполнено(Рубли) Тогда//оплата
							РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
						КонецЕсли;
						Если ЕстьКурсЗнаменательВзаиморасчетов Тогда
							РасшифровкаПлатежа.КурсЗнаменательВзаиморасчетов = 1;
							РасшифровкаПлатежа.КурсЧислительВзаиморасчетов = 1;
						КонецЕсли;
						РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;
						Если Этоmrcar Тогда
							РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Договор;
							РасшифровкаПлатежа.ОснованиеПлатежа = ДокОбъект.Договор;
							ЗаписьВЛог("Договор в основании: "+ТекСтрока.paymentNumber);
						Иначе
							Если ЕстьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
								РасшифровкаПлатежа.Заказ = СтрокаПривязок.ЗаказКлиента;
							ИначеЕсли ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
								РасшифровкаПлатежа.УдалитьЗаказ = СтрокаПривязок.ЗаказКлиента;
								//РасшифровкаПлатежа.ОбъектРасчетов = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");//объект расчетов заполняется по договору, не всегда правильно
							КонецЕсли;
							//РасшифровкаПлатежа.ОснованиеПлатежа = СокрЛП(ТекСтрока.ЗаказКлиента);
							Если ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда
								РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.Реализация;
								Если ДокОбъект.Организация <> ТекСтрока.Реализация.Организация Тогда
									ДокОбъект.Организация = ТекСтрока.Реализация.Организация;
								КонецЕсли
							Иначе
								Если ЗначениеЗаполнено(СтрокаПривязок.ЗаказКлиента) Тогда
									РасшифровкаПлатежа.ОснованиеПлатежа = СтрокаПривязок.ЗаказКлиента;
									Если ДокОбъект.Организация <> СтрокаПривязок.ЗаказКлиента.Организация Тогда
										ДокОбъект.Организация = СтрокаПривязок.ЗаказКлиента.Организация;
									КонецЕсли
								КонецЕсли
							КонецЕсли;					
						КонецЕсли;					
						РасшифровкаПлатежа.Сумма = СтрокаПривязок.amount;
						РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
						РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
						Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
							Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
								Если ЗначениеЗаполнено(СтрокаПривязок.ЗаказКлиента) Тогда
									РасшифровкаПлатежа.ОбъектРасчетов = ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(СтрокаПривязок.ЗаказКлиента.ИдентификаторПлатежа);
								ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда
									РасшифровкаПлатежа.ОбъектРасчетов = ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(ТекСтрока.Реализация.ИдентификаторПлатежа);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если ВерсияУТ <> "3.2.3.18" Тогда
							ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
						КонецЕсли;
					КонецЦикла;
					Если ДокОбъект.РасшифровкаПлатежа.Итог("Сумма")>ДокОбъект.СуммаДокумента Тогда //уменьшаем последнюю строку
						РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа[ДокОбъект.РасшифровкаПлатежа.Количество()-1];
						РасшифровкаПлатежа.Сумма = РасшифровкаПлатежа.Сумма - (ДокОбъект.РасшифровкаПлатежа.Итог("Сумма") - ДокОбъект.СуммаДокумента);
						РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
						ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
					ИначеЕсли ДокОбъект.РасшифровкаПлатежа.Итог("Сумма")<ДокОбъект.СуммаДокумента Тогда //уменьшаем последнюю строку
						РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
						РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
						Если ЦеныПродажиВРублях И ЗначениеЗаполнено(Рубли) Тогда//оплата
							РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
						КонецЕсли;
						РасшифровкаПлатежа.Сумма = ДокОбъект.СуммаДокумента-ДокОбъект.РасшифровкаПлатежа.Итог("Сумма");
						РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
						РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
						ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
					КонецЕсли;
				Иначе
					РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
					РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
					Если ЦеныПродажиВРублях Тогда//оплата
						РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
					КонецЕсли;
					РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;
					Если Этоmrcar Тогда
						РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Договор;
						РасшифровкаПлатежа.ОснованиеПлатежа = ДокОбъект.Договор;
						ЗаписьВЛог("Договор в основании: "+ТекСтрока.paymentNumber);
					Иначе
						Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
							Если ЕстьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
								РасшифровкаПлатежа.Заказ = ДокОбъект.Договор;
							ИначеЕсли ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
								РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Договор;
								//РасшифровкаПлатежа.ОбъектРасчетов = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");//объект расчетов заполняется по договору, не всегда правильно
							КонецЕсли;
							РасшифровкаПлатежа.ОснованиеПлатежа = ДокОбъект.Договор;
						Иначе
							Если ЕстьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
								РасшифровкаПлатежа.Заказ = ТекСтрока.ЗаказКлиента;//ДокОбъект.Договор;
							ИначеЕсли ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
								РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.ЗаказКлиента;//ДокОбъект.Договор;
							КонецЕсли;
							РасшифровкаПлатежа.ОснованиеПлатежа= ТекСтрока.Реализация;
						КонецЕсли;
					КонецЕсли;
					РасшифровкаПлатежа.Сумма = ТекСтрока.amount;
					РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
					Если ВерсияУТ <> "3.2.3.18" Тогда
						ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
					КонецЕсли;
				КонецЕсли;
				//Если НЕ ЗначениеЗаполнено(ДокОбъект) Тогда
				//	сообщить(" по заявке № "+Формат(ТекСтрока.orderId,"ЧГ=0")+" "+ТекСтрока.paymentType+" " +ТекСтрока.createDateTime,1);
				//	Продолжить;
				//КонецЕсли;
				ЕстьОшибка = Ложь;
				Попытка  
					СоздатьЗаполнитьДопРеквизитДокумента(ТекСтрока, ДокОбъект);
					ДокОбъект.Записать(); 
					//ЗаписьВЛог("Записан "+СокрЛП(ДокОбъект)+" по заявке № "+Формат(ТекСтрока.orderId,"ЧГ=0")+" "+ТекСтрока.paymentType+" " +ТекСтрока.createDateTime,1);
				Исключение
					ЗаписьВЛог(ОписаниеОшибки(),5,Истина);
					ЕстьОшибка = Истина;
				КонецПопытки;
				Попытка
					ДокОбъект.Записать(РежимЗаписиДок); 
					ДокументПроведен = Истина;
					ЗаписьВЛог("Проведен "+СокрЛП(ДокОбъект)+" по заявке № "+Формат(ТекСтрока.orderId,"ЧГ=0")+" "+ТекСтрока.paymentType+" " +ТекСтрока.createDateTime,1);
				Исключение
					ЗаписьВЛог("Не удалось провести "+СокрЛП(ДокОбъект)+ОписаниеОшибки());
				КонецПопытки;
				Если ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
					ТекСтрока.Документ = ДокОбъект.Ссылка;
					
					МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект = ТекСтрока.Документ;
					МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
					МенеджерЗаписи.Значение = ТекСтрока.paymentNumber;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
			#КонецОбласти
			
			#Область СозданиеВозвратаПоЭквайрингу
			//теперь делаем возврат
			Если (НЕ НеСоздаватьВозвратыФинансов) И ТекСтрока.Возврат И ТекСтрока.СуммаВозврат > 0 Тогда
				Если ЗначениеЗаполнено(ТекСтрока.ДокументВозврат) Тогда
					Док = ТекСтрока.ДокументВозврат;
					Если Док.СуммаДокумента = ТекСтрока.СуммаВозврат Тогда
						Если Не ЗначениеЗаполнено(ТекСтрока.Документ) Тогда //должен быть приходник, по которому возврат делали
							ТекСтрока.Документ = Док.Ссылка;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					ДокОбъект = Док.ПолучитьОбъект();
					ДокОбъект.РасшифровкаПлатежа.Очистить();
				Иначе
					ДокОбъект = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
					ДокОбъект.Заполнить(Неопределено);
					ДокОбъект.Валюта = Валюта;
					Док = Неопределено;
				КонецЕсли;
				ДокОбъект.Комментарий = ТекСтрока.сomment+" "+Формат(ТекСтрока.OnlinePaymentId, "ЧГ=0")+" orderId = возврат ";
				Если Отладка Тогда
					сообщить("создаем возврат по эквайрингу "+ДокОбъект.Комментарий);
				КонецЕсли;
				ДокОбъект.Валюта = Валюта;
				Если ЦеныПродажиВРублях Тогда//оплата
					ДокОбъект.Валюта = Рубли;
				КонецЕсли;
				Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
					ДокОбъект.Валюта = Валюта;
				КонецЕсли;
				//ДокОбъект.Касса = Касса;
				//ДокОбъект.БанковскийСчет = БанковскийСчет;
				ДокОбъект.Организация = Организация;
				//Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				//	ДокОбъект.Организация = ОрганизацияРозница;
				//КонецЕсли;
				ДокОбъект.Дата = ТекСтрока.createDateTime;
				Если ЗначениеЗаполнено(ТекСтрока.ДатаВозврата) Тогда
					ДокОбъект.Дата = ТекСтрока.ДатаВозврата;
				КонецЕсли;
				Если (ДокументыПоТипамПлатежей И ЗначениеЗаполнено(ТекСтрока.ЭквайринговыйТерминал)) Тогда
					ДокОбъект.ЭквайринговыйТерминал = ТекСтрока.ЭквайринговыйТерминал;
				Иначе
					ДокОбъект.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
				КонецЕсли;
				Если ИспользоватьПривязкиКассКМенеджерам Тогда
					ВремОрганизация = СоответствиеОрганизаций.Получить(ТекСтрока.editorId);
					Если ВремОрганизация<>Неопределено Тогда
						ДокОбъект.Организация = ВремОрганизация;
					КонецЕсли;
					
					ВремТерминал = СоответствиеЭквайринговыхТерминалов.Получить(ТекСтрока.editorId);
					Если ВремТерминал<>Неопределено Тогда
						ДокОбъект.ЭквайринговыйТерминал = ВремТерминал;
					КонецЕсли;
				КонецЕсли;
				ДокОбъект.Контрагент = ТекСтрока.Контрагент;
				ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
				ДокОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
				
				Если ИспользоватьДоговорыСКлиентами Тогда
					ДокОбъект.Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект);
					Если НЕ ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
						ПолучитьДоговорПоУмолчаниюСервер(ДокОбъект);
						//ДокОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, Неопределено);//не нужны хоз.операции так как в договоре реализация, а в документе поступление оплаты
					КонецЕсли;
				КонецЕсли;
				Попытка
					//ДокОбъект.ОплатаВыполнена = Истина;
					ДокОбъект.ОплатаВыполнена = Ложь;
				Исключение
				КонецПопытки;
				ДокОбъект.НеКонтролироватьЗаполнениеЗаявки = Истина;
				//ДокОбъект.Покупатель = ТекСтрока.Контрагент;
				//ДокОбъект.Основание = ТекСтрока.paymentNumber;
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				Иначе
					ДокОбъект.НомерПлатежнойКарты = ТекСтрока.paymentNumber;
				КонецЕсли;
				//ДокОбъект.ДокументОснование = ТекСтрока.Реализация;
				//ДокОбъект.ЗаказКлиента = ТекСтрока.ЗаказКлиента; - можно так
				//ДокОбъект.ПринятоОт = СокрЛП(ТекСтрока.Контрагент);//"orderId = "+Формат(ТекСтрока.orderId,"ЧГ=0")+", paymentLinkId = "+Формат(ТекСтрока.paymentLinkId,"ЧГ=0");
				ДокОбъект.Комментарий = СокрЛП(ТекСтрока.Контрагент);
				//ДокОбъект.Приложение = ТекСтрока.paymentType;//+" EditorId=" +Формат(ТекСтрока.EditorId,"ЧГ=0")+" "+"orderId = "+Формат(ТекСтрока.orderId,"ЧГ=0")+", paymentLinkId = "+Формат(ТекСтрока.paymentLinkId,"ЧГ=0");
				ДокОбъект.СуммаДокумента = ТекСтрока.amount;
				ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;//СтрокаЗаявки.Ответственный;
				ДогЭквайринга = СоответствиеДоговоровЭквайринга.Получить(ТекСтрока.paymentTypeId);
				Если ЗначениеЗаполнено(ДогЭквайринга) Тогда
					ДокОбъект.ДоговорЭквайринга = ДогЭквайринга;
					Если Отладка Тогда
						сообщить(ТекСтрока.paymentNumber+" "+ДогЭквайринга);
					КонецЕсли;
				КонецЕсли;
				//если несколько привязано
				Если РасширеннаяПривязкаОплат И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					//СтрокиПривязок = paymentOrderLinks.НайтиСтроки(Новый Структура("paymentNumber,Возврат", ТекСтрока.paymentNumber, Ложь));//paymentNumber могут двоиться
					СтрокиПривязок = paymentOrderLinks.НайтиСтроки(Новый Структура("paymentId,Возврат", ТекСтрока.paymentId, Ложь));
					Для Каждого СтрокаПривязок Из СтрокиПривязок Цикл
						РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
						РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
						Если ЦеныПродажиВРублях И ЗначениеЗаполнено(Рубли) Тогда//оплата
							РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
						КонецЕсли;
						РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;
						Если ЕстьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
							РасшифровкаПлатежа.Заказ = СтрокаПривязок.ЗаказКлиента;
						ИначеЕсли ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
							РасшифровкаПлатежа.УдалитьЗаказ = СтрокаПривязок.ЗаказКлиента;
							//РасшифровкаПлатежа.ОбъектРасчетов = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");//объект расчетов заполняется по договору, не всегда правильно
						КонецЕсли;
						//РасшифровкаПлатежа.ОснованиеПлатежа = СокрЛП(ТекСтрока.ЗаказКлиента);
						Если ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда
							РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.Реализация;
							Если ДокОбъект.Организация <> ТекСтрока.Реализация.Организация Тогда
								ДокОбъект.Организация = ТекСтрока.Реализация.Организация;
							КонецЕсли
						Иначе
							Если ЗначениеЗаполнено(СтрокаПривязок.ЗаказКлиента) Тогда
								РасшифровкаПлатежа.ОснованиеПлатежа = СтрокаПривязок.ЗаказКлиента;
								Если ДокОбъект.Организация <> СтрокаПривязок.ЗаказКлиента.Организация Тогда
									ДокОбъект.Организация = СтрокаПривязок.ЗаказКлиента.Организация;
								КонецЕсли
							КонецЕсли;
						КонецЕсли;					
						РасшифровкаПлатежа.Сумма = СтрокаПривязок.amount;
						РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
						РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
						Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
							Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
								Если ЗначениеЗаполнено(СтрокаПривязок.ЗаказКлиента) Тогда
									РасшифровкаПлатежа.ОбъектРасчетов = ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(СтрокаПривязок.ЗаказКлиента.ИдентификаторПлатежа);
								ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда
									РасшифровкаПлатежа.ОбъектРасчетов = ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(ТекСтрока.Реализация.ИдентификаторПлатежа);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если ВерсияУТ <> "3.2.3.18" Тогда
							ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
						КонецЕсли;
					КонецЦикла;
					Если ДокОбъект.РасшифровкаПлатежа.Итог("Сумма")>ДокОбъект.СуммаДокумента Тогда //уменьшаем последнюю строку
						РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа[ДокОбъект.РасшифровкаПлатежа.Количество()-1];
						РасшифровкаПлатежа.Сумма = РасшифровкаПлатежа.Сумма - (ДокОбъект.РасшифровкаПлатежа.Итог("Сумма") - ДокОбъект.СуммаДокумента);
						РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
						ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
					ИначеЕсли ДокОбъект.РасшифровкаПлатежа.Итог("Сумма")<ДокОбъект.СуммаДокумента Тогда //уменьшаем последнюю строку
						РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
						РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
						Если ЦеныПродажиВРублях И ЗначениеЗаполнено(Рубли) Тогда//оплата
							РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
						КонецЕсли;
						РасшифровкаПлатежа.Сумма = ДокОбъект.СуммаДокумента-ДокОбъект.РасшифровкаПлатежа.Итог("Сумма");
						РасшифровкаПлатежа.СуммаВзаиморасчетов = РасшифровкаПлатежа.Сумма;
						РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
						ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
					КонецЕсли;
				Иначе
					РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
					РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
					Если ЦеныПродажиВРублях Тогда//оплата
						РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
					КонецЕсли;
					РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;
					Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
						Если ЕстьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
							РасшифровкаПлатежа.Заказ = ДокОбъект.Договор;
						ИначеЕсли ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
							РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Договор;
							//РасшифровкаПлатежа.ОбъектРасчетов = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");//объект расчетов заполняется по договору, не всегда правильно
						КонецЕсли;
						РасшифровкаПлатежа.ОснованиеПлатежа = ДокОбъект.Договор;
					Иначе
						Если ЕстьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
							РасшифровкаПлатежа.Заказ = ТекСтрока.ЗаказКлиента;//ДокОбъект.Договор;
						ИначеЕсли ЕстьУдалитьЗаказВРасшифровкеОперацияПоПлатежнойКарте Тогда
							РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.ЗаказКлиента;//ДокОбъект.Договор;
						КонецЕсли;
						РасшифровкаПлатежа.ОснованиеПлатежа= ТекСтрока.Реализация;
					КонецЕсли;
					РасшифровкаПлатежа.Сумма = ТекСтрока.amount;
					РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
					Если ВерсияУТ <> "3.2.3.18" Тогда
						ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
					КонецЕсли;
				КонецЕсли;
				Попытка      
					СоздатьЗаполнитьДопРеквизитДокумента(ТекСтрока, ДокОбъект);
					ДокОбъект.Записать(РежимЗаписиДок); 
					ДокументПроведен = Истина;
					ЗаписьВЛог("Проведен "+СокрЛП(ДокОбъект)+" по заявке № "+Формат(ТекСтрока.orderId,"ЧГ=0")+" "+ТекСтрока.paymentType+" " +ТекСтрока.createDateTime,1);
				Исключение
					ДокОбъект.Записать();
					ЗаписьВЛог("Не удалось провести "+СокрЛП(ДокОбъект)+ОписаниеОшибки(),5,Истина);
				КонецПопытки;
				ТекСтрока.ДокументВозврат = ДокОбъект.Ссылка;
				
				МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = ТекСтрока.ДокументВозврат;
				МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
				МенеджерЗаписи.Значение = ТекСтрока.paymentNumber;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			#КонецОбласти
			//Прервать;//!!! для отладки
			
			//эквайринг
		Иначе //0
			Если (ДокументыПоТипамПлатежей И НЕ ЗначениеЗаполнено(ТекСтрока.БанковскийСчет)) Или (НЕ ДокументыПоТипамПлатежей И НЕ ЗначениеЗаполнено(БанковскийСчет)) Тогда //если не заполнен банковский счет, то не создаём документы, их могут через банковскую выписку добавлять
				Продолжить;
			КонецЕсли;
			//создаем безналичное поступление
			#Область СоздатьПоступлениеБезналичныхДенежныхСредств
			Если Док = Неопределено Тогда
				//Если ТекСтрока.orderId = 0 Тогда //возврат денежных средств
				//	ДокОбъект = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
				//	ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
				//Иначе
					ДокОбъект = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
					ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
				//КонецЕсли;
			КонецЕсли;
			//ДокОбъект.СогласованоСБанком = Истина;
			ДокОбъект.Валюта = Валюта;
			Если ЦеныПродажиВРублях Тогда//оплата
				ДокОбъект.Валюта = Рубли;
			КонецЕсли;
			Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
				ДокОбъект.Валюта = Валюта;
			КонецЕсли;
			//ДокОбъект.ВалютаКонвертации = Валюта;
			Если (ДокументыПоТипамПлатежей И ЗначениеЗаполнено(ТекСтрока.БанковскийСчет)) Тогда
				ДокОбъект.БанковскийСчет = ТекСтрока.БанковскийСчет;
			Иначе
				ДокОбъект.БанковскийСчет = БанковскийСчет;
			КонецЕсли;
			ДокОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
			//ДокОбъект.Комментарий = ТекСтрока.paymentNumber;
			ДокОбъект.Комментарий = ТекСтрока.сomment+" "+Формат(ТекСтрока.OnlinePaymentId, "ЧГ=0")+" "+Формат(ТекСтрока.orderId, "ЧГ=0");
			Если Отладка Тогда
				сообщить("создаем безналичное поступление "+ДокОбъект.Комментарий);
			КонецЕсли;
			ДокОбъект.НомерВходящегоДокумента = СтрЗаменить(ТекСтрока.paymentNumber,"ЭЛЕКТРОН","ЭЛЕКТР");//иначе в поле не помещается
			ДокОбъект.ДатаВходящегоДокумента = ТекСтрока.createDateTime;
			ДокОбъект.Дата = ТекСтрока.createDateTime;
			ДокОбъект.Организация = Организация;
			//Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			//	ДокОбъект.Организация = ОрганизацияРозница;
			//КонецЕсли;
			Если ИспользоватьПривязкиКассКМенеджерам Тогда
				ВремОрганизация = СоответствиеОрганизаций.Получить(ТекСтрока.editorId);
				Если ВремОрганизация<>Неопределено Тогда
					ДокОбъект.Организация = ВремОрганизация;
				КонецЕсли;
			КонецЕсли;
			//Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
			//	ДокОбъект.Организация = ТекСтрока.Организация;
			//Конецесли;
			ДокОбъект.Контрагент = ТекСтрока.Контрагент;
			//ДокОбъект.Партнер = ТекСтрока.Контрагент.Партнер;
			//ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;//выше заполнили
			ДокОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			Если ИспользоватьДоговорыСКлиентами Тогда
				ПолучитьДоговорПоУмолчаниюСервер(ДокОбъект);
				//ДокОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, Неопределено);
			КонецЕсли;
			ДокОбъект.ДатаПроведенияБанком = ДокОбъект.Дата;
			ДокОбъект.ПроведеноБанком = Истина;
			ДокОбъект.БанковскийСчетОтправитель = ПолучитьБанковскийСчетПоУмолчанию(ДокОбъект.Контрагент);
			Если Не ЗначениеЗаполнено(ДокОбъект.БанковскийСчетОтправитель) Тогда
				ЗапросСчет.УстановитьПараметр("Владелец", ДокОбъект.Контрагент);
				Результат = ЗапросСчет.Выполнить();
				Если Не Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					ДокОбъект.БанковскийСчетОтправитель = Выборка.Ссылка;
				Иначе
					Если НЕ (УТ111 Или УТ112 Или УТ113 ) Тогда
						Сбербанк = Справочники.КлассификаторБанков.НайтиПоКоду("042007681");
					Иначе
						Сбербанк = Справочники.КлассификаторБанковРФ.НайтиПоКоду("042007681");
					КонецЕсли;
					Попытка
						БанковскийСчетОтправитель = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
						БанковскийСчетОтправитель.ВалютаДенежныхСредств = Валюта;
						Если ЦеныПродажиВРублях Тогда//оплата
							БанковскийСчетОтправитель.ВалютаДенежныхСредств = Рубли;
						КонецЕсли;
						БанковскийСчетОтправитель.Владелец = ДокОбъект.Контрагент;
						БанковскийСчетОтправитель.Банк = Сбербанк.Ссылка;
						БанковскийСчетОтправитель.БИКБанка = Сбербанк.Код;
						БанковскийСчетОтправитель.НаименованиеБанка = Сбербанк.Наименование;
						БанковскийСчетОтправитель.ГородБанка = Сбербанк.Город;
						БанковскийСчетОтправитель.Наименование = "основной";
						БанковскийСчетОтправитель.НомерСчета = "12345678901234567890";
						БанковскийСчетОтправитель.Записать();
						ДокОбъект.БанковскийСчетОтправитель = БанковскийСчетОтправитель.Ссылка;
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			ДокОбъект.БанковскийСчетКонтрагента = ДокОбъект.БанковскийСчетОтправитель;
			ДокОбъект.ДокументОснование = ТекСтрока.Реализация;
			ДокОбъект.Организация = Организация;
			//Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			//	ДокОбъект.Организация = ОрганизацияРозница;
			//КонецЕсли;
			//Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
			//	ДокОбъект.Организация = ТекСтрока.Организация;
			//Конецесли;
			//ДокОбъект.Приложение = ТекСтрока.paymentType+" " +ТекСтрока.EditorId;
			ДокОбъект.СуммаДокумента = ТекСтрока.amount;
			//ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
			Если РасширеннаяПривязкаОплат И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
				//СтрокиПривязок = paymentOrderLinks.НайтиСтроки(Новый Структура("paymentNumber,Возврат", ТекСтрока.paymentNumber, Ложь));//paymentNumber могут двоиться
				СтрокиПривязок = paymentOrderLinks.НайтиСтроки(Новый Структура("paymentId,Возврат", ТекСтрока.paymentId, Ложь));
				Для Каждого СтрокаПривязок Из СтрокиПривязок Цикл
					РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
					РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;
					Если Не УТ111 Тогда РасшифровкаПлатежа.Организация = ДокОбъект.Организация; КонецЕсли;
					РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
					Если ЦеныПродажиВРублях Тогда//оплата
						РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
					КонецЕсли;
					Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
						РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.ЗаказКлиента;
					Иначе
						РасшифровкаПлатежа.Заказ = ТекСтрока.ЗаказКлиента;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
						РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.ЗаказКлиента;//а то в чеке некорректно отображается
					Иначе
						РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.Реализация;
					КонецЕсли;
					РасшифровкаПлатежа.Сумма = СтрокаПривязок.amount;
					РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
					Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
						Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
							Если ЗначениеЗаполнено(СтрокаПривязок.ЗаказКлиента) Тогда
								РасшифровкаПлатежа.ОбъектРасчетов = ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(СтрокаПривязок.ЗаказКлиента.ИдентификаторПлатежа);
							ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда
								РасшифровкаПлатежа.ОбъектРасчетов = ПолучитьОбъектРасчетовПоИдентификаторуПлатежа(ТекСтрока.Реализация.ИдентификаторПлатежа);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ВерсияУТ <> "3.2.3.18" Тогда
						ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
					КонецЕсли;
				КонецЦикла;
			Иначе
				РасшифровкаПлатежа = ДокОбъект.РасшифровкаПлатежа.Добавить();
				РасшифровкаПлатежа.Партнер = ТекСтрока.Контрагент.Партнер;
				Если Не УТ111 Тогда РасшифровкаПлатежа.Организация = ДокОбъект.Организация; КонецЕсли;
				РасшифровкаПлатежа.ВалютаВзаиморасчетов = Валюта;
				Если ЦеныПродажиВРублях Тогда//оплата
					РасшифровкаПлатежа.ВалютаВзаиморасчетов = Рубли;
				КонецЕсли;
				Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
						РасшифровкаПлатежа.УдалитьЗаказ = ДокОбъект.Договор;
					Иначе
						РасшифровкаПлатежа.Заказ = ДокОбъект.Договор;
					КонецЕсли;
					РасшифровкаПлатежа.ОснованиеПлатежа = ДокОбъект.Договор;
				Иначе
					Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
						РасшифровкаПлатежа.УдалитьЗаказ = ТекСтрока.ЗаказКлиента;
					Иначе
						РасшифровкаПлатежа.Заказ = ТекСтрока.ЗаказКлиента;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
						РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.ЗаказКлиента;//а то в чеке некорректно отображается
					Иначе
						РасшифровкаПлатежа.ОснованиеПлатежа = ТекСтрока.Реализация;
					КонецЕсли;
				КонецЕсли;
				РасшифровкаПлатежа.Сумма = ТекСтрока.amount;
				РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
				Если ВерсияУТ <> "3.2.3.18" Тогда
					ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, РасшифровкаПлатежа);
				КонецЕсли;
			КонецЕсли;
			//ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
			//ДокОбъект.ОбменДанными.Загрузка = Истина;
			Попытка                  
				СоздатьЗаполнитьДопРеквизитДокумента(ТекСтрока, ДокОбъект);
				ДокОбъект.Записать(РежимЗаписиДок); 
				ДокументПроведен = Истина;                                                                  
				ЗаписьВЛог("Проведен "+СокрЛП(ДокОбъект)+" по заявке № "+Формат(ТекСтрока.orderId,"ЧГ=0")+" "+ТекСтрока.paymentType+" " +ТекСтрока.createDateTime,1);
			Исключение
				ДокОбъект.Записать();
				ЗаписьВЛог("Не удалось провести "+СокрЛП(ДокОбъект)+ОписаниеОшибки(),5,Истина);
			КонецПопытки;
			ТекСтрока.Документ = ДокОбъект.Ссылка;
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ТекСтрока.Документ;
			МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
			МенеджерЗаписи.Значение = ТекСтрока.paymentNumber;
			МенеджерЗаписи.Записать();
			#КонецОбласти
			//Прервать;//!!! для отладки
		КонецЕсли;
		Если ИспользоватьТранзакции Тогда ЗафиксироватьТранзакцию(); КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьДоговорПоУмолчаниюСервер(ДокОбъект) //лучше использовать функцию ПолучитьДоговорПоУмолчанию
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		//ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	ИначеЕсли ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	КонецЕсли;
	Партнер = ДокОбъект.Контрагент.Партнер;
	Попытка
		ДоговорКонтрагента = ДокОбъект.Договор;
	Исключение
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецПопытки;
	ДоговорКонтрагента = ДенежныеСредстваСервер.ДоговорПоУмолчанию(
		ДоговорКонтрагента,
		Партнер,
		ДокОбъект.Контрагент,
		ДокОбъект.Организация,
		ХозяйственнаяОперацияДоговора);
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ДокОбъект.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств");
		Попытка
			ДокОбъект.Договор = ДоговорКонтрагента;
		Исключение
			ЗаписьВЛог("Нет договора в документе "+ДокОбъект);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#Область СвойстваДокументовИКонтрагентов
//используется из ТаблицаСкладовКонтрагентПриИзменении
Процедура ДобавитьИзменитьdistributorId(Контрагент, ИдПоставщика) Экспорт
	Если Не ЗначениеЗаполнено(Контрагент.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	distributorId = НайтиДобавитьСвойствоКонтрагента("distributorId");
	//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("distributorId (Контрагент)");
	//Если Не ЗначениеЗаполнено(Свойство) Тогда
	//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("distributorId (Контрагенты)");
	//Конецесли;
	//перед записью проверить, есть ли уже записи с этим кодом и удалить их, но отбор можно сделать только по измерениям
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Свойство КАК Свойство,
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Значение = &Значение";
	Запрос.УстановитьПараметр("Свойство", distributorId);
	Запрос.УстановитьПараметр("Значение", Число(ИдПоставщика));
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Объект <> Контрагент Тогда
				сообщить("Уже есть ид.поставщика у поставщика «"+Выборка.Объект+"», будет удален");
				НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
				НаборЗаписей.Отбор.Свойство.Установить(distributorId);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Контрагент.Ссылка;
	МенеджерЗаписи.Свойство = distributorId;
	МенеджерЗаписи.Значение = Число(ИдПоставщика);
	МенеджерЗаписи.Записать();
	
	//Об = Контрагент.ПолучитьОбъект();
	//СтрокиДополнительныеРеквизиты = Об.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", distributorId.Ссылка));
	//Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
	//	СтрокаДополнительныеРеквизиты = Об.ДополнительныеРеквизиты.Добавить();
	//Иначе
	//	СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
	//КонецЕсли;
	//СтрокаДополнительныеРеквизиты.Свойство = distributorId.Ссылка;
	//СтрокаДополнительныеРеквизиты.Значение = ИдПоставщика;
	//СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = Формат(ИдПоставщика,"ЧГ=0");
	//Об.Записать();
КонецПроцедуры

Процедура ДобавитьИзменитьuserId(Контрагент, ИдентификаторКонтрагента) Экспорт
	Если Не ЗначениеЗаполнено(Контрагент.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("userId (Контрагенты)");
	//Если Не ЗначениеЗаполнено(Свойство) Тогда
	//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("userId (Контрагент)");
	//Конецесли;
	userId = НайтиДобавитьСвойствоКонтрагента("userId");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Свойство КАК Свойство,
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты) КАК Объект
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Значение = &Значение";
	Запрос.УстановитьПараметр("Свойство", userId);
	Запрос.УстановитьПараметр("Значение", Число(ИдентификаторКонтрагента));
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Объект <> Контрагент Тогда
				сообщить("Уже есть userId у клиента «"+Выборка.Объект+"», будет удален");
				НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
				НаборЗаписей.Отбор.Свойство.Установить(userId);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Контрагент.Ссылка;
	МенеджерЗаписи.Свойство = userId;
	МенеджерЗаписи.Значение = ИдентификаторКонтрагента;
	МенеджерЗаписи.Записать();
	
	Об = Контрагент.ПолучитьОбъект();
	СтрокиДополнительныеРеквизиты = Об.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", userId.Ссылка));
	Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
		СтрокаДополнительныеРеквизиты = Об.ДополнительныеРеквизиты.Добавить();
	Иначе
		СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
	КонецЕсли;
	СтрокаДополнительныеРеквизиты.Свойство = userId.Ссылка;
	СтрокаДополнительныеРеквизиты.Значение = ИдентификаторКонтрагента;
	СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = Формат(ИдентификаторКонтрагента, "ЧГ=0");
	
	Об.Записать();
КонецПроцедуры

Процедура НайтиДобавитьНаборДополнительныхРеквизитовИСведенийКонтрагент(Свойство);
	//иначе в перечне дополнительных сведений не появится
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаборыКонтрагента.Свойство
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыКонтрагента
	               |ГДЕ
	               |	НаборыКонтрагента.Свойство = &Свойство
	               |	И НаборыКонтрагента.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Свойство", Свойство.Ссылка);
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		Попытка
			НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты;
		Исключение
			НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
		КонецПопытки;
	Иначе
		НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", НаборСвойств);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Об = НаборСвойств.ПолучитьОбъект();
		НовСтрока = Об.ДополнительныеСведения.Добавить();
		НовСтрока.Свойство = Свойство.Ссылка;
		Об.КоличествоСведений = Об.ДополнительныеСведения.Количество();
		Об.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура НайтиДобавитьНаборДополнительныхРеквизитовИСведенийПользователь(Свойство);
	//иначе в перечне дополнительных сведений не появится
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаборыПользователь.Свойство
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыПользователь
	               |ГДЕ
	               |	НаборыПользователь.Свойство = &Свойство
	               |	И НаборыПользователь.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Свойство", Свойство.Ссылка);
	Попытка
		Запрос.УстановитьПараметр("Ссылка", Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_Пользователи"]);
	Исключение
		Запрос.УстановитьПараметр("Ссылка", Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Пользователи"]);
	КонецПопытки;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Попытка
			Об = Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_Пользователи"].ПолучитьОбъект();
		Исключение
			Об = Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Пользователи"].ПолучитьОбъект();
		КонецПопытки;
		НовСтрока = Об.ДополнительныеСведения.Добавить();
		НовСтрока.Свойство = Свойство.Ссылка;
		Об.КоличествоСведений = Об.ДополнительныеСведения.Количество();
		Об.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура НайтиДобавитьНаборДополнительныхРеквизитовИСведенийНоменклатура(Свойство);
	//иначе в перечне дополнительных сведений не появится
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаборыНоменклатура.Свойство
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыНоменклатура
	               |ГДЕ
	               |	НаборыНоменклатура.Свойство = &Свойство
	               |	И НаборыНоменклатура.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Свойство", Свойство.Ссылка);
	Запрос.УстановитьПараметр("Ссылка", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Об = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура.ПолучитьОбъект();
		НовСтрока = Об.ДополнительныеСведения.Добавить();
		НовСтрока.Свойство = Свойство.Ссылка;
		Об.КоличествоСведений = Об.ДополнительныеСведения.Количество();
		Об.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура НайтиДобавитьНаборДополнительныхРеквизитовИСведенийЗаказ(Свойство, НаборЗаказ);
	//иначе в перечне дополнительных сведений не появится
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаборыЗаказа.Свойство
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыЗаказа
	               |ГДЕ
	               |	НаборыЗаказа.Свойство = &Свойство
	               |	И НаборыЗаказа.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Свойство", Свойство.Ссылка);
	Запрос.УстановитьПараметр("Ссылка", НаборЗаказ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Об = НаборЗаказ.ПолучитьОбъект();
		НовСтрока = Об.ДополнительныеСведения.Добавить();
		НовСтрока.Свойство = Свойство.Ссылка;
		Об.КоличествоСведений = Об.ДополнительныеСведения.Количество();
		Об.Записать();
	КонецЕсли;
КонецПроцедуры

//для заполнения причины отмены заказа покупателя
Функция НайтиДобавитьПричинуОтмены(Наименование)
	Если Наименование = "" Тогда
		Наименование = "Прочее";
	КонецЕсли;
	Об = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию(Наименование);
	Если Об = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка() Тогда
		Об = Справочники.ПричиныОтменыЗаказовКлиентов.СоздатьЭлемент();
		Об.Наименование = Наименование;
		Об.Записать();
	КонецЕсли;
	Возврат Об.Ссылка;
КонецФункции

Функция НайтиДобавитьПричинуОтменыЗаказПоставщику(Наименование)
	Если Наименование = "" Тогда
		Наименование = "Прочее";
	КонецЕсли;
	Об = Справочники.ПричиныОтменыЗаказовПоставщикам.НайтиПоНаименованию(Наименование);
	Если Об = Справочники.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка() Тогда
		Об = Справочники.ПричиныОтменыЗаказовПоставщикам.СоздатьЭлемент();
		Об.Наименование = Наименование;
		Об.Записать();
	КонецЕсли;
	Возврат Об.Ссылка;
КонецФункции

Функция НайтиДобавитьСвойствоКонтрагента(ИмяСвойства, ТипИдентификатора = Неопределено) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ТипИдентификатораЧисло = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства+" (Контрагенты)");
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Свойство.ЭтоДополнительноеСведение = Истина;
		Свойство.Наименование = ИмяСвойства + " (Контрагенты)";
		Если НЕ УТ111 Тогда
			Свойство.Заголовок = ИмяСвойства;
			Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				//Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты;
				Попытка
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты;
				Исключение
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
				КонецПопытки;
			Иначе
				Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
			КонецЕсли;
			Свойство.ДополнительныеЗначенияИспользуются = Ложь;
		КонецЕсли;
		Если ТипИдентификатора = Неопределено Тогда
			Свойство.ТипЗначения = ТипИдентификатораЧисло;
		Иначе
			Свойство.ТипЗначения = ТипИдентификатора;
		КонецЕсли;
		Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11 "+СокрЛП(ТекущаяДата());
		Свойство.ЭтоДополнительноеСведение = Истина;
		Если НЕ УТ111 Тогда
			Свойство.Виден = Истина;
			Свойство.Доступен = Истина;
		КонецЕсли;
		Свойство.Записать();
		НайтиДобавитьНаборДополнительныхРеквизитовИСведенийКонтрагент(Свойство);
	КонецЕсли;
	Возврат Свойство.Ссылка;
КонецФункции

Функция НайтиДобавитьСвойствоКонтрагента2(ИмяСвойства, ТипИдентификатора = Неопределено, Партнер = Ложь) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ТипИдентификатораЧисло = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	//Константы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Установить(Истина);
	//НаименованиеОбщегоРеквизита = "Справочник """+?(Партнер, "Партнеры", "Контрагенты")+""" (Общие)";
	НаименованиеОбщегоРеквизита = ИмяСвойства;
	НаборДополнительныхРеквизитовИСведений = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию(НаименованиеОбщегоРеквизита);
	Возврат НаборДополнительныхРеквизитовИСведений;
	Если НЕ ЗначениеЗаполнено(НаборДополнительныхРеквизитовИСведений) Тогда
		НаборДополнительныхРеквизитовИСведений = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
		Если Партнер Тогда
			НаборДополнительныхРеквизитовИСведений.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Клиенты;
		Иначе
			Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				НаборДополнительныхРеквизитовИСведений.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты;
			Иначе
				НаборДополнительныхРеквизитовИСведений.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
			КонецЕсли;
		КонецЕсли;
		НаборДополнительныхРеквизитовИСведений.Наименование = НаименованиеОбщегоРеквизита;
		НаборДополнительныхРеквизитовИСведений.Используется = Истина;
		НаборДополнительныхРеквизитовИСведений.Записать();
		НаборДополнительныхРеквизитовИСведений = НаборДополнительныхРеквизитовИСведений.Ссылка;
	Иначе
		//НаборДополнительныхРеквизитовИСведений.ОбменДанными.Загрузка = Истина;
		НаборДополнительныхРеквизитовИСведений.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
		НаборДополнительныхРеквизитовИСведений.Записать();
	КонецЕсли;
	НаименованиеПВХ = ИмяСвойства+" (Справочник """+?(Партнер, "Партнеры", "Контрагенты")+""" (Общие))";
	ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НаименованиеПВХ);
	Если ЗначениеЗаполнено(ПВХ) Тогда
		Характеристика = ПВХ.Ссылка;
	Иначе
		ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		//ПВХ.ТипЗначения = Дополнительное значение
		ПВХ.Наименование = НаименованиеПВХ;
		ПВХ.Заголовок = ИмяСвойства;
		ПВХ.НаборСвойств = НаборДополнительныхРеквизитовИСведений.Ссылка;
		Если ТипИдентификатора = Неопределено Тогда
			ПВХ.ТипЗначения = ТипИдентификатораЧисло;
		Иначе
			ПВХ.ТипЗначения = ТипИдентификатора;
		КонецЕсли;
		ПВХ.Комментарий = "создан автоматически из обработки ABCP_УТ11 "+СокрЛП(ТекущаяДата());
		ПВХ.Записать();
		Характеристика = ПВХ.Ссылка;
	КонецЕсли;
	Структура = Новый Структура();
	Структура.Вставить("Свойство", ПВХ.Ссылка);
	НайденныеСтроки = НаборДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() > 0 Тогда
		//НаборДополнительныхРеквизитовИСведений = НаборДополнительныхРеквизитовИСведений.Ссылка;
	Иначе
		Об = НаборДополнительныхРеквизитовИСведений.ПолучитьОбъект();
		НовСтрока = Об.ДополнительныеРеквизиты.Добавить();
		НовСтрока.Свойство = ПВХ.Ссылка;
		Об.КоличествоРеквизитов = Об.ДополнительныеРеквизиты.Количество();
		Об.Записать();
		//Объект.НаборДополнительныхРеквизитовИСведений = Об.Ссылка;
	КонецЕсли;
	Возврат ПВХ.Ссылка;
	//НаименованиеРеквизита = Объект.ЗначениеРеквизита;
	//ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(НаименованиеРеквизита,Истина,,ПВХ.Ссылка);
	//Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
	//	сообщить("Уже есть значение реквизита");
	//	Объект.ЗначениеСвойствОбъектов = ЗначениеРеквизита.Ссылка;
	//	//Возврат;
	//Иначе
	//	ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	//	ЗначениеРеквизита.Владелец = ПВХ.Ссылка;
	//	ЗначениеРеквизита.Наименование = НаименованиеРеквизита;
	//	ЗначениеРеквизита.Записать();
	//	Объект.ЗначениеСвойствОбъектов = ЗначениеРеквизита.Ссылка;
	//КонецЕсли;
КонецФункции//НайтиДобавитьСвойствоКонтрагента2

Функция НайтиДобавитьСвойствоПользователя(ИмяСвойства, ТипИдентификатора = Неопределено) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ТипИдентификатораЧисло = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства+" (Пользователи)");
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Свойство.ЭтоДополнительноеСведение = Истина;
		Свойство.Наименование = ИмяСвойства + " (Пользователи)";
		Если НЕ УТ111 Тогда
			Свойство.Заголовок = ИмяСвойства;
			//Если Сред(Метаданные.Версия,6,1)="8" Или Лев(Метаданные.Версия, 6) = "11.4.7" Тогда
			Если ПодВерсия3 > 7 Или Лев(Метаданные.Версия, 6) = "11.4.7" Тогда
				Попытка
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Пользователи"];
				Исключение
					Возврат Неопределено;
				КонецПопытки;
			Иначе
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Пользователи"];
				Иначе
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_Пользователи"];
				КонецЕсли;
			КонецЕсли;
			Свойство.ДополнительныеЗначенияИспользуются = Ложь;
		КонецЕсли;
		Если ТипИдентификатора = Неопределено Тогда
			Свойство.ТипЗначения = ТипИдентификатораЧисло;
		Иначе
			Свойство.ТипЗначения = ТипИдентификатора;
		КонецЕсли;
		Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11 "+СокрЛП(ТекущаяДата());
		Свойство.ЭтоДополнительноеСведение = Истина;
		Если НЕ УТ111 Тогда
			Свойство.Виден = Истина;
			Свойство.Доступен = Истина;
		КонецЕсли;
		Свойство.Записать();
		НайтиДобавитьНаборДополнительныхРеквизитовИСведенийПользователь(Свойство);
	КонецЕсли;
	Возврат Свойство.Ссылка;
КонецФункции

Функция НайтиДобавитьСвойствоНоменклатуры(ИмяСвойства, ТипИдентификатора = Неопределено) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ТипИдентификатораЧисло = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства+" (Номенклатура)");
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Свойство.ЭтоДополнительноеСведение = Истина;
		Свойство.Наименование = ИмяСвойства + " (Номенклатура)";
		Если НЕ УТ111 Тогда
			Свойство.Заголовок = ИмяСвойства;
			Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
			Свойство.ДополнительныеЗначенияИспользуются = Ложь;
		КонецЕсли;
		Если ТипИдентификатора = Неопределено Тогда
			Свойство.ТипЗначения = ТипИдентификатораЧисло;
		Иначе
			Свойство.ТипЗначения = ТипИдентификатора;
		КонецЕсли;
		Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11 "+СокрЛП(ТекущаяДата());
		Свойство.ЭтоДополнительноеСведение = Истина;
		Если НЕ УТ111 Тогда
			Свойство.Виден = Истина;
			Свойство.Доступен = Истина;
		КонецЕсли;
		Свойство.Записать();
		НайтиДобавитьНаборДополнительныхРеквизитовИСведенийНоменклатура(Свойство);
	КонецЕсли;
	Возврат Свойство.Ссылка;
КонецФункции

Функция НайтиДобавитьСвойствоЗаказа(ИмяСвойства, ТипИдентификатора = Неопределено) Экспорт
	МассивДата = Новый Массив;
	МассивДата.Добавить(Тип("Дата"));
	ТипИдентификатораДата = Новый ОписаниеТипов(МассивДата, , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Заказы клиентов");
	//НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
	Если НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
		 НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
		 //НаборЗаказ.Предопределенный = Истина;
		 НаборЗаказ.Наименование = "Заказы клиентов";
		 НаборЗаказ.Записать();
	КонецЕсли;
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства+" (Заказы клиентов)");
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Свойство.ЭтоДополнительноеСведение = Истина;
		Свойство.Наименование = ИмяСвойства + " (Заказы клиентов)";
		Если НЕ УТ111 Тогда
			Свойство.Заголовок = ИмяСвойства;
			Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				//Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента;
				Попытка
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента;
				Исключение
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
				КонецПопытки;
			Иначе
				Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
			КонецЕсли;
			//Свойство.НаборСвойств = НаборЗаказ.Ссылка;
			Свойство.ДополнительныеЗначенияИспользуются = Ложь;
		КонецЕсли;
		Если ТипИдентификатора = Неопределено Тогда
			Свойство.ТипЗначения = ТипИдентификатораДата;
		Иначе
			Свойство.ТипЗначения = ТипИдентификатора;
		КонецЕсли;
		Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11 "+СокрЛП(ТекущаяДата());
		Свойство.ЭтоДополнительноеСведение = Истина;
		Если НЕ УТ111 Тогда
			Свойство.Виден = Истина;
			Свойство.Доступен = Истина;
		КонецЕсли;
		Свойство.Записать();
		НайтиДобавитьНаборДополнительныхРеквизитовИСведенийЗаказ(Свойство, НаборЗаказ.Ссылка);
	КонецЕсли;
	Возврат Свойство.Ссылка;
КонецФункции

Функция НайтиДобавитьСвойствоРеализации(ИмяСвойства) Экспорт
	ТипИдентификатора = Неопределено;
	МассивДата = Новый Массив;
	МассивДата.Добавить(Тип("Дата"));
	ТипИдентификатораДата = Новый ОписаниеТипов(МассивДата, , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Реализации товаров и услуг");
	//НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
	Если НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
		 НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
		 //НаборЗаказ.Предопределенный = Истина;
		 НаборЗаказ.Наименование = "Реализации товаров и услуг";
		 НаборЗаказ.Записать();
	КонецЕсли;
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства+" (Реализации товаров и услуг)");
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Свойство.ЭтоДополнительноеСведение = Истина;
		Свойство.Наименование = ИмяСвойства + " (Реализации товаров и услуг)";
		//Если НЕ УТ111 Тогда
			Свойство.Заголовок = ИмяСвойства;
			Попытка
				Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг;
			Исключение
				Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РеализацияТоваровУслуг;
			КонецПопытки;
			//Свойство.НаборСвойств = НаборЗаказ.Ссылка;
			Свойство.ДополнительныеЗначенияИспользуются = Ложь;
		//КонецЕсли;
		Если ТипИдентификатора = Неопределено Тогда
			Свойство.ТипЗначения = ТипИдентификатораДата;
		Иначе
			Свойство.ТипЗначения = ТипИдентификатора;
		КонецЕсли;
		Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11 "+СокрЛП(ТекущаяДата());
		Свойство.ЭтоДополнительноеСведение = Истина;
		//Если НЕ (УТ111 И Подверсия2 = 1) Тогда
		Если НЕ УТ111 Тогда
			Свойство.Виден = Истина;
			Свойство.Доступен = Истина;
		КонецЕсли;
		Свойство.Записать();
		НайтиДобавитьНаборДополнительныхРеквизитовИСведенийЗаказ(Свойство, НаборЗаказ.Ссылка);
	КонецЕсли;
	Возврат Свойство.Ссылка;
КонецФункции

Функция НайтиДобавитьСвойствоДокумента(ИмяСвойства, ТипИдентификатора = Неопределено) Экспорт
	МассивДата = Новый Массив;
	МассивДата.Добавить(Тип("Дата"));
	ТипИдентификатораДата = Новый ОписаниеТипов(МассивДата, , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	НаборДокумент = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Документы");
	//НаборДокумент = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
	Если НаборДокумент = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
		 НаборДокумент = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
		 //НаборЗаказ.Предопределенный = Истина;
		 НаборДокумент.Наименование = "Документы";
		 НаборДокумент.Записать();
		 НаборДокумент = НаборДокумент.Ссылка;
	КонецЕсли;
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства+" (Документы)");
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Свойство.ЭтоДополнительноеСведение = Истина;
		Свойство.Наименование = ИмяСвойства + " (Документы)";
		Если НЕ УТ111 Тогда
			Свойство.Заголовок = ИмяСвойства;
			Свойство.НаборСвойств = НаборДокумент.Ссылка;//Справочники.НаборыДополнительныхРеквизитовИСведений.;
			//Свойство.НаборСвойств = НаборЗаказ.Ссылка;
			Свойство.ДополнительныеЗначенияИспользуются = Ложь;
		КонецЕсли;
		Если ТипИдентификатора = Неопределено Тогда
			Свойство.ТипЗначения = ТипИдентификатораДата;
		Иначе
			Свойство.ТипЗначения = ТипИдентификатора;
		КонецЕсли;
		Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11 "+СокрЛП(ТекущаяДата());
		Свойство.ЭтоДополнительноеСведение = Истина;
		Если НЕ УТ111 Тогда
			Свойство.Виден = Истина;
			Свойство.Доступен = Истина;
		КонецЕсли;
		Свойство.Записать();
		//НайтиДобавитьНаборДополнительныхРеквизитовИСведенийЗаказ(Свойство, НаборЗаказ.Ссылка);
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НаборыДокумента.Свойство
		               |ИЗ
		               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДокумента
		               |ГДЕ
		               |	НаборыДокумента.Свойство = &Свойство
		               |	И НаборыДокумента.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Свойство", Свойство.Ссылка);
		Запрос.УстановитьПараметр("Ссылка", НаборДокумент.Ссылка);
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			сообщить("Свойство");
			сообщить(ОписаниеОшибки());
		КонецПопытки;
		Если Результат.Пустой() Тогда
			Об = НаборДокумент.ПолучитьОбъект();
			НовСтрока = Об.ДополнительныеСведения.Добавить();
			НовСтрока.Свойство = Свойство.Ссылка;
			Об.Записать();
		КонецЕсли;
		
	КонецЕсли;
	Возврат Свойство.Ссылка;
	
	//МассивДата = Новый Массив;
	//МассивДата.Добавить(Тип("Дата"));
	//ТипИдентификатораДата = Новый ОписаниеТипов(МассивДата, , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	//
	//НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Заказы клиентов");
	//Если НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
	//	 НаборЗаказ = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
	//	 //НаборЗаказ.Предопределенный = Истина;
	//	 НаборЗаказ.Наименование = "Заказы клиентов";
	//	 НаборЗаказ.Записать();
	//КонецЕсли;
	//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства+" (Заказы клиентов)");
	//Если НЕ ЗначениеЗаполнено(Свойство) Тогда
	//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	//	Свойство.ЭтоДополнительноеСведение = Истина;
	//	Свойство.Наименование = ИмяСвойства + " (Заказы клиентов)";
	//	Свойство.Заголовок = ИмяСвойства;
	//	Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.документ.Документ_ЗаказКлиента;
	//	//Свойство.НаборСвойств = НаборЗаказ.Ссылка;
	//	Свойство.ДополнительныеЗначенияИспользуются = Ложь;
	//	Если ТипИдентификатора = Неопределено Тогда
	//		Свойство.ТипЗначения = ТипИдентификатораДата;
	//	Иначе
	//		Свойство.ТипЗначения = ТипИдентификатора;
	//	КонецЕсли;
	//	Свойство.Комментарий = "создан автоматически из обработки ABCP_УТ11 "+СокрЛП(ТекущаяДата());
	//	Свойство.ЭтоДополнительноеСведение = Истина;
	//	Если НЕ УТ111 Тогда
	//		Свойство.Виден = Истина;
	//		Свойство.Доступен = Истина;
	//	КонецЕсли;
	//	Свойство.Записать();
	//	НайтиДобавитьНаборДополнительныхРеквизитовИСведенийЗаказ(Свойство, НаборЗаказ.Ссылка);
	//КонецЕсли;
	//Возврат Свойство.Ссылка;
КонецФункции
#КонецОбласти

Функция НайтиУдаленныеМодуль() Экспорт
	НайтиУдаленные();
	Возврат ТаблицаЗаявок;
КонецФункции

Процедура НайтиУдаленные(Глубина = 0) Экспорт
	//https://www.abcp.ru/wiki/API.ABCP.Admin#.D0.9F.D0.BE.D0.BB.D1.83.D1.87.D0.B5.D0.BD.D0.B8.D0.B5_.D1.81.D0.BF.D0.B8.D1.81.D0.BA.D0.B0_.D0.B7.D0.B0.D0.BA.D0.B0.D0.B7.D0.BE.D0.B2
	//ищем заказы, которые есть в 1С, но уже удалены из ABCP, если к нему ничего не привязано, тогда удаляем из 1С
	//withDeleted - Признак, возвращать ли в ответе удаленные заказы и позиции
	Если НЕ ПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДоступов.Количество() > 0 Тогда
		ЗаписьВЛог("По нескольким доступам будут проблемы при удалении заявок",,Истина);
		Возврат;		
	КонецЕсли; 
	
	//Возврат;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка КАК Ссылка,
	               |	ВЫРАЗИТЬ(ЗаказПоставщику.ДокументОснование КАК Документ.ЗаказКлиента) КАК ДокументОснование
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |ГДЕ
	               |	ЗаказПоставщику.ДокументОснование = &ДокументОснование
	               |	И ТИПЗНАЧЕНИЯ(ЗаказПоставщику.ДокументОснование) = ТИП(Документ.ЗаказКлиента)
	               |	И ЗаказПоставщику.ПометкаУдаления = ЛОЖЬ";
	
	НенайденныеКонтрагенты = Новый ТаблицаЗначений;
	НенайденныеКонтрагенты.Колонки.Добавить("ИдентификаторКонтрагента");
	НенайденныеКонтрагенты.Колонки.Добавить("Контрагент");
	НенайденныеКонтрагенты.Колонки.Добавить("НомерЗаявки");
	НенайденныеПоставщики = Новый СписокЗначений;//чтобы по несколько раз не предупреждал
	ТаблицаЗаявок.Очистить();
	ТаблицаНоменклатуры.Очистить();
	ГлубинаПросмотраВсехЗаявок = 0;
	Если Глубина = 0 Тогда
		Если ГлубинаПросмотраДляПроведения = 0 Тогда
			ГлубинаПросмотраВсехЗаявок = ГлубинаПросмотраЗаявок;
		Иначе
			ГлубинаПросмотраВсехЗаявок = ГлубинаПросмотраДляПроведения;
		КонецЕсли;
	Иначе
		//Глубина = ГлубинаПросмотраВсехЗаявок;
	КонецЕсли;
	ДатаНачала = НачалоДня(ТекущаяДата())-Глубина*24*3600;
	ДатаОкончания = ТекущаяДата();
	//надо на новый API переделать, так как возвращает только 1000
	ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+"&dateCreatedStart="+Формат(ДатаНачала, "ДФ='yyyy-MM-dd HH:mm:ss'")+"&dateCreatedEnd="+Формат(ДатаОкончания, "ДФ=yyyy-MM-dd")+" 23:59:59&format=short&withDeleted=1";
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = HTTPОтвет.КодСостояния;
	СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	СписокКонтрагентовДляОбновленияБаланса = Новый СписокЗначений;
	ЗаписьВЛог("Поиск заявок, которые уже удалены в ABCP, глубина просмотра "+ГлубинаПросмотраВсехЗаявок+", всего заявок, включая удалённые "+СписокЭлементов.Количество(),7);
	//ПодключитьОбработчикОжидания("ОболочкаОбработчика", 2, Истина);
	ПорядковыйНомерЗаявки = 0;
	КоличествоЗаявок = СписокЭлементов.Количество();
	СтруктураИндикатора = Новый Структура("КоличествоЗаявок", КоличествоЗаявок);
	СтруктураИндикатора.Вставить("ПорядковыйНомерЗаявки");
	//АдресХранилищаИндикатора = ПоместитьВоВременноеХранилище(СтруктураИндикатора);
	Для Каждого Элемент Из СписокЭлементов Цикл
		//еще есть информаци о платежах Элемент.paymentTypeId
		//https://helpf.pro/faq/view/1302.html - обработка ожидания
		//Если (ФильтрПоЗаявке <> 0) И (ФильтрПоЗаявке <> Число(Элемент.number)) Тогда //для отладки загрузки одной заявки
		//	Продолжить;
		//КонецЕсли;
		//чтобы не было дублирования заявок
		Дубликат = ТаблицаЗаявок.Найти(Число(Элемент.number), "НомерЗаявки");
		Если Дубликат<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.isDelete = "0" Тогда
			Продолжить;
		КонецЕсли;
		НовЗаявка = ТаблицаЗаявок.Добавить();
		НовЗаявка.НомерЗаявки = Элемент.number;
		НовЗаявка.ДатаЗаявки = ПреобразоватьИзСтрокиВДату(Элемент.date);
		НовЗаявка.dateUpdated = ПреобразоватьИзСтрокиВДату(Элемент.dateUpdated);
		Если Элемент.Свойство("positionsQuantity") <> Ложь Тогда
			НовЗаявка.Позиций = Элемент.positionsQuantity;
		КонецЕсли;
		//НовЗаявка.СуммаЗаявки = Элемент.sum;
		НовЗаявка.ДатаОбновления = ПреобразоватьИзСтрокиВДату(Элемент.dateUpdated);
		НовЗаявка.Комментарий = Элемент.comment;
		НовЗаявка.isDelete = Элемент.isDelete;
		НовЗаявка.ЗаказКлиента = НайтиЗаявку(НовЗаявка.НомерЗаявки, Дата(НовЗаявка.ДатаЗаявки));
	КонецЦикла;
	
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		Если Не ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
			Продолжить;
		КонецЕсли;
		Об = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
		Попытка
			Об.УстановитьПометкуУдаления(Истина);
			ТекстСообщения = "Нет заказа в ABCP № "+СокрЛП(СтрокаЗаявки.НомерЗаявки) + ", помечаем на удаление в 1С " + СокрЛП(СтрокаЗаявки.ЗаказКлиента)+", "+СокрЛП(СтрокаЗаявки.Контрагент);
			ЗаписьВЛог(ТекстСообщения,6,Истина);
		Исключение
			ЗаписьВЛог(ОписаниеОшибки(),6,Истина);
		КонецПопытки;
		Запрос.УстановитьПараметр("ДокументОснование", СтрокаЗаявки.ЗаказКлиента);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Об = Выборка.Ссылка.ПолучитьОбъект();
				Попытка
					Об.УстановитьПометкуУдаления(Истина);
					ТекстСообщения = "Нет заказа в ABCP № "+СокрЛП(СтрокаЗаявки.НомерЗаявки) + ", помечаем на удаление связанный заказ поставщику в 1С " + СокрЛП(Выборка.Ссылка);
					ЗаписьВЛог(ТекстСообщения,6,Истина);
				Исключение
					ЗаписьВЛог(ОписаниеОшибки(),6,Истина);
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат;
	//так как добавили в запрос withDeleted, то более сложный метод уже не актуален
	//теперь за этот же период собираем заявки
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка КАК Ссылка,
	               |	ЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	               |	ЗаказКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И ЗаказКлиента.ПометкаУдаления = ЛОЖЬ
	               |	И ЗаказКлиента.НомерПоДаннымКлиента <> """"";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ЗаписьВЛог("Не найдены заявки в 1С за период "+ДатаНачала+"-"+ДатаОкончания, 1, Истина);
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Структура = Новый Структура("НомерЗаявки");
	Структура.Вставить("ДатаЗаявки");
	СписокНеНайденных = Новый СписокЗначений;
	СписокНеНайденныхСтрокой = "";
	Пока Выборка.Следующий() Цикл
		Структура.НомерЗаявки = СокрЛП(Выборка.НомерПоДаннымКлиента);
		Структура.ДатаЗаявки = Дата(Выборка.ДатаПоДаннымКлиента);
		НайденныеСтроки = ТаблицаЗаявок.НайтиСтроки(Структура);
		Если НайденныеСтроки.Количество()>0 Тогда
			Продолжить;
		КонецЕсли;
		СписокНеНайденных.Добавить(Выборка.Ссылка);
		СписокНеНайденныхСтрокой = СписокНеНайденныхСтрокой + ", "+ Структура.НомерЗаявки
	КонецЦикла;
	Если СписокНеНайденных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//перепроверяем заявки по списку
	
	//желательно порциями сразу загрузить, а потом разбирать, что в этой порции есть, а чего нет
	Для Каждого Элемент Из СписокНеНайденных Цикл
		//делаем запрос по каждой ненайденной
		//ТекстЗапроса = "/cp/order?userlogin="+Пользователь+"&userpsw="+Пароль+"&number="+СокрЛП(Элемент.Значение.НомерПоДаннымКлиента);
		ТекстЗапроса = "/cp/orders?userlogin="+Пользователь+"&userpsw="+Пароль+"&numbers[]="+СокрЛП(Элемент.Значение.НомерПоДаннымКлиента);
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если СтрокаОтвет = "[]" Тогда
			ТекстСообщения = "Не найден заказ в ABCP № "+СокрЛП(Элемент.Значение.НомерВходящий) + ", помечаем на удаление в 1С " + СокрЛП(Элемент.Значение)+" " + СокрЛП(Элемент.Значение.Контрагент);
			Об = Элемент.Значение.ПолучитьОбъект();
			Если НЕ Об.ПометкаУдаления Тогда
				Об.УстановитьПометкуУдаления(Истина);
				ЗаписьВЛог(ТекстСообщения,6,Истина);
			КонецЕсли;
			Продолжить;
		Иначе
			Если КодСостояния <> 200 Тогда
				//найденный, если не найден, возвращает ошибку 404
				Если КодСостояния = 404 И СтрокаОтвет="{""errorCode"":301,""errorMessage"":""Order with such online number not found""}" Тогда
					ТекстСообщения = "Нет заказа в ABCP № "+СокрЛП(Элемент.Значение.НомерПоДаннымКлиента) + ", помечаем на удаление в 1С " + СокрЛП(Элемент.Значение)+", "+СокрЛП(Элемент.Значение.Контрагент);
					Об = Элемент.Значение.ПолучитьОбъект();
					Попытка
						Об.УстановитьПометкуУдаления(Истина);
						ЗаписьВЛог(ТекстСообщения,6,Истина);
					Исключение
						ЗаписьВЛог(ОписаниеОшибки(),6,Истина);
					КонецПопытки;
					Продолжить;
				Иначе
					ТекстСообщения = "Проверка удаленных заказов, № заказа "+СокрЛП(Элемент.Значение.НомерПоДаннымКлиента) + ", ответ сервера: " + СтрокаОтвет;
					ЗаписьВЛог(ТекстСообщения,6,Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//этот код работает только с клиентами, с сотрудниками не работает
	//Тогда можем порекомендовать следующее. Вы можете получить md5 пароля клиента, вызвав запрос cp/user с параметром md5psw=1.
	//Далее Вы можете получить список заказов клиента, используя его данные(email и md5-пароль) с помощью orders
	//http://docs.abcp.ru/wiki/API:Docs#.D0.9F.D0.BE.D0.BB.D1.83.D1.87.D0.B5.D0.BD.D0.B8.D0.B5_.D1.81.D0.BF.D0.B8.D1.81.D0.BA.D0.B0_.D0.B7.D0.B0.D0.BA.D0.B0.D0.B7.D0.BE.D0.B2
	//При необходимости по полученному списку заказов Вы можете получить подробную информацию с помощью cp/order
	//http://docs.abcp.ru/wiki/API:Docs#.D0.9F.D0.BE.D0.BB.D1.83.D1.87.D0.B5.D0.BD.D0.B8.D0.B5_.D0.B8.D0.BD.D1.84.D0.BE.D1.80.D0.BC.D0.B0.D1.86.D0.B8.D0.B8_.D0.BE_.D0.B7.D0.B0.D0.BA.D0.B0.D0.B7.D0.B5
КонецПроцедуры

Процедура УдалитьУдаленные(Глубина = 0) Экспорт
	Если Глубина = 0 Тогда
		ГлубинаПросмотраВсехЗаявок = 30;
	Иначе
		ГлубинаПросмотраВсехЗаявок = Глубина;
	КонецЕсли;
	ДатаНачала = НачалоДня(ТекущаяДата())-ГлубинаПросмотраВсехЗаявок*24*3600;
	ДатаОкончания = ТекущаяДата();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка КАК Ссылка,
	               |	ЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	               |	ЗаказКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И ЗаказКлиента.ПометкаУдаления = ИСТИНА
	               |	И ЗаказКлиента.НомерПоДаннымКлиента <> """"";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		УдалитьЗаказИСвязанные(Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьЗаказИСвязанные(ЗаказДляУдаления, УдалитьСамЗаказ = Истина)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	               |ГДЕ
	               |	ВозвратТоваровОтКлиента.ДокументРеализации.ЗаказКлиента = &ДокументОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Ссылка
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.ДокументПоступления.ЗаказПоставщику.ДокументОснование = &ДокументОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.ЗаказКлиента = &ДокументОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПриобретениеТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	               |ГДЕ
	               |	ПриобретениеТоваровУслуг.ЗаказПоставщику.ДокументОснование = &ДокументОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |ГДЕ
	               |	ЗаказПоставщику.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ЗаказДляУдаления);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	//УстановитьПривилегированныйРежим(Истина);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Об.УстановитьПометкуУдаления(Истина);
		ЗаписьВЛог(""+ЗаказДляУдаления+" удаляем связанный: "+ЗаказДляУдаления);
		//Об.ОбменДанными.Загрузка = Истина;
		Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Об.ОбменДанными.Загрузка = Истина;
		Об.Удалить();
	КонецЦикла;
	Если УдалитьСамЗаказ Тогда
		Об = ЗаказДляУдаления.ПолучитьОбъект();
		Об.УстановитьПометкуУдаления(Истина);
		ЗаписьВЛог(""+ЗаказДляУдаления+" удаляем сам заказ");
		Об = ЗаказДляУдаления.ПолучитьОбъект();
		Об.ОбменДанными.Загрузка = Истина;
		Об.Удалить();
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ЗаполнитьТаблицуПоставщиков()
	ТаблицаПоставщиков.Очистить();
	//Если НЕ ОбработкаОбъект.ПараметрыЗаполнены(Истина) Тогда
	//	сообщить("Не все параметры заполнены");
	//	Возврат СписокПоставщиков;
	//КонецЕсли;
	ТекстЗапроса = "/cp/distributors?userlogin="+Пользователь+"&userpsw="+Пароль;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	//UnicodeEncode(СтрокаОтветUTF8);
	//только на сервере РеквизитФормыВЗначение("Объект").UnicodeEncode(СтрокаОтвет);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	Иначе
		//СписокЭлементов = СтруктураИзJSON();
		//Сообщить(СтрокаОтвет);
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Для Каждого Элемент Из СписокЭлементов Цикл
			Если Элемент.isEnabled = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если Найти(Элемент.description, "Необходимо связаться с менеджером для предоставления прав  для работы с веб сервисом.") > 0 Тогда
				Продолжить;
			КонецЕсли;
			НовСтрока = ТаблицаПоставщиков.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Элемент);
			Если Элемент.Свойство("updateTime") Тогда
				НовСтрока.updateTime = ПреобразоватьИзСтрокиВДату(Элемент.updateTime);
			КонецЕсли;
			//СписокПоставщиков.Добавить(Элемент.id, Элемент.name+" ("+Элемент.id+")");
			//сообщить("id поставщика: " + Элемент.id);
			//сообщить("Имя поставщика: " + Элемент.name);
			//сообщить("Публичное (измененное) имя поставщика: " + Элемент.publicName);
			//сообщить("Валюта поставщика: " + Элемент.currencyDesignation);
			//сообщить("Статус поставщика: " + Элемент.isEnabled);
			////сообщить("Последнее обновление (у онлайн поставщиков не выводится): " + Элемент.updateTime);
			////сообщить("Позиций в наличии: " + Элемент.positionsNumber);
			//сообщить("Норма обновления в днях для поставщика: " + Элемент.updateRateInDays);
			//сообщить("email поставщика: " + Элемент.email);
			//сообщить("Имя: " + Элемент.firstName);
			//сообщить("Фамилия: " + Элемент.lastName);
			//сообщить("Город: " + Элемент.city);
			//сообщить("Телефон: " + Элемент.phone);
			//сообщить("Мобильный: " + Элемент.mobile);
			//сообщить("Правовая форма организации.: " + Элемент.organizationForm);
			//сообщить("Наименование по регистрации (без правовой формы юр. лица): " + Элемент.organizationOfficialName);
			//сообщить("ИНН: " + Элемент.inn);
			//сообщить("КПП: " + Элемент.kpp);
			//сообщить("Юридический адрес организации: " + Элемент.organizationOfficialAddress);
			//сообщить("Наименование банка: " + Элемент.bankName);
			//сообщить("БИК банка: " + Элемент.bik);
			//сообщить("Корреспондентский счет банка: " + Элемент.correspondentAccount);
			//сообщить("Расчетный счет организации: " + Элемент.organizationAccount);
			//сообщить("Описание: " + Элемент.Описание);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьПрайсПоEmail(ИмяФайла, ИмяФайлаВыгрузки = "", ИдПоставщика = "", НаименованиеПоставщика = "") Экспорт
	//https://infostart.ru/public/87211/
	//ещё есть Пример работы с Google Documents List Data API
	//http://pro1c.org.ua/index.php?showtopic=4128
	//Выгрузка табличного документа в Google таблицу
	//https://geektimes.ru/post/7781/
	//Советы: пакетный экспорт и импорт документов в Google Docs
	//https://habrahabr.ru/sandbox/46965/
	//Автоматическое добавление данных в Google Docs
	Если ТекстПисьма = "" Тогда 
		ТекстПисьма = "рассылка прайса";
	КонецЕсли;
	Если ТемаПисьма = "" Тогда 
		ТемаПисьма = "рассылка прайса";
	КонецЕсли;
	Если ИмяФайла = "" Тогда
		ТаблицаОстатков.Загрузить(НоменклатураЗаполнитьЗапрос(Истина, ВидЦеныДляКонтрагента).Выгрузить());
		Если ТаблицаОстатков.Количество() = 0 Тогда
			ЗаписьВЛог("Нет остатков на складе для рассылки по Email");
			Возврат;//нет остатков
		КонецЕсли;
	Иначе
		ИмяФайлаExcel = ИмяФайла;
	КонецЕсли;
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераSMTP = ПочтовыйСервер;
	Профиль.ПортSMTP = ПортSMTP;
	Профиль.Пользователь = ПользовательДляEmail;
	Профиль.Пароль = ПарольДляEmail;
	Профиль.ПользовательSMTP = ПользовательДляEmail;
	Профиль.ПарольSMTP = ПарольДляEmail;
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	Профиль.ТолькоЗащищеннаяАутентификацияSMTP = Ложь;
	Профиль.ИспользоватьSSLSMTP = Истина;
	Почта = Новый ИнтернетПочта;

	Письмо = Новый ИнтернетПочтовоеСообщение;
	Текст = Письмо.Тексты.Добавить(ТекстПисьма);
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Письмо.Тема = ТемаПисьма; 
	Письмо.Отправитель = ПользовательДляEmail;
	Если Не ЗначениеЗаполнено(ПодписьОтправителя) Тогда
		Письмо.ИмяОтправителя = ПользовательДляEmail;
	Иначе
		Письмо.ИмяОтправителя = СокрЛП(ПодписьОтправителя);
	КонецЕсли;
	Если ИмяФайла = "" Тогда
		ПозицияПоследнегоСлеша = 0;
		ДС = СтрДлина(ИмяФайлаExcel);
		Пока ДС > 0 Цикл
			Если Сред(ИмяФайлаExcel, ДС, 1) = "\" Тогда 
				ПозицияПоследнегоСлеша = ДС;
				Прервать;
			КонецЕсли;
			ДС = ДС - 1;
		КонецЦикла;
		Если ПозицияПоследнегоСлеша > 0 Тогда
			ПутьКПрайсу = Лев(ИмяФайлаExcel, ПозицияПоследнегоСлеша);
		Иначе
			ПутьКПрайсу = НСтр(СтрокаСоединенияИнформационнойБазы(),"File")+"\";
		КонецЕсли;
		Если ИмяФайлаВыгрузки = "" Тогда
			Если НРег(Прав(СокрЛП(ИмяФайлаВыгрузки),3)) = "csv" Тогда
				ИмяПрайса = ПутьКПрайсу + ИмяФайлаВыгрузки;
				Сообщить("Имя прайс-листа для выгрузки: "+ИмяПрайса);
				ВыгрузитьНоменклатуруВCSV(ИмяПрайса, ИмяПрайса+".zip", Ложь);
			Иначе		
				ИмяПрайса = ПутьКПрайсу + ИмяФайлаВыгрузки;
				Сообщить("Имя прайс-листа для выгрузки: "+ИмяПрайса);
				ВыгрузитьИзТабличногоДокументаВExcel(ИмяПрайса, ИмяПрайса+".zip", Ложь);
			КонецЕсли;
		Иначе
			Если НРег(Прав(СокрЛП(ИмяФайлаExcel),3)) = "csv" Тогда
				ИмяПрайса = ПутьКПрайсу + "price_"+Формат(Год(ТекущаяДата()),"ЧГ=0")+"_"+Формат(ТекущаяДата(),"ДФ=MM")+"_"+Формат(ТекущаяДата(),"ДФ=dd")+".csv";
				Сообщить("Имя прайс-листа для выгрузки: "+ИмяПрайса);
				ВыгрузитьНоменклатуруВCSV(ИмяПрайса, ИмяПрайса+".zip", Ложь);
			Иначе		
				ИмяПрайса = ПутьКПрайсу + "price_"+Формат(Год(ТекущаяДата()),"ЧГ=0")+"_"+Формат(ТекущаяДата(),"ДФ=MM")+"_"+Формат(ТекущаяДата(),"ДФ=dd")+".xls";
				Сообщить("Имя прайс-листа для выгрузки: "+ИмяПрайса);
				//ВыгрузитьНоменклатуруВExcel(ИмяПрайса, ИмяПрайса+".zip", Ложь);
				ВыгрузитьИзТабличногоДокументаВExcel(ИмяПрайса, ИмяПрайса+".zip", Ложь);
			КонецЕсли;
		КонецЕсли;
		ИмяПрайса = ИмяПрайса+".zip";
		Письмо.Вложения.Добавить(ИмяПрайса);
	Иначе
		Письмо.Вложения.Добавить(ИмяФайла);
	КонецЕсли;		
	Письмо.Получатели.Добавить(EmailПолучателя);
	Попытка
		Почта.Подключиться(Профиль);
		ЗаписьВЛог("Подключено к серверу: "+ПочтовыйСервер+":"+ПортSMTP, 1, Истина);
	Исключение
		ЗаписьВЛог("Не удалось подключиться к серверу: "+ПочтовыйСервер+":"+ПортSMTP, 1, Истина);
		ЗаписьВЛог(ОписаниеОшибки(),1,Истина);
		Возврат;
	КонецПопытки;
	Попытка
		Почта.Послать(Письмо);
		ЗаписьВЛог("Отправлено письмо по адресу: "+EmailПолучателя, 1, Истина);
	Исключение
		ЗаписьВЛог("Не удалось отправить прайс по адресу: "+EmailПолучателя, 1, Истина);
		ЗаписьВЛог(ОписаниеОшибки(),1,Истина);
		Возврат;
	КонецПопытки;
	Почта.Отключиться();
	
	Возврат;
	//Сервер = ПочтовыйСервер;//"smtp.yandex.ru"
	//Порт = ПортSMTP;//465
	//ОтКого = ПодписьОтправителя;
	//Пользователь = ПользовательДляEmail;
	//Пароль = ПарольДляEmail;
	////Шел=СоздатьОбъект("WScript.Shell");
	////Шел.run("ping -n 1 -w 2000 0.0.0.1",0,-1);
	//CDO = Новый COMОбъект("CDO.Message");
	////'Set iConf = CreateObject("CDO.Configuration")
	//CDO.From = СокрЛП(ОтКого);
	//CDO.To = СокрЛП(EmailПолучателя);
	//Тема = ТемаПисьма;
	//CDO.Subject = СокрЛП(Тема);
	//CDO.Textbody = СокрЛП(ТекстПисьма);
	//CDO.BodyPart.Charset="koi8-r";
	//CDO.AddAttachment(ИмяФайла);
	////CDO.Configuration.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendusing").Value=2;
	//CDO.Configuration.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpserver").Value=СокрЛП(Сервер);
	//CDO.Configuration.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpserverport").Value=Порт;
	//CDO.Configuration.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpusessl").Value = 1;
	//CDO.Configuration.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate").Value=1;//// 0 - Do not authenticate; 1 - basic (clear-text) authentication; 2 - NTLM
	//CDO.Configuration.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendusing").Value=2;
	//CDO.Configuration.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendusername").Value=СокрЛП(Пользователь);
	//CDO.Configuration.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendpassword").Value=СокрЛП(Пароль);
	//CDO.Configuration.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpusessl").Value = 1;//True
	//CDO.Configuration.Fields.Item("urn:schemas:mailheader:content-language").Value = "koi8-r";
	//CDO.Configuration.Fields.Update();
	//CDO.From = СокрЛП(Пользователь);
	//Попытка
	//	CDO.Send();    
	//	ТекстСообщения = "Прайс отправлен на "+EmailПолучателя;
	//	ЗаписьВЛог(ТекстСообщения,1,Истина);
	//Исключение
	//	ЗаписьВЛог(ОписаниеОшибки(),1,Истина);
	//	ТекстСообщения = "Не получилось отправить прайс на "+EmailПолучателя;
	//	ЗаписьВЛог(ТекстСообщения,1,Истина);
	//КонецПопытки;
КонецПроцедуры

Процедура СостояниеЗагрузки() Экспорт
	а=1;
КонецПроцедуры

Процедура ВыгрузитьОстаткиПоСкладам() Экспорт
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Примечание, , ,"Выгрузить остатки");
	//если несколько галок, то выгружаем по каждой
	Структура = Новый Структура("Выгружать", Истина);
	врем = "Складов:"+СокрЛП(ТаблицаСкладов.Количество())+" ";
	Для Каждого ТекСтрока Из ТаблицаСкладов Цикл
		врем = врем + "склад: "+ СокрЛП(ТекСтрока.Склад)+", ид "+ТекСтрока.ИдентификаторПоставщика+" выгр."+СокрЛП(ТекСтрока.Выгружать);
	КонецЦикла;
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Примечание, , ,врем);
	НайденныеСтроки = ТаблицаСкладов.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() = 0 Тогда //выгружаем по старому
		ВыгрузитьПрайсНаСайт();
	Иначе
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Примечание, , ,"Найденных складов для выгрузки: "+НайденныеСтроки.Количество());
		Если Франчайзи Тогда
			СохранитьАдресСервиса = АдресСервиса;
			СохранитьПользователь = Пользователь;
			СохранитьПароль = Пароль;
		КонецЕсли;

		Если ОбъединятьСкладыПриВыгрузке Тогда
			//но все склады должны быть в одной цене на закладке "Настройки"
			ГруппаСкладов = Новый Массив;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ГруппаСкладов.Добавить(НайденнаяСтрока.Склад);
				ВидЦены = НайденнаяСтрока.ВидЦены;
				ЗаписьВЛог("добавлен в сводные остатки склад: "+ СокрЛП(НайденнаяСтрока.Склад));
			КонецЦикла;
			Если ГруппаСкладов.Количество() = 0 Тогда
				ЗаписьВЛог("Нет складов при объединении складов ");
			Иначе
				ИдПоставщика = Формат(ИдентификаторПоставщика, "ЧГ=0");
				ЗаписьВЛог("объединены склады в количестве "+ СокрЛП(ГруппаСкладов.Количество())+", идпоставщика "+идпоставщика);
				ВыгрузитьПрайсНаСайт(ИдПоставщика, ГруппаСкладов);
			КонецЕсли;
			
		Иначе
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если Франчайзи Тогда
					АдресСервиса = НайденнаяСтрока.АдресСервиса;
					Пользователь = НайденнаяСтрока.Пользователь;
					СтрокиФранчайзи = ТаблицаДоступов.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
					Если СтрокиФранчайзи.Количество() = 0 Тогда
						ЗаписьВЛог("Не найден пароль по доступу пользователя "+Пользователь,5,Истина);
						Продолжить;
					Иначе
						Пароль = СтрокиФранчайзи[0].Пароль;
					КонецЕсли;
				КонецЕсли;
				
				ВремСклад = НайденнаяСтрока.Склад;
				ВидЦены = НайденнаяСтрока.ВидЦены;
				ИдПоставщика = Формат(НайденнаяСтрока.ИдентификаторПоставщика, "ЧГ=0");
				ПолучитьОстатки(Истина, ВидЦены, ВремСклад, ,, НайденнаяСтрока);
				ТекстСообщения = "склад: "+ СокрЛП(ВремСклад)+", ВидЦены "+ВидЦены+", идпоставщика "+идпоставщика+", позиций "+ТаблицаОстатков.Количество();
				ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Информация, , ,ТекстСообщения);
				Если ТаблицаОстатков.Количество() = 0 Тогда
					ЗаписьВЛог("Нет позиций на складе "+ВремСклад+", ид "+ИдПоставщика+", вид цены "+ВидЦены);
				Иначе
					ВыгрузитьПрайсНаСайт(ИдПоставщика);
					Попытка
						ОбщегоНазначенияБТС.Пауза(3);//а то может быть "Ресурс заблокирован. Превышено ограничение количества обращений в минуту/час/сутки. Функционал станет снова доступен по истечении минуты/часа/суток."
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Франчайзи Тогда
			АдресСервиса = СохранитьАдресСервиса;
			Пользователь = СохранитьПользователь;
			Пароль = СохранитьПароль;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузитьОстаткиПоСкладамНаEmail() Экспорт
	//по каждому складу получаем остатки, выгружаем их в файл
	//ОтправитьПрайсПоEmail(ИмяФайла, ИмяФайлаВыгрузки = "", ИдПоставщика = "", НаименованиеПоставщика = "")
КонецПроцедуры

Процедура ВыгрузитьОбщиеОстатки() Экспорт
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Информация, , ,"Выгрузить общие остатки");
	ИдПоставщика = СокрЛП(КодОбщегоСклада);
	Если ИдПоставщика = "" Тогда
		ЗаписьВЛог("не выбран код общего склада",,Истина);
		Возврат;
	КонецЕсли;
	//если несколько складов отмечено, то надо по нескольким выгружать
	Кол = ТаблицаОстатков.Количество();
	Если ОбъединятьСкладыПриВыгрузке Тогда
		//но все склады должны быть в одной цене на закладке "Настройки"
		ГруппаСкладов = Новый Массив;
		Структура = Новый Структура("Выгружать", Истина);
		НайденныеСтроки = ТаблицаСкладов.НайтиСтроки(Структура);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ГруппаСкладов.Добавить(НайденнаяСтрока.Склад);
			ВидЦены = НайденнаяСтрока.ВидЦены;
			//ТаблицаОбщихОстатков = ПолучитьОстатки(Истина, ВидЦены, ВремСклад).Выгрузить();
			ЗаписьВЛог("добавлен в сводные остатки склад: "+ СокрЛП(НайденнаяСтрока.Склад));
		КонецЦикла;
	КонецЕсли;
	Если ГруппаСкладов.Количество() = 0 Тогда
		ЗаписьВЛог("нет наших выгружаемых складов",,Истина);
		Возврат;
	КонецЕсли;
	Если Кол = 0 Тогда
		//ТаблицаОстатков.Загрузить(ПолучитьОстатки(Истина, ВидЦены,,,Истина).Выгрузить());
		ПолучитьОстатки(Истина, ВидЦены,,,ГруппаСкладов);
	КонецЕсли;
	Если ТаблицаОстатков.Количество() = 0 Тогда
		//ЗаписьВЛог("Нет остатков в Таблице остатков "+ ИдПоставщика,5);
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Информация, , "Нет остатков по поставщику "+ИдПоставщика+", складу: "+ СокрЛП(Склад));
		Возврат;//нет остатков на складе
	КонецЕсли;
	ТекстСообщения = "Выгрузка по идентификатору: "+ИдПоставщика+", позиций: "+Кол;
	ЗаписьВЛог(ТекстСообщения);
	ИмяФайлаExcel = ИмяФайлаExcel;
	Если Прав(ИмяФайлаExcel, 8) = "test.xls" Тогда
		Дополнение = СтрЗаменить(Формат(ТекущаяДата(),"ДЛФ=DT"),":",".");
		ИмяФайлаExcel = СтрЗаменить(ИмяФайлаExcel, "test.xls", "test"+Дополнение+".xls");
	КонецЕсли;
	ИмяФайлаZip = ИмяФайлаExcel+".zip";
	Если ИмяФайлаExcel = "" Или НРег(Прав(СокрЛП(ИмяФайлаExcel),3)) = "csv" Тогда
		ИмяФайлаZip = "";
	КонецЕсли;
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Примечание, ,СокрЛП(ИдПоставщика) , СокрЛП(ИдПоставщика)+", позиций "+ТаблицаОстатков.Количество());
	Если ИмяФайлаExcel = "" Или НРег(Прав(СокрЛП(ИмяФайлаExcel),3)) = "csv" Тогда
		ВыгрузитьНоменклатуруВCSV(ИмяФайлаExcel, ИмяФайлаZip, Ложь, ИдПоставщика);
	Иначе		
		//ВыгрузитьОстаткиВExcel(ИмяФайлаExcel, ИмяФайлаZip);
		ВыгрузитьИзТабличногоДокументаВExcel(ИмяФайлаExcel, ИмяФайлаZip);
		ВыгрузитьФайлНаСервер(ИмяФайлаZip, ИдПоставщика);
	КонецЕсли;
КонецПроцедуры

#Область РезервНаСайте
Процедура ПоставитьВРезервИИзменитьНаСайте() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказКлиентаТовары.Количество КАК Количество,
	               |	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
	               |	ЗаказКлиентаТовары.Ссылка.Склад КАК Склад
	               |ПОМЕСТИТЬ ВТ_ТоварыИЗаказы
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |ГДЕ
	               |	ЗаказКлиентаТовары.Ссылка.Проведен
	               |	И ЗаказКлиентаТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	               |	И ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	               |	И ЗаказКлиентаТовары.Ссылка.НомерПоДаннымКлиента <> """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаПеремещениеТовары.Номенклатура,
	               |	ЗаказНаПеремещениеТовары.Количество,
	               |	ЗаказНаПеремещениеТовары.Ссылка,
	               |	ЗаказНаПеремещениеТовары.Ссылка.СкладОтправитель
	               |ИЗ
	               |	Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	               |ГДЕ
	               |	ЗаказНаПеремещениеТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	               |	И ЗаказНаПеремещениеТовары.Ссылка.Проведен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТоварыИЗаказы.Номенклатура,
	               |	СУММА(1) КАК Кол
	               |ПОМЕСТИТЬ ВТ_КолПовтНом
	               |ИЗ
	               |	ВТ_ТоварыИЗаказы КАК ВТ_ТоварыИЗаказы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ТоварыИЗаказы.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТоварыИЗаказы.Ссылка КАК Ссылка,
	               |	ВТ_ТоварыИЗаказы.Номенклатура,
	               |	ВТ_ТоварыИЗаказы.Ссылка.Дата КАК Дата,
	               |	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток КАК Остаток,
	               |	ВТ_ТоварыИЗаказы.Количество,
	               |	ВТ_КолПовтНом.Кол
	               |ИЗ
	               |	ВТ_ТоварыИЗаказы КАК ВТ_ТоварыИЗаказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(&ТекущаяДата, ) КАК СвободныеОстаткиОстатки
	               |		ПО ВТ_ТоварыИЗаказы.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	               |			И ВТ_ТоварыИЗаказы.Склад = СвободныеОстаткиОстатки.Склад
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КолПовтНом КАК ВТ_КолПовтНом
	               |		ПО ВТ_ТоварыИЗаказы.Номенклатура = ВТ_КолПовтНом.Номенклатура
	               |ГДЕ
	               |	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток >= ВТ_ТоварыИЗаказы.Количество
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата
	               |ИТОГИ ПО
	               |	Ссылка";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	ВыборкаЗаказы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаПовторяющихяТоваровВрезерве = Новый ТаблицаЗначений;
	ТаблицаПовторяющихяТоваровВрезерве.Колонки.Добавить("Номенклатура");
	ТаблицаПовторяющихяТоваровВрезерве.Колонки.Добавить("УжеВРезерве");
	
	Пока ВыборкаЗаказы.Следующий() Цикл
		
		ДокОбъект = ВыборкаЗаказы.Ссылка.ПолучитьОбъект();
		
		ВыборкаНоменклатура = ВыборкаЗаказы.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			Если ВыборкаНоменклатура.Кол > 1 Тогда
				НайденнаяСтрока = ТаблицаПовторяющихяТоваровВрезерве.Найти(ВыборкаНоменклатура.Номенклатура,"Номенклатура");
				Если НайденнаяСтрока = Неопределено Тогда
					НоваяСтрока = ТаблицаПовторяющихяТоваровВрезерве.Добавить();
					НоваяСтрока.Номенклатура = ВыборкаНоменклатура.Номенклатура;
					НоваяСтрока.УжеВРезерве = ВыборкаНоменклатура.Количество;
				Иначе
					Если ВыборкаНоменклатура.Остаток - НоваяСтрока.УжеВРезерве < ВыборкаНоменклатура.Количество Тогда
						Продолжить;
					КонецЕслИ;						
					НоваяСтрока.УжеВРезерве = НоваяСтрока.УжеВРезерве +ВыборкаНоменклатура.Количество; 
				КонецЕсли;					
			КонецЕсли;
			НСтроки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура",ВыборкаНоменклатура.Номенклатура));
			Для Каждого НСтр из НСтроки Цикл
				НСтр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
			КонецЦикла;
		КонецЦикла;		
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ИзменитьПозицииНаСайте(ДокОбъект.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ИзменитьПозицииНаСайте(СсылкаНаДокумент)
	НомерЗаявки = СокрЛП(СсылкаНаДокумент.НомерПоДаннымКлиента);
	Если НомерЗаявки = "" Тогда
		Возврат;
	КонецЕсли;
	ТекстСообщения = СокрЛП(СсылкаНаДокумент)+", "+НомерЗаявки;
	НС = 0;
	ПереченьПозиций = "";
	Для Каждого СтрокаТовара Из СсылкаНаДокумент.Товары Цикл
		Если СтрокаТовара.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			Если СтрокаТовара.КодСтроки>1000000 Тогда
				ИдентификаторНоменклатуры = СтрокаТовара.КодСтроки;
				ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧН=0; ЧГ=0")+"][id]="+Формат(ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧН=0; ЧГ=0")+"][statusCode]="+Формат(КодСтатусаРезерв,"ЧГ=0");
				НС = НС + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ПереченьПозиций<>"" Тогда
		ТекстСообщения = ПереченьПозиций;
		ЗаписьВЛог(ТекстСообщения,3);
		ОбновитьСтатусЗаявки(Формат(НомерЗаявки,"ЧГ=0"), ПереченьПозиций, КодСтатусаРезерв,,Истина);
		ТекстСообщения = "в новой заявке:	"+Формат(НомерЗаявки,"ЧГ=0")+", " +СокрЛП(СсылкаНаДокумент)+" изменены статусы позиций на: "+Формат(КодСтатусаРезерв,"ЧГ=0");
		ЗаписьВЛог(ТекстСообщения,3);
	Иначе
		ТекстСообщения = "Нет измененных позиций";
		ЗаписьВЛог(ТекстСообщения,3);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ЗакрытиеЗаказов
Процедура ЗаполнитьОтгруженныеОтменённыеЗаказы() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказКлиентаТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка.Дата >= &Дата
		|	И ЗаказКлиентаТовары.Ссылка.Проведен = ИСТИНА
		|	И ЗаказКлиентаТовары.Ссылка.Статус <> &Статус
		|	И (ЗаказКлиентаТовары.ВариантОбеспечения = &НеТребуется
		|			ИЛИ ЗаказКлиентаТовары.ВариантОбеспечения = &Отгрузить)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияЗаказовКлиентов.Заказ.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗакрытыеВРегистре
		|ИЗ
		|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
		|ГДЕ
		|	СостоянияЗаказовКлиентов.Состояние = &Состояние
		|	И СостоянияЗаказовКлиентов.Заказ В
		|			(ВЫБРАТЬ
		|				ТЗ.Ссылка
		|			ИЗ
		|				ТЗ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияЗаказовКлиентов.Заказ.Ссылка КАК Ссылка,
		|	СостоянияЗаказовКлиентов.Заказ.Контрагент КАК Контрагент,
		|	СостоянияЗаказовКлиентов.Состояние КАК Состояние,
		|	СостоянияЗаказовКлиентов.Заказ.Статус КАК Статус,
		|	СостоянияЗаказовКлиентов.Заказ.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента
		|ИЗ
		|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
		|ГДЕ
		|	(СостоянияЗаказовКлиентов.Состояние = &ГотовКОбеспечению
		|			ИЛИ СостоянияЗаказовКлиентов.Состояние = &ГотовКЗакрытию
		|				И СостоянияЗаказовКлиентов.Заказ В
		|					(ВЫБРАТЬ
		|						ТЗ.Ссылка
		|					ИЗ
		|						ТЗ)
		|				И НЕ СостоянияЗаказовКлиентов.Заказ В
		|						(ВЫБРАТЬ
		|							ЗакрытыеВРегистре.Ссылка
		|						ИЗ
		|							ЗакрытыеВРегистре))
		|	И СостоянияЗаказовКлиентов.Заказ.Дата >= &Дата
		|	И СостоянияЗаказовКлиентов.Заказ.НомерПоДаннымКлиента <> """"";
	
	Запрос.УстановитьПараметр("НеТребуется", Перечисления.ВариантыОбеспечения.НеТребуется);
	Запрос.УстановитьПараметр("Отгрузить", Перечисления.ВариантыОбеспечения.Отгрузить);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*15);//за неделю
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаказовКлиентов.Закрыт);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияЗаказовКлиентов.Закрыт);
	Запрос.УстановитьПараметр("ГотовКОбеспечению", Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению);
	Запрос.УстановитьПараметр("ГотовКЗакрытию", Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаЗаявок.Очистить();
	СтруктураОтгрузить = Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
	СтруктураНеТребуется = Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.НеТребуется);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//сообщить(""+ВыборкаДетальныеЗаписи.Ссылка+", "+ВыборкаДетальныеЗаписи.Контрагент+", "+ВыборкаДетальныеЗаписи.Статус+", "+ВыборкаДетальныеЗаписи.Состояние);
		ОтгрузитьНеТребуется = 0;
		НСтроки = ВыборкаДетальныеЗаписи.Ссылка.Товары.НайтиСтроки(СтруктураОтгрузить);
		ОтгрузитьНеТребуется = НСтроки.Количество();
		НСтроки = ВыборкаДетальныеЗаписи.Ссылка.Товары.НайтиСтроки(СтруктураНеТребуется);
		ОтгрузитьНеТребуется = ОтгрузитьНеТребуется + НСтроки.Количество();
		СтрокВДокументе = ВыборкаДетальныеЗаписи.Ссылка.Товары.Количество();
		Если СтрокВДокументе>0 И ОтгрузитьНеТребуется = СтрокВДокументе Тогда
			НовСтрока = ТаблицаЗаявок.Добавить();
			НовСтрока.Позиций = СтрокВДокументе;
			НовСтрока.ЗаказКлиента = ВыборкаДетальныеЗаписи.Ссылка;
			НовСтрока.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
			НовСтрока.НомерЗаявки = ВыборкаДетальныеЗаписи.НомерПоДаннымКлиента;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗакрытьЗаказыИзТаблицы() Экспорт
	Для Каждого СтрокаТаблицы Из ТаблицаЗаявок Цикл
		ЗаказДляИзменения = СтрокаТаблицы.ЗаказКлиента.ПолучитьОбъект();
		ОтгрузитьИлиОтменено = 0;
		ВсегоСтрок = ЗаказДляИзменения.Товары.Количество();
		Для Каждого СтрокаЗаказа Из ЗаказДляИзменения.Товары Цикл
			Если СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Или СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
				ОтгрузитьИлиОтменено = ОтгрузитьИлиОтменено + 1;
				Если СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
					СтрокаЗаказа.Отменено = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ВсегоСтрок > 0 И ВсегоСтрок = ОтгрузитьИлиОтменено Тогда
			ЗаказДляИзменения.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
			Если ВсегоСтрок <> КоличествоОтгруженныхОтменённыхИзСтатусыABCPЗаказа(ВсегоСтрок, ЗаказДляИзменения.НомерПоДаннымКлиента) Тогда
				СтрокаТаблицы.ЗаказКлиента = "";
				Продолжить;
			КонецЕсли;
			Попытка
				ЗаказДляИзменения.Записать(РежимЗаписиДокумента.Проведение);
				
				ДатаСобытия = "";
				МенеджерЗаписи = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Заказ = ЗаказДляИзменения.Ссылка;
				МенеджерЗаписи.ДатаСобытия = "";
				МенеджерЗаписи.Состояние = Перечисления.СостоянияЗаказовКлиентов.Закрыт;
				МенеджерЗаписи.Записать();
				ЗаписьВЛог("Закрыт заказ "+ЗаказДляИзменения);
			Исключение
				сообщить(ОписаниеОшибки());
			КонецПопытки;
		Иначе
			СтрокаТаблицы.ЗаказКлиента = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция КоличествоОтгруженныхОтменённыхИзСтатусыABCPЗаказа(ВсегоСтрок, НомерЗаявки)
	//КлючОбъекта  = "ABCP_1C";
	//КлючНастроек = "ЗаказКлиента_"+Формат(НомерЗаявки,"ЧГ=0");
	//ИмяПользователя = "Администратор";//иначе другие пользователи не будут иметь доступа к этой таблице значений 
	////но, у кого неполные права, не смогут
	//Попытка
	//	СтатусыABCPЗаказа = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,  КлючНастроек, , ИмяПользователя);
	//	Если СтатусыABCPЗаказа = Неопределено Тогда
	//		Возврат 0;
	//	КонецЕсли;
	//	ОтгруженоОтказ = 0;
	//	Для Каждого СтрокаТаблицы Из СтатусыABCPЗаказа Цикл
	//		Если СтрокаТаблицы.КодСтатуса = КодСтатусаОтказ Или СтрокаТаблицы.КодСтатуса = 87670 Тогда //КодСтатусаВыдано
	//			ОтгруженоОтказ = ОтгруженоОтказ + 1;
	//		КонецЕсли;
	//	КонецЦикла;
	//	//сообщить("" + ВсегоСтрок + " " + ОтгруженоОтказ + " " + НомерЗаявки);
	//	Если ВсегоСтрок = ОтгруженоОтказ Тогда
	//		Возврат ОтгруженоОтказ;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	Возврат 0;
КонецФункции

Процедура ЗакрытиеОтгруженныхОтменённыхЗаказов() Экспорт
	
	Возврат;
	
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказКлиентаТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка.Дата >= &Дата
		|	И ЗаказКлиентаТовары.Ссылка.Проведен = ИСТИНА
		|	И ЗаказКлиентаТовары.Ссылка.Статус <> &Статус
		|	И (ЗаказКлиентаТовары.ВариантОбеспечения = &НеТребуется
		|			ИЛИ ЗаказКлиентаТовары.ВариантОбеспечения = &Отгрузить)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияЗаказовКлиентов.Заказ.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗакрытыеВРегистре
		|ИЗ
		|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
		|ГДЕ
		|	СостоянияЗаказовКлиентов.Состояние = &Состояние
		|	И СостоянияЗаказовКлиентов.Заказ В
		|			(ВЫБРАТЬ
		|				ТЗ.Ссылка
		|			ИЗ
		|				ТЗ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияЗаказовКлиентов.Заказ.Ссылка КАК Ссылка,
		|	СостоянияЗаказовКлиентов.Заказ.Контрагент КАК Контрагент,
		|	СостоянияЗаказовКлиентов.Состояние КАК Состояние,
		|	СостоянияЗаказовКлиентов.Заказ.Статус КАК Статус,
		|	СостоянияЗаказовКлиентов.Заказ.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента
		|ИЗ
		|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
		|ГДЕ
		|	(СостоянияЗаказовКлиентов.Состояние = &ГотовКОбеспечению
		|			ИЛИ СостоянияЗаказовКлиентов.Состояние = &ГотовКЗакрытию
		|				И СостоянияЗаказовКлиентов.Заказ В
		|					(ВЫБРАТЬ
		|						ТЗ.Ссылка
		|					ИЗ
		|						ТЗ)
		|				И НЕ СостоянияЗаказовКлиентов.Заказ В
		|						(ВЫБРАТЬ
		|							ЗакрытыеВРегистре.Ссылка
		|						ИЗ
		|							ЗакрытыеВРегистре))
		|	И СостоянияЗаказовКлиентов.Заказ.Дата >= &Дата
		|	И СостоянияЗаказовКлиентов.Заказ.НомерПоДаннымКлиента <> """"";
	
	Запрос.УстановитьПараметр("НеТребуется", Перечисления.ВариантыОбеспечения.НеТребуется);
	Запрос.УстановитьПараметр("Отгрузить", Перечисления.ВариантыОбеспечения.Отгрузить);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*7);//за неделю
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаказовКлиентов.Закрыт);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияЗаказовКлиентов.Закрыт);
	Запрос.УстановитьПараметр("ГотовКОбеспечению", Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению);
	Запрос.УстановитьПараметр("ГотовКЗакрытию", Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Если Отладка Тогда
			//сообщить(""+ВыборкаДетальныеЗаписи.Ссылка+", "+ВыборкаДетальныеЗаписи.Контрагент+", "+ВыборкаДетальныеЗаписи.Статус+", "+ВыборкаДетальныеЗаписи.Состояние);
			НовСтрока = ТаблицаЗаявок.Добавить();
			НовСтрока.ЗаказКлиента = ВыборкаДетальныеЗаписи.Ссылка;
			НовСтрока.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
			НовСтрока.НомерЗаявки = ВыборкаДетальныеЗаписи.НомерПоДаннымКлиента;
			ЗаказДляИзменения = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОтгрузитьИлиОтменено = 0;
			ВсегоСтрок = 0;
			Для Каждого СтрокаЗаказа Из ЗаказДляИзменения.Товары Цикл
				ВсегоСтрок = ВсегоСтрок + 1;
				Если СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Или СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
					ОтгрузитьИлиОтменено = ОтгрузитьИлиОтменено + 1;
					Если СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
						СтрокаЗаказа.Отменено = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ВсегоСтрок = ОтгрузитьИлиОтменено Тогда
				ЗаказДляИзменения.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
				Попытка
					ЗаказДляИзменения.Записать(РежимЗаписиДокумента.Проведение);
					
					ДатаСобытия = "";
					МенеджерЗаписи = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Заказ = ЗаказДляИзменения.Ссылка;
					МенеджерЗаписи.ДатаСобытия = "";
					МенеджерЗаписи.Состояние = Перечисления.СостоянияЗаказовКлиентов.Закрыт;
					МенеджерЗаписи.Записать();
					ЗаписьВЛог("Закрыт заказ "+ЗаказДляИзменения);
				Исключение
					сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			//Прервать;
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

Процедура ПеренестиБрендВПроизводителя() Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.Производитель КАК Производитель,
		|	Номенклатура.Марка КАК Марка,
		|	Номенклатура.Марка.Наименование КАК МаркаНаименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Производитель = &Ссылка
		|	И Номенклатура.Марка <> &Марка";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.Производители.ПустаяСсылка());
	Запрос.УстановитьПараметр("Марка", Справочники.Марки.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Соответствие = Новый Соответствие;//здесь накапливаем созданные марки
	НачатьТранзакцию();
	НС = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МаркаНаименование = ВыборкаДетальныеЗаписи.МаркаНаименование;
		Производитель = Соответствие.Получить(МаркаНаименование);
		Если НЕ ЗначениеЗаполнено(Производитель) Тогда
			Производитель = НайтиДобавитьПроизводитель(МаркаНаименование);
			Соответствие.Вставить(МаркаНаименование, Производитель);
		КонецЕсли;
		Об = ВыборкаДетальныеЗаписи.Номенклатура.ПолучитьОбъект();
		Об.Производитель = Производитель;
		Об.Записать();
		НС = НС + 1;
		Если НС % 100 = 0 Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	ЗаписьВЛог("Добавлен производитель в номенклатуру, количество записей: "+НС);
	ЗафиксироватьТранзакцию();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура ПеренестиАВЗВПроизводителя() Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.Производитель КАК Производитель,
		|	Номенклатура.АВЗ_БрендЗапчасти КАК АВЗ_БрендЗапчасти,
		|	Номенклатура.АВЗ_БрендЗапчасти.Наименование КАК АВЗ_БрендЗапчастиНаименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Производитель = &Ссылка
		|	И Номенклатура.АВЗ_БрендЗапчасти <> &АВЗ_БрендЗапчасти";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.Производители.ПустаяСсылка());
	Запрос.УстановитьПараметр("АВЗ_БрендЗапчасти", Справочники["АВЗ_БрендЗапчасти"].ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Соответствие = Новый Соответствие;//здесь накапливаем созданные марки
	НачатьТранзакцию();
	НС = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		АВЗ_БрендЗапчастиНаименование = ВыборкаДетальныеЗаписи.АВЗ_БрендЗапчастиНаименование;
		Производитель = Соответствие.Получить(АВЗ_БрендЗапчастиНаименование);
		Если НЕ ЗначениеЗаполнено(Производитель) Тогда
			Производитель = НайтиДобавитьПроизводитель(АВЗ_БрендЗапчастиНаименование);
			Соответствие.Вставить(АВЗ_БрендЗапчастиНаименование, Производитель);
		КонецЕсли;
		Об = ВыборкаДетальныеЗаписи.Номенклатура.ПолучитьОбъект();
		Об.Производитель = Производитель;
		Об.Записать();
		НС = НС + 1;
		Если НС % 100 = 0 Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	ЗаписьВЛог("Добавлен производитель в номенклатуру, количество записей: "+НС);
	ЗафиксироватьТранзакцию();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

//если в заказе стоит резерв, то снимаем с резерва, переводим в статус "Не обеспечивать"
Процедура СнятиеСРезерваСтарыхЗаказов()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|	ЗаказыКлиентовОстатки.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
		|ГДЕ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента.Дата <= &КонДата
		|	И ЗаказыКлиентовОстатки.ЗаказКлиента.Дата >= &НачДата
		|	И ЗаказыКлиентовОстатки.ЗаказаноОстаток > 0
		|	И ЗаказыКлиентовОстатки.ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыКлиентовОстатки.ЗаказКлиента,
		|	ЗаказыКлиентовОстатки.Номенклатура";
	
	Запрос.УстановитьПараметр("НачДата", ТекущаяДата() - 86400);//заказ старше суток
	Запрос.УстановитьПараметр("КонДата", ТекущаяДата() - 86400 * 7);//смотрим только за неделю
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//НачатьТранзакцию();
		Об = ВыборкаДетальныеЗаписи.ЗаказКлиента.ПолучитьОбъект();
		Для Каждого СтрокаДокумента Из Об.Товары Цикл
			//Если СтрокаДокумента.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется Тогда
				СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
				СтрокаДокумента = Истина;
			//КонецЕсли;
		КонецЦикла;
		Об.Комментарий = СокрЛП(Об.Комментарий)+" снятие с резерва старого заказа "+ТекущаяДата();
		Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);//отпроводим эти документы, чтобы не мешались
		//ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

#Область СводныйЗаказРеализация
Функция ЗакрытиеЗаказовСозданиеРеализацииДляФормы() Экспорт
	ЗакрытиеЗаказовСозданиеРеализации();
	//АдресТЗЗаявки = ПоместитьВоВременноеХранилище(ТЗЗаявки.Выгрузить(), Новый УникальныйИдентификатор());
	//АдресТЗНоменклатура = ПоместитьВоВременноеХранилище(ТЗНоменклатура.Выгрузить(), Новый УникальныйИдентификатор());
	АдресТаблицаРеализацийОтбор = ПоместитьВоВременноеХранилище(ТаблицаРеализацийОтбор.Выгрузить(), Новый УникальныйИдентификатор());
	//Структура = Новый Структура("АдресТЗЗаявки,АдресТЗНоменклатура");
	//Структура.АдресТЗЗаявки = АдресТЗЗаявки;
	//Структура.АдресТЗНоменклатура = АдресТЗНоменклатура;
	Структура = Новый Структура("АдресТаблицаРеализацийОтбор,РеализацияТоваровУслуг,РасходныйОрдерНаТовары,ОтборРазмещениеТоваров");
	Структура.АдресТаблицаРеализацийОтбор = АдресТаблицаРеализацийОтбор;
	Структура.РеализацияТоваровУслуг = РеализацияТоваровУслуг;
	Структура.РасходныйОрдерНаТовары = РасходныйОрдерНаТовары;
	Структура.ОтборРазмещениеТоваров = ОтборРазмещениеТоваров;
	Возврат Структура;
КонецФункции

Функция НайтиУпаковку(Набор)
	ИндивидуальныеУпаковки = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	               |ГДЕ
	               |	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
	               |	И УпаковкиЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ";
	//Запрос.УстановитьПараметр("Владелец", Объект.НаборУпаковок);//СтрокаДокумента.Номенклатура.НаборУпаковок);
	Запрос.УстановитьПараметр("Владелец", Набор);//СтрокаДокумента.Номенклатура.НаборУпаковок);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЕдИзм = Выборка.Ссылка;
	КонецЕсли;
	Возврат ЕдИзм;	
КонецФункции

Процедура ЗакрытиеЗаказовСозданиеРеализации() Экспорт
	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	Если НЕ ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
		ЗаписьВЛог("Необходимо включить функциональную опцию «Использовать построчную отгрузку в заказе клиента»",5,Истина);
		Возврат;
	КонецЕсли;
	
	//Какой код статуса ставить, если ниже закомментировать?
	Структура = Новый Структура("СводныйЗаказКлиентаПоСтатусу", Истина);
	НайденныеСтроки = ТаблицаСтатусов.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = "В статусах нет строки с признаком сводного статуса";
		ЗаписьВЛог(ТекстСообщения,3,Истина);
		Возврат;
	КонецЕсли;
	Если НайденныеСтроки.Количество() > 1 Тогда
		ТекстСообщения = "В статусах несколько строк с признаком сводного статуса, должна быть одна";
		ЗаписьВЛог(ТекстСообщения,3,Истина);
		Возврат;
	КонецЕсли;
	НайденнаяСтрока = НайденныеСтроки[0];
	КодСтатусаДоРеализации = Формат(НайденнаяСтрока.КодСтатуса, "ЧГ=0");
	//КодСледующегоСтатуса = НайденнаяСтрока.КодСледующегоСтатуса;
	КодСтатусаПослеРеализации = Формат(НайденнаяСтрока.КодСледующегоСтатуса, "ЧГ=0");
	//СтатусПослеРеализации = КодСледующегоСтатуса;
	//проверяем, есть ли заказ в работе
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента,
	               |	ЗаказыКлиентовОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыКлиентовОстатки.КодСтроки КАК КодСтроки,
	               |	ЗаказыКлиентовОстатки.КОформлениюОстаток КАК Количество,
	               |	ЗаказыКлиентовОстатки.СуммаОстаток КАК Сумма,
	               |	ЗаказыКлиентовОстатки.СуммаОстаток КАК СуммаСНДС,
	               |	ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	               |	ЗаказыКлиентовОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказыКлиентовОстатки.Склад КАК Склад
	               |ИЗ
	               |	РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
	               |ГДЕ
	               |	ЗаказыКлиентовОстатки.ЗаказКлиента.Дата >= &НачДата
	               |	И ЗаказыКлиентовОстатки.ЗаказКлиента.НомерПоДаннымКлиента <> """"""""
	               |	И ЗаказыКлиентовОстатки.Склад = &Склад
	               |	И ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент = &ОсновнойПокупатель
	               |	И ЗаказыКлиентовОстатки.КодСтроки > 1000000
	               |	И ЗаказыКлиентовОстатки.ЗаказКлиента.Статус <> &Статус";
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата()-3600*24*7));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата())+1);
	Запрос.УстановитьПараметр("ОсновнойПокупатель", ОсновнойПокупатель);
	Запрос.УстановитьПараметр("Комментарий", "Сводный;%");//чтобы сводные заказы отличались от других, хотя они и так отличаются покупателем
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаказовКлиентов.Закрыт);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ЗаписьВЛог("Не найдены незакрытые заказы за неделю");
		Возврат;
	КонецЕсли;
	ТаблицаЗаказов = Результат.Выгрузить();
	
	////ищем незакрытые заказы по регистру "Заказы клиентов" Значение КОформлению (Заказано - если требуется)
	////ищем незакрытые заказы за эту неделю - некорректно будет, есть товары которые уже отгружены предыдущей реализацией, а теперь в ней же ещё одна позиция поменяла статус
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗаказКлиента.Ссылка КАК Ссылка
	//               |ИЗ
	//               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	//               |ГДЕ
	//               |	ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	//               |	И ЗаказКлиента.Дата МЕЖДУ &НачДата И &КонДата
	//               |	И ЗаказКлиента.ПометкаУдаления = ЛОЖЬ
	//               |	И ЗаказКлиента.Проведен = ИСТИНА
	//               |	И ЗаказКлиента.Комментарий ПОДОБНО &Комментарий
	//               |	И ЗаказКлиента.Контрагент = &ОсновнойПокупатель
	//               |	"+?(ТолькоСвоиСклады,"И ЗаказКлиента.Склад = &Склад","")+"
	//               |УПОРЯДОЧИТЬ ПО
	//               |	ЗаказКлиента.Дата";
	//Запрос.УстановитьПараметр("Склад", Склад);
	//Запрос.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата()-3600*24*7));
	//Запрос.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата())+1);
	//Запрос.УстановитьПараметр("ОсновнойПокупатель", ОсновнойПокупатель);
	//Запрос.УстановитьПараметр("Комментарий", "Сводный;%");//чтобы сводные заказы отличались от других, хотя они и так отличаются покупателем
	// 
	//Результат = Запрос.Выполнить();
	//Если Результат.Пустой() Тогда
	//	ЗаписьВЛог("Не найдены незакрытые заказы за неделю");
	//	Возврат;
	//КонецЕсли;
	////надо искать не один незакрытый заказ, а все за неделю, перепроверять их, есть что в наличии или нет, начиная от самых старых
	////если нет - ставить у этой позиции статус не обеспечивать, а в ABCP посылать статус "Отказ"
	//
	////собираем эти заказы в одну таблицу
	//ТаблицаЗаказов = Новый ТаблицаЗначений;
	//Выборка = Результат.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если ТаблицаЗаказов.Количество() = 0 Тогда
	//		//сразу создаем необходимые колонки
	//		ТаблицаЗаказов = Выборка.Ссылка.Товары.Выгрузить();
	//		ТаблицаЗаказов.Колонки.Добавить("ЗаказКлиента");
	//		ТаблицаЗаказов.Колонки.Добавить("Списать");
	//		ТаблицаЗаказов.ЗаполнитьЗначения(Выборка.Ссылка, "ЗаказКлиента");
	//		//если в этом документе были отмененные позиции, то их удаляем
	//		МассивДляУдаления = Новый Массив;
	//		Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
	//			Если ТекСтрока.Отменено Или Текстрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Или ТекСтрока.Количество = 0 Тогда
	//				МассивДляУдаления.Добавить(ТекСтрока);
	//				Продолжить;
	//			КонецЕсли;
	//			ТекСтрока.Списать = ТекСтрока.Количество;
	//			ТекСтрока.ЗаказКлиента = Выборка.Ссылка;
	//		КонецЦикла;
	//		Если МассивДляУдаления.Количество() Тогда
	//			Для Каждого ТекСтрока Из МассивДляУдаления Цикл
	//				ТаблицаЗаказов.Удалить(ТекСтрока);
	//			КонецЦикла;
	//		КонецЕсли;
	//		Продолжить;
	//	КонецЕсли;
	//	Для Каждого ТекСтрока Из Выборка.Ссылка.Товары Цикл
	//		Если ТекСтрока.Отменено Или Текстрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Или ТекСтрока.Количество = 0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		НовСтрока = ТаблицаЗаказов.Добавить();
	//		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
	//		НовСтрока.ЗаказКлиента = Выборка.Ссылка;
	//		НовСтрока.Списать = НовСтрока.Количество;
	//	КонецЦикла;
	//КонецЦикла;
	
	
	//ТаблицаЗаказов.Индексы.Добавить("Номенклатура");
	//ТаблицаЗаказов.Индексы.Добавить("Списать");
	////остатки проверить не получиться, они уже не в свободных остатках, надо проверить раньше, при проведении заказа
	////проверяем остатки по ним
	//МассивНоменклатуры = ТаблицаЗаказов.ВыгрузитьКолонку("Номенклатура");
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
	//               |	СвободныеОстаткиОстатки.ВНаличииОстаток КАК Наличие
	//               |ИЗ
	//               |	РегистрНакопления.СвободныеОстатки.Остатки(
	//               |			&НаДату,
	//               |			Склад = &Склад
	//               |				И Номенклатура В (&Номенклатура)) КАК СвободныеОстаткиОстатки";
	////ТаблицаЗаказов = Новый ТаблицаЗначений;
	//Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	//Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	//Запрос.УстановитьПараметр("Склад", Склад);
	//Результат = Запрос.Выполнить();
	//Если Результат.Пустой() Тогда
	//	ЗаписьВЛог("Нет свободных остатков по заказам, реализация не создана");
	//	Возврат;
	//КонецЕсли;
	////проходим по таблице заказов и уменьшаем строки "Списать"
	//Выборка = Результат.Выбрать();
	//Структура = Новый Структура("Номенклатура");
	//Пока Выборка.Следующий() Цикл
	//	Структура.Номенклатура = Выборка.Ссылка;
	//	Наличие = Выборка.Наличие;
	//	НайденныеСтроки = ТаблицаЗаказов.НайтиСтроки(Структура);
	//	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
	//		Если Наличие >= ТекСтрока.Списать Тогда
	//			//можно списать, пропускаем строку, уменьшаем наличие
	//			Наличие = Наличие - ТекСтрока.Списать;
	//		Иначе
	//			//если не хватает - списываем все, не частично, чтобы со статусами не заморачиваться
	//			ТекСтрока.Списать = 0;
	//			//наличие не уменьшаем, вдруг дальше попадётся позиция, на которую хватит
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	
	////в заказах меняем эти статусы на не обеспечивать и отменено
	////КодСтатусаОтказныхПозиций = Формат(КодСтатусаОтказ, "ЧГ=0");
	//СтруктураВариантОтгрузить = Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
	//СтруктураВариантНеТребуется = Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.НеТребуется);
	//ТаблицаФильтраПоЗаказам = ТаблицаЗаказов.Скопировать(,"ЗаказКлиента");
	//ТаблицаФильтраПоЗаказам.Свернуть("ЗаказКлиента",);
	//Структура = Новый Структура("ЗаказКлиента, Списать");
	//Структура.Списать = 0;
	//СтруктураТабличнойЧасти = Новый Структура("КодСтроки");
	//Для Каждого СтрокаЗаказа Из ТаблицаФильтраПоЗаказам Цикл
	//	Структура.ЗаказКлиента = СтрокаЗаказа.ЗаказКлиента;
	//	//СтрокиЗаказаВТаблице = ТаблицаЗаказов.НайтиСтроки(Структура);
	//	////НачатьТранзакцию();
	//	//ПереченьПозиций = "";
	//	//НС = 0;
	//	//ОтмененоПозиций = 0;
	//	//Для Каждого СтрокаЗаказаВТаблице Из СтрокиЗаказаВТаблице Цикл
	//	//	СтруктураТабличнойЧасти.КодСтроки = СтрокаЗаказаВТаблице.КодСтроки;
	//	//	СтрокиДокумента = ДокОбъект.Товары.НайтиСтроки(СтруктураТабличнойЧасти);
	//	//	Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
	//	//		ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
	//	//		ТекСтрока.Отменено = Истина;
	//	//		ОтмененоПозиций = ОтмененоПозиций + 1;
	//	//		НС = НС + 1;
	//	//		ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(СтруктураТабличнойЧасти.КодСтроки,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатусаОтказныхПозиций;
	//	//	КонецЦикла;
	//	//КонецЦикла;
	//	////проверяем, если у всех позиций обеспечение "Отгрузить" или Отменено, тогда закрываем заказ
	//	ЗаказКлиента = СтрокаЗаказа.ЗаказКлиента;
	//	СтрокиОтгрузить = ЗаказКлиента.Товары.НайтиСтроки(СтруктураВариантОтгрузить);
	//	СтрокиНеТребуется = ЗаказКлиента.Товары.НайтиСтроки(СтруктураВариантНеТребуется);
	//	//не забыть, что может быть доставка
	//	Если СтрокиОтгрузить.Количество() + СтрокиНеТребуется.Количество() = ЗаказКлиента.Товары.Количество() Или (ЗначениеЗаполнено(УслугаДоставки) И СтрокиОтгрузить.Количество() + СтрокиНеТребуется.Количество() + 1 = ЗаказКлиента.Товары.Количество()) Тогда
	//		ДокОбъект = ЗаказКлиента.ПолучитьОбъект();
	//		ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
	//		ТекстСообщения = "Закрываем заказ: "+ДокОбъект;
	//		ЗаписьВЛог(ТекстСообщения,3);
	//	КонецЕсли;
	//	Попытка
	//		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		ТекстСообщения = "Проведен:	"+ДокОбъект;
	//		ЗаписьВЛог(ТекстСообщения,3);
	//	Исключение
	//		ТекстСообщения = "Не удалось провести "+СокрЛП(ДокОбъект)+" "+ОписаниеОшибки();
	//		ЗаписьВЛог(ТекстСообщения,5,Истина);
	//		ДокОбъект.Записать();
	//	КонецПопытки;
	//	//изменяем позиции заявки на сайте - всё это сделали в заказе клиента
	//	//Если ПереченьПозиций <> "" Тогда
	//	//	ОбновитьСтатусЗаявки(СтрокаЗаказа.ЗаказКлиента.НомерПоДаннымКлиента, ПереченьПозиций, КодСтатусаОтказныхПозиций,,Истина);
	//	//КонецЕсли;
	//	//остальные позиции меняем на КодСтатусаПослеРеализации - не надо, они уже поменялись при загрузке заказа
	//	//Если СтрокиОтгрузить.Количество()>0 Тогда
	//	//	НС = 0;
	//	//	Для Каждого СтрокаДокумента Из СтрокиОтгрузить Цикл
	//	//		НС = НС + 1;
	//	//		ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(СтруктураТабличнойЧасти.КодСтроки,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатусаПослеРеализации;
	//	//	КонецЦикла;
	//	//КонецЕсли;
	//	//ЗафиксироватьТранзакцию();
	//КонецЦикла;//обход по заказам
	
	
	//закрываем заказы, если по ним всё отгрузили
	СтруктураВариантОтгрузить = Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
	СтруктураВариантНеТребуется = Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.НеТребуется);
	ТаблицаФильтраПоЗаказам = ТаблицаЗаказов.Скопировать(,"ЗаказКлиента");
	ТаблицаФильтраПоЗаказам.Свернуть("ЗаказКлиента",);
	Структура = Новый Структура("ЗаказКлиента, Списать");
	Структура.Списать = 0;
	СтруктураТабличнойЧасти = Новый Структура("КодСтроки");
	Для Каждого СтрокаЗаказа Из ТаблицаФильтраПоЗаказам Цикл
		ЗаказКлиента = СтрокаЗаказа.ЗаказКлиента;
		СтрокиОтгрузить = ЗаказКлиента.Товары.НайтиСтроки(СтруктураВариантОтгрузить);
		СтрокиНеТребуется = ЗаказКлиента.Товары.НайтиСтроки(СтруктураВариантНеТребуется);
		//не забыть, что может быть доставка
		//Если СтрокиОтгрузить.Количество() + СтрокиНеТребуется.Количество() = ЗаказКлиента.Товары.Количество() Или (ЗначениеЗаполнено(УслугаДоставки) И СтрокиОтгрузить.Количество() + СтрокиНеТребуется.Количество() + 1 = ЗаказКлиента.Товары.Количество()) Тогда
		//	ДокОбъект = ЗаказКлиента.ПолучитьОбъект();
		//	ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
		//	ТекстСообщения = "Закрываем заказ: "+ДокОбъект;
		//	ЗаписьВЛог(ТекстСообщения,3);
		//КонецЕсли;
		//Попытка
		//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);//ЗакрытиеЗаказовСозданиеРеализации
		//	ТекстСообщения = "Проведен:	"+ДокОбъект;
		//	ЗаписьВЛог(ТекстСообщения,3);
		//Исключение
		//	ТекстСообщения = "Не удалось провести "+СокрЛП(ДокОбъект)+" "+ОписаниеОшибки();
		//	ЗаписьВЛог(ТекстСообщения,5,Истина);
		//	ДокОбъект.Записать();
		//КонецПопытки;
	КонецЦикла;//обход по заказам
	
	//удаляем нулевые строки
	//СтрокиДляУдаления = ТаблицаЗаказов.НайтиСтроки(Новый Структура("Списать",0));
	//Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
	//	ТаблицаЗаказов.Удалить(СтрокаДляУдаления);
	//КонецЦикла;
	
	ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Примечание, , "ЗаписьВЛог", "Создаем реализацию по заказам");
	
	//ДокОбъект.Заполнить(СводныйЗаказ.Ссылка); - на SQL почему-то выдает ошибку
	ДокОбъект.Заполнить(Неопределено);
	
	ДокОбъект.Дата = ТекущаяДата();
	//ДокОбъект.Товары.Загрузить(СводныйЗаказ.Товары.Выгрузить());
	ДокОбъект.Товары.Очистить();
	НС = 0;
	Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НС = 0 Тогда
			ДокОбъект.ЗаказКлиента = ТекСтрока.ЗаказКлиента;
			ЗаполнитьЗначенияСвойств(ДокОбъект, ТекСтрока.ЗаказКлиента, "Контрагент, Партнер, Склад, Организация, Менеджер, Валюта, НалогообложениеНДС, Соглашение, Договор, Подразделение, ЦенаВключаетНДС, Комментарий");
			ДокОбъект.ПорядокРасчетов = ПорядокРасчетов;
			ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
			ДокОбъект.РеализацияПоЗаказам = Истина;
			ДокОбъект.СкидкиРассчитаны = Истина;
			ДокОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
			ДокОбъект.Согласован = Истина;
			//<ПорядокРасчетов>ПоДоговорамКонтрагентов</ПорядокРасчетов>
		КонецЕсли;
		НовСтрока = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.КоличествоУпаковок = НовСтрока.Количество;
		НовСтрока.Цена = НовСтрока.Сумма/НовСтрока.Количество;
		НС = НС + 1;
	КонецЦикла;
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.СуммаВзаиморасчетов = ДокОбъект.СуммаДокумента;

	ЖелаемаяДатаОтгрузки = ДокОбъект.Дата;
	ДокОбъект.Записать();
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);//ЗакрытиеЗаказовСозданиеРеализации
	Исключение
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
	КонецПопытки;
	РеализацияТоваровУслуг = ДокОбъект.Ссылка;
	Если НЕ РеализацияТоваровУслуг.Проведен Тогда
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "Не проведен: "+РеализацияТоваровУслуг);
		Возврат;
	КонецЕсли;
	Если НЕ (ИспользоватьОрдерныеСклады И Склад.ИспользоватьОрдернуюСхемуПриПоступлении) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(НаборУпаковок) Тогда
		ЕдИзм = НайтиУпаковку(НаборУпаковок);
	Иначе
		ЕдИзм = Неопределено;
	КонецЕсли;
	//ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "ЕдИзм: "+ЕдИзм);
	//СоздатьРасходныйОрдер(СводныйЗаказ);
	ДокОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.ДатаОтгрузки = ДокОбъект.Дата;
	ДокОбъект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.НайтиПоКоду("Отгрузка");
	ДокОбъект.Комментарий = "Создан автоматически "+ДокОбъект.Дата;
	ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.ОтгружаемыеТовары.Очистить();
	ДокОбъект.Получатель = РеализацияТоваровУслуг.Контрагент.Партнер;
	ДокОбъект.Склад = РеализацияТоваровУслуг.Склад;
	ДокОбъект.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
	ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;
	ДокОбъект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	ДокОбъект.Заполнить(РеализацияТоваровУслуг);

	ДокОбъект.ТоварыПоРаспоряжениям.Очистить();
	Для Каждого СтрокаНоменклатуры Из РеализацияТоваровУслуг.Товары Цикл
		СтрокаОтгружаемыеТовары = ДокОбъект.ОтгружаемыеТовары.Добавить();
		СтрокаОтгружаемыеТовары.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		СтрокаОтгружаемыеТовары.Количество = СтрокаНоменклатуры.Количество;
		СтрокаОтгружаемыеТовары.КоличествоУпаковок = СтрокаНоменклатуры.Количество;
		СтрокаОтгружаемыеТовары.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		Если ЕдИзм = Неопределено Тогда
			СтрокаОтгружаемыеТовары.Упаковка = СтрокаНоменклатуры.Номенклатура.ЕдиницаИзмерения;
		Иначе
			СтрокаОтгружаемыеТовары.Упаковка = ЕдИзм;
		КонецЕсли;
		
		СтрокаТоварыПоРаспоряжениям = ДокОбъект.ТоварыПоРаспоряжениям.Добавить();
		СтрокаТоварыПоРаспоряжениям.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		СтрокаТоварыПоРаспоряжениям.Количество = СтрокаНоменклатуры.Количество;
		СтрокаТоварыПоРаспоряжениям.Распоряжение = СтрокаНоменклатуры.ЗаказКлиента;
	КонецЦикла;
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "расходный ордер строк в таблицах "+ДокОбъект.ТоварыПоРаспоряжениям.Количество()+", "+ДокОбъект.ОтгружаемыеТовары.Количество());
	ДокОбъект.Записать();
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);//ЗакрытиеЗаказовСозданиеРеализации
	Исключение
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),5,Истина);
	КонецПопытки;
	ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);//ЗакрытиеЗаказовСозданиеРеализации
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),5,Истина);
	КонецПопытки;
	РасходныйОрдерНаТовары = ДокОбъект.Ссылка;
	сообщить(РасходныйОрдерНаТовары);
	
	Если Склад.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки Тогда
		//СоздатьОтборИзЯчеек(СводныйЗаказ);
		ДокОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "создаем отбор");
		ДокОбъект.Заполнить(РасходныйОрдерНаТовары);
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "заполнили отбор");
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.ДатаНачалаВыполнения = ДокОбъект.Дата;
		ДокОбъект.ДатаОкончанияВыполнения = ДокОбъект.Дата;
		ДокОбъект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.НайтиПоКоду("Отгрузка");
		ДокОбъект.Комментарий = "Создан автоматически "+ДокОбъект.Дата;;
		ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокОбъект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
		ДокОбъект.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		ДокОбъект.Распоряжение = РасходныйОрдерНаТовары;
		ДокОбъект.Склад = Склад;
		ДокОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
		ДокОбъект.ТоварыОтбор.Очистить();
		
		Помещение=Справочники.СкладскиеПомещения.ПустаяСсылка();
		Распоряжение = РасходныйОрдерНаТовары;
		//ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "готовим структуру возврата");
		Менеджер = Новый МенеджерВременныхТаблиц;	
		СкладыСервер.ОстаткиТоваровКОтбору(Менеджер, Распоряжение, Склад, Помещение);	
		СтруктураВозврата = СкладыСервер.ОтобратьТоварИзЯчеек(Менеджер,Склад,Помещение);	
		Менеджер.Закрыть();	
		ДокОбъект.ТоварыОтбор.Очистить();
		//ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "СтруктураВозврата.ТаблицаОшибок = "+СтруктураВозврата.ТаблицаОшибок.Количество());
		Для Каждого СтрокаТаблицыОшибок Из СтруктураВозврата.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.Количество > 0 Тогда	
				НоваяСтрока = ДокОбъект.ТоварыОтбор.Добавить();		
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыОшибок);		
				Если НоваяСтрока.КоличествоУпаковок = 0 Тогда
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				КонецЕсли;		
			КонецЕсли;	
		КонецЦикла;
		Для Каждого СтрокаТаблицыРезультатов из СтруктураВозврата.ТаблицаРезультатов Цикл	
			Если СтрокаТаблицыРезультатов.Количество > 0 Тогда		
				НоваяСтрока = ДокОбъект.ТоварыОтбор.Добавить();		
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРезультатов);		
			КонецЕсли;	
		КонецЦикла;
		ДокОбъект.Записать();
		//ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Информация, , "ЗаписьВЛог", "записали отбор = "+ДокОбъект.Ссылка);
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЗаписьВЛог("Проведен "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
		Исключение
			ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
		КонецПопытки;
		ОтборРазмещениеТоваров = ДокОбъект.Ссылка;	
		сообщить(ОтборРазмещениеТоваров);
	КонецЕсли;
КонецПроцедуры//ЗакрытиеЗаказовСозданиеРеализации

Процедура ЗакрытиеЗаказаСозданиеРеализацииСтарый() Экспорт
	//СводныйЗаказКлиентаПоСтатусу = Истина;
	Структура = Новый Структура("СводныйЗаказКлиентаПоСтатусу", Истина);
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "В процедуре ЗакрытиеЗаказовСозданиеРеализации");
	НайденныеСтроки = ТаблицаСтатусов.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = "В статусах нет строки с признаком сводного статуса";
		ЗаписьВЛог(ТекстСообщения,3,Истина);
		Возврат;
	КонецЕсли;
	Если НайденныеСтроки.Количество() > 1 Тогда
		ТекстСообщения = "В статусах несколько строк с признаком сводного статуса, должна быть одна";
		ЗаписьВЛог(ТекстСообщения,3,Истина);
		Возврат;
	КонецЕсли;
	НайденнаяСтрока = НайденныеСтроки[0];
	КодСтатуса = Формат(НайденнаяСтрока.КодСтатуса, "ЧГ=0");
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "Код статуса "+КодСтатуса);
	//КодСледующегоСтатуса = НайденнаяСтрока.КодСледующегоСтатуса;
	КодСтатуса = Формат(НайденнаяСтрока.КодСледующегоСтатуса, "ЧГ=0");
	//СтатусПослеРеализации = КодСледующегоСтатуса;
	//проверяем, есть ли заказ в работе
	
	//надо искать не один незакрытый заказ, а все за неделю, перепроверять их, есть что в наличии или нет, начиная от самых старых
	//если нет - ставить у этой позиции статус не обеспечивать, а в ABCP посылать статус "Отказ"
	СводныйЗаказ = НайтиЗаявку(0, ТекущаяДата());
	Если СводныйЗаказ = Неопределено Тогда
		СводныйЗаказ = НайтиЗаявку(0, НачалоДня(ТекущаяДата()-3600*24*7),,,Истина);
		Если СводныйЗаказ = Неопределено Тогда
			ТекстСообщения = "Нет незакрытых заказов покупателя за текущую и предыдущую дату, реализация не создана, или не установлен «Сводный заказ клиента по статусу»";
			ЗаписьВЛог(ТекстСообщения,3,Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если НЕ СводныйЗаказ.Проведен Тогда
		ЗаписьВЛог("реализация не создана, не проведен: "+СводныйЗаказ,1,Истина);
		Возврат;//этот не проведен
	КонецЕсли;
	//как-то громоздко, делаем на основании заказа реализацию
	ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "Создаем реализацию по сводному заказу, стаус "+СводныйЗаказ.Статус);
	Если СводныйЗаказ.Статус <> Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда;//резерв
		Об = СводныйЗаказ.ПолучитьОбъект();
		МассивНекорректныхСтрок = Новый Массив;
		Попытка
			ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
			ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента "+СводныйЗаказ.Статус);
			Если ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
				Для Каждого ТекСтрока Из Об.Товары Цикл
					Если ТекСтрока.Количество = 0 Или НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
						МассивНекорректныхСтрок.Добавить(ТекСтрока);
					КонецЕсли;								
					Если НЕ ЗначениеЗаполнено(ТекСтрока.ДатаОтгрузки) Тогда
						ТекСтрока.ДатаОтгрузки = ТекущаяДата();
					КонецЕсли;
					Если ТекСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
						ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если МассивНекорректныхСтрок.Количество()>0 Тогда
				Для Каждого ТекСтрока Из МассивНекорректныхСтрок Цикл
					Об.Товары.Удалить(ТекСтрока);
				КонецЦикла;
			КонецЕсли;
			Об.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			сообщить("Не удалось изменить статус на «К отгрузке» у сводного заказа (включите опцию «Использовать Построчную Отгрузку В Заказе Клиента»): "+СводныйЗаказ);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "Заполнить по сводному заказу: "+СводныйЗаказ);
	//ДокОбъект.Заполнить(СводныйЗаказ.Ссылка); - на SQL почему-то выдает ошибку
	ДокОбъект.Заполнить(Неопределено);
	ЗаполнитьЗначенияСвойств(ДокОбъект, СводныйЗаказ, "Контрагент, Партнер, Склад, Организация, Менеджер, Валюта, НалогообложениеНДС, Соглашение, Договор, Подразделение, ЦенаВключаетНДС, Комментарий");
	ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
	ДокОбъект.ЗаказКлиента = СводныйЗаказ.Ссылка;
	ДокОбъект.РеализацияПоЗаказам = Истина;
	ДокОбъект.СкидкиРассчитаны = Истина;
	ДокОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	
	ДокОбъект.Дата = ТекущаяДата();
	//ДокОбъект.Товары.Загрузить(СводныйЗаказ.Товары.Выгрузить());
	ДокОбъект.Товары.Очистить();
	Для Каждого ТекСтрока Из СводныйЗаказ.Товары Цикл
		Если ТекСтрока.Количество = 0 Или НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Или ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Или ТекСтрока.Отменено = Истина Тогда
			Продолжить;
		КонецЕсли;
		НовСтрока = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
	КонецЦикла;

	ЖелаемаяДатаОтгрузки = ДокОбъект.Дата;
	ДокОбъект.Записать();
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
	КонецПопытки;
	РеализацияТоваровУслуг = ДокОбъект.Ссылка;
	Если ЗначениеЗаполнено(РеализацияТоваровУслуг) Тогда
		//ДокОбъект = СводныйЗаказ.ПолучитьОбъект();
		//ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
		//ДокОбъект.Записать();
		//ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "Закрываем сводный заказ: "+ДокОбъект.Ссылка);
		//Попытка
		//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//	ТекстСообщения = "Изменяем статус на «Закрыт» у сводного заказа "+СокрЛП(СводныйЗаказ);
		//	ЗаписьВЛог(ТекстСообщения,1);
		//Исключение
		//	ТекстСообщения = ОписаниеОшибки();
		//	ЗаписьВЛог(ТекстСообщения,1);
		//КонецПопытки;
	КонецЕсли;
	Если НЕ РеализацияТоваровУслуг.Проведен Тогда
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "Не проведен: "+РеализацияТоваровУслуг);
		Возврат;
	КонецЕсли;
	Если НЕ (ИспользоватьОрдерныеСклады И Склад.ИспользоватьОрдернуюСхемуПриПоступлении) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(НаборУпаковок) Тогда
		ЕдИзм = НайтиУпаковку(НаборУпаковок);
	Иначе
		ЕдИзм = Неопределено;
	КонецЕсли;
	//ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "ЕдИзм: "+ЕдИзм);
	//СоздатьРасходныйОрдер(СводныйЗаказ);
	ДокОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.ДатаОтгрузки = ДокОбъект.Дата;
	ДокОбъект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.НайтиПоКоду("Отгрузка");
	ДокОбъект.Комментарий = "Создан автоматически "+ДокОбъект.Дата;
	ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.ОтгружаемыеТовары.Очистить();
	ДокОбъект.Получатель = СводныйЗаказ.Контрагент.Партнер;
	ДокОбъект.Склад = Склад;
	ДокОбъект.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
	ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;
	ДокОбъект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	ДокОбъект.Заполнить(СводныйЗаказ);

	ДокОбъект.ТоварыПоРаспоряжениям.Очистить();
	Для Каждого СтрокаНоменклатуры Из СводныйЗаказ.Товары Цикл
		СтрокаОтгружаемыеТовары = ДокОбъект.ОтгружаемыеТовары.Добавить();
		СтрокаОтгружаемыеТовары.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		СтрокаОтгружаемыеТовары.Количество = СтрокаНоменклатуры.Количество;
		СтрокаОтгружаемыеТовары.КоличествоУпаковок = СтрокаНоменклатуры.Количество;
		СтрокаОтгружаемыеТовары.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		Если ЕдИзм = Неопределено Тогда
			СтрокаОтгружаемыеТовары.Упаковка = СтрокаНоменклатуры.Номенклатура.ЕдиницаИзмерения;
		Иначе
			СтрокаОтгружаемыеТовары.Упаковка = ЕдИзм;
		КонецЕсли;
		
		СтрокаТоварыПоРаспоряжениям = ДокОбъект.ТоварыПоРаспоряжениям.Добавить();
		СтрокаТоварыПоРаспоряжениям.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		СтрокаТоварыПоРаспоряжениям.Количество = СтрокаНоменклатуры.Количество;
		СтрокаТоварыПоРаспоряжениям.Распоряжение = СводныйЗаказ;
	КонецЦикла;
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "расходный ордер строк в таблицах "+ДокОбъект.ТоварыПоРаспоряжениям.Количество()+", "+ДокОбъект.ОтгружаемыеТовары.Количество());
	ДокОбъект.Записать();
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),5,Истина);
	КонецПопытки;
	ДокОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),5,Истина);
	КонецПопытки;
	РасходныйОрдерНаТовары = ДокОбъект.Ссылка;
	сообщить(РасходныйОрдерНаТовары);
	
	//СоздатьОтборИзЯчеек(СводныйЗаказ);
	ДокОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "создаем отбор");
	ДокОбъект.Заполнить(РасходныйОрдерНаТовары);
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "заполнили отбор");
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.ДатаНачалаВыполнения = ДокОбъект.Дата;
	ДокОбъект.ДатаОкончанияВыполнения = ДокОбъект.Дата;
	ДокОбъект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.НайтиПоКоду("Отгрузка");
	ДокОбъект.Комментарий = "Создан автоматически "+ДокОбъект.Дата;;
	ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
	ДокОбъект.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
	ДокОбъект.Распоряжение = РасходныйОрдерНаТовары;
	ДокОбъект.Склад = Склад;
	ДокОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокОбъект.ТоварыОтбор.Очистить();
	
	Помещение=Справочники.СкладскиеПомещения.ПустаяСсылка();
	Распоряжение = РасходныйОрдерНаТовары;
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "готовим структуру возврата");
	Менеджер = Новый МенеджерВременныхТаблиц;	
	СкладыСервер.ОстаткиТоваровКОтбору(Менеджер, Распоряжение, Склад, Помещение);	
	СтруктураВозврата = СкладыСервер.ОтобратьТоварИзЯчеек(Менеджер,Склад,Помещение);	
	Менеджер.Закрыть();	
	ДокОбъект.ТоварыОтбор.Очистить();
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "СтруктураВозврата.ТаблицаОшибок = "+СтруктураВозврата.ТаблицаОшибок.Количество());
	Для Каждого СтрокаТаблицыОшибок Из СтруктураВозврата.ТаблицаОшибок Цикл
		Если СтрокаТаблицыОшибок.Количество > 0 Тогда	
			НоваяСтрока = ДокОбъект.ТоварыОтбор.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыОшибок);		
			Если НоваяСтрока.КоличествоУпаковок = 0 Тогда
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			КонецЕсли;		
		КонецЕсли;	
	КонецЦикла;
	Для Каждого СтрокаТаблицыРезультатов из СтруктураВозврата.ТаблицаРезультатов Цикл	
		Если СтрокаТаблицыРезультатов.Количество > 0 Тогда		
			НоваяСтрока = ДокОбъект.ТоварыОтбор.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРезультатов);		
		КонецЕсли;	
	КонецЦикла;
	ДокОбъект.Записать();
	ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "записали отбор = "+ДокОбъект.Ссылка);
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
	КонецПопытки;
	ОтборРазмещениеТоваров = ДокОбъект.Ссылка;	
	сообщить(ОтборРазмещениеТоваров);
КонецПроцедуры

Процедура ИзменитьСтатусыПослеРеализацииНаСервере(КодСледующегоСтатуса, ЗаказКлиента)
	КодСтатуса = Формат(КодСледующегоСтатуса, "ЧГ=0");
	ТЗ = ТаблицаРеализацийОтбор.Выгрузить(, "НомерЗаявки");
	ТЗ.Свернуть("НомерЗаявки",);
	Структура = Новый Структура("НомерЗаявки");
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если ТекСтрока.НомерЗаявки = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПереченьПозиций = "";
		Структура.НомерЗаявки = ТекСтрока.НомерЗаявки;
		НайденныеСтроки = ТаблицаРеализацийОтбор.НайтиСтроки(Структура);
		НС = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ИдентификаторНоменклатуры = 0 Тогда
				Продолжить;
			КонецЕсли;
			НС = НС + 1;
			ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(НайденнаяСтрока.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСтатуса;
		КонецЦикла;
		ЗаписьВЛог("ИзменитьСтатусыПослеРеализацииНаСервере");
		ОбновитьСтатусЗаявки(ТекСтрока.НомерЗаявки, ПереченьПозиций, КодСтатуса,,Истина);
		//УИ = Новый УникальныйИдентификатор();//ВременныйИдентификатор;
		//ИзменитьДатуОбновленияЗаказаКлиента(УИ, ЗаказКлиента);//из json ответ берет
	КонецЦикла;
КонецПроцедуры

Процедура ИзменитьДатуОбновленияЗаказаКлиента(ЗаказКлиента)
	dateUpdated = НайтиДобавитьСвойствоЗаказа("dateUpdated");
	СтрокаОтвет = ПолучитьИзВременногоХранилища(УИ);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Для Каждого Элемент Из СписокЭлементов Цикл
		ДатаОбновления = ПреобразоватьИзСтрокиВДату(Элемент.dateUpdated);
		ТекстСообщения = "Документ "+ЗаказКлиента+", при реализации обновлена дата изменения " +СокрЛП(ДатаОбновления);
		ЗаписьВЛог(ТекстСообщения,1,Истина);
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ЗаказКлиента;
		МенеджерЗаписи.Свойство = dateUpdated;
		МенеджерЗаписи.Значение = ДатаОбновления;
		МенеджерЗаписи.Записать();
		
		Об = ЗаказКлиента.ПолучитьОбъект();
		СтрокиДополнительныеРеквизиты = Об.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", dateUpdated.Ссылка));
		Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
			СтрокаДополнительныеРеквизиты = Об.ДополнительныеРеквизиты.Добавить();
		Иначе
			СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
		КонецЕсли;
		СтрокаДополнительныеРеквизиты.Свойство = dateUpdated.Ссылка;
		СтрокаДополнительныеРеквизиты.Значение = ДатаОбновления;
		СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = ДатаОбновления;
		Об.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьРеализацииНаСервере(ЗаказКлиента)//вызывается из формы
	//взял из модуля процедуру СоздатьРеализацииТоваровУслуг               
	//ЭтотОбъект.ТЗНоменклатура.Сортировать("НомерЗаявки, distributorId");
	//Структура = Новый Структура("НомерЗаявки");
	Если ТаблицаРеализацийОтбор.Количество() = 0 Тогда
		сообщить("Не заполнена таблица незакрытых реализаций");
		Возврат;
	КонецЕсли;
	Структура = Новый Структура("ВДокумент", Ложь);
	НайденныеСтроки = ТаблицаРеализацийОтбор.НайтиСтроки(Структура);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТаблицаРеализацийОтбор.Удалить(НайденнаяСтрока);
	КонецЦикла;
	Если ТаблицаРеализацийОтбор.Количество() = 0 Тогда
		сообщить("Не заполнена таблица");
		Возврат; 
	КонецЕсли;
	//Если Не ЗначениеЗаполнено(Объект.СтатусДоРеализации) И Не ЗначениеЗаполнено(Объект.СтатусПослеРеализации) Тогда
	Если Не ЗначениеЗаполнено(СтатусПослеРеализации) Тогда
		сообщить("Заполните статусы, на который меняются позиции в заказах на сайте после реализации");
		Возврат; 
	КонецЕсли;
	ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Комментарий = "Авт. создан "+ТекущаяДата();
	Если ТаблицаРеализацийОтбор.Количество() = 1 Тогда
		ДокОбъект.ЗаказКлиента = ТаблицаРеализацийОтбор[0].ЗаказКлиента;
		ДокОбъект.АдресДоставки = ТаблицаРеализацийОтбор[0].ЗаказКлиента.АдресДоставки;
	КонецЕсли;
	ДокОбъект.Склад = Склад;
	ДокОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	ДокОбъект.Валюта = Валюта;
	Если ЦеныПродажиВРублях Тогда//реализация
		ДокОбъект.Валюта = Рубли;
	КонецЕсли;
	Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
		ДокОбъект.Валюта = Валюта;
	КонецЕсли;
	ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
	//Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Если Не УТ111 Тогда
		//ДокОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг;
		ДокОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	КонецЕсли;
	Если Не УТ112 Тогда
		ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;
	Если УТ114 И Подверсия3 < 6 Тогда
		ДокОбъект.ДатаПлатежа = ДокОбъект.Дата;
	КонецЕсли;		
	ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;//РеглУчет;//РеализацияКлиенту
	//теперь заполняем табличную часть
	ДокОбъект.Партнер = ЗаказКлиента.Контрагент.Партнер;
	ДокОбъект.Контрагент = ЗаказКлиента.Контрагент;
	ДокОбъект.Организация = Организация;//Розница;
	Если ДокОбъект.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ДокОбъект.Организация = ОрганизацияРозница;
	КонецЕсли;
	//Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
	//	ДокОбъект.Организация = ТекСтрока.Организация;
	//Конецесли;
	ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	Если ИспользоватьСоглашенияСКлиентами Тогда
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокОбъект.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
		Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
			ДокОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
		КонецЕсли;
		//Если ДокОбъект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		//	ДокОбъект.Соглашение = Объект.СоглашениеРозница;
		//Иначе
		//	ДокОбъект.Соглашение = Объект.СоглашениеОпт;
		//КонецЕсли;
		Если ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
			Если ЗначениеЗаполнено(ДокОбъект.Соглашение.Валюта) Тогда
				ДокОбъект.Валюта = ДокОбъект.Соглашение.Валюта;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	Если ИспользоватьДоговорыСКлиентами Тогда
		ДокОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация, ДокОбъект.Валюта);
		Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
			Договор = ДокОбъект.Договор;
			Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДСОпределяетсяВДокументе") <> Неопределено Тогда
				Если Договор.НалогообложениеНДСОпределяетсяВДокументе = Ложь Тогда
					ДокОбъект.НалогообложениеНДС = Договор.НалогообложениеНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//ДокОбъект.Магазин = Магазин;
	ДокОбъект.БанковскийСчетОрганизации = БанковскийСчет;
	ДокОбъект.СкидкиРассчитаны = Истина;
	ДокОбъект.РеализацияПоЗаказам = Истина;
	//ПеречислениеСсылка.ПорядокРасчетов
	ДокОбъект.ПорядокРасчетов = ПорядокРасчетов;
	ДокОбъект.Согласован = Истина;
	//ДокОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	//Если СтрокаЗаявки.АдресДоставки = "Самовывоз" Тогда
	Если ЗначениеЗаполнено(СпособДоставки) Тогда
		ДокОбъект.СпособДоставки = СпособДоставки;
	Иначе
		//ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;//Если НЕ УТ111 Тогда
	КонецЕсли;
	//Если ЗначениеЗаполнено(СтрокаЗаявки.СпособДоставки) Тогда
	//	ДокОбъект.СпособДоставки = СтрокаЗаявки.СпособДоставки;
	//КонецЕсли;
	//Если ЗначениеЗаполнено(СтрокаЗаявки.ЗонаДоставки) Тогда
	//	ДокОбъект.ЗонаДоставки = СтрокаЗаявки.ЗонаДоставки;
	//КонецЕсли;
	//Если ЗначениеЗаполнено(СтрокаЗаявки.ПеревозчикПартнер) Тогда
	//	ДокОбъект.ПеревозчикПартнер = СтрокаЗаявки.ПеревозчикПартнер;
	//КонецЕсли;
	ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПродаже;
	ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	//ДокОбъект.АдресДоставки = СтрокаЗаявки.АдресДоставки + " по заявке № "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" от "+СтрокаЗаявки.ДатаЗаявки;
	//ДокОбъект.НаправлениеДеятельности = НаправлениеДеятельности;
	ДокОбъект.Подразделение = Подразделение;
	ДокОбъект.Подразделение = ЗаказКлиента.Подразделение;
	//еще нужно Обработка.ПомощникЗачетаОплат - будет или в РасшифровкаПлатежа или во временном хранилище
	ДокОбъект.Товары.Очистить();
	НС = 0;
	Для Каждого СтрокаНоменклатуры Из ТаблицаРеализацийОтбор Цикл
		СтрокаДокумента = ДокОбъект.Товары.Добавить();
		СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		//СтрокаДокумента.Склад = Склад;
		//если с 2 наших складов, то сделал по-другому
		СтрокаДокумента.Склад = СтрокаНоменклатуры.Склад;
		
		СтрокаДокумента.Количество = СтрокаНоменклатуры.Количество;
		СтрокаДокумента.КоличествоУпаковок = СтрокаНоменклатуры.Количество;
		СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаПродажи;
		СтрокаДокумента.Сумма = СтрокаНоменклатуры.ЦенаПродажи*СтрокаНоменклатуры.Количество;
		Если НалогообложениеНДСРеализация = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			СтрокаДокумента.СтавкаНДС = ОсновнаяСтавкаНДС;
			СтрокаДокумента.СуммаНДС = СтрокаДокумента.Сумма/РазмерСтавкиНДС100*РазмерСтавкиНДС;
		Иначе
			СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтрокаДокумента.СуммаНДС = 0;
		КонецЕсли;
		СтрокаДокумента.ЗаказКлиента = СтрокаНоменклатуры.ЗаказКлиента;
		СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
		СтрокаДокумента.КодСтроки = СтрокаНоменклатуры.КодСтроки;
		//СтрокаДокумента.КлючСвязи = СтрокаДокумента.НомерСтроки;
		ДокОбъект.Организация = СтрокаНоменклатуры.ЗаказКлиента.Организация;
	КонецЦикла;
	ДокОбъект.СуммаВзаиморасчетов = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	Если УТ114 И Подверсия3 < 6 Тогда
		ДокОбъект.ДатаПлатежа = ДокОбъект.Дата;
	КонецЕсли;		
	ДокОбъект.ДатаРаспоряжения = ДокОбъект.Дата;
	ЖелаемаяДатаОтгрузки = ДокОбъект.Дата;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокОбъект.Записать();
		ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
	КонецПопытки;
	РеализацияТоваровУслуг = ДокОбъект.Ссылка;
	//ПолучитьСтатусыABCPДляРеализации();
	//сообщить(РеализацияТоваровУслуг);
	//это тоже уже создано
	//СоздатьРасходныйОрдер(ЗаказКлиента);
	//СоздатьОтборИзЯчеек(ЗаказКлиента);
	//!!! изменить статус заказов на "Закрыт", по которым прошла реализация
	//ТЗ = ТаблицаРеализацийОтбор.Выгрузить(,"ЗаказКлиента");
	//ТЗ.Свернуть("ЗаказКлиента",);
	//МассивЗаказов = ТЗ.ВыгрузитьКолонку("ЗаказКлиента");
	//Для Каждого ЗаказСсылка Из МассивЗаказов Цикл
	//	Если ЗаказСсылка.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ПозицийТоваров = 0;
	//	ПозицийОтгрузить = 0;
	//	Для Каждого ТекСтрока Из ЗаказСсылка.Товары Цикл
	//		Если ТекСтрока.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
	//			ПозицийТоваров = ПозицийТоваров + 1;
	//			//если позиция отгружена, или не требуется, тогда её считаем
	//			Если ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Или ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
	//				ПозицийОтгрузить = ПозицийОтгрузить + 1;
	//			КонецЕсли;
	//		КонецЕсли;
	//		//если у всех строк статус "Отгрузить"
	//	КонецЦикла;
	//	Если ПозицийТоваров > 0 И ПозицийТоваров = ПозицийОтгрузить Тогда
	//		ДокОбъект = ЗаказСсылка.ПолучитьОбъект();
	//		ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
	//		Попытка
	//			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//			ТекстСообщения = "Закрыт заказ клиента "+ДокОбъект.Ссылка;
	//			ЗаписьВЛог(ТекстСообщения,,Истина);
	//		Исключение
	//			ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),6,Истина);
	//			ДокОбъект.Записать();
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузитьОплатыНаСайт
Процедура ЗаполнитьТипыПлатежей()
	Если ТипПлатежаНаличный <> 0 Или ТипПлатежаЭлектронный <> 0 Тогда
		//уже заполняли типы платежей
		Возврат;
	КонецЕсли;
	ТипыПлатежейСписок = Новый СписокЗначений;
	АдресСервиса = АдресСервиса;
	Пользователь = Пользователь;
	Пароль = Пароль;
	ТекстЗапроса = "/basket/paymentMethods?userlogin="+Пользователь+"&userpsw="+Пароль;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	//ЗаписьВЛог("ИспользоватьИндивидуальныеНастройкиПользователей "+ИспользоватьИндивидуальныеНастройкиПользователей+" ИмяПользователя "+ИмяПользователя()+" АдресСервиса "+АдресСервиса+" ТекстЗапроса "+ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	//ЗаписьВЛог("типы платежей: "+СтрокаОтвет);
	Если СтрокаОтвет = "[]" Тогда
		ЗаписьВЛог("Не заполнены идентификаторы способов оплаты, необходимы при отправке заказа (при включенной опции «Корзина: показывать способ оплаты»)");
	КонецЕсли;
	//ЭтотОбъект.UnicodeEncode(СтрокаОтветUTF8);
	//только на сервере РеквизитФормыВЗначение("Объект").UnicodeEncode(СтрокаОтвет);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат;
	Иначе
		//СписокЭлементов = СтруктураИзJSON();
		//Сообщить(СтрокаОтвет);
		ТипПлатежаНаличный = 0;
		ТипПлатежаЭлектронный = 0;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Для Каждого Элемент Из СписокЭлементов Цикл
			ТипыПлатежейСписок.Добавить(Элемент.id, Элемент.name);
			Если ТипПлатежаЭлектронный = 0 Тогда
				Если Лев(НРег(Элемент.name),3) = "эле" Тогда
					ТипПлатежаЭлектронный = Число(Элемент.id);
				КонецЕсли;
			КонецЕсли;
			Если ТипПлатежаНаличный = 0 Тогда
				Если Лев(НРег(Элемент.name),3) = "нал" Тогда
					ТипПлатежаНаличный = Число(Элемент.id);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаписьВЛог("ТипПлатежаНаличный = "+ТипПлатежаНаличный+", ТипПлатежаЭлектронный="+ТипПлатежаЭлектронный);
КонецПроцедуры

Функция ВернутьТаблицуОплат1С(ПоКлиенту = Неопределено) Экспорт
	Если ТипПлатежаНаличный = 0 Или ТипПлатежаЭлектронный = 0 Тогда
		Если ТипыПлатежей.Количество() = 0 Тогда
			ЗаполнитьТипыПлатежей();
		Иначе
			Для Каждого СтрокаТаблицы Из ТипыПлатежей Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.Касса) Тогда
					ТипПлатежаНаличный = СтрокаТаблицы.id;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ЭквайринговыйТерминал) Или ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
					ТипПлатежаЭлектронный = СтрокаТаблицы.id;
				КонецЕсли;
				Если ТипПлатежаНаличный <> 0 Или ТипПлатежаЭлектронный <> 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ТипПлатежаБезналичный = ТипПлатежаЭлектронный;
	СоответствиеТипаПлатежаДокументу = Новый Соответствие;
	СоответствиеТипаПлатежаДокументуБезОрганизации = Новый Соответствие;
	Если ТипыПлатежей.Количество() > 0 Тогда
		ЕстьСоответствиеТипаПлатежаДокументу = Истина;
	Иначе
		ЕстьСоответствиеТипаПлатежаДокументу = Истина;
	КонецЕсли;
	Массив = Новый Массив;//чтобы, если одинаковые сочетания выбраны, брать только первое
	Массив0 = Новый Массив;
	//в настройках обязательно должна быть заполнена организация
	Для Каждого СтрокаТаблицы Из ТипыПлатежей Цикл
		врем = "";
		врем2 = "";
		Если ЗначениеЗаполнено(СтрокаТаблицы.Касса) Тогда
			врем0 = СокрЛП(СтрокаТаблицы.Касса);
			врем = врем0+СокрЛП(СтрокаТаблицы.Организация);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ЭквайринговыйТерминал) Тогда
			врем0 = СокрЛП(СтрокаТаблицы.ЭквайринговыйТерминал);
			врем = врем0+СокрЛП(СтрокаТаблицы.Организация);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
			врем0 = СокрЛП(СтрокаТаблицы.БанковскийСчет);
			врем = врем0+СокрЛП(СтрокаТаблицы.Организация);
			ТипПлатежаБезналичный = СтрокаТаблицы.id;//только для простых настроек будет работать, после запроса заново заполняются типы платежей из СоответствиеТипаПлатежаДокументу
		КонецЕсли;
		Если врем<>"" И Массив.Найти(врем) = Неопределено Тогда
			СоответствиеТипаПлатежаДокументу.Вставить(врем, СтрокаТаблицы.id);
			Массив.Добавить(врем);
		КонецЕсли;
		Если врем0<>"" И Массив0.Найти(врем0) = Неопределено Тогда
			СоответствиеТипаПлатежаДокументуБезОрганизации.Вставить(врем0, СтрокаТаблицы.id);
			Массив.Добавить(врем0);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока50 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(50));
	НомерПлатежногоДокумента = НайтиДобавитьСвойствоДокумента("НомерПлатежногоДокумента", ТипИдентификатораСтрока50);
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
		|	ПриходныйКассовыйОрдер.Номер КАК Номер,
		|	ПриходныйКассовыйОрдер.Дата КАК createDateTime,
		|	ПриходныйКассовыйОрдер.СуммаДокумента КАК amount,
		|	&ТипПлатежаНаличный КАК PaymentTypeId,
		|	ПриходныйКассовыйОрдер.Контрагент КАК Контрагент,
		|	ПриходныйКассовыйОрдер.Комментарий КАК comment,
		|	ПриходныйКассовыйОрдер.ДокументОснование КАК ЗаказКлиента,
		|	ПриходныйКассовыйОрдер.ДокументОснование.НомерПоДаннымКлиента КАК orderId,
		|	ПриходныйКассовыйОрдер.Касса КАК Касса,
		|	NULL КАК БанковскийСчет,
		|	NULL КАК ЭквайринговыйТерминал,
		|	ПриходныйКассовыйОрдер.Организация КАК Организация
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Дата >= &Дата
		|	И ПриходныйКассовыйОрдер.Проведен = ИСТИНА
		|	И 1 = 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеБезналичныхДенежныхСредств.Ссылка,
		|	ПоступлениеБезналичныхДенежныхСредств.Номер,
		|	ПоступлениеБезналичныхДенежныхСредств.Дата,
		|	ПоступлениеБезналичныхДенежныхСредств.СуммаДокумента,
		|	&ТипПлатежаБезналичный,
		|	ПоступлениеБезналичныхДенежныхСредств.Контрагент,
		|	ПоступлениеБезналичныхДенежныхСредств.Комментарий,
		|	ПоступлениеБезналичныхДенежныхСредств.ДокументОснование,
		|	ПоступлениеБезналичныхДенежныхСредств.ДокументОснование.НомерПоДаннымКлиента,
		|	NULL,
		|	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчет,
		|	NULL,
		|	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчет.Владелец
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
		|ГДЕ
		|	ПоступлениеБезналичныхДенежныхСредств.Дата >= &Дата
		|	И ПоступлениеБезналичныхДенежныхСредств.Проведен = ИСТИНА
		|	И 2 = 2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОперацияПоПлатежнойКарте.Ссылка,
		|	ОперацияПоПлатежнойКарте.Номер,
		|	ОперацияПоПлатежнойКарте.Дата,
		|	ОперацияПоПлатежнойКарте.СуммаДокумента,
		|	&ТипПлатежаЭлектронный,
		|	ОперацияПоПлатежнойКарте.Контрагент,
		|	ОперацияПоПлатежнойКарте.Комментарий,
		|	NULL,
		|	ОперацияПоПлатежнойКарте.НомерПлатежнойКарты,
		|	NULL,
		|	NULL,
		|	ОперацияПоПлатежнойКарте.ЭквайринговыйТерминал,
		|	ОперацияПоПлатежнойКарте.Организация
		|ИЗ
		|	Документ.ОперацияПоПлатежнойКарте КАК ОперацияПоПлатежнойКарте
		|ГДЕ
		|	ОперацияПоПлатежнойКарте.Дата >= &Дата
		|	И ОперацияПоПлатежнойКарте.Проведен = ИСТИНА
		|	И 3 = 3
		|	И 4 = 4";
	Если ЗначениеЗаполнено(ПоКлиенту) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1 = 1","ПриходныйКассовыйОрдер.Контрагент = &Контрагент");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "2 = 2","ПоступлениеБезналичныхДенежныхСредств.Контрагент = &Контрагент");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "3 = 3","ОперацияПоПлатежнойКарте.Контрагент = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент", ПоКлиенту);
	КонецЕсли;
	Если НеВыгружатьВозвратПоЭквайрингу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "4 = 4","ОперацияПоПлатежнойКарте.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата())-ГлубинаПросмотраЗаявок*24*3600);	
	Запрос.УстановитьПараметр("ТипПлатежаНаличный", ТипПлатежаНаличный);
	Запрос.УстановитьПараметр("ТипПлатежаЭлектронный", ТипПлатежаЭлектронный);
	Запрос.УстановитьПараметр("ТипПлатежаБезналичный", ТипПлатежаБезналичный);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОплат.Загрузить(РезультатЗапроса.Выгрузить());
	ДозаполнитьВозвратамиОплат();
	//но, если привязка к нескольким заказам, надо будет по другому делать
	
	Для Каждого ТекСтрока Из ТаблицаОплат Цикл
		Если ЕстьСоответствиеТипаПлатежаДокументу Тогда
			ТипПлатежаДокументу = Неопределено;
			Если ТипЗнч(ТекСтрока.Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				ТипПлатежаДокументу = СоответствиеТипаПлатежаДокументу.Получить(СокрЛП(ТекСтрока.Касса)+СокрЛП(ТекСтрока.Организация));
				Если ТипПлатежаДокументу = Неопределено Тогда
					ТипПлатежаДокументу = СоответствиеТипаПлатежаДокументуБезОрганизации.Получить(СокрЛП(ТекСтрока.Касса));
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекСтрока.Документ) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
				ТипПлатежаДокументу = СоответствиеТипаПлатежаДокументу.Получить(СокрЛП(ТекСтрока.БанковскийСчет)+СокрЛП(ТекСтрока.Организация));
				Если ТипПлатежаДокументу = Неопределено Тогда
					ТипПлатежаДокументу =СоответствиеТипаПлатежаДокументуБезОрганизации.Получить(СокрЛП(ТекСтрока.БанковскийСчет));
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекСтрока.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
				ТипПлатежаДокументу = СоответствиеТипаПлатежаДокументу.Получить(СокрЛП(ТекСтрока.ЭквайринговыйТерминал)+СокрЛП(ТекСтрока.Организация));
				Если ТипПлатежаДокументу = Неопределено Тогда
					ТипПлатежаДокументу =СоответствиеТипаПлатежаДокументуБезОрганизации.Получить(СокрЛП(ТекСтрока.ЭквайринговыйТерминал));
				КонецЕсли;
			Иначе
				//пока неизвестный документ, может быть, возврат?
			КонецЕсли;
			Если ТипПлатежаДокументу <> Неопределено Тогда
				ТекСтрока.PaymentTypeId = ТипПлатежаДокументу;
			КонецЕсли;
			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
			Если ТипЗнч(ТекСтрока.Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				ДокументОснование = ТекСтрока.Документ.ДокументОснование;
				Если ЗначениеЗаполнено(ДокументОснование) Тогда
					Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						ТекСтрока.Реализация = ДокументОснование;
						ТекСтрока.ЗаказКлиента = ДокументОснование.ЗаказКлиента;
						Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда //надо по объекту расчетов найти
						КонецЕсли;
						Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
							ТекСтрока.orderId = ТекСтрока.ЗаказКлиента.НомерПоДаннымКлиента;
						КонецЕсли;
					КонецЕсли;
				Иначе
					//ЗаказКлиента = ПолучитьОбъектРасчетовЗаказПоДокументуОплаты(ТекСтрока);
					//ПолучитьОбъектРасчетовПоИдентификаторуПлатежа
					Для Каждого СтрокаРасшифровкаПлатежа Из ТекСтрока.Документ.РасшифровкаПлатежа Цикл
						Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
							Если ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.УдалитьЗаказ) Тогда
								ТекСтрока.ЗаказКлиента = СтрокаРасшифровкаПлатежа.УдалитьЗаказ;
								НовСтрока = paymentOrderLinks.Добавить();//по paymentId отбор идёт
								НовСтрока.ЗаказКлиента = ТекСтрока.ЗаказКлиента;
								Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
									НовСтрока.orderId = ТекСтрока.ЗаказКлиента.НомерПоДаннымКлиента;
									НовСтрока.amount = ТекСтрока.ЗаказКлиента.СуммаДокумента;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Если ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.Заказ) Тогда
								ТекСтрока.ЗаказКлиента = СтрокаРасшифровкаПлатежа.Заказ;
								НовСтрока = paymentOrderLinks.Добавить();
								НовСтрока.ЗаказКлиента = ТекСтрока.ЗаказКлиента;
								Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
									НовСтрока.orderId = ТекСтрока.ЗаказКлиента.НомерПоДаннымКлиента;
									НовСтрока.amount = ТекСтрока.ЗаказКлиента.СуммаДокумента;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
						ТекСтрока.orderId = ТекСтрока.ЗаказКлиента.НомерПоДаннымКлиента;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекСтрока.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
				Для Каждого СтрокаРасшифровкаПлатежа Из ТекСтрока.Документ.РасшифровкаПлатежа Цикл
					Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
						ДокументОснование = СтрокаРасшифровкаПлатежа.УдалитьЗаказ;
					Иначе
						ДокументОснование = СтрокаРасшифровкаПлатежа.Заказ;
					КонецЕсли;
					Если ЗначениеЗаполнено(ДокументОснование) Тогда
						Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
							ТекСтрока.ЗаказКлиента = ДокументОснование;
						ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
							ТекСтрока.Реализация = ДокументОснование;
							ТекСтрока.ЗаказКлиента = ДокументОснование.ЗаказКлиента;
						ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
							ТекСтрока.Возврат = Истина;
							ТекСтрока.ВозвратТоваровОтКлиента = ДокументОснование;
							//если документ-основание - Реализация, значит, надо дальше лезть
							//ТекСтрока.ЗаказКлиента = ДокументОснование.ЗаказКлиента;
						КонецЕсли;
						Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
							ТекСтрока.orderId = ТекСтрока.ЗаказКлиента.НомерПоДаннымКлиента;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ТекСтрока.Документ) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
				Для Каждого СтрокаРасшифровкаПлатежа Из ТекСтрока.Документ.РасшифровкаПлатежа Цикл
					Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
						ДокументОснование = СтрокаРасшифровкаПлатежа.УдалитьЗаказ;
						Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
							//ОбъектРасчетовЗаказ = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ТекСтрока.Документ);//ДоговорКонтрагента,,ТипРасчетов);
							//ОбъектРасчетовЗаказ = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовПоСсылке(ТекСтрока.Документ);
							//Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом
							Если ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.ОснованиеПлатежа) Тогда
								ДокументОснование = СтрокаРасшифровкаПлатежа.ОснованиеПлатежа;
							КонецЕсли;
							Если ЗначениеЗаполнено(ДокументОснование) Тогда
							Иначе
								ОбщийМодульУТ115 = Вычислить("ОбъектыРасчетовСервер");
								ОбъектРасчетовЗаказ = ОбщийМодульУТ115.ПолучитьОбъектРасчетовПоСсылке(ТекСтрока.Документ);//ДоговорКонтрагента,,ТипРасчетов);
								ДокументОснование = ОбъектРасчетовЗаказ;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ДокументОснование = СтрокаРасшифровкаПлатежа.Заказ;
					КонецЕсли;
					Если ЗначениеЗаполнено(ДокументОснование) Тогда
						Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
							ТекСтрока.ЗаказКлиента = ДокументОснование;
						ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
							ТекСтрока.Реализация = ДокументОснование;
							ТекСтрока.ЗаказКлиента = ДокументОснование.ЗаказКлиента;
						КонецЕсли;
						Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
							ТекСтрока.orderId = ТекСтрока.ЗаказКлиента.НомерПоДаннымКлиента;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//или можно по Контрагент.Партнер
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект = &Объект";
	               //|	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Пользователи
				   
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ДополнительныеСведения.Объект КАК Объект
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект В(&Объект)";
	ЗАпрос.УстановитьПараметр("Свойство", НомерПлатежногоДокумента);
	ЗАпрос.УстановитьПараметр("Объект", ТаблицаОплат.ВыгрузитьКолонку("Документ"));
				   
	Запрос.Текст = ТекстЗапроса;
	СоответствиеЗначенияДокументуОплаты = Новый Соответствие;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеЗначенияДокументуОплаты.Вставить(Выборка.Объект, Выборка.Значение);
	КонецЦикла;
	
	#Область ВыгружатьОплатыПоЧекамККМ
	Если ВыгружатьОплатыПоЧекамККМ Тогда
		//теперь надо подгрузить чеки ККМ, которые сначала были загружены при продаже, а после того, как взяли оплату
		//их надо выгрузить, как оплаты
		ТипИдентификатораЧисло = Новый ОписаниеТипов(Новый Массив, , ,Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		НомерЗаказаВДокументеОплаты = НайтиДобавитьСвойствоДокумента("Номер заказа в документе оплаты", ТипИдентификатораЧисло);
		ИдентификаторКонтрагентаВДокументеОплаты = НайтиДобавитьСвойствоДокумента("Идентификатор контрагента в документе оплаты", ТипИдентификатораЧисло);
		ЗапросЧеков = Новый Запрос;
		ЗапросЧеков.Текст = 
			"ВЫБРАТЬ
			|	ЧекККМ.Ссылка КАК Документ,
			|	ЧекККМ.Номер КАК Номер,
			|	ЧекККМ.Дата КАК createDateTime,
			|	ЧекККМ.СуммаДокумента КАК amount,
			|	&ТипПлатежаНаличный КАК PaymentTypeId,
			|	0 КАК ЗаказКлиента,
			|	0 КАК orderId,
			|	ЧекККМ.Комментарий КАК comment
			|ПОМЕСТИТЬ ВЧеки
			|ИЗ
			|	Документ.ЧекККМ КАК ЧекККМ
			|ГДЕ
			|	ЧекККМ.Дата >= &Дата
			|	И ЧекККМ.Проведен = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДополнительныеСведения.Значение КАК Значение,
			|	ДополнительныеСведения.Объект КАК Объект
			|ПОМЕСТИТЬ ВКонтрагенты
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ГДЕ
			|	ДополнительныеСведения.Свойство = &СвойствоИдентификаторКонтрагентаВДокументеОплаты
			|	И ДополнительныеСведения.Объект В
			|			(ВЫБРАТЬ
			|				ВЧеки.Документ
			|			ИЗ
			|				ВЧеки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДополнительныеСведения.Значение КАК Значение,
			|	ДополнительныеСведения.Объект КАК Объект
			|ПОМЕСТИТЬ ВНомера
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ГДЕ
			|	ДополнительныеСведения.Свойство = &СвойствоНомерПлатежногоДокумента
			|	И ДополнительныеСведения.Объект В
			|			(ВЫБРАТЬ
			|				ВЧеки.Документ
			|			ИЗ
			|				ВЧеки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЧеки.Документ КАК Документ,
			|	ВЧеки.Номер КАК Номер,
			|	ВЧеки.createDateTime КАК createDateTime,
			|	ВЧеки.amount КАК amount,
			|	ВЧеки.PaymentTypeId КАК PaymentTypeId,
			|	ВЧеки.ЗаказКлиента КАК ЗаказКлиента,
			|	ВЧеки.orderId КАК orderId,
			|	ВЧеки.comment КАК comment,
			|	ВНомера.Значение КАК paymentNumber,
			|	ВКонтрагенты.Значение КАК ИдентификаторКонтрагента
			|ИЗ
			|	ВЧеки КАК ВЧеки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВКонтрагенты КАК ВКонтрагенты
			|		ПО ВЧеки.Документ = ВКонтрагенты.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВНомера КАК ВНомера
			|		ПО ВЧеки.Документ = ВНомера.Объект";
		ЗапросЧеков.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата())-ГлубинаПросмотраЗаявок*24*3600);	
		ЗапросЧеков.УстановитьПараметр("ТипПлатежаНаличный", ТипПлатежаНаличный);
		ЗапросЧеков.УстановитьПараметр("ТипПлатежаЭлектронный", ТипПлатежаЭлектронный);
		ЗапросЧеков.УстановитьПараметр("СвойствоИдентификаторКонтрагентаВДокументеОплаты", ИдентификаторКонтрагентаВДокументеОплаты);
		ЗапросЧеков.УстановитьПараметр("СвойствоНомерПлатежногоДокумента", НомерПлатежногоДокумента);
		РезультатЗапроса = ЗапросЧеков.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТаблицаЧеков = РезультатЗапроса.Выгрузить();
			//теперь сопоставляем ид.клиента, клиента и НомерПлатежногоДокумента
			Для Каждого ТекСтрока Из ТаблицаЧеков Цикл
				Если ТекСтрока.ИдентификаторКонтрагента <> Null И ТекСтрока.paymentNumber = Null Тогда
					НовСтрока = ТаблицаОплат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
					НовСтрока.Контрагент = НайтиКонтрагентаПоИдентификатору(НовСтрока.ИдентификаторКонтрагента);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	#КонецОбласти
	
	ЗаполнитьСоответствиеИдентификаторовПоКонтрагентам(ТаблицаОплат.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("Свойство", НомерПлатежногоДокумента);
	Для Каждого СтрокаТаблицы Из ТаблицаОплат Цикл
		Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.ИдентификаторКонтрагента = СоответствиеИдентификаторовПоКонтрагентам.Получить(СтрокаТаблицы.Контрагент); //ПолучитьИдентификаторКонтрагента(СтрокаТаблицы.Контрагент);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументВозврат) И СтрокаТаблицы.paymentNumber<>"" Тогда
			Продолжить;//уже раньше заполнили
		КонецЕсли;
		Если Лев(СтрокаТаблицы.paymentNumber,13) = "Заказ клиента" Тогда
			СтрокаТаблицы.paymentNumber = "";
		КонецЕсли;
		Если СтрокаТаблицы.paymentNumber <> СтрокаТаблицы.Номер Тогда
			СтрокаТаблицы.paymentNumber = "";
		КонецЕсли;
		Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
			СтрокаТаблицы.paymentNumber = СтрокаТаблицы.Документ.Комментарий;
			//сообщить(СтрокаТаблицы.Документ);
		КонецЕсли;
		СтрокаТаблицы.paymentNumber = "";//теперь храним номер документа ABCP в регистре сведений
		СтрокаТаблицы.paymentNumber = СокрЛП(СоответствиеЗначенияДокументуОплаты.Получить(СтрокаТаблицы.Документ));
		//Запрос.УстановитьПараметр("Объект", СтрокаТаблицы.Документ);//медленно работает, надо по другому
		//Результат = Запрос.Выполнить();
		//Если НЕ Результат.Пустой() Тогда
		//	Выборка = Результат.Выбрать();
		//	Выборка.Следующий();
		//	СтрокаТаблицы.paymentNumber = Выборка.Значение;
		//КонецЕсли;
		//Док = СтрокаТаблицы.Документ;
		//Если ЗначениеЗаполнено(Док.ДокументОснование) Тогда
		//	СтрокаТаблицы.ЗаказКлиента = Док.ДокументОснование;//может быть несколько привязок
		//	СтрокаТаблицы.orderId = СтрокаТаблицы.ЗаказКлиента.НомерПоДаннымКлиента;
		//	СтрокаТаблицы.paymentNumber = СтрокаТаблицы.Документ.Основание;
		//КонецЕсли;
		//Если Док.РасшифровкаПлатежа.Количество() > 0 Тогда
		//	СтрокаТаблицы.ЗаказКлиента = Док.РасшифровкаПлатежа[0].Заказ;//может быть несколько привязок
		//	СтрокаТаблицы.orderId = СтрокаТаблицы.ЗаказКлиента.НомерПоДаннымКлиента;
		//КонецЕсли;
	КонецЦикла;
	НайденныеСтроки = ТаблицаОплат.НайтиСтроки(Новый Структура("ИдентификаторКонтрагента", 0));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТаблицаОплат.Удалить(НайденнаяСтрока);
	КонецЦикла;
	//если paymentNumber есть, то не выгружаем
	Возврат ТаблицаОплат;
КонецФункции

Процедура ДозаполнитьВозвратамиОплат(ПоКлиенту = Неопределено)
	Если НЕ ВыгружатьВозвратыОплаты Тогда
		Возврат;
	КонецЕсли;
	ИмяСвойства = "НомерПлатежногоДокумента";
	НомерПлатежногоДокумента = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства+" (Документы)");
	Запрос = Новый Запрос;
	//ещё эквайринг с типом операции - возврат оплаты клиенту,за 13.10.22 есть
	//можно галку снять НеВыгружатьВозвратПоЭквайрингу, и будет выгружать
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдер.Ссылка КАК ДокументВозврат,
		|	РасходныйКассовыйОрдер.Номер КАК Номер,
		|	РасходныйКассовыйОрдер.Дата КАК createDateTime,
		|	РасходныйКассовыйОрдер.Дата КАК ДатаВозврата,
		|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаВозврат,
		|	ИСТИНА КАК Возврат,
		|	&ТипПлатежаНаличный КАК PaymentTypeId,
		|	РасходныйКассовыйОрдер.Контрагент КАК Контрагент,
		|	РасходныйКассовыйОрдер.Комментарий КАК comment,
		|	РасходныйКассовыйОрдер.ДокументОснование КАК ВозвратТоваровОтКлиента,
		|	РасходныйКассовыйОрдер.ДокументОснование.ДокументРеализации.ЗаказКлиента КАК ЗаказКлиента,
		|	РасходныйКассовыйОрдер.Касса КАК Касса,
		|	NULL КАК БанковскийСчет,
		|	NULL КАК ЭквайринговыйТерминал,
		|	РасходныйКассовыйОрдер.Организация КАК Организация
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.Дата >= &Дата
		|	И РасходныйКассовыйОрдер.Проведен = ИСТИНА
		|	И 1 = 1";
	//	|	РасходныйКассовыйОрдер.ДокументОснование.НомерПоДаннымКлиента КАК orderId,
	Если ЗначениеЗаполнено(ПоКлиенту) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1 = 1","ПриходныйКассовыйОрдер.Контрагент = &Контрагент");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "2 = 2","ПоступлениеБезналичныхДенежныхСредств.Контрагент = &Контрагент");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "3 = 3","ОперацияПоПлатежнойКарте.Контрагент = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент", ПоКлиенту);
	КонецЕсли;
	//Если НеВыгружатьВозвратПоЭквайрингу Тогда
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "4 = 4","ОперацияПоПлатежнойКарте.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)");
	//КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата())-ГлубинаПросмотраЗаявок*24*3600);	
	Запрос.УстановитьПараметр("ТипПлатежаНаличный", ТипПлатежаНаличный);
	Запрос.УстановитьПараметр("ТипПлатежаЭлектронный", ТипПлатежаЭлектронный);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтрока = ТаблицаОплат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
		Если НЕ ЗначениеЗаполнено(НовСтрока.ЗаказКлиента) Тогда //может быть в Расшифровке платежа
			Для Каждого СтрокаРасшифровкаПлатежа Из НовСтрока.ДокументВозврат.РасшифровкаПлатежа Цикл
				Если ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.Заказ) Тогда
					НовСтрока.ЗаказКлиента = СтрокаРасшифровкаПлатежа.Заказ;
					//НовСтрока.orderId = СтрокаРасшифровкаПлатежа.Заказ.НомерПоДаннымКлиента;
					Прервать;//если несколько привязок, берём только первую
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтрока.ЗаказКлиента) Тогда
			ДокументОплаты = НайтиОплатуПоЗаказуКлиента(НовСтрока.ЗаказКлиента);
			Если ЗначениеЗаполнено(ДокументОплаты) Тогда
				НомерПлатежа = ПолучитьНомерПлатежногоДокумента(НомерПлатежногоДокумента, ДокументОплаты);
				Если НомерПлатежа <> "" Тогда
					НовСтрока.paymentId = ПолучитьpaymentId(НомерПлатежа, ДокументОплаты.СуммаДокумента);
				КонецЕсли;
				НовСтрока.paymentNumber = ПолучитьНомерПлатежногоДокумента(НомерПлатежногоДокумента, НовСтрока.ДокументВозврат);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьНомерПлатежногоДокумента(НомерПлатежногоДокумента, Документ)
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект = &Объект";
	Запрос = Новый Запрос;
	ЗАпрос.Текст = ТекстЗАпроса;
	ЗАпрос.УстановитьПараметр("Свойство", НомерПлатежногоДокумента);
	ЗАпрос.УстановитьПараметр("Объект", Документ);
	Результат = ЗАпрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Значение;
КонецФункции

Функция НайтиОплатуПоЗаказуКлиента(ДокументОснование)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Процедура ВыгрузитьОплатыИз1СВABCP() Экспорт
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ТипИдентификатораСтрока50 = Новый ОписаниеТипов(МассивСтрока, , ,Новый КвалификаторыСтроки(50));
	НомерПлатежногоДокумента = НайтиДобавитьСвойствоДокумента("НомерПлатежногоДокумента", ТипИдентификатораСтрока50);
	
	//ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль;//в начале ? не нужен
	НС = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаОплат Цикл
		Если СокрЛП(СтрокаТаблицы.paymentNumber)<>"" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.paymentTypeId=0 Тогда
			ЗаписьВЛог("Не заполнен тип оплаты у документа: "+СтрокаТаблицы.Документ);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			//это документ возврата
			Продолжить;
		КонецЕсли;
		//linkPayments - автоматическая привязка платежей
		//ФрагментЗапроса = ФрагментЗапроса+"&payments["+НС+"][userId]="+Формат(СтрокаТаблицы.ИдентификаторКонтрагента,"ЧГ=0")+"&payments["+НС+"][paymentTypeId]="+Формат(СтрокаТаблицы.paymentTypeId,"ЧГ=0")+"&payments["+НС+"][amount]="+Формат(СтрокаТаблицы.amount,"ЧРД=.; ЧГ=0")+"&payments["+НС+"][createDateTime]="+Формат(СтрокаТаблицы.createDateTime,"ДФ='yyyy-MM-dd hh:mm:ss'")+"&payments["+НС+"][paymentNumber]="+СокрЛП(СтрокаТаблицы.Документ.Номер)+"&linkPayments=1";
		//выгружаем каждый платёж отдельно, так как при возникновении ошибки всё стопориться
		//ФрагментЗапроса = "&payments["+НС+"][userId]="+Формат(СтрокаТаблицы.ИдентификаторКонтрагента,"ЧГ=0")+"&payments["+НС+"][paymentTypeId]="+Формат(СтрокаТаблицы.paymentTypeId,"ЧГ=0")+"&payments["+НС+"][amount]="+Формат(СтрокаТаблицы.amount,"ЧРД=.; ЧГ=0")+"&payments["+НС+"][createDateTime]="+Формат(СтрокаТаблицы.createDateTime,"ДФ='yyyy-MM-dd hh:mm:ss'")+"&payments["+НС+"][paymentNumber]="+СокрЛП(СтрокаТаблицы.Документ.Номер)+"&linkPayments=1";
		НомерДокумента = СтрокаТаблицы.Документ.Номер;
		Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НомерДокумента = "Н"+СтрокаТаблицы.Документ.Номер;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
			НомерДокумента = "Б"+СтрокаТаблицы.Документ.Номер;
		Иначе
			НомерДокумента = "Э"+СтрокаТаблицы.Документ.Номер;
		КонецЕсли;
		ЗаписьВЛог("выгружаем документ: "+СтрокаТаблицы.Документ+" № на сайте " +НомерДокумента);
		ФрагментЗапросаБезПароля = "&payments[0][userId]="+Формат(СтрокаТаблицы.ИдентификаторКонтрагента,"ЧГ=0")+"&payments[0][paymentTypeId]="+Формат(СтрокаТаблицы.paymentTypeId,"ЧГ=0")+"&payments[0][amount]="+Формат(СтрокаТаблицы.amount,"ЧРД=.; ЧГ=0")+"&payments[0][createDateTime]="+Формат(СтрокаТаблицы.createDateTime,"ДФ='yyyy-MM-dd HH:mm:ss'")+"&payments[0][paymentNumber]="+СокрЛП(НомерДокумента);
		//Если СтрокаТаблицы.orderId = 0 Тогда
		Если АвтоматическаяПривязкаПлатежей Тогда
			ФрагментЗапросаБезПароля = ФрагментЗапросаБезПароля +"&linkPayments=1";
		Иначе
			Если СтрокаТаблицы.orderId = 0 Тогда
				ФрагментЗапросаБезПароля = ФрагментЗапросаБезПароля +"&linkPayments=1";//если № заказа нет, то автоматически привязываем
			Иначе
				ФрагментЗапросаБезПароля = ФрагментЗапросаБезПароля +"&linkPayments=0";
			КонецЕсли;
		КонецЕсли;
		ЗаписьВЛог("фрагмент выгрузки оплаты на сайте: "+ФрагментЗапросаБезПароля);
		
		ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль+ФрагментЗапросаБезПароля;
		//сообщить(ФрагментЗапроса);
		
		//и в основание записать № документов
		ИмяФайлаСТекстомЗапроса = ПолучитьимяВременногоФайла("txt");
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСТекстомЗапроса, КодировкаТекста.UTF8);
		ЗаписьТекста.Записать(ФрагментЗапроса);
		ЗаписьТекста.Закрыть();
		//отправим файл на сервер для обработки
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
		ФайлОтправки = Новый Файл(ИмяФайлаСТекстомЗапроса);
		//РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
		//Заголовки = Новый Соответствие();
		//Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		//Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
		////HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/finance/payments?userlogin="+Пользователь+"&userpsw="+Пароль, , Пользователь, Пароль);
		//HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/finance/payments", , Пользователь, Пароль);
		//Если Отладка Тогда
		//	сообщить(АдресСервиса+"/cp/finance/payments"+ФрагментЗапроса);
		//КонецЕсли;
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса, , Пользователь, Пароль); 
		ЗаголовокHTTP = Новый Соответствие(); 
		ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded"); 
		HTTPЗапрос = Новый HTTPЗапрос("/cp/finance/payments",ЗаголовокHTTP); 
		HTTPЗапрос.УстановитьТелоИзСтроки(ФрагментЗапроса); 
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос,ИмяВыходногоФайла);	
		
		//так тоже работает
		//HTTPЗапрос = Новый HTTPЗапрос("/cp/order");
		//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаСТекстомЗапроса);
		//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		//HTTPЗапрос.Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
		//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);	
		//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/finance/payments", ИмяВыходногоФайла, Заголовки);
		//ТекстСообщения = "";
		//ЗаписьВЛог(ТекстСообщения,3);
		//сообщить(HTTPОтвет.КодСостояния);
		Если НЕ КодСостояния200(HTTPОтвет.КодСостояния, , ИмяВыходногоФайла, Ложь) Тогда
			//ЕстьОшибка = Истина;
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла);
			ТекстИзФайла = ТекстовыйДокумент.ПолучитьТекст();
			ЗаписьВЛог(ТекстИзФайла,3);
			//сообщить(ТекстИзФайла);
			Попытка
				ОписаниеОшибки = СтруктураИзJSON(ТекстИзФайла);//, ИмяВыходногоФайла);
				//Ответ сервера: errorCode: 4, errorMessage: Платеж с номером ТД00-000001 и заданным временем создания уже существует
				//Ответ сервера: errorCode: 4, errorMessage: Обнаружен дублирующий платёж НЛУТ-004649
				Если Найти(ОписаниеОшибки.errorMessage, НомерДокумента) > 0 Тогда
					//значит, уже выгружали, записываем в регистр
					СтрокаТаблицы.paymentNumber = НомерДокумента;
					МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект = СтрокаТаблицы.Документ;
					МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
					МенеджерЗаписи.Значение = СтрокаТаблицы.paymentNumber;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			//Возврат;
			Исключение
			КонецПопытки;
		Иначе
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла);
			ТекстИзФайла = ТекстовыйДокумент.ПолучитьТекст();
			//ЗаписьВЛог(ТекстИзФайла,3);//не надо засорять лог
			
			//СтрокаТаблицы.paymentNumber = СокрЛП(Платеж.paymentNumber);
			//номер платежа в платформе такой же, как и в 1С
			//СтрокаТаблицы.paymentNumber = СокрЛП(Платеж.paymentNumber);
			Попытка
				СписокЭлементов = СтруктураИзJSON(ТекстИзФайла);
				Для Каждого Элемент Из СписокЭлементов Цикл
					СтрокаТаблицы.paymentId = Элемент.paymentId;
				КонецЦикла;
			Исключение
			КонецПопытки;			
			СтрокаТаблицы.paymentNumber = НомерДокумента;
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = СтрокаТаблицы.Документ;
			МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
			МенеджерЗаписи.Значение = СтрокаТаблицы.paymentNumber;
			МенеджерЗаписи.Записать();
			//привязываем платеж к заказу
			Если НЕ АвтоматическаяПривязкаПлатежей Тогда
				ПривязатьЗаказКПлатежу(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
		Попытка
		    УдалитьФайлы(ИмяФайлаСТекстомЗапроса);
		Исключение
		КонецПопытки;
		Попытка
		    //УдалитьФайлы(ИмяВыходногоФайла);
		Исключение
		КонецПопытки;
		НС = НС + 1;
	КонецЦикла;
	
	Если ВыгружатьВозвратыОплаты Тогда
		НСтроки = ТаблицаОплат.НайтиСтроки(Новый Структура("Возврат", Истина));
		Для Каждого СтрокаТаблицы Из НСтроки Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументВозврат) И СтрокаТаблицы.СуммаВозврат<>0 И СтрокаТаблицы.paymentId<>0 И СтрокаТаблицы.paymentNumber = "" Тогда
				//выгружаем возврат методом cp/finance/paymentRefund
				//Позволяет осуществлять возврат ранее созданного платежа
				//refundPaymentId	id платежа
				//refundAmount	Сумма возврата.
				НомерДокумента = ВыгрузитьВозвратОплатыИз1СВABCP(СтрокаТаблицы.paymentId, СтрокаТаблицы.СуммаВозврат);
				//paymentNumber
				Если НомерДокумента <> Неопределено Тогда
					СтрокаТаблицы.paymentNumber = НомерДокумента;//или СтрокаТаблицы.ДокументВозврат.Номер
					МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект = СтрокаТаблицы.ДокументВозврат;
					МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
					МенеджерЗаписи.Значение = СтрокаТаблицы.paymentNumber;
					МенеджерЗаписи.Записать();
				Иначе
					СтрокаТаблицы.paymentNumber = "ошибка "+СтрокаТаблицы.ДокументВозврат.Номер;
					МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект = СтрокаТаблицы.ДокументВозврат;
					МенеджерЗаписи.Свойство = НомерПлатежногоДокумента.Ссылка;
					МенеджерЗаписи.Значение = СтрокаТаблицы.paymentNumber;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НС = 0 Тогда
		сообщить("У всех документов заполнены основания (или не заполнен тип платежа PaymentTypeId)");
		Возврат;
	КонецЕсли;
КонецПроцедуры //ВыгрузитьОплатыИз1СВABCP

Функция ВыгрузитьВозвратОплатыИз1СВABCP(paymentId, refundAmount)
	//HTTPСоединение = Новый HTTPСоединение(АдресСервиса, , Пользователь, Пароль); 
	////ЗаголовокHTTP = Новый Соответствие(); 
	////ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded"); 
	//HTTPЗапрос = Новый HTTPЗапрос("/cp/finance/paymentRefund");//,ЗаголовокHTTP); 
	//HTTPЗапрос.УстановитьТелоИзСтроки("userlogin="+Пользователь+"&userpsw="+Пароль+"&refundPaymentId="+Формат(paymentId,"ЧГ=0")+"&refundAmount="+Формат(refundAmount,"ЧРД=.; ЧГ=0")); 
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);//,ИмяВыходногоФайла);	
	ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль+"&refundPaymentId="+Формат(paymentId,"ЧГ=0")+"&refundAmount="+Формат(refundAmount,"ЧРД=.; ЧГ=0");
	Если Отладка Тогда
		сообщить(АдресСервиса+"/cp/finance/paymentRefund?"+ФрагментЗапроса);
	КонецЕсли;
	ИмяФайлаСТекстомЗапроса = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСТекстомЗапроса, "CESU-8");//КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(ФрагментЗапроса);
	ЗаписьТекста.Закрыть();
	
	//отправим файл на сервер для обработки
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
	ФайлОтправки = Новый Файл(ИмяФайлаСТекстомЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/finance/paymentRefund?userlogin="+Пользователь+"&userpsw="+Пароль, , Пользователь, Пароль);
	Попытка
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/finance/paymentRefund", ИмяВыходногоФайла, Заголовки);	
	Исключение
		ЗаписьВЛог(ФрагментЗапроса);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла);
		ТекстИзФайла = ТекстовыйДокумент.ПолучитьТекст();
		ТекстСообщения = "paymentId № : " + paymentId+", ошибки "+ОписаниеОшибки()+" "+ТекстИзФайла;
		Если Отладка Тогда
			сообщить(ТекстИзФайла);
		КонецЕсли;
		ЗаписьВЛог(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();//ничего нет в ней
		СписокЭлементов = СтруктураИзJSON(,ИмяВыходногоФайла);
		Возврат СписокЭлементов.paymentNumber;
	Иначе
		СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЗаписьВЛог(СтрокаОтвет,,Истина);
	КонецЕсли;
	Возврат Неопределено;
	//так тоже работает
	//HTTPЗапрос = Новый HTTPЗапрос("/cp/order");
	//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаСТекстомЗапроса);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//HTTPЗапрос.Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);	
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/finance/payments", ИмяВыходногоФайла, Заголовки);
	//ТекстСообщения = "";
	//ЗаписьВЛог(ТекстСообщения,3);
	//сообщить(HTTPОтвет.КодСостояния);
	//Если НЕ КодСостояния200(HTTPОтвет.КодСостояния, , ИмяВыходногоФайла, Ложь) Тогда
КонецФункции

Функция ПолучитьpaymentId(НомерПлатежа, СуммаДокумента = 0)
	Если НомерПлатежа = "" Тогда
		Возврат 0;
	КонецЕсли;
	ТекстЗапроса = "/cp/finance/payments?userlogin="+Пользователь+"&userpsw="+Пароль+"&paymentNumber="+НомерПлатежа;
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Если НЕ КодСостояния200(КодСостояния, СтрокаОтвет) Тогда
		Возврат 0;
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Если СписокЭлементов.Количество() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		paymentId = 0;
		Для Каждого Элемент Из СписокЭлементов Цикл
			paymentId = Элемент.paymentId;
			//Если СуммаДокумента<>0 И Элемент.amount = СуммаДокумента Тогда
			//	Прервать;
			//КонецЕсли;
		КонецЦикла;
		Возврат paymentId;
	КонецЕсли;
КонецФункции

// Привязывает заказ на сайте ABCP к выгруженному платежу
// Вызывается после выгрузки заказа
//
// Параметры:
//   ТекСтрока - Строка таблицы платежей - ссылка на строку таблицы платежей.
// 
Процедура ПривязатьЗаказКПлатежу(ТекСтрока)
	Если ТекСтрока.paymentNumber = "" Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтрока.orderId = 0 Тогда
		ЗаписьВЛог("Привязка не выгружена нет № заказа у документа "+ТекСтрока.Документ);
		Возврат;
	КонецЕсли;
	Если ТекСтрока.paymentId = 0 Тогда
		ТекСтрока.paymentId = ПолучитьpaymentId(ТекСтрока.paymentNumber);
	КонецЕсли;
	Если ТекСтрока.paymentId = 0 Тогда
		ЗаписьВЛог("Привязка не выгружена нет paymentId у документа "+ТекСтрока.Документ);
		Возврат;
	КонецЕсли;
	ФрагментЗапроса = "userlogin="+Пользователь+"&userpsw="+Пароль+"&paymentId="+Формат(ТекСтрока.paymentId,"ЧГ=0")+"&orderId="+Формат(ТекСтрока.orderId,"ЧГ=0")+"&amount="+Формат(ТекСтрока.amount,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
	ЗаписьВЛог(ФрагментЗапроса);//может не срабатывать с сотрудником
	ИмяФайлаСТекстомЗапроса = ПолучитьимяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСТекстомЗапроса, КодировкаТекста.UTF8);//КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(ФрагментЗапроса);
	ЗаписьТекста.Закрыть();
	
	//отправим файл на сервер для обработки
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");
	ФайлОтправки = Новый Файл(ИмяФайлаСТекстомЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	HTTPСоединение = Новый HTTPСоединение(АдресСервиса+"/cp/finance/paymentOrderLink?userlogin="+Пользователь+"&userpsw="+Пароль, , Пользователь, Пароль);
	//так тоже работает
	//HTTPЗапрос = Новый HTTPЗапрос("/cp/finance/userBalance");
	//HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаСТекстомЗапроса);
	//HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	//HTTPЗапрос.Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	//HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);	
	Попытка
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(ИмяФайлаСТекстомЗапроса, "/cp/finance/paymentOrderLink", ИмяВыходногоФайла, Заголовки);	
	Исключение
		ЗаписьВЛог(ФрагментЗапроса);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла);
		ТекстИзФайла = ТекстовыйДокумент.ПолучитьТекст();
		//ТекстСообщения = "платеж № : " + ТекСтрока.paymentNumber+", ошибки "+ОписаниеОшибки()+" "+ТекстИзФайла;
		ТекстСообщения = "платеж № : " + ТекСтрока.paymentNumber+", ошибки "+ОписаниеОшибки()+" "+ТекстИзФайла;
		ЗаписьВЛог(ТекстСообщения,3);
		сообщить("Ошибка привязки платежа, возможно, к заказу "+Формат(ТекСтрока.orderId,"ЧГ=0")+" уже привязана другая оплата");
		сообщить(ТекстИзФайла);
		//В заказе у вас тип оплаты Наличный. А платеж с типом Безналичный.
		Если ТекстИзФайла = "{""errorCode"":500,""errorMessage"":""\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430.""}" Тогда
		//Если Найти(ТекстИзФайла, "500")>0 Тогда
			сообщить("Возможно в настройках модуля финансы отключена функция «Разрешить привязывать безналичные оплаты к заказам, оформленным с наличным типом оплаты и наоборот», и безналичный платёж привязывается к заказу с наличным типом оплаты, или наоброт");
		КонецЕсли;
		Возврат;
	КонецПопытки;
	КодСостояния = HTTPОтвет.КодСостояния;
	Если НЕ КодСостояния200(КодСостояния, , ИмяВыходногоФайла) Тогда
		ЕстьОшибка = Истина;
	Иначе
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВыходногоФайла);
		ТекстИзФайла = ТекстовыйДокумент.ПолучитьТекст();
		ЗаписьВЛог(ТекстИзФайла,3);

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяВыходногоФайла);	
		СписокЭлементов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		ТекстСообщения = "платеж № : " + ТекСтрока.paymentNumber+", привязан заказ № "+ТекСтрока.orderId;
		ЗаписьВЛог(ТекстСообщения,3);
	КонецЕсли;
	Попытка
	    УдалитьФайлы(ИмяФайлаСТекстомЗапроса);
	Исключение
	КонецПопытки;
	Попытка
	    УдалитьФайлы(ИмяВыходногоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ВыгрузитьОплатыНаСайт()
	ВернутьТаблицуОплат1С();
	ВыгрузитьОплатыИз1СВABCP();
КонецПроцедуры

#КонецОбласти

Процедура ПровестиНепроведенныеДокументы(ВидДокумента = "") Экспорт
	ЗаписьВЛог("Проведение документов");
	МассивДокументов = Новый Массив;
	Если ВидДокумента = "" Тогда
		МассивДокументов.Добавить("ЗаказКлиента");
		МассивДокументов.Добавить("ЗаказПоставщику");
		МассивДокументов.Добавить("ПриобретениеТоваровУслуг");
		МассивДокументов.Добавить("РеализацияТоваровУслуг");
		МассивДокументов.Добавить("ПриходныйКассовыйОрдер");
		МассивДокументов.Добавить("РасходныйКассовыйОрдер");
		МассивДокументов.Добавить("ЧекККМ");
		МассивДокументов.Добавить("ЧекККМВозврат");
		МассивДокументов.Добавить("ОперацияПоПлатежнойКарте");
		МассивДокументов.Добавить("ПоступлениеБезналичныхДенежныхСредств");
		МассивДокументов.Добавить("СписаниеБезналичныхДенежныхСредств");
	Иначе
		МассивДокументов.Добавить(ВидДокумента);
	КонецЕсли;
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 50
		|	ЗаказКлиента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Проведен = ЛОЖЬ
		|	И ЗаказКлиента.Дата >= &Дата
		|	И ЗаказКлиента.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказКлиента.Дата";
	Запрос = Новый Запрос;
	НачалоГраницы = НачалоДня(ТекущаяДата() - ГлубинаПросмотраДляПроведения*3600*24);
	ЗаписьВЛог("Проведение непроведённых документов, начиная с "+НачалоГраницы);
	Запрос.УстановитьПараметр("Дата", НачалоГраницы);
	Для Каждого ЭлементМассива Из МассивДокументов Цикл
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента", ЭлементМассива);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если ЭлементМассива = "РеализацияТоваровУслуг" Тогда
			//пытаемся изменить статусы в заказе клиента
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОбъектРеализация = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Если ОбъектРеализация.Товары.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(ОбъектРеализация.ЗаказКлиента) Тогда
					ПроводитьРеализацию = Ложь;
					ОбъектЗаказ = ОбъектРеализация.ЗаказКлиента.ПолучитьОбъект();
					Если ОбъектЗаказ.ПометкаУдаления Тогда
						Продолжить;
					КонецЕсли;
					Структура = Новый Структура("КодСтроки");
					Записывать = Ложь;
					Для Каждого СтрокаРеализации Из ОбъектРеализация.Товары Цикл
						Структура.КодСтроки = СтрокаРеализации.КодСтроки;
						СтрокиЗаказа = ОбъектЗаказ.Товары.НайтиСтроки(Структура);
						Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
							СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
							Записывать = Истина;
						КонецЦикла;
					КонецЦикла;
					Если Записывать Тогда
						Попытка
							ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение);
							ПроводитьРеализацию = Истина;
						Исключение
							//ЗаписьВЛог(ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				Если ПроводитьРеализацию Тогда
					Попытка
						ОбъектРеализация.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						//ЗаписьВЛог(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЭлементМассива = "ПриобретениеТоваровУслуг" Тогда
			Попытка
				ИспользоватьГрафикиОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
			Исключение
				ИспользоватьГрафикиОплаты = Ложь;
			КонецПопытки;
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Если Об.Товары.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
					ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(Об);
				Иначе
					Если УТ114 И (Подверсия3 > 5) Тогда
						Если Об.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
							Об.ЗаполнитьЭтапыГрафикаОплаты();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Об.Записать();
					ЗаписьВЛог(ОписаниеОшибки());
				КонецПопытки;
				Если Об.Проведен И ЗначениеЗаполнено(Об.ЗаказПоставщику) Тогда
					Если ЗначениеЗаполнено(Об.ЗаказПоставщику.ДокументОснование) Тогда
						Если НЕ Об.ЗаказПоставщику.ДокументОснование.Проведен Тогда
							Об = Об.ЗаказПоставщику.ДокументОснование.ПолучитьОбъект();
							Попытка
								Об.Записать(РежимЗаписиДокумента.Проведение);
							Исключение
								//ЗаписьВЛог(ОписаниеОшибки());
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
		Иначе
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Если ЭлементМассива = "ЗаказПоставщику" Тогда
					Об.Согласован = Истина;
				КонецЕсли;
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Об.Записать();
					ЗаписьВЛог(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПереченьНастроек() Экспорт
	ПереченьНастроек = "АдресСервиса,Пользователь,Пароль,ИмяФайлаExcel,ИдентификаторПоставщика,ВидЦены,ВидЦеныПродажи,Склад,Организация,ОрганизацияРозница,ОрганизацияВПоступлении,НалогообложениеНДСПоступление,НалогообложениеНДСРеализация,ГруппаНовойНоменклатуры,ГлубинаПросмотраЗаявок"+
	",ИзменятьСтатусНовыхЗаявок,КодСтатусаНаСкладе,КодСтатусаВыдано,КодСтатусаГотовКВыдаче,КодСтатусаСНаличия,КодСтатусаОтказ,КодСтатусаВозврат,КодСтатусаВРаботе,КодСтатусаНовый,СоздаватьЗаказыПоставщикам,ВыгружатьБалансНаСайт,ГлубинаПросмотраКлиентов,НеСоздаватьПапкиНоменклатуры,ВидНоменклатуры,ЛогФайл,ПорядокРасчетов,ПорядокРасчетовЗаказПоставщику"+
	",Касса,КассаККМ,БанковскийСчет,ЭквайринговыйТерминал,СинхронизироватьНоменклатуру,СинхронизироватьКонтрагентов,СинхронизироватьПоставщиков,СинхронизироватьМенеджеров,ИспользоватьОрдерныеСклады,Помещение,СкладскаяГруппа,НаборУпаковок,Типоразмер,РазрешитьИзменениеСтатусаИз1С,Подразделение,УслугаДоставки,УчитыватьСтоимостьДоставки,ПредлагатьСНаличия,АвтоматическиМенятьНаНаличие"+
	",Магазин,ПоставщикДляПоступления,ОсновнойПокупатель,ДобавлятьПроизводителяВПолноеНаименованиеНоменклатуры,ДобавлятьАртикулВПолноеНаименованиеНоменклатуры,ДобавлятьАртикулПослеНаименования,НеПроводитьДокументы,ОтборЗаявокПоДатеСоздания,ИспользоватьТранзакции,СоздаватьШтрихКодыУНовойНоменклатуры,СоздаватьАртикулВШтрихКоде,АвтоматическоеИзменениеСтатусовНаСайтеПриПоступленииИРеализации,ФинансовыйМодульВключен,НеСоздаватьЛишниеЗаказыПоставщикам,НумерацияЗаказовКакВABCP,РазделятьПозицииЗаказовПриНеобходимости,НеЗагружатьОтказы,НеОбновлятьЗагруженныеЗаказы,НеОбновлятьЗагруженныеЗаказыПоставщикам,НеОбновлятьЗагруженныеПоступления,НеОбновлятьЗагруженныеРеализации"+
	",ПерезаполнятьСтатусыПриЗагрузке,ЗагружатьОчищенныеАртикулы,СкрыватьСообщения,ВестиУчетПоГТД,НеСоздаватьВозвратыПокупателей,НеСоздаватьВозвратыПоставщикам,СкладВПоступлении,СоглашениеОпт,СоглашениеРозница,РегистрироватьЦеныПоставщика,РегистрироватьЦеныАвтоматическогоПоступления,РегистрироватьЦеныНоменклатуры,СтатусПослеПоступления,СтатусПослеРеализации,СтатусПослеЗаказаПоставщику,Франчайзи,НеУчитыватьЗакрытыеЗаказыПокупателя,НеУчитыватьЗакрытыеЗаказыПоставщикам,РасширеннаяПривязкаОплат,НеЗакрыватьЗаказыПокупателей"+
	",КодПоставщикаУслуг,КодСтатусаНаличие,ПочтовыйСервер,ПользовательДляEmail,ПарольДляEmail,ПортSMTP,ОбъединятьСкладыПриВыгрузке,ПланОбменаДляРегистрации,СинхронизироватьТолькоПоАртикулу,СоздаватьДоговоры,ЗаполнятьСкладПоОфису,ПолучатьГаражУНовыхКонтрагентов,КодОбщегоСклада,КодСтатусаРезерв,ЕстьЗаменаПоставщика,ОсновнаяСтавкаНДС,ИзменятьНДСВНоменклатуре,ОфисСамовывоза,ОтборПоПоставщику,ОрганизацияПоСкладу,ТолькоСвоиСклады,ЦенаИзСправочника,СегментСтопЛист,СегментВыгрузкиВзаиморасчетов,Валюта"+
	",ОтборЗагружаемыхПозиций,ПерезаполнятьДокументыПриЗагрузке,ИспользоватьСерииНоменклатуры,ИспользоватьМенеджераИзКарточкиКонтрагента,ИспользоватьСкладИзКарточкиКонтрагента,ВыгружатьКратность,ТипПлатежаНаличный,ТипПлатежаЭлектронный,ПоискПоКодуНоменклатуры,ВыгружатьГруппыНоменклатуры,ВыгружатьКорневуюГруппу,ВыгружатьКодыНоменклатуры,СоздаватьИндивидуальныеСоглашения,ПроверятьНаличиеНашихПозиций,СтавитьВОтказЕслиНетНаличияНашихПозиций,ГруппаДоступа,NonameВместоПустыхБрендов,ОсновнойМенеджер,ЯзыкИнтерфейса,ИспользоватьСинонимыБрендов"+
	",ИсключитьИдентификаторыКлиентов,КонтрагентНаНаличие,ВыгружатьОплатыПоЧекамККМ,ЗаполнятьСкладПоСоглашению,ЗаполнятьОрганизациюПоСоглашению,ЗаполнятьОрганизациюПоДоговору,СчетФактураПоРеализации,ВыгружатьПозицииПодЗаказ,ИскатьКлиентовПоНаименованию,ИспользоватьПривязкиКассКМенеджерам,НеПерезаполнятьШапкуДокументов"+
	",ЦенаВключаетНДСПриПокупке,ЦенаВключаетНДСПриПродаже,СтатусГотовКВыдачеПриНеобходимости,ПолучатьАдресДоставки,ДатаНачалаУчета,НДСВДоговореКлиента,ДокументыПоТипамПлатежей,ОдноПоступлениеВДеньПоПоставщику,ОднаРеализацияВДеньПоКлиенту,ИдентификаторГостя,ГлубинаПросмотраДляПроведения,ПроизводительВБренде,Отладка"+
	",ЗаполнятьСкладПоПоставщику,ОтображатьВторостепенныеЗакладки,ОрганизацияПоТипуОплаты,ВариантОбеспеченияСНаличия,ЗагрузкаТекущейДатой,ОграничениеАртикула,ЦеныЗакупкиВРублях,ЦеныПродажиВРублях,ЗагружатьТолькоСЧеками,НеСоздаватьВозвратыФинансов,РасположениеАналогов,РасположениеШтрихКодов,АвтоматическаяПривязкаПлатежей"+
	",ПривязыватьПлатежиТолькоКЗаказам,НеРегистрироватьДешевыеЦены,ЧекиККМ,НенайденныйКлиент,СтатусОтборовРазмещенийТоваров,ЯчейкаДляОтбора,РазделятьПозицииПоЗаказам,НеЗагружатьГостевыеЗаказы,СпособДоставки,ИспользоватьAPI2021,ТоварыВПутиВОстатках,ПроверятьПривязкиВОплатах,НаименованиеХарактеристики,СмещениеЧасовогоПояса"+
	",НеВыгружатьВозвратПоЭквайрингу,МедленныйПоискОплат,ГлубинаПросмотраЗаявокВМинутах,СвойствоАртикул,ПроизвольныйВидЦеныВЗаказе,Приоритет,ЗаменятьТолькоРозничныхПокупателей"+
	",ПриоритетОрганизацииПоОфису,ПроверятьИзмененияВТоварахЗаказа,НеОтключатьРегистрациюНоменклатуры,КлиентПоКорзине,УдалятьНедопустимыеСимволыИзНаименования"+
	",ОстаткиТоварыНаСкладах,ЦенаНоменклатуры25,ИспользоватьОбособленноеОбеспечениеЗаказов,ОбособленнаяЗакупкаПродажа,ВариантОбеспеченияНеСНаличия,СоглашениеПоСегменту"+
	",УдалятьОшибочныеВозвраты,ВыгружатьВозвратыОплаты,НеЗагружатьФизическихЛиц,Заказы20";//в заказе поставщику - ЗаполнитьДокументНаОснованииСделкиПоОбособленныемЗаказам
	Возврат ПереченьНастроек;
КонецФункции

Функция ПолучитьПереченьНастроекТаблицЗначений() Экспорт
	ПереченьНастроек = "ТаблицаСкладов,ТаблицаСтатусов,ТаблицаДоступов,ТаблицаОфисов,СинонимыБрендов,ТаблицаКасс"+
	",УслугиПоДоставке,СпособыДоставки,ТипыПлатежей,ТаблицаМенеджеров,НастраиваемыеКлиенты,ТаблицаГруппТоваров";
	Возврат ПереченьНастроек;
КонецФункции

//АТС  для id41032
Функция ПолучитьНомерСделкиИзЗаметок(МассивЗаметок)
	
	НомерСделки = "";
	
	Для каждого Заметка Из МассивЗаметок Цикл
		ТекстЗаметки = Заметка.value;
		ПозицияРешетки = СтрНайти(ТекстЗаметки, "#");
		Если ПозицияРешетки = 0 Тогда
			Продолжить;			
		КонецЕсли; 
		НомерСделки = Прав(ТекстЗаметки, СтрДлина(ТекстЗаметки) - ПозицияРешетки);	
	КонецЦикла; 
	
	Возврат НомерСделки;			
КонецФункции

Функция ПолучитьНомерИсходногоЗаказа(МассивЗаметок)
	НомерИсходногоЗаказа = "";
	Для каждого Заметка Из МассивЗаметок Цикл
		ТекстЗаметки = Заметка.value;
		Если Лев(ТекстЗаметки, 22) = "Номер исходного заказа" Тогда //Номер исходного заказа - **
			НомерИсходногоЗаказа = Сред(ТекстЗаметки, 26);
			НомерИсходногоЗаказа = СтрЗаменить(НомерИсходногоЗаказа,".","");
		КонецЕсли;
	КонецЦикла; 
	Возврат НомерИсходногоЗаказа;			
КонецФункции

#Область ОписаниеВнешнейОбработки
Функция СведенияОВнешнейОбработке() Экспорт
	//https://gos.1cfresh.com/publications
	//https://gos.1cfresh.com/articles/dopobrabotkiOO
	//https://its.1c.ru/db/v8std#browse:13:-1
	//https://1cfresh.com/articles/so_addprocess_audit
	//https://1cfresh.com/articles/so_addprocess_fastaudit
	//РаботаВБезопасномРежиме.РазрешениеНаИспользованиеВнешнегоМодуля
	//РаботаВБезопасномРежиме.РазрешениеНаИспользованиеВнешнейКомпоненты
	//РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса
	//РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов
	//РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаПрограммы
	//РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаФайловойСистемы
	//РаботаВБезопасномРежиме.РазрешениеНаИспользованиеПривилегированногоРежима
	//РаботаВБезопасномРежиме.РазрешениеНаИспользованиеПриложенияОперационнойСистемы
	//РаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.8.3");//иначе с разрешениями проблемы будут
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Наименование = "Обмен «1С:Управление торговлей 11» и ABCP.ru "+ПолучитьВерсиюОбработки(); //Наименование обработки, которым будет заполнено наименование элемента справочника
	ПараметрыРегистрации.Информация = "Интерактивный и обмен по расписанию между «1С:Управление торговлей 11.1-11.5» и платформой ABCP.ru, синхронизирует клиентов, заказы с сайта, обновляет их статусы. Техническая поддержка kserdyukov@mail.ru 8-951-871-14-57"; //Краткая информация по обработке, описание обработки
	ПараметрыРегистрации.Версия = ПолучитьВерсиюОбработки();
	//ПараметрыРегистрации.БезопасныйРежим = Истина;
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	//ПараметрыРегистрации.Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса("VBScript.RegExp","{3F4DACA4-160D-11D2-A8E9-00104B365C9F}"));//это работает, но не нужно
	//ПараметрыРегистрации.Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов(,));
	//ПараметрыРегистрации.Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаПрограммы(Истина, Истина));
	//ПараметрыРегистрации.Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса("HTTP", "*.public.api.abcp.ru", Неопределено, "abcp - nodasoft"));
	//ПараметрыРегистрации.Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса("HTTP", "id____.public.api.abcp.ru", Неопределено, "abcp - nodasoft"));
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Выгрузить остатки номенклатуры в том числе на E-mail'");//представление команды в пользовательском интерфейсе
	Команда.Идентификатор = "ВыгрузитьОстатки";//идентификатор команды; любая строка, уникальная в пределах данной обработки
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Импорт свежих заявок'");//представление команды в пользовательском интерфейсе
	Команда.Идентификатор = "ИмпортСвежихЗаявок";//идентификатор команды; любая строка, уникальная в пределах данной обработки
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Импорт заявок, связанной информации (статусы заявок, контрагенты, номенклатура), заказов поставщикам, поступлений и реализаций'");
	Команда.Идентификатор = "ИмпортЗаявок";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Обновить баланс клиентов'");
	Команда.Идентификатор = "ОбновитьБаланс";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Обновить финансовую информацию клиентов'");
	//Команда.Идентификатор = "ОбновитьФинансовуюИнформацию";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Внести в «Стоп-лист» контрагентов по сегменту'");
	Команда.Идентификатор = "ВнестиСегментВСтопЛист";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Обновить баланс клиентов по документам оплаты за текущий день'");
	Команда.Идентификатор = "ОбновитьБалансЗаДень";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Загрузка оплат и создание финансовых документов'");
	Команда.Идентификатор = "ЗагрузитьОплаты";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Загрузка оплат и создание финансовых документов за 2 месяца'");
	//Команда.Идентификатор = "ЗагрузитьОплаты2";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Загрузка возвратов оплат'");
	Команда.Идентификатор = "ЗаполнитьВозвратыОплат";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Загрузка свежих оплат и создание финансовых документов'");
	Команда.Идентификатор = "ЗагрузитьСвежиеОплаты";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Выгрузить оплаты из 1С в ABCP'");
	Команда.Идентификатор = "ВыгрузитьОплатыНаСайт";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Снятие с резерва старых заказов'");
	Команда.Идентификатор = "СнятиеСРезерваСтарыхЗаказов";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Выгрузка взаиморасчетов по клиентам (реализовано отдельной обработкой)'");
	//Команда.Идентификатор = "ВыгрузкаВзаиморасчетовПоКлиентам";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Провести непроведенные документы'");
	Команда.Идентификатор = "ПровестиНепроведенныеДокументы";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Поиск и удаление удаленных в ABCP заявок на глубину просмотра'");
	Команда.Идентификатор = "НайтиУдаленные";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Поиск и удаление удаленных в ABCP заявок за последний месяц'");
	Команда.Идентификатор = "НайтиУдаленныеЗаМесяц";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
    
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Перенести бренд в производителя'");
	Команда.Идентификатор = "ПеренестиБрендВПроизводителя";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Удаление помеченных на удаление заказов и связанных документов на глубину просмотра'");
	Команда.Идентификатор = "УдалитьУдаленные";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Удаление помеченных на удаление заказов и связанных документов за последний месяц'");
	Команда.Идентификатор = "УдалитьУдаленныеЗаМесяц";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Создать новых клиентов из ABCP'");
	Команда.Идентификатор = "НовыеКлиентыССайта";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Закрытие отгруженных или отменённых заказов'");
	//Команда.Идентификатор = "ЗакрытиеОтгруженныхОтменённыхЗаказов";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	
	//ДобавитьКоманду(ТаблицаКоманд,
	//"Постановка в резерв и изменение статусов на сайте",
	//"ПостановкаВРезервИНаСайте",
	//"ВызовСерверногоМетода");
	//ДобавитьКоманду(ТаблицаКоманд,
	//"Закрытие заказа и создание реализации для ордерного склада",
	//"ЗакрытиеЗаказовСозданиеРеализации",
	//"ВызовСерверногоМетода");
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Интерактивный обмен с ABCP, настройка параметров для регламентного задания'");//представление команды в пользовательском интерфейсе
	Команда.Идентификатор = "ОткрытьФормуОбработки";//идентификатор команды; любая строка, уникальная в пределах данной обработки
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Истина;
	Команда.Модификатор = "ПечатьMXL";//"ПечатьMXL" - вроде всегда нужен
	
	//ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	Если ИмяКомпьютера() = "emex" Тогда
		ИспользоватьИндивидуальныеНастройкиПользователей = Истина;
	Иначе
		ИспользоватьИндивидуальныеНастройкиПользователей = Ложь;
	КонецЕсли;
	//МенеджерРасширенийКонфигурации = Новый МенеджерРасширенийКонфигурации;
	//МенеджерРасширенийКонфигурации.
	УТ111 = Ложь;
	УТ112 = Ложь;
	УТ113 = Ложь;
	УТ114 = Ложь;
	УТ115 = Ложь;
	УТКазахстан = Ложь;
	
	ВерсияУТ = Метаданные.Версия;
	Подверсия = Сред(ВерсияУТ,4,1);
	//Подверсия2 = Число(Сред(ВерсияУТ,6,1));
	Если Метаданные.Имя = "УправлениеТорговлей_CRM_2" Тогда //И Метаданные.Версия = "3.0.14.13" Тогда
		ВерсияУТ = Метаданные.Версия;
		Подверсия = "4";
		//Подверсия2 = "6";
		Подверсия3 = "6";
	ИначеЕсли Метаданные.Имя = "КомплекснаяАвтоматизация" Тогда
		КА = Истина;
	КонецЕсли;
	Если Подверсия = "1" Тогда
		УТ111 = Истина;
	ИначеЕсли Подверсия = "2" Тогда
		УТ112 = Истина;
	ИначеЕсли Подверсия = "3" Тогда
		УТ113 = Истина;
	ИначеЕсли Подверсия = "4" Тогда
		УТ114 = Истина;
	ИначеЕсли Подверсия = "5" Тогда
		УТ115 = Истина;
	Иначе
		УТ114 = Истина;//считаем, что запустили на 11.4
	КонецЕсли;
	Если Метаданные.Поставщик = "Фирма ""1С""/Первый БИТ" Тогда
		БитАвтосервис = Истина;
	Иначе
		БитАвтосервис = Ложь;
	КонецЕсли;
	ВерсияКонфигурации = Метаданные.Версия;
	СписокПодверсий = СтрРазделить(ВерсияКонфигурации, ".");
	КоличествоПодверсий = СписокПодверсий.Количество();
	Если КоличествоПодверсий > 0 Тогда
		Подверсия1 = СписокПодверсий.Получить(0);
	КонецЕсли;
	Если КоличествоПодверсий > 1 Тогда
		Подверсия2 = СписокПодверсий.Получить(1);
	КонецЕсли;
	Если КоличествоПодверсий > 2 Тогда
		Подверсия3 = СписокПодверсий.Получить(2);
	КонецЕсли;
	Если КоличествоПодверсий > 3 Тогда
		Подверсия4 = СписокПодверсий.Получить(3);
	КонецЕсли;
	Если Метаданные.Имя = "УправлениеТорговлейДляКазахстана" Тогда //в ней поступление товаров и услуг
		УТ113 = Истина;
		УТ114 = Ложь;
		УТКазахстан = Истина;
	КонецЕсли;
	
	ВерсияОбработки = ПолучитьВерсиюОбработки();
	КлючОбъекта = "ABCP_1C";
	КлючНастроек = "НастройкиДоступа";
    ИмяПользователя = ИмяПользователя();
	Если  ИмяПользователя = "" Тогда
		ИмяПользователя = "Администратор";//фоновое задание запускается под пустым пользователем
	Иначе
		ПользовательДляВосстановления = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
		Если (ИмяПользователя = "" Или ПользовательДляВосстановления.Роли.Содержит(РольПолныеПрава)) И НЕ ИспользоватьИндивидуальныеНастройкиПользователей Тогда
			ИмяПользователя = "Администратор";//фоновое задание запускается под пользователем из настроек в справочнике дополнительных отчетов и обработок
		КонецЕсли;
	КонецЕсли;
	//Если НЕ УТ112 Тогда
	//	ИмяПользователя = "Администратор";//фоновое задание запускается без пользователя
	//КонецЕсли;
    Попытка
        Настройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ,ИмяПользователя);
	Исключение
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ВыполнитьКоманду перед обработкой выбора", "Не найдены настройки обмена с ABCP для текущего пользователи. Нажмите ""Сохранить настройки"" в окне формы");
        Возврат;
	КонецПопытки;
	//ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ИмяПользователя", ИмяПользователя);
	//Если Лев(АдресСервиса, 7) = "id19566" Тогда
	//	ИспользоватьИндивидуальныеНастройкиПользователей = Истина;
	//КонецЕсли;
	
	ПереченьНастроек = ПолучитьПереченьНастроек();
	НазванияНастроек = СтрРазделить(ПереченьНастроек, ",");
	Для Каждого ИмяНастройки Из НазванияНастроек Цикл
		Если Настройки.Свойство(ИмяНастройки) Тогда ЭтотОбъект[ИмяНастройки] = Настройки[ИмяНастройки]; КонецЕсли;
	КонецЦикла;
	
	
	ПереченьНастроек = ПолучитьПереченьНастроекТаблицЗначений();
	НазванияНастроек = СтрРазделить(ПереченьНастроек,",");
	Для Каждого ИмяНастройки Из НазванияНастроек Цикл
		Если Настройки.Свойство(ИмяНастройки) Тогда 
			ЭтотОбъект[ИмяНастройки].Загрузить(Настройки[ИмяНастройки]);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОрганизацияРозница) Тогда
		ОрганизацияРозница = Организация;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	Рубли = Справочники.Валюты.НайтиПоКоду("643");//могут быть расчеты в рублях, например, в Казахстане
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = Рубли;
	КонецЕсли;
	Если ТекущаяДата()>=Дата(2019,1,1) И ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС18 И НЕ УТКазахстан Тогда
		ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
	Если ОсновнаяСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		РазмерСтавкиНДС = 0;
		РазмерСтавкиНДС100 = 100;
	Иначе
		Если НЕ УТКазахстан Тогда
			РазмерСтавкиНДС = 20;
			РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
		Иначе
			РазмерСтавкиНДС = 12;
			РазмерСтавкиНДС100 = 100 + РазмерСтавкиНДС;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НДСВДоговореКлиента) Тогда
		НДСВДоговореКлиента = ОсновнаяСтавкаНДС;
	КонецЕсли;
	
	Если НеПроводитьДокументы Тогда
		РежимЗаписиДок = РежимЗаписиДокумента.Запись;
	Иначе
		РежимЗаписиДок = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	//ЗаписьВЛог(ВерсияОбработки + " регламентное задание """+ИдентификаторКоманды+"""",7);//а то лог засоряется
	НайтиДобавитьСвойства();
	Если Лев(АдресСервиса, 6) = "id9652" Тогда id9652 = Истина; Иначе id9652 = Ложь; КонецЕсли;
	Если Лев(АдресСервиса, 7) = "id22842" Тогда id22842 = Истина; Иначе id22842 = Ложь; КонецЕсли;
	Если Лев(АдресСервиса, 7) = "id18879" Тогда id18879 = Истина; Иначе id18879 = Ложь; КонецЕсли;
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();

	Если ИдентификаторКоманды = "ИмпортЗаявок" Тогда
		//вызываем процедуру импорта заявок и связанной с ней номенклатуры и клиентов, автоматическое занесение в базу данных
		ВернутьТаблицуЗаявокССайта();
		//ЗаполнитьТаблицуОплат();
		//СоздатьОплаты();
	ИначеЕсли ИдентификаторКоманды = "ИмпортСвежихЗаявок" Тогда
		ВернутьТаблицуЗаявокССайта(Истина);
	ИначеЕсли ИдентификаторКоманды = "ОбновитьБаланс" Тогда	
		ОбновитьБалансКлиентов();
	ИначеЕсли ИдентификаторКоманды = "ОбновитьБалансЗаДень" Тогда	
		ОбновитьБалансКлиентовЗаТекущийДень();//здесь проще алгоритм, выружает только баланс
	//ИначеЕсли ИдентификаторКоманды = "ОбновитьФинансовуюИнформацию" Тогда	
	//	ОбновитьФинансовуюИнформацию();
	ИначеЕсли ИдентификаторКоманды = "ОбновитьБалансИзABCP" Тогда	
		//ЗаполнитьТаблицуКлиентовССайта();
	ИначеЕсли ИдентификаторКоманды = "ВыгрузитьОстатки" Тогда	
		//ВыгрузитьПрайсНаСайт();
		ВыгрузитьОстаткиПоСкладам();
	ИначеЕсли ИдентификаторКоманды = "ВыгрузитьОбщиеОстатки" Тогда	
		//ВыгрузитьПрайсНаСайт();
		Если Франчайзи Тогда
			Структура = Новый Структура("Использовать", Истина);
			НайденныеСтроки = ТаблицаДоступов.НайтиСтроки(Структура);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(ЭтотОбъект,ТекСтрока);
					ВыгрузитьОбщиеОстатки();
				КонецЦикла;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ВыгрузитьОбщиеОстатки();

	ИначеЕсли ИдентификаторКоманды = "ВыгрузитьИзмененныеОстатки" Тогда	
		//собираем обороты по поступлению и реализации с учетом глубины просмотра заявок, и неполное обновление прайса
	ИначеЕсли ИдентификаторКоманды = "ЗагрузитьОплаты" Тогда
		ЗаполнитьДанныеУчетнойПолитики();
		ВернутьТаблицуОплат();//франчи
		//ЗаполнитьТаблицуОплат();
		СоздатьОплаты();
	//ИначеЕсли ИдентификаторКоманды = "ЗагрузитьОплаты2" Тогда
	//	ЗаполнитьДанныеУчетнойПолитики();
	//	ГлубинаПросмотраЗаявок = 62;
	//	ВернутьТаблицуОплат();//франчи
	//	//ЗаполнитьТаблицуОплат();
	//	СоздатьОплаты();
	ИначеЕсли ИдентификаторКоманды = "ЗагрузитьСвежиеОплаты" Тогда
		ЗаполнитьДанныеУчетнойПолитики();
		ВернутьТаблицуОплат(,,Истина);//франчи
		//ЗаполнитьТаблицуОплат(,,Истина);
		СоздатьОплаты();
	ИначеЕсли ИдентификаторКоманды = "НайтиУдаленныеЗаМесяц" Тогда
		НайтиУдаленные(30);
	ИначеЕсли ИдентификаторКоманды = "НайтиУдаленные" Тогда
		Если ГлубинаПросмотраДляПроведения = 0 Тогда
			НайтиУдаленные(ГлубинаПросмотраЗаявок);
		Иначе
			НайтиУдаленные(ГлубинаПросмотраДляПроведения);
		КонецЕсли;
	ИначеЕсли ИдентификаторКоманды = "УдалитьУдаленныеЗаМесяц" Тогда
		УдалитьУдаленные();
	ИначеЕсли ИдентификаторКоманды = "УдалитьУдаленные" Тогда
		Если ГлубинаПросмотраДляПроведения = 0 Тогда
			УдалитьУдаленные(ГлубинаПросмотраЗаявок);
		Иначе
			УдалитьУдаленные(ГлубинаПросмотраДляПроведения);
		КонецЕсли;
	ИначеЕсли ИдентификаторКоманды = "НовыеКлиентыССайта" Тогда
		СоздатьНовыхКлиентовССайта();
	//ИначеЕсли ИдентификаторКоманды = "ЗакрытиеОтгруженныхОтменённыхЗаказов" Тогда
	//	//ЗакрытиеОтгруженныхОтменённыхЗаказов();
	//	ЗаполнитьОтгруженныеОтменённыеЗаказы();
	//	ЗакрытьЗаказыИзТаблицы();
	ИначеЕсли ИдентификаторКоманды = "ПостановкаВРезервИНаСайте" Тогда
		ПоставитьВРезервИИзменитьНаСайте();
	ИначеЕсли ИдентификаторКоманды = "ЗакрытиеЗаказовСозданиеРеализации" Тогда
		ЗаписьЖурналаРегистрации("1C-ABCP", УровеньЖурналаРегистрации.Ошибка, , "ЗаписьВЛог", "Перед ЗакрытиеЗаказовСозданиеРеализации()");
		ЗакрытиеЗаказовСозданиеРеализации();
	ИначеЕсли ИдентификаторКоманды = "ПеренестиБрендВПроизводителя" Тогда
		ПеренестиБрендВПроизводителя();
	ИначеЕсли ИдентификаторКоманды = "ВыгрузкаВзаиморасчетовПоКлиентам" Тогда
		//ВыгрузкаВзаиморасчетовПоКлиентам();
	ИначеЕсли ИдентификаторКоманды = "СнятиеСРезерваСтарыхЗаказов" Тогда
		СнятиеСРезерваСтарыхЗаказов();
	ИначеЕсли ИдентификаторКоманды = "ПровестиНепроведенныеДокументы" Тогда
		ПровестиНепроведенныеДокументы();
	ИначеЕсли ИдентификаторКоманды = "ПровестиЗаказыПоставщикам" Тогда
		ПровестиНепроведенныеДокументы("ЗаказПоставщику");
	ИначеЕсли ИдентификаторКоманды = "ПровестиЗаказыКлиентов" Тогда
		ПровестиНепроведенныеДокументы("ЗаказКлиента");
	ИначеЕсли ИдентификаторКоманды = "ВыгрузитьОплатыНаСайт" Тогда
		ВыгрузитьОплатыНаСайт();
	ИначеЕсли ИдентификаторКоманды = "ВнестиСегментВСтопЛист" Тогда
		ВнестиСегментВСтопЛист();
	ИначеЕсли ИдентификаторКоманды = "ЗаполнитьВозвратыОплат" Тогда
		ЗаполнитьВозвратыОплат();
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Команда ""%1"" не поддерживается обработкой ""%2""'"),
			ИдентификаторКоманды,
			Метаданные().Представление()
		);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти


Процедура СоздатьРеализацииТоваровУслугДОИзм09032023()
	Лев7 = Лев(АдресСервиса, 7);
	Если Лев7 = "id20243"  Тогда id20243 = Истина; Иначе id20243 = Ложь; КонецЕсли;
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ЕстьКурсЧислитель = Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Найти("КурсЧислитель") <> Неопределено;
	Если УТ111 Тогда
		ИспользоватьРасширенныеВозможностиЗаказаКлиента = Ложь;
		ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = Ложь;
	Иначе
		ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
		ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	КонецЕсли;
	МассивСтатусовСоздаватьРеализацию = Новый Массив;
	ЕстьСтрокаСтатусаСоздаватьЗаявкуПокупателя = Ложь;
	Для Каждого СтрокаСтатуса Из ТаблицаСтатусов Цикл
		Если СтрокаСтатуса.СоздаватьРеализацию Тогда
			МассивСтатусовСоздаватьРеализацию.Добавить(СтрокаСтатуса.КодСтатуса);
			Если СтрокаСтатуса.СоздаватьЗаявкуПокупателя Тогда
				ЕстьСтрокаСтатусаСоздаватьЗаявкуПокупателя = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Если НеЗагружатьОтказы = Ложь Тогда
	//	МассивСтатусовСоздаватьРеализацию.Добавить(КодСтатусаОтказ);
	//КонецЕсли;
	Если МассивСтатусовСоздаватьРеализацию.Количество() = 0 Тогда//не создаём реализации, нет галочек
		Возврат;
	КонецЕсли;
	Если НЕ УТ115 Тогда
		ВариантОплатыПоУмолчанию = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
	Иначе
		ВариантОплатыПоУмолчанию = Неопределено;
	КонецЕсли;
	Попытка
		ИспользоватьГрафикиОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	Исключение
		ИспользоватьГрафикиОплаты = Ложь;
	КонецПопытки;

	
	СтруктураПоискаЗаявки = Новый Структура("НомерЗаявки");
	ОдинСтатус = Ложь;
	Если МассивСтатусовСоздаватьРеализацию.Количество() = 1 Тогда
		ОдинСтатус = Истина;
		СтруктураПоискаЗаявки.Вставить("КодСтатуса", МассивСтатусовСоздаватьРеализацию[0]);
	КонецЕсли;
	СоответствиеВидЦеныПоСкладу = Новый Соответствие;
	
	//СтруктураПоискаПозиций = Новый Структура("НомерЗаявки");
	//СтруктураПоискаПозиций.Вставить("Контрагент");
	СписокПоставщиков = Новый СписокЗначений;
	
	ЗапросОстатков = Новый Запрос;
	Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
		ЗапросОстатков.Текст = "ВЫБРАТЬ
		                       |	РаспределениеЗапасов.Номенклатура КАК Ссылка,
		                       |	СУММА(РаспределениеЗапасов.ВНаличии) - СУММА(РаспределениеЗапасов.Резерв) КАК Наличие,
		                       |	СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
		                       |	СУММА(РаспределениеЗапасов.Свободно) КАК Свободно,
		                       |	СУММА(РаспределениеЗапасов.Резерв) КАК Резерв
		                       |ИЗ
		                       |	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		                       |ГДЕ
		                       |	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		                       |	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		                       |	И РаспределениеЗапасов.Склад = &Склад
		                       |	И РаспределениеЗапасов.Номенклатура В(&Номенклатура)
		                       |
		                       |СГРУППИРОВАТЬ ПО
		                       |	РаспределениеЗапасов.Номенклатура";
	Иначе
		ЗапросОстатков.Текст = "ВЫБРАТЬ
		               |	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
		               |	СвободныеОстаткиОстатки.ВНаличииОстаток КАК Наличие
		               |ИЗ
		               |	РегистрНакопления.СвободныеОстатки.Остатки(
		               |			&НаДату,
		               |			Склад = &Склад
		               |				И Номенклатура В (&Номенклатура)) КАК СвободныеОстаткиОстатки";
	КонецЕсли;
	//так как теперь можно будет выдавать по нескольким реализациям
	ЗапросБезЗаказаКлиента = Новый Запрос;
	ЗапросБезЗаказаКлиента.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	                               |	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	                               |	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
	                               |	РеализацияТоваровУслугТовары.Ссылка.Проведен КАК Проведен
	                               |ИЗ
	                               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                               |ГДЕ
	                               |	РеализацияТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
	                               |	И РеализацияТоваровУслугТовары.Ссылка.ОснованиеДата = &ОснованиеДата
	                               |	И РеализацияТоваровУслугТовары.Ссылка.ОснованиеНомер = &ОснованиеНомер
	                               |	И РеализацияТоваровУслугТовары.Ссылка.Дата >= &Дата
	                               |	И РеализацияТоваровУслугТовары.Ссылка.ОснованиеНомер <> &ПустойНомер
	                               |	И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";
	//если база битая, может не найти ссылки
	ЗапросСЗаказомКлиента = Новый Запрос;
	ЗапросСЗаказомКлиента.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	                              |	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	                              |	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
	                              |	РеализацияТоваровУслугТовары.Ссылка.Проведен КАК Проведен
	                              |ИЗ
	                              |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                              |ГДЕ
	                              |	РеализацияТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
	                              |	И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = &ЗаказКлиента
	                              |	И РеализацияТоваровУслугТовары.Ссылка.Дата >= &Дата
	                              |	И РеализацияТоваровУслугТовары.Ссылка.ОснованиеНомер <> &ПустойНомер
	                              |	И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Если УТ111 Тогда
		ЗапросБезЗаказаКлиента.Текст = СтрЗаменить(ЗапросБезЗаказаКлиента.Текст, ".Основание", ".Доверенность");
		ЗапросСЗаказомКлиента.Текст = СтрЗаменить(ЗапросСЗаказомКлиента.Текст, ".Основание", ".Доверенность");
	КонецЕсли;
	ЗапросРеализацияСегодняшняя = Новый Запрос;
	ЗапросРеализацияСегодняшняя.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                                    |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	                                    |	РеализацияТоваровУслуг.Ссылка.Дата КАК Дата,
	                                    |	РеализацияТоваровУслуг.Проведен КАК Проведен
	                                    |ИЗ
	                                    |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                                    |ГДЕ
	                                    |	РеализацияТоваровУслуг.Контрагент = &Контрагент
	                                    |	И РеализацияТоваровУслуг.Дата >= &Дата";
	
	НачалоЭтогоДня = НачалоДня(ТекущаяДата());
	Для Каждого СтрокаЗаявки Из ТаблицаЗаявок Цикл
		Если СтрокаЗаявки.ОбработанаПоДругомуДоступу Тогда //иначе настройки франчайзи могут перезаписыватьреквизиты документов
			Продолжить;
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда //нет документа покупателя - нет основания для заказа поставщику
			БезЗаказаКлиента = Истина;
		Иначе
			БезЗаказаКлиента = Ложь;
		КонецЕсли;
		
		Если СписокИзмененныхЗаявок.НайтиПоЗначению(СтрокаЗаявки.ЗаказКлиента) = Неопределено Тогда
			Если ФильтрПоЗаявке<>0 И СтрокаЗаявки.НомерЗаявки <> ФильтрПоЗаявке Тогда //если принудительно загружаем заявку, то заново всё создаём или находим
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтруктураПоискаЗаявки.НомерЗаявки = СтрокаЗаявки.НомерЗаявки;
		СтрокиНоменклатурыЗаказа = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
		РеализацияБезПозиций = Ложь;
		СтрокиНоменклатуры = Новый Массив;
		СуммаДокумента = 0;
		Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиНоменклатурыЗаказа Цикл
			Если МассивСтатусовСоздаватьРеализацию.Найти(СтрокаНоменклатурыЗаказа.КодСтатуса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаНоменклатурыЗаказа.Сумма = 0 Тогда
				Продолжить;//отказная позиция
			КонецЕсли;
			СтрокиНоменклатуры.Добавить(СтрокаНоменклатурыЗаказа);
			СуммаДокумента = СуммаДокумента + СтрокаНоменклатурыЗаказа.Количество * СтрокаНоменклатурыЗаказа.ЦенаПродажи;
		КонецЦикла;

		//СтруктураПоискаЗаявки.КодСтатуса = КодСтатуса;
		СуммаРеализации = 0;
		Если ОдинСтатус Тогда
			СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				СуммаРеализации = СуммаРеализации + СтрокаНоменклатуры.Количество * СтрокаНоменклатуры.ЦенаПродажи;
			КонецЦикла;
		Иначе
			СтрокиНоменклатурыЗаказа = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаЗаявки);
			СтрокиНоменклатуры = Новый Массив;
			Если СтрокиНоменклатурыЗаказа.Количество() = 0 Тогда //по заказу отобрали, но по нему нет позиций в этом статусе
				//Продолжить;
			Иначе
				Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиНоменклатурыЗаказа Цикл
					Если МассивСтатусовСоздаватьРеализацию.Найти(СтрокаНоменклатурыЗаказа.КодСтатуса) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокиНоменклатуры.Добавить(СтрокаНоменклатурыЗаказа);
					СуммаРеализации = СуммаРеализации + СтрокаНоменклатурыЗаказа.Количество * СтрокаНоменклатурыЗаказа.ЦенаПродажи;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ЗаказБезПозиций = Ложь;//чтобы из реализации удалить позиции, которых нет в заказе, при его изменении
		Если СтрокиНоменклатуры.Количество() = 0 Тогда //контрагента отобрали, но по нему почему-то нет позиций
			ЗаказБезПозиций = Истина;//это удаленные из заказа позиции, а в реализации они остались
		КонецЕсли;
		НайденныйДокумент = Неопределено;
		МассивУжеОтгруженных = Новый Массив;
		Если БезЗаказаКлиента Тогда
			ЗапросБезЗаказаКлиента.УстановитьПараметр("ОснованиеДата", НачалоДня(СтрокаЗаявки.ДатаЗаявки));
			ЗапросБезЗаказаКлиента.УстановитьПараметр("Дата", НачалоДня(СтрокаЗаявки.ДатаЗаявки));
			ЗапросБезЗаказаКлиента.УстановитьПараметр("ОснованиеНомер", Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0"));
			ЗапросБезЗаказаКлиента.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
			ЗапросБезЗаказаКлиента.УстановитьПараметр("Контрагент", СтрокаЗаявки.Контрагент);
			//не делать, нам надо собрать уже отгруженные позиции
			ЗапросБезЗаказаКлиента.УстановитьПараметр("ПустойНомер", "");
			Результат = ЗапросБезЗаказаКлиента.Выполнить();
		Иначе
			ЗапросСЗаказомКлиента.УстановитьПараметр("ОснованиеДата", НачалоДня(СтрокаЗаявки.ДатаЗаявки));
			ЗапросСЗаказомКлиента.УстановитьПараметр("ОснованиеНомер", Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0"));
			ЗапросСЗаказомКлиента.УстановитьПараметр("ЗаказКлиента", СтрокаЗаявки.ЗаказКлиента);
			ЗапросСЗаказомКлиента.УстановитьПараметр("Контрагент", СтрокаЗаявки.Контрагент);
			ЗапросСЗаказомКлиента.УстановитьПараметр("Дата", СтрокаЗаявки.ДатаЗаявки);
			//не делать, нам надо собрать уже отгруженные позиции
			ЗапросСЗаказомКлиента.УстановитьПараметр("ПустойНомер", "");
			Результат = ЗапросСЗаказомКлиента.Выполнить();
		КонецЕсли;
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Если ОднаРеализацияВДеньПоКлиенту Тогда
				Пока Выборка.Следующий() Цикл
					НайденныйДокумент = Выборка.Ссылка;
					Если Выборка.Дата < НачалоЭтогоДня Тогда
						Для Каждого СтрокаДокумента Из Выборка.Ссылка.Товары Цикл
							Если МассивУжеОтгруженных.Найти(СтрокаДокумента.КодСтроки) = Неопределено Тогда
								МассивУжеОтгруженных.Добавить(СтрокаДокумента.КодСтроки);
							КонецЕсли;
						КонецЦикла;
					Иначе
						НайденныйДокумент = Выборка.Ссылка;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Выборка.Следующий();
				НайденныйДокумент = Выборка.Ссылка;
				Если НеПроводитьДокументы = Ложь И НЕ (Выборка.Проведен) Тогда
					Попытка
						Если СтрокаЗаявки.ЗаказКлиента.Согласован = Ложь Тогда
							Об = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
							Об.Согласован = Истина;
							Об.Записать(РежимЗаписиДокумента.Проведение);
						КонецЕсли;
					Исключение
						ЗаписьВЛог(ОписаниеОшибки());
					КонецПопытки;
					Попытка
						Об = НайденныйДокумент.ПолучитьОбъект();
						Об.Записать(РежимЗаписиДокумента.Проведение);
						НайденныйДокумент = Выборка.Ссылка;
					Исключение
						ЗаписьВЛог(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			Если МассивУжеОтгруженных.Количество() > 0 И МассивУжеОтгруженных.Количество() = СтрокиНоменклатуры.Количество() Тогда
				Сопоставлено = 0;
				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
					Если МассивУжеОтгруженных.Найти(СтрокаНоменклатуры.ИдентификаторНоменклатуры) <> Неопределено Тогда
						Сопоставлено = Сопоставлено + 1;
					КонецЕсли;
				КонецЦикла;
				//всё отгружено, поэтому новое не создаём
				Если МассивУжеОтгруженных.Количество() = Сопоставлено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
				Если ОднаРеализацияВДеньПоКлиенту Тогда
					ЗаписьВЛог("Найдена одна реализация в день для заявки "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0"),2);
				Иначе
					ЗаписьВЛог("Найдена реализация к заявке "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", "+СокрЛП(НайденныйДокумент),2);
				Конецесли;
				Если НеОбновлятьЗагруженныеРеализации Тогда
					Продолжить;
				КонецЕсли;
				//ЗаписьВЛог("По заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + ", клиент «"+СтрокаЗаявки.Контрагент+"», найдена реализация "+НайденныйДокумент);
				СуммаПоНоменклатуре = 0;
				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
					Если МассивУжеОтгруженных.Найти(СтрокаНоменклатуры.ИдентификаторНоменклатуры) = Неопределено Тогда
						СуммаПоНоменклатуре = СуммаПоНоменклатуре + СтрокаНоменклатуры.ЦенаПродажи * СтрокаНоменклатуры.Количество;
					КонецЕсли;
				КонецЦикла;
				Если ФильтрПоЗаявке = 0 И ЗначениеЗаполнено(НайденныйДокумент) И (СтрокиНоменклатуры.Количество() = НайденныйДокумент.Товары.Количество()) И (СуммаПоНоменклатуре = НайденныйДокумент.Товары.Итог("Сумма")) Тогда //будем считать, что ничего не поменялось, поэтому документ не трогаем
				//будем считать, что ничего не поменялось, поэтому документ не трогаем
					Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
						СтрокаНоменклатуры.РеализацияТоваровУслуг = НайденныйДокумент;
					КонецЦикла;
					Если НЕ НайденныйДокумент.Проведен Тогда
						//меняем статусы в заказе клиента, вдруг не поменялись на "Отгружено"
						Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
							ОбЗаказ = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
							НадоЗаписать = Ложь;
							Если ОбЗаказ.Согласован = Ложь Тогда
								ОбЗаказ.Согласован = Истина;
								НадоЗаписать = Истина;
							КонецЕсли;
							Структура = Новый Структура("КодСтроки");
							Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
								Структура.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
								НайденныеСтроки = ОбЗаказ.Товары.НайтиСтроки(Структура);
								Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
									Если НайденнаяСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
										НайденнаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
										НадоЗаписать = Истина;
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							Если НадоЗаписать Тогда
								Попытка
									ОбЗаказ.Записать(РежимЗаписиДокумента.Проведение);
								Исключение
									ЗаписьВЛог("Не удалось провести с изменённым вариантом обеспечения: "+СтрокаЗаявки.ЗаказКлиента+" "+ОписаниеОшибки());
									ОбЗаказ.Записать();
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
						Об = НайденныйДокумент.ПолучитьОбъект();
						Попытка
							Об.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							ЗаписьВЛог("Не удалось провести: "+НайденныйДокумент+" "+ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			Иначе
				НайденныйДокумент = Неопределено;
			КонецЕсли;
		Иначе
			//если часть была отдана вчера, это надо корректно обрабатывать
			Если ОднаРеализацияВДеньПоКлиенту Тогда
				ЗапросРеализацияСегодняшняя.УстановитьПараметр("Дата", НачалоЭтогоДня);
				ЗапросРеализацияСегодняшняя.УстановитьПараметр("Контрагент", СтрокаЗаявки.Контрагент);
				Результат = ЗапросРеализацияСегодняшняя.Выполнить();
				Если Не Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					НайденныйДокумент = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		Если НайденныйДокумент = Неопределено И ЗаказБезПозиций Тогда //в заказе нет позиций и не найдено никакой реализации, поэтому ничего не создаем
			Продолжить;
		КонецЕсли;
		//не нашли - создаем, или нашли, заново заполняем
		Если НайденныйДокумент = Неопределено Тогда
			ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			//ДокОбъект.Заполнить();
			Если ОднаРеализацияВДеньПоКлиенту Тогда
				ДокОбъект.Дата = ТекущаяДата();
			Иначе
				ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновленияПозиций;//ДатаОбновления;//- а то возвраты  некорректные будут ТекущаяДата();//ЗаказКлиента.Дата;
			КонецЕсли;
			ДокОбъект.Комментарий = "Авт. создан "+ТекущаяДата();
			Если id20243 Тогда
				ДокОбъект.Комментарий = "Д сайт "+Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0");
			КонецЕсли;
			//ДокОбъект.Организация = Организация;//Розница;
			ДокОбъект.Организация = СтрокаЗаявки.Организация;
		Иначе
			//мы вчерашние отгруженные нашли, но сегодня мы должны создать новую реализацию
			Если ОднаРеализацияВДеньПоКлиенту Тогда
				ЗапросРеализацияСегодняшняя.УстановитьПараметр("Дата", НачалоЭтогоДня);
				ЗапросРеализацияСегодняшняя.УстановитьПараметр("Контрагент", СтрокаЗаявки.Контрагент);
				Результат = ЗапросРеализацияСегодняшняя.Выполнить();
				Если Не Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					НайденныйДокумент = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			ДокОбъект = НайденныйДокумент.ПолучитьОбъект();
			Если ДокОбъект.Дата > СтрокаЗаявки.ДатаОбновления Тогда
				ДокОбъект.Дата = СтрокаЗаявки.ДатаОбновленияПозиций;
			КонецЕсли;
			Если ДокОбъект.Организация <> СтрокаЗаявки.Организация Тогда
				ДокОбъект.Организация = СтрокаЗаявки.Организация;
			КонецЕсли; 
			Если НЕ ОднаРеализацияВДеньПоКлиенту Тогда
				ДокОбъект.Товары.Очистить();//если не совпадает, всё заново перезаполняем
			Иначе
				//если одна реализация в день, то удаляем только строки с текущими позициями номеклатуры заказа, так  в нём могут быть другие
				СтруктураДляУдаленияСтрок = Новый Структура("КодСтроки");
				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
					СтруктураДляУдаленияСтрок.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
					СтрокиДляУдаления = ДокОбъект.Товары.НайтиСтроки(СтруктураДляУдаленияСтрок);
					Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
						ДокОбъект.Товары.Удалить(СтрокаДляУдаления);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			ДокОбъект.Комментарий = "Авт. изменен "+ТекущаяДата();
			Если id20243 Тогда
				ДокОбъект.Комментарий = "Д сайт "+Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0");
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		ДокОбъект.Валюта = Валюта;
		Если ЦеныПродажиВРублях Тогда//реализация
			ДокОбъект.Валюта = Рубли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаявки.ВалютаПродажи) Тогда
			ДокОбъект.Валюта = СтрокаЗаявки.ВалютаПродажи;
		КонецЕсли;
		Если Не значениеЗаполнено(ДокОбъект.Валюта) Тогда
			ДокОбъект.Валюта = Валюта;
		КонецЕсли;
		ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
		Если НЕ УТ111 Тогда
			ДокОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокОбъект.ПорядокРасчетов) Тогда
			ДокОбъект.ПорядокРасчетов = ПорядокРасчетов;
		КонецЕсли;
		Если УТ114 И Подверсия3 < 6 Тогда
			ДокОбъект.ДатаПлатежа = ДокОбъект.Дата;
		КонецЕсли;
		Если УТ111 Тогда
			ДокОбъект.ДоверенностьДата = НачалоДня(СтрокаЗаявки.ДатаЗаявки);
			ДокОбъект.ДоверенностьНомер = Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0");
		Иначе
			ДокОбъект.ОснованиеДата = НачалоДня(СтрокаЗаявки.ДатаЗаявки);
			ДокОбъект.ОснованиеНомер = Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0");
		КонецЕсли;
		ДокОбъект.Основание = "Заказ № " + Формат(СтрокаЗаявки.НомерЗаявки, "ЧГ=0") + " от "+Дата(СтрокаЗаявки.ДатаЗаявки);
		ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;//РеглУчет;//РеализацияКлиенту
		//теперь заполняем табличную часть
		ДокОбъект.Партнер = СтрокаЗаявки.Контрагент.Партнер;
		ДокОбъект.Контрагент = СтрокаЗаявки.Контрагент;
		Если ИспользоватьСоглашенияСКлиентами Тогда
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокОбъект.Партнер,Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",Истина,ДокОбъект.Соглашение));
			Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию) Тогда
				ДокОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
				Если СтрокаЗаявки.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					ДокОбъект.Соглашение = СоглашениеРозница;
				Иначе
					ДокОбъект.Соглашение = СоглашениеОпт;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьПоСоглашениюСКлиентом(ДокОбъект);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
			ДокОбъект.Соглашение = ПолучитьСоглашениеСКлиентом(ДокОбъект.Контрагент, ДокОбъект.Организация);
			Если ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
				ЗаполнитьПоСоглашениюСКлиентом(ДокОбъект);
			КонецЕсли;
		КонецЕсли;
		//СтруктураОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(ДокОбъект.Организация, ДокОбъект.Дата);
		Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
			ДокОбъект.Руководитель = СтрокаЗаявки.ЗаказКлиента.Руководитель;
			ДокОбъект.ГлавныйБухгалтер = СтрокаЗаявки.ЗаказКлиента.ГлавныйБухгалтер;
		КонецЕсли;
		
		Если ИспользоватьДоговорыСКлиентами Тогда
			ДокОбъект.Договор = ПолучитьДоговорПоУмолчанию(ДокОбъект, ДокОбъект.ХозяйственнаяОперация, ДокОбъект.Валюта);
			Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
				Если УТ113 Или УТ114 Тогда
					ДокОбъект.ПорядокОплаты = ДокОбъект.Договор.ПорядокОплаты;
				КонецЕсли;
				ДокОбъект.ПорядокРасчетов = ДокОбъект.Договор.ПорядокРасчетов;
				Если ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
					Договор = ДокОбъект.Договор;
					Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("НалогообложениеНДСОпределяетсяВДокументе") <> Неопределено Тогда
						Если Договор.НалогообложениеНДСОпределяетсяВДокументе = Ложь Тогда
							ДокОбъект.НалогообложениеНДС = Договор.НалогообложениеНДС;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДокОбъект.ПорядокРасчетов = ПорядокРасчетовЗаказПоставщику;
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.Организация = СтрокаЗаявки.Организация;
		Если БанковскийСчет.Владелец = СтрокаЗаявки.Организация Тогда
			ДокОбъект.БанковскийСчетОрганизации = БанковскийСчет;
		Иначе
			ДокОбъект.БанковскийСчетОрганизации = "";
		КонецЕсли; 
		ДокОбъект.СкидкиРассчитаны = Истина;
		ДокОбъект.НалогообложениеНДС = НалогообложениеНДСРеализация;
		Если ДокОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		Иначе
			//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		КонецЕсли;
		ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДСПриПродаже;//всегда должно стоять, иначе реализция некорректно создаётся
		Если НЕ БезЗаказаКлиента Тогда
			ДокОбъект.ЗаказКлиента = СтрокаЗаявки.ЗаказКлиента;
			ДокОбъект.РеализацияПоЗаказам = Истина;
			ДокОбъект.НалогообложениеНДС = СтрокаЗаявки.ЗаказКлиента.НалогообложениеНДС;
		КонецЕсли;
		Если НЕ УТ111 Тогда
			ДокОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		КонецЕсли;
		Если УТ113 Или УТ114 Тогда
			ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
		//ДокОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
		//ДокОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная
		ДокОбъект.Согласован = Истина;
		ТаблицаЗаказаПокупателя = СтрокаЗаявки.ЗаказКлиента.Товары.Выгрузить(,"Номенклатура, КодСтроки");
		ДокОбъект.Подразделение = СтрокаЗаявки.Подразделение;
		Если ЗначениеЗаполнено(СтрокаЗаявки.Склад) Тогда
			ДокОбъект.Склад = СтрокаЗаявки.Склад;
		Иначе
			ДокОбъект.Склад = Склад;
		КонецЕсли;
		//реализация
		//ДокОбъект.СтруктурнаяЕдиница = ДокОбъект.Контрагент.ОсновнойБанковскийСчет;
		Если id20243 И ПроверятьНаличиеНашихПозиций Тогда
			МассивНоменклатуры = Новый Массив;
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				МассивНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);
			КонецЦикла;
			ЗапросОстатков.УстановитьПараметр("НаДату", ДокОбъект.Дата+10);
			ЗапросОстатков.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
			ЗапросОстатков.УстановитьПараметр("Склад", ДокОбъект.Склад);
			Результат = ЗапросОстатков.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Соответствие = Новый Соответствие;
				Пока Выборка.Следующий() Цикл
					Соответствие.Вставить(Выборка.Ссылка, Выборка.Наличие);
				КонецЦикла;
				Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
					СтрокаНоменклатуры.Наличие = Соответствие.Получить(СтрокаНоменклатуры.Номенклатура);
				КонецЦикла;
			КонецЕсли;
			ПереченьПозиций = "";
			НС = 0;
			КодСтатусаОтказныхПозиций = Формат(КодСтатусаОтказ, "ЧГ=0");
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				Если СтрокаНоменклатуры.Наличие<СтрокаНоменклатуры.Количество И СтрокаНоменклатуры.КодСтатуса<>КодСтатусаОтказ Тогда
					Если Отладка Тогда 
						сообщить("Заявка "+СтрокаЗаявки.НомерЗаявки+"Не хватает на складе "+СтрокаНоменклатуры.Номенклатура+", в наличии "+СтрокаНоменклатуры.Наличие);
					КонецЕсли;
					Если СтавитьВОтказЕслиНетНаличияНашихПозиций Тогда
						НС = НС + 1;
						ФорматНС = Формат(НС,"ЧГ=0");
						ПереченьПозиций = ПереченьПозиций + "&order[positions]["+ФорматНС+"][id]="+Формат(СтрокаНоменклатуры.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+ФорматНС+"][statusCode]="+КодСтатусаОтказныхПозиций;//+"&order[positions]["+ФорматНС+"][comment]="+Комментарий;
					КонецЕсли;						
					//СтрокаНоменклатуры.ВариантОбеспечения = ВариантОбеспеченияНеСНаличия;
				КонецЕсли;
			КонецЦикла;
			Если ПереченьПозиций <> "" Тогда
				ЗаписьВЛог("СоздатьРеализацииТоваровУслуг");
				ОбновитьСтатусЗаявки(СтрокаЗаявки.НомерЗаявки, ПереченьПозиций, КодСтатусаОтказныхПозиций,,Истина);
			КонецЕсли;
	КонецЕсли;
		
		//реализация
		Если НЕ УТ111 Тогда
			Если СтрокаЗаявки.АдресДоставки = "Самовывоз" Тогда
				ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
			Иначе
				ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
				Если ЗначениеЗаполнено(СтрокаЗаявки.СпособДоставки) Тогда
					ДокОбъект.СпособДоставки = СтрокаЗаявки.СпособДоставки;
				Иначе
					Если ЗначениеЗаполнено(СпособДоставки) Тогда
						ДокОбъект.СпособДоставки = СпособДоставки;
					КонецЕсли;
					//ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;//в заказах поставщику самовывоз
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаЗаявки.ЗонаДоставки) Тогда
					ДокОбъект.ЗонаДоставки = СтрокаЗаявки.ЗонаДоставки;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаЗаявки.ПеревозчикПартнер) Тогда
					ДокОбъект.ПеревозчикПартнер = СтрокаЗаявки.ПеревозчикПартнер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.АдресДоставки = СтрокаЗаявки.АдресДоставки + " по заявке № "+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+" от "+СтрокаЗаявки.ДатаЗаявки;
		//уже раньше удалили ДокОбъект.Товары.Очистить();
		НС = 0;
		Если НЕ БезЗаказаКлиента Тогда
			ДокЗаявка = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();//в заявке меняем статус обеспечения на "Отгрузить"
		КонецЕсли;
		НадоПерепровестиЗаявку = Ложь;
		СтруктураТоваровЗаявки = Новый Структура("Номенклатура");
		ПерваяСтрока = Истина;
		Если ЗначениеЗаполнено(СтрокаЗаявки.ЗаказКлиента) Тогда
			ТоварыЗаявки = СтрокаЗаявки.ЗаказКлиента.Товары.Выгрузить();
			Структура = Новый Структура("Номенклатура,Количество");
		Иначе
			ТоварыЗаявки = "";
		КонецЕсли;
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			Если МассивУжеОтгруженных.Найти(СтрокаНоменклатуры.ИдентификаторНоменклатуры) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтруктураТоваровЗаявки.Номенклатура = СтрокаНоменклатуры.Номенклатура;
			Если НЕ БезЗаказаКлиента Тогда
				СтрокиНоменклатурыЗаявки = ДокЗаявка.Товары.НайтиСтроки(СтруктураТоваровЗаявки);
				Для Каждого СтрокаНоменклатурыЗаявки Из СтрокиНоменклатурыЗаявки Цикл
					Если УТ111 Тогда
						Если НЕ СтрокаНоменклатурыЗаявки.Отменено И СтрокаНоменклатурыЗаявки.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.СоСклада Тогда
							СтрокаНоменклатурыЗаявки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
							НадоПерепровестиЗаявку = Истина;
							Прервать;
						КонецЕсли;
					Иначе
						Если НЕ СтрокаНоменклатурыЗаявки.Отменено И СтрокаНоменклатурыЗаявки.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
							СтрокаНоменклатурыЗаявки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
							НадоПерепровестиЗаявку = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СтрокаДокумента = ДокОбъект.Товары.Добавить();
			СтрокаДокумента.Номенклатура = СтрокаНоменклатуры.Номенклатура;
			СтрокаДокумента.Склад = СтрокаНоменклатуры.Склад;
			Если ПерваяСтрока И ЗначениеЗаполнено(СтрокаНоменклатуры.Склад) Тогда
				ДокОбъект.Склад = СтрокаНоменклатуры.Склад;
				ПерваяСтрока = Ложь;
			КонецЕсли;
			Если (НЕ ДокОбъект.Склад.ЭтоГруппа) И (СтрокаДокумента.Склад<>ДокОбъект.Склад) Тогда
				ГруппаСкладов = СтрокаДокумента.Склад.Родитель;
				Если ЗначениеЗаполнено(ГруппаСкладов) Тогда
					ДокОбъект.Склад = ГруппаСкладов;
				КонецЕсли;
			КонецЕсли;
			СтрокаДокумента.Количество = СтрокаНоменклатуры.Количество;
			Если СтрокаДокумента.Количество = 0 Тогда
				СтрокаДокумента.Количество = 1;
			КонецЕсли;
			СтрокаДокумента.КоличествоУпаковок = СтрокаНоменклатуры.Количество;
			Если ЦенаИзСправочника Тогда
				ЦенаНоменклатуры = ПолучитьЦенуНоменклатуры(СтрокаНоменклатуры.Номенклатура, ДокОбъект.Дата);
				Если ЦенаНоменклатуры = 0 Тогда
					СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаПродажи;
				Иначе
					СтрокаДокумента.Цена = ЦенаНоменклатуры;
					Если ПроизвольныйВидЦеныВЗаказе Тогда
						СтрокаДокумента.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
					Иначе
						СтрокаДокумента.ВидЦены = ВидЦены;
					КонецЕсли;
				Конецесли;
			Иначе
				СтрокаДокумента.Цена = СтрокаНоменклатуры.ЦенаПродажи;
			КонецЕсли;
			Если СтрокаДокумента.Цена = 0 Тогда
				СтрокаДокумента.Цена = 0.01;
			КонецЕсли;
			Если СтрокаДокумента.Цена = 0.01 Тогда
				ЗаполнитьЗначенияСвойств(Структура,СтрокаДокумента);
				НСтроки = ТоварыЗаявки.НайтиСтроки(Структура);
				Для Каждого НСтрока Из НСтроки Цикл
					СтрокаДокумента.Цена = НСтрока.Цена;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			СтрокаДокумента.Сумма = СтрокаДокумента.Цена*СтрокаДокумента.Количество;
			СтрокаДокумента.СуммаСНДС = СтрокаДокумента.Сумма;
			Если НЕ ПроизвольныйВидЦеныВЗаказе Тогда
				ВидЦеныПоСкладу = СоответствиеВидЦеныПоСкладу.Получить(СтрокаНоменклатуры.distributorId);
				Если ВидЦеныПоСкладу <> Неопределено Тогда
					СтрокаДокумента.ВидЦены = ВидЦеныПоСкладу;
				КонецЕсли;
			КонецЕсли;
			СоглашениеПоСкладу = СоответствиеСоглашениеПоСкладу.Получить(СтрокаНоменклатуры.distributorId);
			Если СоглашениеПоСкладу <> Неопределено Тогда
				ДокОбъект.Соглашение = СоглашениеПоСкладу;
			КонецЕсли;
			ЗаполнитьНДСВСтрокаДокумента(НалогообложениеНДСРеализация, СтрокаДокумента, ДокОбъект.Договор);
			Если СтрокаСтатуса.СоздаватьЗаявкуПокупателя Тогда
				СтрокаДокумента.ЗаказКлиента = СтрокаЗаявки.ЗаказКлиента;
			КонецЕсли;
			//СтрокаДокумента.КодСтроки = СтрокаДокумента.НомерСтроки;
			СтрокаДокумента.КодСтроки = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
			Если ИспользоватьСерииНоменклатуры Тогда
				СтрокаДокумента.Серия = НайтиДобавитьСериюНоменклатуры(СтрокаНоменклатуры);
				СтрокаДокумента.СтатусУказанияСерий = 14;
			Иначе
				СтрокаДокумента.Серия = "";
				СтрокаДокумента.СтатусУказанияСерий = 0;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаЗаявки.СтоимостьДоставки>0 Тогда 
			Если НЕ ЗначениеЗаполнено(СтрокаЗаявки.УслугаДоставки) Тогда
				СтрокаЗаявки.УслугаДоставки = УслугаДоставки;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗаявки.УслугаДоставки) Тогда
				СтруктураДоставка = Новый Структура("Номенклатура", СтрокаЗаявки.УслугаДоставки);
				СтрокиСДоставкой = ДокОбъект.Товары.НайтиСтроки(СтруктураДоставка);
				Если СтрокиСДоставкой.Количество() = 0 Тогда
					СтрокаДокумента = ДокОбъект.Товары.Добавить();
					СтрокаДокумента.Номенклатура = СтрокаЗаявки.УслугаДоставки;//услуга
					СтрокаДокумента.Количество = 1;
					СтрокаДокумента.КоличествоУпаковок = 1;
					СтрокаДокумента.ВидЦены = ВидЦены;
					СтрокаДокумента.Цена = СтрокаЗаявки.СтоимостьДоставки;
					СтрокаДокумента.Сумма = СтрокаЗаявки.СтоимостьДоставки;
					СтрокаДокумента.СуммаСНДС = СтрокаЗаявки.СтоимостьДоставки;
					СтрокаДокумента.Склад = Склад;
					Если СтрокаСтатуса.СоздаватьЗаявкуПокупателя Тогда
						СтрокаДокумента.ЗаказКлиента = СтрокаЗаявки.ЗаказКлиента;
					КонецЕсли;
					ЗаполнитьНДСВСтрокаДокумента(ДокОбъект.НалогообложениеНДС, СтрокаДокумента, ДокОбъект.Договор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.СуммаВзаиморасчетов = ДокОбъект.Товары.Итог("Сумма");
		ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
		ДокОбъект.Менеджер = СтрокаЗаявки.Ответственный;//ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Менеджер) Тогда
			ДокОбъект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		Если УТ114 И Подверсия3 < 6 Тогда
			ДокОбъект.ДатаПлатежа = ДокОбъект.Дата;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) И ДокОбъект.Товары.Количество() = 0 Тогда
			//создали новый документ, а в нём ничего нет, он не нужен
			Продолжить;
		КонецЕсли;
		Если НЕ УТ115 Тогда
			ДокОбъект.ДатаРаспоряжения = ДокОбъект.Дата;
		КонецЕсли;
		Если ДокОбъект.Товары.Количество() = 0 И НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
			ЗаписьВЛог("В новом документе нет строк, не сохраняем "+ДокОбъект,1);//реализация
			Продолжить;
		КонецЕсли;
		ЖелаемаяДатаОтгрузки = ДокОбъект.Дата;
		Если ЕстьКурсЧислитель Тогда
			ДокОбъект.КурсЧислитель = 1;
			ДокОбъект.КурсЗнаменатель = 1;
		КонецЕсли;
		Если Лев(АдресСервиса,9) = "abcp48094" Тогда
			ДокОбъект.ФормаОплаты = "";
			ДокОбъект.Согласован = Истина;
			ДокОбъект.Касса = Касса;
			ДокОбъект.БанковскийСчетОрганизации = БанковскийСчет;
			ДокОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
			ДокОбъект.УдалитьПорядокОплаты = Перечисления.УдалитьПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		КонецЕсли;
		Если ИспользоватьГрафикиОплаты Тогда
			Если (КА И Подверсия1 = 2 И Подверсия2 = 5) Или УТ115 Тогда
				//ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
				//ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокОбъект);
				//Если ДокОбъект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
					СуммаОплатыПоДокументу = ДокОбъект.Товары.Итог("Сумма");
					ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(ВернутьПараметрыЭтапаОплаты(ДокОбъект, СуммаОплатыПоДокументу));
					Для Каждого СтрокаТаблицы Из ДокОбъект.ЭтапыГрафикаОплаты Цикл
						Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВариантОплаты) Тогда
							СтрокаТаблицы.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВариантОтсчета) Тогда
							СтрокаТаблицы.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
							СтрокаТаблицы.Заказ = ДокОбъект.ЗаказКлиента;
						КонецЕсли;
						Если СтрокаТаблицы.ПроцентПлатежа = 0 Тогда
							СтрокаТаблицы.ПроцентПлатежа = 100;
						КонецЕсли;
						Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
							СтрокаТаблицы.СуммаВзаиморасчетов = СуммаОплатыПоДокументу;
						КонецЕсли;
					КонецЦикла;
				//КонецЕсли;
			Иначе
				Если НЕ НеПерезаполнятьШапкуДокументов Или НЕ ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
					ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если (НЕ БезЗаказаКлиента) И НадоПерепровестиЗаявку Тогда
			Попытка
				ДокОбъект.Записать(РежимЗаписиДок);
			Исключение
				ДокОбъект.Записать();
				ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);//реализация
			КонецПопытки;
		КонецЕсли;		
		//СтрокиДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДатаОбновленияСтатусаABCP.Ссылка));
		//Если СтрокиДополнительныеРеквизиты.Количество() = 0 Тогда
		//	СтрокаДополнительныеРеквизиты = ДокОбъект.ДополнительныеРеквизиты.Добавить();
		//Иначе
		//	СтрокаДополнительныеРеквизиты = СтрокиДополнительныеРеквизиты[0];
		//КонецЕсли;
		//СтрокаДополнительныеРеквизиты.Свойство = ДатаОбновленияСтатусаABCP.Ссылка;
		//СтрокаДополнительныеРеквизиты.Значение = ТекущаяДата();
		//СтрокаДополнительныеРеквизиты.ТекстоваяСтрока = ТекущаяДата();
		ДокОбъект.Согласован = Истина;
		Если ДокОбъект.Товары.Количество() = 0 Тогда
			Попытка
				ЗаписьВЛог("В документе нет строк, отпроводим "+ДокОбъект,1);
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ДокОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ДокОбъект.Записать();
				ЗаписьВЛог("Не удалось отпровести пустой документ (проверьте, очищены движения или нет): "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
			КонецПопытки;
		Иначе
			ДокументЗаписан = Ложь;
			Попытка
				ДокОбъект.Записать(РежимЗаписиДок);
				ДокументЗаписан = Истина;
			Исключение
				ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
			КонецПопытки;
			Если НЕ ДокументЗаписан Тогда
				Попытка
					ДокОбъект.Записать();
				Исключение
					сообщить(ОписаниеОшибки());
					ДокОбъект.ОбменДанными.Загрузка = Истина;
					ДокОбъект.Записать();
					//ЗаписьВЛог("Не удалось провести документ: "+ДокОбъект+" "+ОписаниеОшибки(),1,Истина);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		МассивСозданныхРеализаций.Добавить(ДокОбъект.Ссылка);
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ДокОбъект.Ссылка;
		МенеджерЗаписи.Свойство = ДатаОбновленияСтатусаABCP;
		МенеджерЗаписи.Значение = ТекущаяДата();
		МенеджерЗаписи.Записать();
		Если СчетФактураПоРеализации И ДокОбъект.Проведен Тогда
			СоздатьСчетФактураВыданный(ДокОбъект, СтрокаЗаявки);
		КонецЕсли;
		
		КодСледующегоСтатуса = СтрокаСтатуса.КодСледующегоСтатуса;
		Если КодСледующегоСтатуса<>0 Тогда
			КодСледующегоСтатусаСтрокой = Формат(КодСледующегоСтатуса,"ЧГ=0");
			ПереченьПозиций = "";
			ПереченьПозицийСтрокой = "";
			НС = 0;
			Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				НС = НС + 1;
				ПереченьПозиций = ПереченьПозиций + "&order[positions]["+Формат(НС,"ЧГ=0")+"][id]="+Формат(СтрокаНоменклатуры.ИдентификаторНоменклатуры,"ЧГ=0")+"&order[positions]["+Формат(НС,"ЧГ=0")+"][statusCode]="+КодСледующегоСтатусаСтрокой;
				ПереченьПозицийСтрокой = ПереченьПозицийСтрокой + ", "+Формат(СтрокаНоменклатуры.ИдентификаторНоменклатуры,"ЧГ=0"); 
			КонецЦикла;
			Если НС > 0 Тогда
				ОбновитьСтатусЗаявки(СтрокаЗаявки.НомерЗаявки, ПереченьПозиций, КодСледующегоСтатусаСтрокой,,Истина);
				ТекстСообщения = "изменены статусы из реализации:	"+Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0")+", на "+КодСледующегоСтатусаСтрокой+": "+ПереченьПозицийСтрокой;
				ЗаписьВЛог(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		Если ИспользоватьОрдерныеСклады И ЗначениеЗаполнено(ДокОбъект.Склад) И НЕ ДокОбъект.Склад.ЭтоГруппа И ДокОбъект.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
			РасходныйОрдер = СоздатьРасходныйОрдерНаТовары(ДокОбъект.Ссылка, СтрокаСтатуса.Приоритет);
			Если СтрокаСтатуса.СоздаватьОтбор Тогда
				СоздатьОтборИзЯчеек(РасходныйОрдер, СтрокаСтатуса.СтатусОтбора);
			КонецЕсли;
		КонецЕсли;
		
		//чтобы в списке заказов был закрыт
		//Если (НеУчитыватьЗакрытыеЗаказыПокупателя И (СтрокаЗаявки.ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт) Или (ЗакрытЗаказКлиентаИзРегистра(СтрокаЗаявки.ЗаказКлиента)))) Тогда
		//в етд почему-то не работает
		//Если СтрокаСтатуса.СоздаватьЗаявкуПокупателя И НЕ СтрокаЗаявки.Закрыта Тогда
		//	Если (НЕ БезЗаказаКлиента) И (СтрокаЗаявки.ЗаказКлиента.Статус <> Перечисления.СтатусыЗаказовКлиентов.Закрыт) И (НЕ НеЗакрыватьЗаказыПокупателей) Тогда
		//		СтрокДокумента = ДокОбъект.Товары.Количество();
		//		Для Каждого ТекСтрока Из ДокОбъект.Товары Цикл
		//			Если ТекСтрока.Номенклатура = УслугаДоставки Тогда
		//				СтрокДокумента = СтрокДокумента - 1;
		//			КонецЕсли;
		//		КонецЦикла;
		//		Если СтрокДокумента = 0 Тогда
		//			Об = СтрокаЗаявки.ЗаказКлиента.ПолучитьОбъект();
		//			Об.ЖелаемаяДатаОтгрузки = ДокОбъект.Дата;//ставим фактическую дату отгрузки
		//			Попытка
		//				Об.Записать();
		//				ЗаписьВЛог("У заявки: "+Об.Ссылка+" все позиции или отгружены или отменены, изменился статус на «"+СокрЛП(СтрокаЗаявки.ЗаказКлиента.Статус)+"»",0,Истина);
		//			Исключение
		//				ЗаписьВЛог("Не удалось изменить статус на «Закрыт» у заявки: "+Об.Ссылка+" "+ОписаниеОшибки(),5,Истина);
		//			КонецПопытки;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		ЗаписьВЛог("Записана "+ДокОбъект.Ссылка+" по заявке № " + Формат(СтрокаЗаявки.НомерЗаявки,"ЧГ=0") + " клиент «"+СтрокаЗаявки.Контрагент+"»",3);
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			СтрокаНоменклатуры.РеализацияТоваровУслуг = ДокОбъект.Ссылка;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры //СоздатьРеализацииТоваровУслуг

Процедура СоздатьЗаполнитьДопРеквизитДокумента(СтрокаЗаявки, ДокументОбъект)
	
	Если НЕ УправлениеСвойствами.ИспользоватьДопРеквизиты(ДокументОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	ИмяДопРеквизита = ИмяДокумента + "_ТипОплаты";
	ИмяПредопределенныхДанных = "Документ_" + ИмяДокумента;
	ЗначениеРеквизиты = ""; 
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗаявки, "ТипОплаты") Тогда  
		ЗначениеРеквизиты = СтрокаЗаявки.ТипОплаты;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗаявки, "paymentType") Тогда
		ЗначениеРеквизиты = СтрокаЗаявки.paymentType;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Характеристкика = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", ИмяДопРеквизита);
	Если Характеристкика.Пустая() Тогда 
		
		ХарактеристкикаОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		ХарактеристкикаОбъект.Наименование = "Тип оплаты";
		ХарактеристкикаОбъект.Виден = Истина;
		ХарактеристкикаОбъект.Доступен = Ложь;
		ХарактеристкикаОбъект.Заголовок = "Тип оплаты";
		ХарактеристкикаОбъект.Имя = ИмяДопРеквизита;  
		ХарактеристкикаОбъект.НаборСвойств = НаборСвойствПоИмени(ИмяПредопределенныхДанных);
		ХарактеристкикаОбъект.ТипЗначения = ОбщегоНазначения.ОписаниеТипаСтрока(50);
		ХарактеристкикаОбъект.Записать();
		Характеристкика = ХарактеристкикаОбъект.Ссылка; 
		
		ОбъектНабора = ХарактеристкикаОбъект.НаборСвойств.ПолучитьОбъект();
		СтрокаСоставНабора = ОбъектНабора.ДополнительныеРеквизиты.Добавить();
		СтрокаСоставНабора.Свойство = Характеристкика;
		СтрокаСоставНабора.ИмяПредопределенногоНабора = ИмяПредопределенныхДанных;
		ОбъектНабора.Записать();
		
	КонецЕсли;
	
	СтрокаДопРеквизита = ДокументОбъект.ДополнительныеРеквизиты.Найти(Характеристкика, "Свойство");
	Если СтрокаДопРеквизита = Неопределено Тогда
		СтрокаДопРеквизита = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
	КонецЕсли;
	СтрокаДопРеквизита.Свойство = Характеристкика;
	СтрокаДопРеквизита.Значение = ЗначениеРеквизиты;  
	
КонецПроцедуры  

Функция НаборСвойствПоИмени(ИмяПредопределенныхДанных)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора = &ИмяПредопределенныхДанных
		|	И НЕ НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления
		|	И НаборыДополнительныхРеквизитовИСведений.Используется";
	
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции

// -- Алексей

//https://infostart.ru/public/329326/
//https://infostart.ru/public/343316/
//магазин надо выбирать, относящийся к организации
//можно добавить доп.реквизиты в реализацию с № заказа на сайте, но тогда выгрузка в бухгалтерию будет сбоить
//ИспользоватьСтатусы               = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
//ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках");
//ИспользоватьПоступлениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
//http://ec-1c.ru/news/shop_news/882/
//В УТ11.1 помимо статусов в табличной части еще появился отдельный статус для каждоый строки заказа - Вариант обеспечения. он имет тип либо со склада или под заказ. должен быть под заказ. 
//будет работать только для статуса документа в шапке к обеспечению.
